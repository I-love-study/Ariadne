{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u9879\u76ee\u6982\u89c8 \ud83d\udd17 \u4ea4\u6d89\u63d0\u793a \u82e5\u4f60\u5728\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\u9047\u5230\u4e86\u95ee\u9898, \u8bf7\u8fd0\u7528 \u63d0\u95ee\u7684\u667a\u6167 . \u5728\u4e0e\u4f60\u4ea4\u6d41\u7684\u8fc7\u7a0b\u4e2d, \u6211\u4eec\u6709\u5f88\u5927\u53ef\u80fd\u4f7f\u7528 \u672f\u8bed \u4ee5\u63d0\u9ad8\u4ea4\u6d41\u6548\u7387. \u6211\u4eec\u4f1a\u6301\u7eed\u8ffd\u8e2a\u5e76\u4fee\u590d\u5df2\u5b58\u5728\u7684 \u95ee\u9898 \u5e76\u4e0d\u65ad\u6539\u8fdb, \u4f46\u662f... \u6211\u4eec\u6ca1\u6709\u4efb\u4f55\u4e49\u52a1\u56de\u7b54\u4f60\u7684\u95ee\u9898, \u8fd9\u4ec5\u4ec5\u662f\u6211\u4eec\u7684\u81ea\u613f\u884c\u4e3a. \u7b80\u4ecb \ud83d\udd17 Ariadne \u662f BlueGlassBlock \u57fa\u4e8e Graia Project \u7cfb\u5217\u4f9d\u8d56\u5e93\u800c\u7f16\u5199\u7684 \u7b80\u660e, \u4f18\u96c5 \u7684 \u804a\u5929\u8f6f\u4ef6\u81ea\u52a8\u5316\u6846\u67b6. \u5176\u4e30\u5bcc\u800c\u7b80\u6d01\u7684\u63a5\u53e3\u76f8\u4fe1\u53ef\u4ee5\u4f7f\u5f00\u53d1\u8005\u80fd\u66f4\u597d\u7684\u5b8c\u6210\u4e1a\u52a1\u903b\u8f91. \u5982\u679c\u8ba4\u4e3a\u672c\u9879\u76ee\u6709\u5e2e\u52a9, \u6b22\u8fce\u70b9\u4e00\u4e2a Star . \u63a5\u53d7\u5f53\u4e0b, \u9762\u5411\u672a\u6765. \u7279\u8272 \ud83d\udd17 \u6613\u4e8e\u4f38\u7f29 \ud83d\udd17 \u4ece\u5355\u6587\u4ef6\u7684\u6700\u5c0f\u793a\u4f8b, \u5230\u6a21\u5757\u5316\u7684\u5927\u578b\u673a\u5668\u4eba, Ariadne \u90fd\u53ef\u4ee5\u6ee1\u8db3\u4f60\u7684\u9700\u6c42. \u5355\u6587\u4ef6 \u6a21\u5757\u5316 from graia.ariadne.app import Ariadne , Friend , MessageChain app = Ariadne ( connect_info = MiraiSession ( host = \"http://localhost:8080\" , verify_key = \"ServiceVerifyKey\" , account = 123456789 , ) ) @app . broadcast . receiver ( \"FriendMessage\" ) async def friend_message_listener ( app : Ariadne , friend : Friend ): await app . sendMessage ( friend , MessageChain ([ \"Hello, World!\" ])) app . launch_blocking () - main.py - modules - function_1 - function_2 - __init__ .py - manager.py - ... - ... \u8f7b\u677e\u7f16\u5199 \ud83d\udd17 \u57fa\u4e8e\u7c7b\u578b\u6807\u6ce8\u4e0e\u53c2\u6570\u5206\u6d3e\u7684\u5f00\u53d1, \u4f7f\u5f00\u53d1\u8005\u53ef\u4ee5\u8f7b\u677e\u7f16\u5199\u903b\u8f91. @broadcast . receiver ( GroupMessage ) async def handler ( app : Ariadne , src : Source , msg : MessageChain , group : Group , member : Member , ... ): ... \u5f02\u6b65\u5f00\u53d1 \ud83d\udd17 \u57fa\u4e8e\u5f02\u6b65\u7684\u5e76\u53d1\u8bbe\u8ba1, \u4f7f\u5f97 Ariadne \u53ef\u4ee5\u8f7b\u677e\u5bf9\u4e8b\u4ef6\u5e76\u884c\u5904\u7406. @broadcast . receiver ( GroupMessage ) async def reply1 ( app : Ariadne , msg : MessageChain , group : Group ): await app . sendMessage ( group , MessageChain ([ \"\u4f60\u597d\" ])) # \u56de\u590d \u4f60\u597d \u4fbf\u4e8e\u62d3\u5c55 \ud83d\udd17 Dispatcher Decorator Interrupt Depend \u7b49 Broadcast Control \u7279\u6027\u4f7f\u5f97 \u6743\u9650\u5339\u914d, \u51b7\u5374\u63a7\u5236, \u5f02\u5e38\u5904\u7406, \u8d44\u6e90\u83b7\u53d6\u7b49\u64cd\u4f5c\u53ef\u4ee5\u88ab\u8f7b\u677e\u5c01\u88c5. Saya Scheduler \u5c01\u88c5\u4e86\u6a21\u5757\u5316\u4e0e\u5b9a\u65f6\u4efb\u52a1\u64cd\u4f5c, \u5927\u5927\u63d0\u9ad8\u4e86 Ariadne \u7684\u53ef\u7528\u6027. \u52a0\u5165\u6211\u4eec \ud83d\udd17 \u6211\u4eec\u975e\u5e38\u5e0c\u671b\u6709\u5fd7\u4e4b\u58eb\u80fd\u5e2e\u52a9\u5b8c\u5584\u8fd9\u4e2a\u9879\u76ee, \u82e5\u4f60\u6709\u610f\u53c2\u4e0e, \u53ef\u524d\u5f80 GitHub \u7ec4\u7ec7 \u4e86\u89e3\u6211\u4eec\u7684\u9879\u76ee\u4f53\u7cfb. \u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u51e0\u79cd\u65b9\u5f0f\u53c2\u4e0e\u8fdb\u6765: \u63d0\u4ea4 issue \u5305\u62ec\u4f46\u4e0d\u9650\u4e8e bug \u6c47\u62a5, \u65b0\u529f\u80fd\u63d0\u6848, \u6587\u6863\u6539\u8fdb\u7b49. \u53d1\u8d77 Pull Requests \u76f4\u63a5\u5c06 \u60f3\u6cd5 / \u4fee\u590d \u5408\u5e76\u5230\u4ee3\u7801\u5e93\u4e2d. \u540c\u65f6, \u6b22\u8fce\u52a0\u5165\u6211\u4eec\u7684 QQ \u7fa4 \u4e0e\u5f00\u53d1\u8005\u8fdb\u884c\u76f4\u63a5\u4ea4\u6d41. QQ \u7fa4\u4e0d\u5b9a\u65f6\u6e05\u9664\u4e0d\u6d3b\u8dc3\u6210\u5458, \u53ef\u91cd\u65b0\u7533\u8bf7\u5165\u7fa4.","title":"\u9879\u76ee\u6982\u89c8"},{"location":"#_1","text":"\u4ea4\u6d89\u63d0\u793a \u82e5\u4f60\u5728\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\u9047\u5230\u4e86\u95ee\u9898, \u8bf7\u8fd0\u7528 \u63d0\u95ee\u7684\u667a\u6167 . \u5728\u4e0e\u4f60\u4ea4\u6d41\u7684\u8fc7\u7a0b\u4e2d, \u6211\u4eec\u6709\u5f88\u5927\u53ef\u80fd\u4f7f\u7528 \u672f\u8bed \u4ee5\u63d0\u9ad8\u4ea4\u6d41\u6548\u7387. \u6211\u4eec\u4f1a\u6301\u7eed\u8ffd\u8e2a\u5e76\u4fee\u590d\u5df2\u5b58\u5728\u7684 \u95ee\u9898 \u5e76\u4e0d\u65ad\u6539\u8fdb, \u4f46\u662f... \u6211\u4eec\u6ca1\u6709\u4efb\u4f55\u4e49\u52a1\u56de\u7b54\u4f60\u7684\u95ee\u9898, \u8fd9\u4ec5\u4ec5\u662f\u6211\u4eec\u7684\u81ea\u613f\u884c\u4e3a.","title":"\u9879\u76ee\u6982\u89c8"},{"location":"#_2","text":"Ariadne \u662f BlueGlassBlock \u57fa\u4e8e Graia Project \u7cfb\u5217\u4f9d\u8d56\u5e93\u800c\u7f16\u5199\u7684 \u7b80\u660e, \u4f18\u96c5 \u7684 \u804a\u5929\u8f6f\u4ef6\u81ea\u52a8\u5316\u6846\u67b6. \u5176\u4e30\u5bcc\u800c\u7b80\u6d01\u7684\u63a5\u53e3\u76f8\u4fe1\u53ef\u4ee5\u4f7f\u5f00\u53d1\u8005\u80fd\u66f4\u597d\u7684\u5b8c\u6210\u4e1a\u52a1\u903b\u8f91. \u5982\u679c\u8ba4\u4e3a\u672c\u9879\u76ee\u6709\u5e2e\u52a9, \u6b22\u8fce\u70b9\u4e00\u4e2a Star . \u63a5\u53d7\u5f53\u4e0b, \u9762\u5411\u672a\u6765.","title":"\u7b80\u4ecb"},{"location":"#_3","text":"","title":"\u7279\u8272"},{"location":"#_4","text":"\u4ece\u5355\u6587\u4ef6\u7684\u6700\u5c0f\u793a\u4f8b, \u5230\u6a21\u5757\u5316\u7684\u5927\u578b\u673a\u5668\u4eba, Ariadne \u90fd\u53ef\u4ee5\u6ee1\u8db3\u4f60\u7684\u9700\u6c42. \u5355\u6587\u4ef6 \u6a21\u5757\u5316 from graia.ariadne.app import Ariadne , Friend , MessageChain app = Ariadne ( connect_info = MiraiSession ( host = \"http://localhost:8080\" , verify_key = \"ServiceVerifyKey\" , account = 123456789 , ) ) @app . broadcast . receiver ( \"FriendMessage\" ) async def friend_message_listener ( app : Ariadne , friend : Friend ): await app . sendMessage ( friend , MessageChain ([ \"Hello, World!\" ])) app . launch_blocking () - main.py - modules - function_1 - function_2 - __init__ .py - manager.py - ... - ...","title":"\u6613\u4e8e\u4f38\u7f29"},{"location":"#_5","text":"\u57fa\u4e8e\u7c7b\u578b\u6807\u6ce8\u4e0e\u53c2\u6570\u5206\u6d3e\u7684\u5f00\u53d1, \u4f7f\u5f00\u53d1\u8005\u53ef\u4ee5\u8f7b\u677e\u7f16\u5199\u903b\u8f91. @broadcast . receiver ( GroupMessage ) async def handler ( app : Ariadne , src : Source , msg : MessageChain , group : Group , member : Member , ... ): ...","title":"\u8f7b\u677e\u7f16\u5199"},{"location":"#_6","text":"\u57fa\u4e8e\u5f02\u6b65\u7684\u5e76\u53d1\u8bbe\u8ba1, \u4f7f\u5f97 Ariadne \u53ef\u4ee5\u8f7b\u677e\u5bf9\u4e8b\u4ef6\u5e76\u884c\u5904\u7406. @broadcast . receiver ( GroupMessage ) async def reply1 ( app : Ariadne , msg : MessageChain , group : Group ): await app . sendMessage ( group , MessageChain ([ \"\u4f60\u597d\" ])) # \u56de\u590d \u4f60\u597d","title":"\u5f02\u6b65\u5f00\u53d1"},{"location":"#_7","text":"Dispatcher Decorator Interrupt Depend \u7b49 Broadcast Control \u7279\u6027\u4f7f\u5f97 \u6743\u9650\u5339\u914d, \u51b7\u5374\u63a7\u5236, \u5f02\u5e38\u5904\u7406, \u8d44\u6e90\u83b7\u53d6\u7b49\u64cd\u4f5c\u53ef\u4ee5\u88ab\u8f7b\u677e\u5c01\u88c5. Saya Scheduler \u5c01\u88c5\u4e86\u6a21\u5757\u5316\u4e0e\u5b9a\u65f6\u4efb\u52a1\u64cd\u4f5c, \u5927\u5927\u63d0\u9ad8\u4e86 Ariadne \u7684\u53ef\u7528\u6027.","title":"\u4fbf\u4e8e\u62d3\u5c55"},{"location":"#_8","text":"\u6211\u4eec\u975e\u5e38\u5e0c\u671b\u6709\u5fd7\u4e4b\u58eb\u80fd\u5e2e\u52a9\u5b8c\u5584\u8fd9\u4e2a\u9879\u76ee, \u82e5\u4f60\u6709\u610f\u53c2\u4e0e, \u53ef\u524d\u5f80 GitHub \u7ec4\u7ec7 \u4e86\u89e3\u6211\u4eec\u7684\u9879\u76ee\u4f53\u7cfb. \u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u51e0\u79cd\u65b9\u5f0f\u53c2\u4e0e\u8fdb\u6765: \u63d0\u4ea4 issue \u5305\u62ec\u4f46\u4e0d\u9650\u4e8e bug \u6c47\u62a5, \u65b0\u529f\u80fd\u63d0\u6848, \u6587\u6863\u6539\u8fdb\u7b49. \u53d1\u8d77 Pull Requests \u76f4\u63a5\u5c06 \u60f3\u6cd5 / \u4fee\u590d \u5408\u5e76\u5230\u4ee3\u7801\u5e93\u4e2d. \u540c\u65f6, \u6b22\u8fce\u52a0\u5165\u6211\u4eec\u7684 QQ \u7fa4 \u4e0e\u5f00\u53d1\u8005\u8fdb\u884c\u76f4\u63a5\u4ea4\u6d41. QQ \u7fa4\u4e0d\u5b9a\u65f6\u6e05\u9664\u4e0d\u6d3b\u8dc3\u6210\u5458, \u53ef\u91cd\u65b0\u7533\u8bf7\u5165\u7fa4.","title":"\u52a0\u5165\u6211\u4eec"},{"location":"NAV/","text":"\u6587\u6863 \u9879\u76ee\u6982\u89c8 \u5feb\u901f\u5f00\u59cb \u57fa\u7840 \u8fdb\u9636 \u989d\u5916\u5185\u5bb9 \u8fc1\u79fb \u9644\u5f55 API \u6587\u6863 \u5f00\u53d1\u535a\u5ba2 blog/* \u9b54\u5973\u7684\u788e\u788e\u5ff5 \u6587\u6863\u8bbe\u7f6e \u793e\u533a\u6587\u6863","title":"NAV"},{"location":"config/","text":"\u6587\u6863\u8bbe\u7f6e \ud83d\udd17 \u5207\u6362\u4e3b\u9898\u8272 \ud83d\udd17 \u6309\u4e0b\u5bf9\u5e94\u989c\u8272\u5373\u53ef\u5207\u6362. \u9ed8\u8ba4\u989c\u8272: indigo . red pink purple deep purple indigo blue light blue cyan teal green light green lime yellow amber orange deep orange brown grey blue grey black white var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; localStorage.setItem(\"data-md-color-primary\",this.dataset.mdColorPrimary); }) }) \u8f85\u52a9\u8272 \ud83d\udd17 \u6309\u4e0b\u5bf9\u5e94\u989c\u8272\u5373\u53ef\u5207\u6362. \u9ed8\u8ba4\u989c\u8272: indigo . \u8f85\u52a9\u8272\u63a7\u5236\u6587\u6863\u5bfc\u822a\u9ad8\u4eae\u4e0e\u56fe\u8868\u989c\u8272. .md-typeset button[data-md-color-accent] > code { background-color: var(--md-code-bg-color); color: var(--md-accent-fg-color); } red pink purple deep purple indigo blue light blue cyan teal green light green lime yellow amber orange deep orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; localStorage.setItem(\"data-md-color-accent\",this.dataset.mdColorAccent); }) }) // #758 document.getElementsByClassName('md-nav__title')[1].click() \u9884\u89c8\u8f85\u52a9\u8272 \ud83d\udd17 graph LR; a[A]-->b[B];","title":"\u6587\u6863\u8bbe\u7f6e"},{"location":"config/#_1","text":"","title":"\u6587\u6863\u8bbe\u7f6e"},{"location":"config/#_2","text":"\u6309\u4e0b\u5bf9\u5e94\u989c\u8272\u5373\u53ef\u5207\u6362. \u9ed8\u8ba4\u989c\u8272: indigo . red pink purple deep purple indigo blue light blue cyan teal green light green lime yellow amber orange deep orange brown grey blue grey black white var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; localStorage.setItem(\"data-md-color-primary\",this.dataset.mdColorPrimary); }) })","title":"\u5207\u6362\u4e3b\u9898\u8272"},{"location":"config/#_3","text":"\u6309\u4e0b\u5bf9\u5e94\u989c\u8272\u5373\u53ef\u5207\u6362. \u9ed8\u8ba4\u989c\u8272: indigo . \u8f85\u52a9\u8272\u63a7\u5236\u6587\u6863\u5bfc\u822a\u9ad8\u4eae\u4e0e\u56fe\u8868\u989c\u8272. .md-typeset button[data-md-color-accent] > code { background-color: var(--md-code-bg-color); color: var(--md-accent-fg-color); } red pink purple deep purple indigo blue light blue cyan teal green light green lime yellow amber orange deep orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; localStorage.setItem(\"data-md-color-accent\",this.dataset.mdColorAccent); }) }) // #758 document.getElementsByClassName('md-nav__title')[1].click()","title":"\u8f85\u52a9\u8272"},{"location":"config/#_4","text":"graph LR; a[A]-->b[B];","title":"\u9884\u89c8\u8f85\u52a9\u8272"},{"location":"quickstart/","text":"\u5feb\u901f\u5f00\u59cb \ud83d\udd17 \u524d\u8a00 \ud83d\udd17 \u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u4f60\u5df2\u7ecf\u53c2\u7167 mirai \u548c mirai-api-http \u7684 README, \u542f\u52a8\u4e86\u4f60\u7684 mirai-console , \u540c\u65f6\u4e5f\u5b89\u88c5\u4e86\u6700\u65b0\u7248\u672c\u7684 mirai-api-http \u63d2\u4ef6. \u6ce8\u610f \u672c \u5feb\u901f\u5f00\u59cb \u6587\u6863\u5047\u8bbe\u4f60\u5df2\u6709 Python 3 \u4e0e asyncio \u57fa\u7840. \u82e5\u6ca1\u6709 Python 3 \u57fa\u7840, \u8bf7\u79fb\u6b65 Python \u6559\u7a0b Python \u5b98\u65b9\u6559\u7a0b \u82e5\u6ca1\u6709 asyncio \u57fa\u7840, \u8bf7\u79fb\u6b65 asyncio \u5165\u95e8 \u5f00\u53d1\u8005\u4e0d\u4f1a\u8d1f\u8d23 Python \u57fa\u7840\u6559\u5b66. \u5982\u679c\u4f60\u8fd8\u4e0d\u4f1a\u4f7f\u7528 mirai-console \uff0c\u8bf7\u79fb\u6b65: Mirai API HTTP \u5b89\u88c5 \u793e\u533a\u6587\u6863: Mirai \u7684\u914d\u7f6e \u5982\u679c\u4f60\u4f7f\u7528\u65f6\u5f00\u53d1\u5e93\u51fa\u73b0\u4e86\u9519\u8bef, \u5e94\u5148\u68c0\u67e5\u662f\u5426\u662f Graia Framework \u7684\u9519\u8bef, \u786e\u8ba4\u4e4b\u540e, \u8bf7\u5728\u6211\u4eec\u7684 GitHub Issues \u5904\u6c47\u62a5\u4f60\u7684\u9519\u8bef, \u6211\u4eec\u4f1a\u5c3d\u5feb\u5904\u7406\u95ee\u9898 \u63d0\u793a \u672c\u6846\u67b6\u652f\u6301\u7684\u7248\u672c: \u5982\u679c\u4f60\u7684 Python \u7248\u672c\u4e0d\u6ee1\u8db3, \u8bf7\u4e0b\u8f7d\u5bf9\u5e94\u7248\u672c\u7684 Python . \u534e\u4e3a\u4e91 Python \u955c\u50cf \u6e05\u534e PyPI \u6e90\u5e2e\u52a9 \u5b89\u88c5 \ud83d\udd17 pip install graia-ariadne # \u4f7f\u7528 poetry(\u63a8\u8350\u7684\u65b9\u5f0f) poetry add graia-ariadne \u8fd9\u540c\u65f6\u4f1a\u5b89\u88c5 graia-ariadne \u548c graia-broadcast \u8fd9\u4e24\u4e2a\u5305\u7684\u6700\u65b0\u7248\u672c. \u63d0\u793a \u5982\u679c\u4f60\u60f3\u66f4\u65b0\u5176\u4e2d\u7684\u4e00\u4e2a: # \u66f4\u65b0 graia-ariadne pip install graia-ariadne --upgrade ## \u4f7f\u7528 poetry poetry update graia-ariadne # \u66f4\u65b0 graia-broadcast pip install graia-broadcast --upgrade ## \u4f7f\u7528 poetry poetry update graia-broadcast \u7b2c\u4e00\u6b21\u5bf9\u8bdd \ud83d\udd17 \u73b0\u5728\u6211\u4eec\u9700\u8981\u534f\u5b9a\u597d mirai-api-http \u7684\u914d\u7f6e, \u4ee5\u4fbf\u4e8e\u63a5\u4e0b\u6765\u7684\u8bf4\u660e. \u6839\u636e mirai-api-http \u7684\u76f8\u5173\u6587\u6863, \u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u8fd9\u4e48\u4e00\u4e2a\u914d\u7f6e\u6587\u4ef6\u7684\u65b9\u6848: # file: \"MCL/config/net.mamoe.mirai-api-http/setting.yml\" ## \u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u503c\uff0c\u5168\u4e3a\u9ed8\u8ba4\u503c ## \u542f\u7528\u7684 adapter, \u5185\u7f6e\u6709 http, ws, reverse-ws, webhook adapters : - http - ws ## \u662f\u5426\u5f00\u542f\u8ba4\u8bc1\u6d41\u7a0b, \u82e5\u4e3a true \u5219\u5efa\u7acb\u8fde\u63a5\u65f6\u9700\u8981\u9a8c\u8bc1 verifyKey enableVerify : true verifyKey : ServiceVerifyKey ## \u5f00\u542f\u4e00\u4e9b\u8c03\u8bd5\u4fe1\u606f debug : false ## \u662f\u5426\u5f00\u542f\u5355 session \u6a21\u5f0f, \u4e0d\u5efa\u8bae\u5f00\u542f singleMode : false ## \u5386\u53f2\u6d88\u606f\u7684\u7f13\u5b58\u5927\u5c0f ## \u540c\u65f6\uff0c\u4e5f\u662f http adapter \u7684\u6d88\u606f\u961f\u5217\u5bb9\u91cf cacheSize : 4096 ## adapter \u7684\u5355\u72ec\u914d\u7f6e\uff0c\u952e\u540d\u4e0e adapters \u9879\u914d\u7f6e\u76f8\u540c adapterSettings : ## \u8be6\u60c5\u770b http adapter \u4f7f\u7528\u8bf4\u660e \u914d\u7f6e http : host : localhost port : 8080 cors : [ \"*\" ] ## \u8be6\u60c5\u770b websocket adapter \u4f7f\u7528\u8bf4\u660e \u914d\u7f6e ws : host : localhost port : 8080 reservedSyncId : -1 # \u5efa\u8bae\u786e\u4fdd\u4e3a\u8d1f\u6570\uff0c\u5426\u5219\u53ef\u80fd\u51fa bug \u5c06\u4ee5\u4e0b\u4ee3\u7801\u4fdd\u5b58\u5230\u6587\u4ef6 bot.py \u5185, \u786e\u4fdd\u8be5\u6587\u4ef6\u4f4d\u4e8e\u4f60\u7684\u5de5\u4f5c\u533a\u5185: import asyncio from graia.broadcast import Broadcast from graia.ariadne.app import Ariadne from graia.ariadne.message.chain import MessageChain from graia.ariadne.message.element import Plain from graia.ariadne.model import Friend , MiraiSession loop = asyncio . new_event_loop () broadcast = Broadcast ( loop = loop ) app = Ariadne ( broadcast = broadcast , connect_info = MiraiSession ( host = \"http://localhost:8080\" , # \u586b\u5165 HTTP API \u670d\u52a1\u8fd0\u884c\u7684\u5730\u5740 verify_key = \"ServiceVerifyKey\" , # \u586b\u5165 verifyKey account = 123456789 , # \u4f60\u7684\u673a\u5668\u4eba\u7684 qq \u53f7 ) ) @broadcast . receiver ( \"FriendMessage\" ) async def friend_message_listener ( app : Ariadne , friend : Friend ): await app . sendMessage ( friend , MessageChain . create ([ Plain ( \"Hello, World!\" )])) # \u5b9e\u9645\u4e0a MessageChain.create(...) \u6709\u6ca1\u6709 \"[]\" \u90fd\u6ca1\u5173\u7cfb loop . run_until_complete ( app . lifecycle ()) \u793e\u533a\u6587\u6863\u76f8\u5173\u7ae0\u8282: \u94fe\u63a5 \u4f60\u77e5\u9053\u5417? Graia Framework \u6709\u4e00\u4e2a\u6d3b\u8dc3\u7684\u793e\u533a\u6587\u6863: GraiaX . \u90a3\u91cc\u7684\u6559\u7a0b\u4f1a\u66f4\u52a0 \u901a\u4fd7\u6613\u61c2 \u4f46\u662f\u5728\u4e0d\u9002\u5b9c\u573a\u5408\u9605\u8bfb\u53ef\u80fd\u5bfc\u81f4\u793e\u6b7b , \u4f60\u968f\u65f6\u53ef\u4ee5\u56de\u6765\u8fd9\u91cc\u83b7\u5f97\u66f4\u8be6\u7ec6\u7684\u89e3\u91ca. \u63d0\u793a \u5c06 CombinedAdapter \u6362\u4e3a DebugAdapter \u53ef\u4ee5\u8f93\u51fa\u6240\u6709\u63a5\u6536\u5230\u7684\u4e8b\u4ef6, \u4f46\u5728\u751f\u4ea7\u73af\u5883\u4e0b\u5e76\u4e0d\u63a8\u8350.","title":"\u5feb\u901f\u5f00\u59cb"},{"location":"quickstart/#_1","text":"","title":"\u5feb\u901f\u5f00\u59cb"},{"location":"quickstart/#_2","text":"\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u4f60\u5df2\u7ecf\u53c2\u7167 mirai \u548c mirai-api-http \u7684 README, \u542f\u52a8\u4e86\u4f60\u7684 mirai-console , \u540c\u65f6\u4e5f\u5b89\u88c5\u4e86\u6700\u65b0\u7248\u672c\u7684 mirai-api-http \u63d2\u4ef6. \u6ce8\u610f \u672c \u5feb\u901f\u5f00\u59cb \u6587\u6863\u5047\u8bbe\u4f60\u5df2\u6709 Python 3 \u4e0e asyncio \u57fa\u7840. \u82e5\u6ca1\u6709 Python 3 \u57fa\u7840, \u8bf7\u79fb\u6b65 Python \u6559\u7a0b Python \u5b98\u65b9\u6559\u7a0b \u82e5\u6ca1\u6709 asyncio \u57fa\u7840, \u8bf7\u79fb\u6b65 asyncio \u5165\u95e8 \u5f00\u53d1\u8005\u4e0d\u4f1a\u8d1f\u8d23 Python \u57fa\u7840\u6559\u5b66. \u5982\u679c\u4f60\u8fd8\u4e0d\u4f1a\u4f7f\u7528 mirai-console \uff0c\u8bf7\u79fb\u6b65: Mirai API HTTP \u5b89\u88c5 \u793e\u533a\u6587\u6863: Mirai \u7684\u914d\u7f6e \u5982\u679c\u4f60\u4f7f\u7528\u65f6\u5f00\u53d1\u5e93\u51fa\u73b0\u4e86\u9519\u8bef, \u5e94\u5148\u68c0\u67e5\u662f\u5426\u662f Graia Framework \u7684\u9519\u8bef, \u786e\u8ba4\u4e4b\u540e, \u8bf7\u5728\u6211\u4eec\u7684 GitHub Issues \u5904\u6c47\u62a5\u4f60\u7684\u9519\u8bef, \u6211\u4eec\u4f1a\u5c3d\u5feb\u5904\u7406\u95ee\u9898 \u63d0\u793a \u672c\u6846\u67b6\u652f\u6301\u7684\u7248\u672c: \u5982\u679c\u4f60\u7684 Python \u7248\u672c\u4e0d\u6ee1\u8db3, \u8bf7\u4e0b\u8f7d\u5bf9\u5e94\u7248\u672c\u7684 Python . \u534e\u4e3a\u4e91 Python \u955c\u50cf \u6e05\u534e PyPI \u6e90\u5e2e\u52a9","title":"\u524d\u8a00"},{"location":"quickstart/#_3","text":"pip install graia-ariadne # \u4f7f\u7528 poetry(\u63a8\u8350\u7684\u65b9\u5f0f) poetry add graia-ariadne \u8fd9\u540c\u65f6\u4f1a\u5b89\u88c5 graia-ariadne \u548c graia-broadcast \u8fd9\u4e24\u4e2a\u5305\u7684\u6700\u65b0\u7248\u672c. \u63d0\u793a \u5982\u679c\u4f60\u60f3\u66f4\u65b0\u5176\u4e2d\u7684\u4e00\u4e2a: # \u66f4\u65b0 graia-ariadne pip install graia-ariadne --upgrade ## \u4f7f\u7528 poetry poetry update graia-ariadne # \u66f4\u65b0 graia-broadcast pip install graia-broadcast --upgrade ## \u4f7f\u7528 poetry poetry update graia-broadcast","title":"\u5b89\u88c5"},{"location":"quickstart/#_4","text":"\u73b0\u5728\u6211\u4eec\u9700\u8981\u534f\u5b9a\u597d mirai-api-http \u7684\u914d\u7f6e, \u4ee5\u4fbf\u4e8e\u63a5\u4e0b\u6765\u7684\u8bf4\u660e. \u6839\u636e mirai-api-http \u7684\u76f8\u5173\u6587\u6863, \u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u8fd9\u4e48\u4e00\u4e2a\u914d\u7f6e\u6587\u4ef6\u7684\u65b9\u6848: # file: \"MCL/config/net.mamoe.mirai-api-http/setting.yml\" ## \u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u503c\uff0c\u5168\u4e3a\u9ed8\u8ba4\u503c ## \u542f\u7528\u7684 adapter, \u5185\u7f6e\u6709 http, ws, reverse-ws, webhook adapters : - http - ws ## \u662f\u5426\u5f00\u542f\u8ba4\u8bc1\u6d41\u7a0b, \u82e5\u4e3a true \u5219\u5efa\u7acb\u8fde\u63a5\u65f6\u9700\u8981\u9a8c\u8bc1 verifyKey enableVerify : true verifyKey : ServiceVerifyKey ## \u5f00\u542f\u4e00\u4e9b\u8c03\u8bd5\u4fe1\u606f debug : false ## \u662f\u5426\u5f00\u542f\u5355 session \u6a21\u5f0f, \u4e0d\u5efa\u8bae\u5f00\u542f singleMode : false ## \u5386\u53f2\u6d88\u606f\u7684\u7f13\u5b58\u5927\u5c0f ## \u540c\u65f6\uff0c\u4e5f\u662f http adapter \u7684\u6d88\u606f\u961f\u5217\u5bb9\u91cf cacheSize : 4096 ## adapter \u7684\u5355\u72ec\u914d\u7f6e\uff0c\u952e\u540d\u4e0e adapters \u9879\u914d\u7f6e\u76f8\u540c adapterSettings : ## \u8be6\u60c5\u770b http adapter \u4f7f\u7528\u8bf4\u660e \u914d\u7f6e http : host : localhost port : 8080 cors : [ \"*\" ] ## \u8be6\u60c5\u770b websocket adapter \u4f7f\u7528\u8bf4\u660e \u914d\u7f6e ws : host : localhost port : 8080 reservedSyncId : -1 # \u5efa\u8bae\u786e\u4fdd\u4e3a\u8d1f\u6570\uff0c\u5426\u5219\u53ef\u80fd\u51fa bug \u5c06\u4ee5\u4e0b\u4ee3\u7801\u4fdd\u5b58\u5230\u6587\u4ef6 bot.py \u5185, \u786e\u4fdd\u8be5\u6587\u4ef6\u4f4d\u4e8e\u4f60\u7684\u5de5\u4f5c\u533a\u5185: import asyncio from graia.broadcast import Broadcast from graia.ariadne.app import Ariadne from graia.ariadne.message.chain import MessageChain from graia.ariadne.message.element import Plain from graia.ariadne.model import Friend , MiraiSession loop = asyncio . new_event_loop () broadcast = Broadcast ( loop = loop ) app = Ariadne ( broadcast = broadcast , connect_info = MiraiSession ( host = \"http://localhost:8080\" , # \u586b\u5165 HTTP API \u670d\u52a1\u8fd0\u884c\u7684\u5730\u5740 verify_key = \"ServiceVerifyKey\" , # \u586b\u5165 verifyKey account = 123456789 , # \u4f60\u7684\u673a\u5668\u4eba\u7684 qq \u53f7 ) ) @broadcast . receiver ( \"FriendMessage\" ) async def friend_message_listener ( app : Ariadne , friend : Friend ): await app . sendMessage ( friend , MessageChain . create ([ Plain ( \"Hello, World!\" )])) # \u5b9e\u9645\u4e0a MessageChain.create(...) \u6709\u6ca1\u6709 \"[]\" \u90fd\u6ca1\u5173\u7cfb loop . run_until_complete ( app . lifecycle ()) \u793e\u533a\u6587\u6863\u76f8\u5173\u7ae0\u8282: \u94fe\u63a5 \u4f60\u77e5\u9053\u5417? Graia Framework \u6709\u4e00\u4e2a\u6d3b\u8dc3\u7684\u793e\u533a\u6587\u6863: GraiaX . \u90a3\u91cc\u7684\u6559\u7a0b\u4f1a\u66f4\u52a0 \u901a\u4fd7\u6613\u61c2 \u4f46\u662f\u5728\u4e0d\u9002\u5b9c\u573a\u5408\u9605\u8bfb\u53ef\u80fd\u5bfc\u81f4\u793e\u6b7b , \u4f60\u968f\u65f6\u53ef\u4ee5\u56de\u6765\u8fd9\u91cc\u83b7\u5f97\u66f4\u8be6\u7ec6\u7684\u89e3\u91ca. \u63d0\u793a \u5c06 CombinedAdapter \u6362\u4e3a DebugAdapter \u53ef\u4ee5\u8f93\u51fa\u6240\u6709\u63a5\u6536\u5230\u7684\u4e8b\u4ef6, \u4f46\u5728\u751f\u4ea7\u73af\u5883\u4e0b\u5e76\u4e0d\u63a8\u8350.","title":"\u7b2c\u4e00\u6b21\u5bf9\u8bdd"},{"location":"advance/NAV/","text":"Broadcast \u4ecb\u7ecd \u4e2d\u65ad \u4f9d\u8d56\u6ce8\u5165 \u6d88\u606f\u94fe Commander Twilight Twilight \u65e7\u7248\u6587\u6863 Adapter Alconna \u5b98\u65b9\u6587\u6863","title":"NAV"},{"location":"advance/adapter/","text":"\u9002\u914d\u5668 \ud83d\udd17 Ariadne \u7684\u9002\u914d\u5668\u7528\u4e8e\u5efa\u7acb\u4e0e mirai-api-http \u7684\u8fde\u63a5. \u8bf7\u53c2\u9605 API \u6587\u6863 \u6b63\u5411\u9002\u914d\u5668 \ud83d\udd17 \u6b63\u5411\u9002\u914d\u5668\u4f5c\u4e3a\u5ba2\u6237\u7aef\u8fde\u63a5\u81f3 mirai-api-http , \u6709\u4ee5\u4e0b\u51e0\u79cd\u7c7b\u578b. WebsocketAdapter \u6b63\u5411 Websocket HttpAdapter \u6b63\u5411 HTTP ComposeForwardAdapter \u6b63\u5411 Websocket + HTTP \u6b63\u5411\u9002\u914d\u5668\u5747\u6709\u4e00\u4e2a ForwardAdapter.session \u5bf9\u5e94\u7740\u5176 aiohttp.ClientSession \u5bf9\u8c61. \u53cd\u5411\u9002\u914d\u5668 \ud83d\udd17 \u53cd\u5411\u9002\u914d\u5668\u4f5c\u4e3a\u670d\u52a1\u7aef\u8ba9 mirai-api-http \u8fdb\u884c\u8fde\u63a5, \u6709\u4ee5\u4e0b\u51e0\u79cd\u7c7b\u578b. \u6240\u6709\u5e26\u6709 Compose \u524d\u7f00\u7684\u53cd\u5411\u9002\u914d\u5668\u4e2d MiraiSession \u4ecd\u9700\u8981\u586b\u5199 host \u5b57\u6bb5 \u4f60\u53ef\u4ee5\u76f4\u63a5\u5b89\u88c5 uvicorn[standard] , fastapi \u5305, \u6216\u901a\u8fc7 graia-ariadne[server] / graia-ariadne[full] \u83b7\u53d6 ComposeWebhookAdapter \u6b63\u5411 HTTP + \u53cd\u5411 HTTP ComposeReverseWebsocketAdapter \u6b63\u5411 HTTP + \u53cd\u5411 Websocket ReverseWebsocketAdapter \u7eaf\u53cd\u5411 Websocket \u8fd9\u4e9b\u53cd\u5411\u9002\u914d\u5668\u9700\u8981\u4f20\u5165 route \u4e0e port \u4f5c\u4e3a\u670d\u52a1\u8def\u5f84 (\u9ed8\u8ba4 \"/\" ) \u4e0e\u670d\u52a1\u5668\u7aef\u53e3 (\u9ed8\u8ba4 8000 )\uff0c\u591a\u4f59\u7684\u5173\u952e\u5b57\u53c2\u6570\u4f1a\u4f20\u5165 uvicorn.Config . \u540c\u65f6\uff0c\u56e0\u4e3a\u4f7f\u7528\u4e86 FastAPI , \u4f60\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 ReverseAdapter.asgi \u5c5e\u6027\u83b7\u53d6\u4e00\u4e2a FastAPI \u5b9e\u4f8b. ReverseAdapter.server \u5bf9\u5e94\u7740\u5176 Uvicorn \u670d\u52a1\u5668.","title":"Adapter"},{"location":"advance/adapter/#_1","text":"Ariadne \u7684\u9002\u914d\u5668\u7528\u4e8e\u5efa\u7acb\u4e0e mirai-api-http \u7684\u8fde\u63a5. \u8bf7\u53c2\u9605 API \u6587\u6863","title":"\u9002\u914d\u5668"},{"location":"advance/adapter/#_2","text":"\u6b63\u5411\u9002\u914d\u5668\u4f5c\u4e3a\u5ba2\u6237\u7aef\u8fde\u63a5\u81f3 mirai-api-http , \u6709\u4ee5\u4e0b\u51e0\u79cd\u7c7b\u578b. WebsocketAdapter \u6b63\u5411 Websocket HttpAdapter \u6b63\u5411 HTTP ComposeForwardAdapter \u6b63\u5411 Websocket + HTTP \u6b63\u5411\u9002\u914d\u5668\u5747\u6709\u4e00\u4e2a ForwardAdapter.session \u5bf9\u5e94\u7740\u5176 aiohttp.ClientSession \u5bf9\u8c61.","title":"\u6b63\u5411\u9002\u914d\u5668"},{"location":"advance/adapter/#_3","text":"\u53cd\u5411\u9002\u914d\u5668\u4f5c\u4e3a\u670d\u52a1\u7aef\u8ba9 mirai-api-http \u8fdb\u884c\u8fde\u63a5, \u6709\u4ee5\u4e0b\u51e0\u79cd\u7c7b\u578b. \u6240\u6709\u5e26\u6709 Compose \u524d\u7f00\u7684\u53cd\u5411\u9002\u914d\u5668\u4e2d MiraiSession \u4ecd\u9700\u8981\u586b\u5199 host \u5b57\u6bb5 \u4f60\u53ef\u4ee5\u76f4\u63a5\u5b89\u88c5 uvicorn[standard] , fastapi \u5305, \u6216\u901a\u8fc7 graia-ariadne[server] / graia-ariadne[full] \u83b7\u53d6 ComposeWebhookAdapter \u6b63\u5411 HTTP + \u53cd\u5411 HTTP ComposeReverseWebsocketAdapter \u6b63\u5411 HTTP + \u53cd\u5411 Websocket ReverseWebsocketAdapter \u7eaf\u53cd\u5411 Websocket \u8fd9\u4e9b\u53cd\u5411\u9002\u914d\u5668\u9700\u8981\u4f20\u5165 route \u4e0e port \u4f5c\u4e3a\u670d\u52a1\u8def\u5f84 (\u9ed8\u8ba4 \"/\" ) \u4e0e\u670d\u52a1\u5668\u7aef\u53e3 (\u9ed8\u8ba4 8000 )\uff0c\u591a\u4f59\u7684\u5173\u952e\u5b57\u53c2\u6570\u4f1a\u4f20\u5165 uvicorn.Config . \u540c\u65f6\uff0c\u56e0\u4e3a\u4f7f\u7528\u4e86 FastAPI , \u4f60\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 ReverseAdapter.asgi \u5c5e\u6027\u83b7\u53d6\u4e00\u4e2a FastAPI \u5b9e\u4f8b. ReverseAdapter.server \u5bf9\u5e94\u7740\u5176 Uvicorn \u670d\u52a1\u5668.","title":"\u53cd\u5411\u9002\u914d\u5668"},{"location":"advance/commander/","text":"Commander - \u4fbf\u6377\u7684\u547d\u4ee4\u89e6\u53d1\u7cfb\u7edf \ud83d\udd17 \u5728\u5f00\u59cb\u4e4b\u524d \ud83d\udd17 \u73b0\u5728 Ariadne \u7684\u547d\u4ee4\u89e3\u6790\u5b9e\u73b0\u65b9\u5f0f\u5f02\u5e38\u4e30\u5bcc. \u6700\u7b80\u5355\u7684\u6307\u4ee4\u89e3\u6790: DetectPrefix \u4e0e DetectSuffix , \u770b \u4e0a\u4e00\u7ae0 \u6700\u7b80\u6d01 / \u57fa\u4e8e pydantic BaseModel \u7684\u6307\u4ee4\u5904\u7406\u5668: Commander \u57fa\u4e8e\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u89e3\u6790 / \u5bb9\u9519\u6027\u9ad8\u4e14\u6613\u4e8e\u7f16\u5199\u7684\u5904\u7406\u5668: Twilight \u652f\u6301\u5b50\u547d\u4ee4\u89e3\u6790 / \u57fa\u4e8e dict \u7684\u9ad8\u5ea6\u5b9a\u5236\u89e3\u6790: Alconna \u6309\u7167\u4f60\u7684\u9700\u6c42, \u9009\u62e9\u6700\u9002\u5408\u4f60\u7684\u5904\u7406\u5668. \u5f00\u59cb\u4f7f\u7528 \ud83d\udd17 \u793e\u533a\u63d0\u793a \u672c\u6587\u6863\u4e2d\u542b\u6709\u4ee5\u4e0b\u53ef\u80fd\u8ba9\u4eba\u4e0d\u9002\u7684\u4fe1\u606f: \u4ee4\u4eba\u8d39\u89e3\u7684 ABNF \u6807\u6ce8 \u5927\u91cf\u9650\u5236\u4e0e\u53d8\u4f53 \u5c31\u50cf____\u5b66\u79d1\u4e00\u6837 \u5927\u91cf\u672f\u8bed \u6742\u4e71\u65e0\u7ae0\u7684\u6392\u7248 \u8bf7\u79fb\u6b65 \u793e\u533a\u6587\u6863 \u83b7\u5f97\u66f4\u8f7b\u677e\u7684\u9605\u8bfb\u4f53\u9a8c. from graia.ariadne.message.commander import Commander , Slot , Arg Commander \u9700\u8981\u4f20\u5165\u4e00\u4e2a Broadcast \u5bf9\u8c61\u4ee5\u521d\u59cb\u5316, \u5e76\u4e14\u4f1a\u6ce8\u518c MessageEvent \u6d88\u606f\u5904\u7406\u5668. broadcast = Broadcast ( ... ) cmd = Commander ( broadcast ) command \u65b9\u6cd5 \ud83d\udd17 Commander.command \u4e3b\u8981\u4f5c\u4e3a\u88c5\u9970\u5668\u4f7f\u7528, \u7528\u4e8e\u6ce8\u518c\u547d\u4ee4. \u5176 dispatchers decorators \u4e24\u4e2a\u53c2\u6570\u4e0e Broadcast.receiver \u542b\u4e49\u76f8\u540c, \u8fd9\u91cc\u4e0d\u518d\u8be6\u7ec6\u8bb2\u89e3. \u5176 command \u53c2\u6570\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32, \u4e3a\u7c7b\u4f3c shell \u7684\u4e3b\u547d\u4ee4\u6837\u5f0f. \u5176\u62bd\u8c61\u6587\u6cd5\u8868\u793a\u5982\u4e0b: CONSTANT :: = \u4efb\u610f\u975e\u7a7a\u4e14\u4e0d\u5305\u542b \"[]{}|:\" \u8fd9\u4e9b\u7b26\u53f7\u7684\u5b57\u7b26\u4e32 CHOICE :: = \"[\" CONSTANT ( \"|\" CONSTANT ) * \"]\" PARAMETER :: = \"{\" [ \"...\" ] <\u6807\u8bc6\u7b26> [ \":\" \u7c7b\u578b\u6807\u6ce8 ] [ \"=\" \u9ed8\u8ba4\u503c ] \"}\" SEGMENT :: = CONSTANT | CHOICE | PARAMETER COMMAND :: = < SEGMENT > ( \" \" SEGMENT ) * \u4e00\u90e8\u5206\u61c2 ABNF \u7684\u53ef\u80fd\u8981\u5f00\u59cb\u9a82\u8857\u4e86 \u6211\u77e5\u9053\u4f60\u6ca1\u770b\u61c2\u5bf9\u5427, \u6ca1\u5173\u7cfb, \u6211\u4e5f\u4e0d\u77e5\u9053\u6211\u5199\u4e86\u4ec0\u4e48 \u6211\u4eec\u5148\u6765\u770b\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50: [ . help | . h ] text { content } \u5b83\u63a5\u53d7\u4ee5\u4e0b\u6837\u5f0f\u7684\u6587\u672c: A B C .help text function .h text parameter .h text \"content_1 content_2\" \u4f46\u662f\u5b83\u4e0d\u63a5\u53d7 .help text func param . \u53ef\u4ee5\u770b\u51fa\u6765, [.help | .h] \u8fd9\u79cd\u7528 \u4e2d\u62ec\u53f7 \u62ec\u4f4f\u7684\u4ee3\u8868 \u4efb\u9009\u4e00\u4e2a\u5339\u914d text \u8fd9\u79cd\u7eaf\u6587\u672c\u7684\u4ee3\u8868 \u5b8c\u5168\u5339\u914d {content} \u8fd9\u79cd\u7528 \u5927\u62ec\u53f7 \u62ec\u4f4f\u7684\u4ee3\u8868 \u53c2\u6570\u5b9a\u4e49 . \u800c\u8fd9\u4e9b\u547d\u4ee4\u6bb5\u4e4b\u95f4\u4f7f\u7528\u7a7a\u683c\u5206\u5f00. setting \u5219\u662f\u4e00\u4e2a str \u81f3 Slot | Arg \u6620\u5c04, str \u4e3a\u5b9e\u9645\u53c2\u6570\u540d. \u793a\u4f8b @cmd . command ( \".cmd {placeholder} \" , { \"param\" : Slot ( \"placeholder\" , str , \"\" )}) async def func ( param : str ): ... \u53c2\u6570\u5206\u6d3e\u4e0e\u6807\u6ce8 \ud83d\udd17 \u4f7f\u7528 \u53c2\u6570\u5b9a\u4e49 \u7684\u62d3\u5c55\u8bed\u6cd5, \u53ef\u4ee5\u6307\u5b9a\u53c2\u6570\u7684\u7c7b\u578b\u4e0e\u9ed8\u8ba4\u503c, \u5e76\u4e14\u8ba9\u5176\u4e0d\u9700\u8981 \u53c2\u6570\u91cd\u5b9a\u5411 \u5c31\u53ef\u4ee5\u76f4\u63a5\u88ab\u5206\u6d3e. \u8fd9\u79cd\u8bed\u6cd5\u4e0e Python \u4e2d\u7684\u6807\u6ce8\u8bed\u6cd5\u76f8\u540c. \u4f8b\u5982: { content : str = \"default\" } \u5b83\u53ef\u4ee5\u4e3a def ( content : str ) -> ... \u8fdb\u884c\u53c2\u6570\u5206\u6d3e. \u524d\u5bfc\u7684 ... \u58f0\u660e\u542f\u7528\u4e86 wildcard , \u63a5\u53d7\u4efb\u610f\u4e2a\u5c3e\u63a5\u6d88\u606f\u94fe, \u5728\u8fd9\u4e2a\u60c5\u51b5\u4e0b\u53ef\u4ee5\u8fdb\u4e00\u6b65\u542f\u7528 raw . \u5173\u4e8e wildcard \ud83d\udd17 wildcard \u6a21\u5f0f\u53ef\u4ee5\u7c7b\u6bd4 def func ( * args : anno ) \u4e2d\u7684 *args . \u8fd9\u79cd\u60c5\u51b5\u4e0b\u63a5\u53d7\u4efb\u610f\u4e2a\u53c2\u6570, \u5e76\u901a\u8fc7 {...param: anno} \u4e2d\u7684 anno \u9010\u4e2a\u5904\u7406. \u6700\u540e\u5206\u6d3e\u7684\u5c06\u662f Tuple[anno] \u7c7b\u578b\u53c2\u6570. \u663e\u800c\u6613\u89c1\u7684, default \u5728 wildcard \u4e0b\u4e0d\u53ef\u88ab\u8bbe\u7f6e. \u901a\u8fc7 { ... content : raw } \u8fd9\u79cd\u7279\u6b8a\u683c\u5f0f\u53ef\u4ee5\u542f\u7528 raw \u89e3\u6790\u6a21\u5f0f. \u53c2\u6570\u7684\u81ea\u52a8\u89e3\u6790 \ud83d\udd17 Commander \u5185\u90e8\u7528\u4e86\u67d0\u4e9b\u9b54\u6cd5\u81ea\u52a8\u89e3\u6790\u53c2\u6570\u5e76\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684 Python \u5bf9\u8c61. \u793a\u4f8b class ExampleModel ( BaseModel ): ... @cmd . command ( \".command {content: ExampleModel = ExampleModel(...)}\" ) \u8bf7\u4f7f\u7528 \\\\ \u53cc\u91cd\u8f6c\u4e49\u5b57\u7b26\u6765\u8f6c\u4e49 []{} \u7b26\u53f7 (\u53ef\u50cf\u6b63\u5219\u8868\u8fbe\u5f0f\u4e00\u6837\u4f7f\u7528 r '' \u4fee\u9970\u6807\u8bb0) @cmd . command ( r \".command {content: List\\[str\\]}\" ) \u4e3b\u547d\u4ee4\u8fd8\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u6807\u6ce8\u81ea\u52a8\u63a8\u65ad\u7c7b\u578b\u4e0e\u9ed8\u8ba4\u503c @cmd . command ( \".command {content: ExampleModel = ExampleModel(...)}\" ) def func ( content ): ... \u7b49\u4ef7\u4e8e @cmd . command ( \".command {content} \" ) def func ( content : ExampleModel = ExampleModel ( ... )): ... \u672c\u673a\u5236\u5e76\u4e0d\u4f1a\u4e0e Decorator \u89e3\u6790\u51b2\u7a81. \u53c2\u6570\u91cd\u5b9a\u5411: Slot \u7684\u4f7f\u7528 \ud83d\udd17 Slot \u6307\u5b9a\u4e86\u5b83\u9700\u8981\u7684 placeholder , \u53c2\u6570\u7684\u7c7b\u578b, \u4ee5\u53ca (\u53ef\u9009\u7684) \u9ed8\u8ba4\u503c. \u4e3b\u547d\u4ee4\u5404\u4e2a\u53c2\u6570\u7684\u4f18\u5148\u7ea7\u5982\u4e0b: \u51fd\u6570\u58f0\u660e < \u547d\u4ee4\u7684\u62d3\u5c55\u8bed\u6cd5 < Slot \u5b9a\u4e49 \u6700\u540e\u4e00\u4e2a\u53c2\u6570: \u53ef\u9009\u9879\u4e0e raw \u5c5e\u6027 \ud83d\udd17 \u5728 Slot \u4e0a\u6307\u5b9a default / default_factory \u5373\u9ed8\u8ba4\u8ba4\u4e3a\u662f\u53ef\u9009\u9879, \u4e14\u8981\u6c42\u5176\u5bf9\u5e94\u7684\u53c2\u6570\u5728\u6700\u540e. \u6307\u5b9a Slot \u7684 type \u4e3a\u5b57\u9762\u503c \"raw\" \u6216\u8005 commander._raw \u65f6, \u4f1a\u8ba4\u4e3a Slot \u4e3a raw . raw \u6a21\u5f0f\u4e0b, \u672b\u5c3e wildcard \u7684\u6d88\u606f\u94fe\u5143\u7ec4\u4f1a\u88ab\u8f6c\u5316\u4e3a\u539f\u6765\u7684\u5355\u4e2a\u6d88\u606f\u94fe. \u52a8\u6001\u9009\u9879: Arg \ud83d\udd17 Arg \u5fc5\u987b\u6307\u5b9a default ( default_factory ) \u503c\u4f5c\u4e3a\u6ca1\u6709\u8be5\u53c2\u6570\u65f6\u7684\u9009\u9879\u3002 Arg \u7684 pattern \u5fc5\u987b\u7531 \u5355\u4e2a \u9009\u62e9\u5339\u914d\u6216\u5b8c\u5168\u5339\u914d\u5f00\u5934, \u4e4b\u540e\u7d27\u8ddf\u4efb\u610f\u4e2a \u53c2\u6570\u5b9a\u4e49 . CONSTANT :: = \u4efb\u610f\u975e\u7a7a\u4e14\u4e0d\u5305\u542b \"[]{}|:\" \u8fd9\u4e9b\u7b26\u53f7\u7684\u5b57\u7b26\u4e32 CHOICE :: = \"[\" CONSTANT ( \"|\" CONSTANT ) * \"]\" PLACEHOLDER :: = \"{\" CONSTANT \"}\" ARG :: = < CONSTANT | CHOICE > ( \" \" PLACEHOLDER ) * Arg \u6ca1\u6709\u62d3\u5c55\u8bed\u6cd5, \u4e14\u51fd\u6570\u6807\u6ce8\u63a8\u65ad\u5bf9\u5176\u65e0\u6548 Arg \u7684 type \u5728\u5355\u53c2\u6570/\u65e0\u53c2\u6570\u65f6\u53ef\u4ee5\u7701\u7565, \u5728\u591a\u53c2\u6570\u65f6\u5fc5\u987b\u6307\u5b9a, \u4e14\u4e3a pydantic.BaseModel \u5b50\u7c7b. \u8fd9\u4e2a\u5b50\u7c7b\u9700\u8981\u63a5\u53d7\u6240\u6709 placeholder \u5b57\u6bb5. \u793a\u4f8b class ExampleModel ( BaseModel ): _ = pydantic . validator ( \"*\" , pre = True , allow_reuse = True )( chain_validator ) value : str = \"\" name : str = \"\" Arg ( \"[.option|--option|+O] {name} {value} \" , type = ExampleModel , default = ExampleModel ()) \u5728\u65e0\u53c2\u6570\u65f6, Arg \u7684 type \u4e3a bool \u7c7b\u578b, \u800c default \u9ed8\u8ba4\u4e3a False \u4e14\u4f1a\u81ea\u52a8\u53cd\u8f6c. \u793a\u4f8b Arg ( \"--option\" ) # \u9ed8\u8ba4\u4e3a False, \u51fa\u73b0\u65f6\u4e3a True Arg ( \"--option\" , default = True ) # \u9ed8\u8ba4\u4e3a True, \u51fa\u73b0\u65f6\u4e3a False \u5355\u53c2\u6570\u65f6 Arg \u7684 type \u53ef\u4ee5\u662f BaseModel \u5b50\u7c7b\u6216\u8005\u4efb\u610f\u7c7b\u578b, \u9ed8\u8ba4\u4e3a MessageChain . \u793a\u4f8b Arg ( \"--option {value} \" , type = str , default = \"\" ) Arg ( \"--option {value} \" , default = MessageChain ([ \"default\" ])) # \u9ed8\u8ba4 type \u4e3a MessageChain add_type_cast : \u6dfb\u52a0\u53ef\u5904\u7406\u7684\u7c7b\u578b \ud83d\udd17 Commander \u4e4b\u4e0b, pydantic \u5904\u7406\u4e86\u5927\u90e8\u5206\u6570\u636e\u7684\u5904\u7406\u5de5\u4f5c, \u5bf9\u4e8e\u4e00\u4e9b\u7279\u6b8a\u7684\u7c7b\u578b, \u4f60\u53ef\u4ee5\u901a\u8fc7 add_type_cast \u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684\u8f6c\u6362\u51fd\u6570. add_type_cast \u63a5\u53d7\u7684\u51fd\u6570\u4f1a\u901a\u8fc7 pydantic.validator \u8f6c\u6362, \u8bf7\u6ce8\u610f\u5176\u89c4\u8303. \u793a\u4f8b def cast_to_list ( value : MessageChain , field : ModelField ): if field . outer_type_ is List [ str ]: return value . asDisplay () . split ( \".\" ) if field . outer_type_ is List [ MessageChain ]: return value . split ( \".\" ) return value cmd . add_type_cast ( cast_to_list ) value \u5b57\u6bb5\u5982\u679c\u6ca1\u6709\u51b2\u7a81\u7684\u7c7b\u578b\u8f6c\u6362\u51fd\u6570\u5219\u603b\u662f MessageChain \u7c7b\u578b \u8fd9\u6837\u6dfb\u52a0\u4e86 List[str] \u4e0e List[MessageChain] \u4e24\u79cd\u7c7b\u578b\u652f\u6301. \u914d\u5408 Saya \u4f7f\u7528 \ud83d\udd17 from graia.ariadne.message.commander.saya import CommanderBehaviour , CommandSchema CommanderBehaviour \u9700\u8981\u4f20\u5165\u4e00\u4e2a Commander \u5b9e\u4f8b. CommandSchema \u53c2\u6570\u4e0e Commander.command \u76f8\u540c. \u793a\u4f8b @channel . use ( CommandSchema ( \"[command|\u547d\u4ee4] {name} \" , { \"option\" : Arg ( \"[--\u9009\u9879|--option|-O] {option} \" , str , \"\" )}, ) ) async def eval_command ( name : str , option : str ): ... \u793e\u533a\u6587\u6863\u76f8\u5173\u7ae0\u8282: \u94fe\u63a5","title":"Commander"},{"location":"advance/commander/#commander-","text":"","title":"Commander - \u4fbf\u6377\u7684\u547d\u4ee4\u89e6\u53d1\u7cfb\u7edf"},{"location":"advance/commander/#_1","text":"\u73b0\u5728 Ariadne \u7684\u547d\u4ee4\u89e3\u6790\u5b9e\u73b0\u65b9\u5f0f\u5f02\u5e38\u4e30\u5bcc. \u6700\u7b80\u5355\u7684\u6307\u4ee4\u89e3\u6790: DetectPrefix \u4e0e DetectSuffix , \u770b \u4e0a\u4e00\u7ae0 \u6700\u7b80\u6d01 / \u57fa\u4e8e pydantic BaseModel \u7684\u6307\u4ee4\u5904\u7406\u5668: Commander \u57fa\u4e8e\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u89e3\u6790 / \u5bb9\u9519\u6027\u9ad8\u4e14\u6613\u4e8e\u7f16\u5199\u7684\u5904\u7406\u5668: Twilight \u652f\u6301\u5b50\u547d\u4ee4\u89e3\u6790 / \u57fa\u4e8e dict \u7684\u9ad8\u5ea6\u5b9a\u5236\u89e3\u6790: Alconna \u6309\u7167\u4f60\u7684\u9700\u6c42, \u9009\u62e9\u6700\u9002\u5408\u4f60\u7684\u5904\u7406\u5668.","title":"\u5728\u5f00\u59cb\u4e4b\u524d"},{"location":"advance/commander/#_2","text":"\u793e\u533a\u63d0\u793a \u672c\u6587\u6863\u4e2d\u542b\u6709\u4ee5\u4e0b\u53ef\u80fd\u8ba9\u4eba\u4e0d\u9002\u7684\u4fe1\u606f: \u4ee4\u4eba\u8d39\u89e3\u7684 ABNF \u6807\u6ce8 \u5927\u91cf\u9650\u5236\u4e0e\u53d8\u4f53 \u5c31\u50cf____\u5b66\u79d1\u4e00\u6837 \u5927\u91cf\u672f\u8bed \u6742\u4e71\u65e0\u7ae0\u7684\u6392\u7248 \u8bf7\u79fb\u6b65 \u793e\u533a\u6587\u6863 \u83b7\u5f97\u66f4\u8f7b\u677e\u7684\u9605\u8bfb\u4f53\u9a8c. from graia.ariadne.message.commander import Commander , Slot , Arg Commander \u9700\u8981\u4f20\u5165\u4e00\u4e2a Broadcast \u5bf9\u8c61\u4ee5\u521d\u59cb\u5316, \u5e76\u4e14\u4f1a\u6ce8\u518c MessageEvent \u6d88\u606f\u5904\u7406\u5668. broadcast = Broadcast ( ... ) cmd = Commander ( broadcast )","title":"\u5f00\u59cb\u4f7f\u7528"},{"location":"advance/commander/#command","text":"Commander.command \u4e3b\u8981\u4f5c\u4e3a\u88c5\u9970\u5668\u4f7f\u7528, \u7528\u4e8e\u6ce8\u518c\u547d\u4ee4. \u5176 dispatchers decorators \u4e24\u4e2a\u53c2\u6570\u4e0e Broadcast.receiver \u542b\u4e49\u76f8\u540c, \u8fd9\u91cc\u4e0d\u518d\u8be6\u7ec6\u8bb2\u89e3. \u5176 command \u53c2\u6570\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32, \u4e3a\u7c7b\u4f3c shell \u7684\u4e3b\u547d\u4ee4\u6837\u5f0f. \u5176\u62bd\u8c61\u6587\u6cd5\u8868\u793a\u5982\u4e0b: CONSTANT :: = \u4efb\u610f\u975e\u7a7a\u4e14\u4e0d\u5305\u542b \"[]{}|:\" \u8fd9\u4e9b\u7b26\u53f7\u7684\u5b57\u7b26\u4e32 CHOICE :: = \"[\" CONSTANT ( \"|\" CONSTANT ) * \"]\" PARAMETER :: = \"{\" [ \"...\" ] <\u6807\u8bc6\u7b26> [ \":\" \u7c7b\u578b\u6807\u6ce8 ] [ \"=\" \u9ed8\u8ba4\u503c ] \"}\" SEGMENT :: = CONSTANT | CHOICE | PARAMETER COMMAND :: = < SEGMENT > ( \" \" SEGMENT ) * \u4e00\u90e8\u5206\u61c2 ABNF \u7684\u53ef\u80fd\u8981\u5f00\u59cb\u9a82\u8857\u4e86 \u6211\u77e5\u9053\u4f60\u6ca1\u770b\u61c2\u5bf9\u5427, \u6ca1\u5173\u7cfb, \u6211\u4e5f\u4e0d\u77e5\u9053\u6211\u5199\u4e86\u4ec0\u4e48 \u6211\u4eec\u5148\u6765\u770b\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50: [ . help | . h ] text { content } \u5b83\u63a5\u53d7\u4ee5\u4e0b\u6837\u5f0f\u7684\u6587\u672c: A B C .help text function .h text parameter .h text \"content_1 content_2\" \u4f46\u662f\u5b83\u4e0d\u63a5\u53d7 .help text func param . \u53ef\u4ee5\u770b\u51fa\u6765, [.help | .h] \u8fd9\u79cd\u7528 \u4e2d\u62ec\u53f7 \u62ec\u4f4f\u7684\u4ee3\u8868 \u4efb\u9009\u4e00\u4e2a\u5339\u914d text \u8fd9\u79cd\u7eaf\u6587\u672c\u7684\u4ee3\u8868 \u5b8c\u5168\u5339\u914d {content} \u8fd9\u79cd\u7528 \u5927\u62ec\u53f7 \u62ec\u4f4f\u7684\u4ee3\u8868 \u53c2\u6570\u5b9a\u4e49 . \u800c\u8fd9\u4e9b\u547d\u4ee4\u6bb5\u4e4b\u95f4\u4f7f\u7528\u7a7a\u683c\u5206\u5f00. setting \u5219\u662f\u4e00\u4e2a str \u81f3 Slot | Arg \u6620\u5c04, str \u4e3a\u5b9e\u9645\u53c2\u6570\u540d. \u793a\u4f8b @cmd . command ( \".cmd {placeholder} \" , { \"param\" : Slot ( \"placeholder\" , str , \"\" )}) async def func ( param : str ): ...","title":"command \u65b9\u6cd5"},{"location":"advance/commander/#_3","text":"\u4f7f\u7528 \u53c2\u6570\u5b9a\u4e49 \u7684\u62d3\u5c55\u8bed\u6cd5, \u53ef\u4ee5\u6307\u5b9a\u53c2\u6570\u7684\u7c7b\u578b\u4e0e\u9ed8\u8ba4\u503c, \u5e76\u4e14\u8ba9\u5176\u4e0d\u9700\u8981 \u53c2\u6570\u91cd\u5b9a\u5411 \u5c31\u53ef\u4ee5\u76f4\u63a5\u88ab\u5206\u6d3e. \u8fd9\u79cd\u8bed\u6cd5\u4e0e Python \u4e2d\u7684\u6807\u6ce8\u8bed\u6cd5\u76f8\u540c. \u4f8b\u5982: { content : str = \"default\" } \u5b83\u53ef\u4ee5\u4e3a def ( content : str ) -> ... \u8fdb\u884c\u53c2\u6570\u5206\u6d3e. \u524d\u5bfc\u7684 ... \u58f0\u660e\u542f\u7528\u4e86 wildcard , \u63a5\u53d7\u4efb\u610f\u4e2a\u5c3e\u63a5\u6d88\u606f\u94fe, \u5728\u8fd9\u4e2a\u60c5\u51b5\u4e0b\u53ef\u4ee5\u8fdb\u4e00\u6b65\u542f\u7528 raw .","title":"\u53c2\u6570\u5206\u6d3e\u4e0e\u6807\u6ce8"},{"location":"advance/commander/#wildcard","text":"wildcard \u6a21\u5f0f\u53ef\u4ee5\u7c7b\u6bd4 def func ( * args : anno ) \u4e2d\u7684 *args . \u8fd9\u79cd\u60c5\u51b5\u4e0b\u63a5\u53d7\u4efb\u610f\u4e2a\u53c2\u6570, \u5e76\u901a\u8fc7 {...param: anno} \u4e2d\u7684 anno \u9010\u4e2a\u5904\u7406. \u6700\u540e\u5206\u6d3e\u7684\u5c06\u662f Tuple[anno] \u7c7b\u578b\u53c2\u6570. \u663e\u800c\u6613\u89c1\u7684, default \u5728 wildcard \u4e0b\u4e0d\u53ef\u88ab\u8bbe\u7f6e. \u901a\u8fc7 { ... content : raw } \u8fd9\u79cd\u7279\u6b8a\u683c\u5f0f\u53ef\u4ee5\u542f\u7528 raw \u89e3\u6790\u6a21\u5f0f.","title":"\u5173\u4e8e wildcard"},{"location":"advance/commander/#_4","text":"Commander \u5185\u90e8\u7528\u4e86\u67d0\u4e9b\u9b54\u6cd5\u81ea\u52a8\u89e3\u6790\u53c2\u6570\u5e76\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684 Python \u5bf9\u8c61. \u793a\u4f8b class ExampleModel ( BaseModel ): ... @cmd . command ( \".command {content: ExampleModel = ExampleModel(...)}\" ) \u8bf7\u4f7f\u7528 \\\\ \u53cc\u91cd\u8f6c\u4e49\u5b57\u7b26\u6765\u8f6c\u4e49 []{} \u7b26\u53f7 (\u53ef\u50cf\u6b63\u5219\u8868\u8fbe\u5f0f\u4e00\u6837\u4f7f\u7528 r '' \u4fee\u9970\u6807\u8bb0) @cmd . command ( r \".command {content: List\\[str\\]}\" ) \u4e3b\u547d\u4ee4\u8fd8\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u6807\u6ce8\u81ea\u52a8\u63a8\u65ad\u7c7b\u578b\u4e0e\u9ed8\u8ba4\u503c @cmd . command ( \".command {content: ExampleModel = ExampleModel(...)}\" ) def func ( content ): ... \u7b49\u4ef7\u4e8e @cmd . command ( \".command {content} \" ) def func ( content : ExampleModel = ExampleModel ( ... )): ... \u672c\u673a\u5236\u5e76\u4e0d\u4f1a\u4e0e Decorator \u89e3\u6790\u51b2\u7a81.","title":"\u53c2\u6570\u7684\u81ea\u52a8\u89e3\u6790"},{"location":"advance/commander/#slot","text":"Slot \u6307\u5b9a\u4e86\u5b83\u9700\u8981\u7684 placeholder , \u53c2\u6570\u7684\u7c7b\u578b, \u4ee5\u53ca (\u53ef\u9009\u7684) \u9ed8\u8ba4\u503c. \u4e3b\u547d\u4ee4\u5404\u4e2a\u53c2\u6570\u7684\u4f18\u5148\u7ea7\u5982\u4e0b: \u51fd\u6570\u58f0\u660e < \u547d\u4ee4\u7684\u62d3\u5c55\u8bed\u6cd5 < Slot \u5b9a\u4e49","title":"\u53c2\u6570\u91cd\u5b9a\u5411: Slot \u7684\u4f7f\u7528"},{"location":"advance/commander/#raw","text":"\u5728 Slot \u4e0a\u6307\u5b9a default / default_factory \u5373\u9ed8\u8ba4\u8ba4\u4e3a\u662f\u53ef\u9009\u9879, \u4e14\u8981\u6c42\u5176\u5bf9\u5e94\u7684\u53c2\u6570\u5728\u6700\u540e. \u6307\u5b9a Slot \u7684 type \u4e3a\u5b57\u9762\u503c \"raw\" \u6216\u8005 commander._raw \u65f6, \u4f1a\u8ba4\u4e3a Slot \u4e3a raw . raw \u6a21\u5f0f\u4e0b, \u672b\u5c3e wildcard \u7684\u6d88\u606f\u94fe\u5143\u7ec4\u4f1a\u88ab\u8f6c\u5316\u4e3a\u539f\u6765\u7684\u5355\u4e2a\u6d88\u606f\u94fe.","title":"\u6700\u540e\u4e00\u4e2a\u53c2\u6570: \u53ef\u9009\u9879\u4e0e raw \u5c5e\u6027"},{"location":"advance/commander/#arg","text":"Arg \u5fc5\u987b\u6307\u5b9a default ( default_factory ) \u503c\u4f5c\u4e3a\u6ca1\u6709\u8be5\u53c2\u6570\u65f6\u7684\u9009\u9879\u3002 Arg \u7684 pattern \u5fc5\u987b\u7531 \u5355\u4e2a \u9009\u62e9\u5339\u914d\u6216\u5b8c\u5168\u5339\u914d\u5f00\u5934, \u4e4b\u540e\u7d27\u8ddf\u4efb\u610f\u4e2a \u53c2\u6570\u5b9a\u4e49 . CONSTANT :: = \u4efb\u610f\u975e\u7a7a\u4e14\u4e0d\u5305\u542b \"[]{}|:\" \u8fd9\u4e9b\u7b26\u53f7\u7684\u5b57\u7b26\u4e32 CHOICE :: = \"[\" CONSTANT ( \"|\" CONSTANT ) * \"]\" PLACEHOLDER :: = \"{\" CONSTANT \"}\" ARG :: = < CONSTANT | CHOICE > ( \" \" PLACEHOLDER ) * Arg \u6ca1\u6709\u62d3\u5c55\u8bed\u6cd5, \u4e14\u51fd\u6570\u6807\u6ce8\u63a8\u65ad\u5bf9\u5176\u65e0\u6548 Arg \u7684 type \u5728\u5355\u53c2\u6570/\u65e0\u53c2\u6570\u65f6\u53ef\u4ee5\u7701\u7565, \u5728\u591a\u53c2\u6570\u65f6\u5fc5\u987b\u6307\u5b9a, \u4e14\u4e3a pydantic.BaseModel \u5b50\u7c7b. \u8fd9\u4e2a\u5b50\u7c7b\u9700\u8981\u63a5\u53d7\u6240\u6709 placeholder \u5b57\u6bb5. \u793a\u4f8b class ExampleModel ( BaseModel ): _ = pydantic . validator ( \"*\" , pre = True , allow_reuse = True )( chain_validator ) value : str = \"\" name : str = \"\" Arg ( \"[.option|--option|+O] {name} {value} \" , type = ExampleModel , default = ExampleModel ()) \u5728\u65e0\u53c2\u6570\u65f6, Arg \u7684 type \u4e3a bool \u7c7b\u578b, \u800c default \u9ed8\u8ba4\u4e3a False \u4e14\u4f1a\u81ea\u52a8\u53cd\u8f6c. \u793a\u4f8b Arg ( \"--option\" ) # \u9ed8\u8ba4\u4e3a False, \u51fa\u73b0\u65f6\u4e3a True Arg ( \"--option\" , default = True ) # \u9ed8\u8ba4\u4e3a True, \u51fa\u73b0\u65f6\u4e3a False \u5355\u53c2\u6570\u65f6 Arg \u7684 type \u53ef\u4ee5\u662f BaseModel \u5b50\u7c7b\u6216\u8005\u4efb\u610f\u7c7b\u578b, \u9ed8\u8ba4\u4e3a MessageChain . \u793a\u4f8b Arg ( \"--option {value} \" , type = str , default = \"\" ) Arg ( \"--option {value} \" , default = MessageChain ([ \"default\" ])) # \u9ed8\u8ba4 type \u4e3a MessageChain","title":"\u52a8\u6001\u9009\u9879: Arg"},{"location":"advance/commander/#add_type_cast","text":"Commander \u4e4b\u4e0b, pydantic \u5904\u7406\u4e86\u5927\u90e8\u5206\u6570\u636e\u7684\u5904\u7406\u5de5\u4f5c, \u5bf9\u4e8e\u4e00\u4e9b\u7279\u6b8a\u7684\u7c7b\u578b, \u4f60\u53ef\u4ee5\u901a\u8fc7 add_type_cast \u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684\u8f6c\u6362\u51fd\u6570. add_type_cast \u63a5\u53d7\u7684\u51fd\u6570\u4f1a\u901a\u8fc7 pydantic.validator \u8f6c\u6362, \u8bf7\u6ce8\u610f\u5176\u89c4\u8303. \u793a\u4f8b def cast_to_list ( value : MessageChain , field : ModelField ): if field . outer_type_ is List [ str ]: return value . asDisplay () . split ( \".\" ) if field . outer_type_ is List [ MessageChain ]: return value . split ( \".\" ) return value cmd . add_type_cast ( cast_to_list ) value \u5b57\u6bb5\u5982\u679c\u6ca1\u6709\u51b2\u7a81\u7684\u7c7b\u578b\u8f6c\u6362\u51fd\u6570\u5219\u603b\u662f MessageChain \u7c7b\u578b \u8fd9\u6837\u6dfb\u52a0\u4e86 List[str] \u4e0e List[MessageChain] \u4e24\u79cd\u7c7b\u578b\u652f\u6301.","title":"add_type_cast: \u6dfb\u52a0\u53ef\u5904\u7406\u7684\u7c7b\u578b"},{"location":"advance/commander/#saya","text":"from graia.ariadne.message.commander.saya import CommanderBehaviour , CommandSchema CommanderBehaviour \u9700\u8981\u4f20\u5165\u4e00\u4e2a Commander \u5b9e\u4f8b. CommandSchema \u53c2\u6570\u4e0e Commander.command \u76f8\u540c. \u793a\u4f8b @channel . use ( CommandSchema ( \"[command|\u547d\u4ee4] {name} \" , { \"option\" : Arg ( \"[--\u9009\u9879|--option|-O] {option} \" , str , \"\" )}, ) ) async def eval_command ( name : str , option : str ): ... \u793e\u533a\u6587\u6863\u76f8\u5173\u7ae0\u8282: \u94fe\u63a5","title":"\u914d\u5408 Saya \u4f7f\u7528"},{"location":"advance/msg-chain/","text":"\u6d88\u606f\u94fe: \u8fdb\u9636 \ud83d\udd17 subchain \u65b9\u6cd5 \ud83d\udd17 MessageChain.subchain \u662f\u8fd9\u6837\u4f7f\u7528\u7684: \u4f20\u5165\u4e00\u4e2a slice \u5207\u7247\u5bf9\u8c61, \u5176 start \u4e0e stop (\u53ef\u9009) \u5747\u4e3a \u4e8c\u5143\u7ec4 , \u4e3a (int, Optional[int] \u683c\u5f0f. \u5207\u7247\u5bf9\u8c61 start \u4e0e stop \u7684\u7b2c\u4e00\u4e2a\u6574\u6570\u6307\u793a\u5143\u7d20\u8d77\u6b62\u4f4d\u7f6e. (\u542b\u4e49\u540c\u5728\u5e8f\u5217\u4e0a\u5207\u7247) \u82e5\u6709\u7b2c\u4e8c\u4e2a\u6574\u6570, \u5219\u5206\u522b\u6307\u793a \u5f00\u5934\u6587\u672c\u8d77\u59cb\u4e0b\u6807 \u4e0e \u672b\u5c3e\u6587\u672c\u7ed3\u675f\u4e0b\u6807 . (\u542b\u4e49\u540c\u5728\u5b57\u7b26\u4e32\u4e0a\u5207\u7247) \u793a\u4f8b: assert ( MessageChain . create ( \"hello world\" ))[( 0 , 3 ):( 1 , 7 )] == MessageChain ([ Plain ( text = 'lo w' )]) \u6ce8\u610f \u82e5\u63d0\u4f9b\u7b2c\u4e8c\u4e2a\u6574\u6570\u65f6 \u9996/\u5c3e \u5143\u7d20\u4e0d\u4e3a\u6587\u672c\u5219\u4f1a\u5f15\u53d1 ValueError . \u63d0\u793a \u5728\u6d88\u606f\u94fe\u5bf9\u8c61\u4e0a\u4f7f\u7528 [] \u7b26\u53f7\u5e76\u4f7f\u7528 MessageChain[(a1, a2):(b1, b2)] \u76f8\u5f53\u4e8e\u8c03\u7528 MessageChain.subchain(slice((a1, a2), (b1, b2))) \u7b5b\u9009\u5143\u7d20 \ud83d\udd17 \u4f7f\u7528 include \u4e0e exclude \u65b9\u6cd5\u53ef\u4ee5\u7b5b\u9009\u6d88\u606f\u94fe\u4e2d\u7684\u5143\u7d20. msg_chain = MessageChain . create ( \"Hello\" , At ( target = 12345 )) assert msg_chain . include ( Plain ) == MessageChain ([ Plain ( text = 'Hello' )]) assert msg_chain . exclude ( Plain ) == MessageChain ([ At ( target = 12345 )]) \u5206\u5272 \ud83d\udd17 \u4f7f\u7528 split \u65b9\u6cd5\u4ee5\u5207\u5272\u6d88\u606f\u94fe\u4e3a \u591a\u4e2a\u6d88\u606f\u94fe . raw_string \u53c2\u6570\u7528\u4e8e\u6307\u793a\u662f\u5426\u8981\u4fdd\u7559 \"\u7a7a\" \u7684\u6587\u672c\u5143\u7d20. msg_chain = MessageChain . create ( \"Hello world!\" , At ( target = 12345 )) assert msg_chain . split ( \"world!\" , raw_string = True ) == [ MessageChain ([ Plain ( text = 'Hello ' )]), MessageChain ([ Plain ( text = '' ), At ( target = 12345 )])] assert msg_chain . split ( \"world!\" ) == [ MessageChain ([ Plain ( text = 'Hello ' )]), MessageChain ([ At ( target = 12345 )])] \u524d\u7f00\u4e0e\u540e\u7f00\u64cd\u4f5c \ud83d\udd17 \u4e0e\u5b57\u7b26\u4e32\u5bf9\u8c61\u4e00\u6837, \u6d88\u606f\u94fe\u5bf9\u8c61\u652f\u6301 startswith , endswith , removeprefix , removesuffix \u56db\u4e2a\u65b9\u6cd5. \u6ce8\u610f \u6d88\u606f\u94fe\u5728\u6267\u884c\u8fd9\u4e9b\u65b9\u6cd5\u65f6 \u4e0d\u4f1a\u53bb\u6389\u5176\u4ed6\u5143\u7d20 . msg_chain = MessageChain . create ( \"Hello world!\" , At ( target = 12345 )) assert msg_chain . removeprefix ( \"Hello\" ) == MessageChain ([ Plain ( text = ' world!' ), At ( target = 12345 )]) assert msg_chain . removesuffix ( \"world!\" ) == MessageChain ([ Plain ( text = 'Hello world!' ), At ( target = 12345 )]) assert not msg_chain . endswith ( \"world!\" ) \u63d0\u793a removeprefix \u65b9\u6cd5\u6709\u4e00\u4e2a\u989d\u5916\u7684 skip_header \u53c2\u6570, \u53ef\u4ee5\u8df3\u8fc7 Source \u4e0e Quote \u8fdb\u884c\u64cd\u4f5c (\u5e76\u5728\u6700\u540e\u653e\u56de\u6d88\u606f\u94fe). \u53c8\u53ca \u4f60\u77e5\u9053\u7684, Python \u5728 3.9 \u4ee5\u540e\u624d\u6b63\u5f0f\u5f15\u5165 removeprefix \u4e0e removesuffix \u65b9\u6cd5...... \u4e0d\u8fc7 Ariadne \u4e2d\u7684\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u5e76\u4e0d\u9700\u8981 Python 3.9+ replace \u65b9\u6cd5 \ud83d\udd17 MessageChain \u7684 replace \u65b9\u6cd5\u4e0e str \u7684 replace \u65b9\u6cd5\u6709\u5f02\u66f2\u540c\u5de5\u4e4b\u5999. \u5728\u5176\u8868\u9762\u4e0b, findSubChain \u627f\u62c5\u4e86\u5927\u90e8\u5206\u5de5\u4f5c, \u627e\u51fa\u6240\u6709\u7b26\u5408 old \u7684\u90e8\u5206, \u4e4b\u540e\u7531\u7b80\u5355\u7684\u5faa\u73af\u5b8c\u6210\u66ff\u6362. >>> MessageChain ([ \"Hello World!Hello World!\"\"How are you?\" , At ( 1 ), \"yo\" ]) . replace ( ... MessageChain ([ \"Hello World!\" ]), ... MessageChain ([ \"No!\" ]) ... ) MessageChain([Plain(\"No!No!How are you?\"), At(1), Plain(\"yo\")]) \u63d0\u793a \u8fd9\u5bf9\u4e8e At \u7b49\u5143\u7d20\u4e5f\u9002\u7528. \u6b64\u5916, replace \u7684 old , new \u53c2\u6570\u4e3a MessageChain , Iterable[Element] , Element \u4e2d\u4e00\u79cd\u5373\u53ef. msg . replace ( At ( app . account ), Plain ( \"[bot]\" )) join \u65b9\u6cd5 \ud83d\udd17 MessageChain \u7684 join \u65b9\u6cd5\u4e0e str \u7684 join \u65b9\u6cd5\u5927\u81f4\u76f8\u540c. \u63a5\u53d7\u4e00\u4e2a\u5185\u5bb9\u4e3a MessageChain \u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61, \u5e76\u7528\u5176\u81ea\u8eab\u62fc\u63a5. merge \u53c2\u6570\u51b3\u5b9a\u662f\u5426\u81ea\u52a8\u5e2e\u4f60\u62fc\u63a5\u6d88\u606f\u94fe, \u9ed8\u8ba4\u4e3a\u662f. >>> MessageChain ([ \" \" ]) . join ([ MessageChain ([ \"A\" ]), MessageChain ([ \"B\" ]), MessageChain ([ \"C\" ])]) MessageChain([Plain(\"A B C\")]) >>> MessageChain ([ \" \" ]) . join ([ MessageChain ([ \"A\" ]), MessageChain ([ \"B\" ]), MessageChain ([ \"C\" ])], merge = False ) MessageChain([Plain(\"A\"), Plain(\" \"), Plain(\"B\"), Plain(\" \"), Plain(\"C\")]) \u5143\u7d20\u5b89\u5168\u6027 \ud83d\udd17 \u56e0\u4e3a MessageChain \u662f\u4e00\u4e2a\u53ef\u53d8\u5bf9\u8c61, \u5176\u5e95\u5c42\u7684 Element \u5c5e\u6027\u53ef\u4ee5\u88ab\u4fee\u6539, \u6240\u4ee5\u81ea\u7136\u53ef\u4ee5\u8fd9\u6837\u505a: >>> chain = MessageChain ([ Plain ( \"hello\" ), At ( 12345 )]) >>> chain [ 1 ] . target = 99999 >>> chain MessageChain([Plain(\"hello\"), At(99999)]) \u7136\u540e, \u8fd9\u6837\u662f \u9884\u671f\u884c\u4e3a : >>> chain = MessageChain ([ Plain ( \"Hello\" ), Plain ( \"World\" ), At ( 12345 )]) >>> merged = chain . merge () >>> chain MessageChain([Plain(text='HelloWorld'), At(target=12345)]) >>> merged [ 0 ] . text = \"test\" >>> chain MessageChain([Plain(text='test'), At(target=12345)]) >>> chain = MessageChain ([ Plain ( \"Hello\" ), Plain ( \"World\" ), At ( 12345 )]) >>> merged = chain . merge ( copy = True ) >>> chain MessageChain([Plain(text='HelloWorld'), At(target=12345)]) >>> merged [ 0 ] . text = \"test\" >>> chain MessageChain([Plain(text='HelloWorld'), At(target=12345)]) >>> merged MessageChain([Plain(text='test'), At(target=12345)]) \u539f\u56e0\u5f88\u7b80\u5355, Ariadne \u7684 MessageChain \u662f\u652f\u6301\u94fe\u5f0f\u8c03\u7528\u7684, \u6240\u4ee5 \u6240\u6709\u5bf9\u6d88\u606f\u94fe\u7684\u64cd\u4f5c\u90fd\u4f1a\u8fd4\u56de\u4e00\u4e2a\u6d88\u606f\u94fe\u5f15\u7528 . \u81ea 0.5.1 \u8d77, \u6240\u6709\u6d88\u606f\u94fe\u7684\u4fee\u6539\u64cd\u4f5c\u90fd\u652f\u6301\u5e03\u5c14\u53c2\u6570 copy (\u53ef\u80fd\u4e3a\u4ec5\u5173\u952e\u5b57\u53c2\u6570), copy = True \u65f6\u4f1a\u8fd4\u56de\u6d88\u606f\u94fe\u7684 \u526f\u672c (\u76f8\u5f53\u4e8e\u5728 chain.copy() \u4e0a\u64cd\u4f5c), \u5426\u5219\u4f1a\u8fd4\u56de\u81ea\u8eab\u7684\u5f15\u7528.","title":"\u6d88\u606f\u94fe"},{"location":"advance/msg-chain/#_1","text":"","title":"\u6d88\u606f\u94fe: \u8fdb\u9636"},{"location":"advance/msg-chain/#subchain","text":"MessageChain.subchain \u662f\u8fd9\u6837\u4f7f\u7528\u7684: \u4f20\u5165\u4e00\u4e2a slice \u5207\u7247\u5bf9\u8c61, \u5176 start \u4e0e stop (\u53ef\u9009) \u5747\u4e3a \u4e8c\u5143\u7ec4 , \u4e3a (int, Optional[int] \u683c\u5f0f. \u5207\u7247\u5bf9\u8c61 start \u4e0e stop \u7684\u7b2c\u4e00\u4e2a\u6574\u6570\u6307\u793a\u5143\u7d20\u8d77\u6b62\u4f4d\u7f6e. (\u542b\u4e49\u540c\u5728\u5e8f\u5217\u4e0a\u5207\u7247) \u82e5\u6709\u7b2c\u4e8c\u4e2a\u6574\u6570, \u5219\u5206\u522b\u6307\u793a \u5f00\u5934\u6587\u672c\u8d77\u59cb\u4e0b\u6807 \u4e0e \u672b\u5c3e\u6587\u672c\u7ed3\u675f\u4e0b\u6807 . (\u542b\u4e49\u540c\u5728\u5b57\u7b26\u4e32\u4e0a\u5207\u7247) \u793a\u4f8b: assert ( MessageChain . create ( \"hello world\" ))[( 0 , 3 ):( 1 , 7 )] == MessageChain ([ Plain ( text = 'lo w' )]) \u6ce8\u610f \u82e5\u63d0\u4f9b\u7b2c\u4e8c\u4e2a\u6574\u6570\u65f6 \u9996/\u5c3e \u5143\u7d20\u4e0d\u4e3a\u6587\u672c\u5219\u4f1a\u5f15\u53d1 ValueError . \u63d0\u793a \u5728\u6d88\u606f\u94fe\u5bf9\u8c61\u4e0a\u4f7f\u7528 [] \u7b26\u53f7\u5e76\u4f7f\u7528 MessageChain[(a1, a2):(b1, b2)] \u76f8\u5f53\u4e8e\u8c03\u7528 MessageChain.subchain(slice((a1, a2), (b1, b2)))","title":"subchain \u65b9\u6cd5"},{"location":"advance/msg-chain/#_2","text":"\u4f7f\u7528 include \u4e0e exclude \u65b9\u6cd5\u53ef\u4ee5\u7b5b\u9009\u6d88\u606f\u94fe\u4e2d\u7684\u5143\u7d20. msg_chain = MessageChain . create ( \"Hello\" , At ( target = 12345 )) assert msg_chain . include ( Plain ) == MessageChain ([ Plain ( text = 'Hello' )]) assert msg_chain . exclude ( Plain ) == MessageChain ([ At ( target = 12345 )])","title":"\u7b5b\u9009\u5143\u7d20"},{"location":"advance/msg-chain/#_3","text":"\u4f7f\u7528 split \u65b9\u6cd5\u4ee5\u5207\u5272\u6d88\u606f\u94fe\u4e3a \u591a\u4e2a\u6d88\u606f\u94fe . raw_string \u53c2\u6570\u7528\u4e8e\u6307\u793a\u662f\u5426\u8981\u4fdd\u7559 \"\u7a7a\" \u7684\u6587\u672c\u5143\u7d20. msg_chain = MessageChain . create ( \"Hello world!\" , At ( target = 12345 )) assert msg_chain . split ( \"world!\" , raw_string = True ) == [ MessageChain ([ Plain ( text = 'Hello ' )]), MessageChain ([ Plain ( text = '' ), At ( target = 12345 )])] assert msg_chain . split ( \"world!\" ) == [ MessageChain ([ Plain ( text = 'Hello ' )]), MessageChain ([ At ( target = 12345 )])]","title":"\u5206\u5272"},{"location":"advance/msg-chain/#_4","text":"\u4e0e\u5b57\u7b26\u4e32\u5bf9\u8c61\u4e00\u6837, \u6d88\u606f\u94fe\u5bf9\u8c61\u652f\u6301 startswith , endswith , removeprefix , removesuffix \u56db\u4e2a\u65b9\u6cd5. \u6ce8\u610f \u6d88\u606f\u94fe\u5728\u6267\u884c\u8fd9\u4e9b\u65b9\u6cd5\u65f6 \u4e0d\u4f1a\u53bb\u6389\u5176\u4ed6\u5143\u7d20 . msg_chain = MessageChain . create ( \"Hello world!\" , At ( target = 12345 )) assert msg_chain . removeprefix ( \"Hello\" ) == MessageChain ([ Plain ( text = ' world!' ), At ( target = 12345 )]) assert msg_chain . removesuffix ( \"world!\" ) == MessageChain ([ Plain ( text = 'Hello world!' ), At ( target = 12345 )]) assert not msg_chain . endswith ( \"world!\" ) \u63d0\u793a removeprefix \u65b9\u6cd5\u6709\u4e00\u4e2a\u989d\u5916\u7684 skip_header \u53c2\u6570, \u53ef\u4ee5\u8df3\u8fc7 Source \u4e0e Quote \u8fdb\u884c\u64cd\u4f5c (\u5e76\u5728\u6700\u540e\u653e\u56de\u6d88\u606f\u94fe). \u53c8\u53ca \u4f60\u77e5\u9053\u7684, Python \u5728 3.9 \u4ee5\u540e\u624d\u6b63\u5f0f\u5f15\u5165 removeprefix \u4e0e removesuffix \u65b9\u6cd5...... \u4e0d\u8fc7 Ariadne \u4e2d\u7684\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u5e76\u4e0d\u9700\u8981 Python 3.9+","title":"\u524d\u7f00\u4e0e\u540e\u7f00\u64cd\u4f5c"},{"location":"advance/msg-chain/#replace","text":"MessageChain \u7684 replace \u65b9\u6cd5\u4e0e str \u7684 replace \u65b9\u6cd5\u6709\u5f02\u66f2\u540c\u5de5\u4e4b\u5999. \u5728\u5176\u8868\u9762\u4e0b, findSubChain \u627f\u62c5\u4e86\u5927\u90e8\u5206\u5de5\u4f5c, \u627e\u51fa\u6240\u6709\u7b26\u5408 old \u7684\u90e8\u5206, \u4e4b\u540e\u7531\u7b80\u5355\u7684\u5faa\u73af\u5b8c\u6210\u66ff\u6362. >>> MessageChain ([ \"Hello World!Hello World!\"\"How are you?\" , At ( 1 ), \"yo\" ]) . replace ( ... MessageChain ([ \"Hello World!\" ]), ... MessageChain ([ \"No!\" ]) ... ) MessageChain([Plain(\"No!No!How are you?\"), At(1), Plain(\"yo\")]) \u63d0\u793a \u8fd9\u5bf9\u4e8e At \u7b49\u5143\u7d20\u4e5f\u9002\u7528. \u6b64\u5916, replace \u7684 old , new \u53c2\u6570\u4e3a MessageChain , Iterable[Element] , Element \u4e2d\u4e00\u79cd\u5373\u53ef. msg . replace ( At ( app . account ), Plain ( \"[bot]\" ))","title":"replace \u65b9\u6cd5"},{"location":"advance/msg-chain/#join","text":"MessageChain \u7684 join \u65b9\u6cd5\u4e0e str \u7684 join \u65b9\u6cd5\u5927\u81f4\u76f8\u540c. \u63a5\u53d7\u4e00\u4e2a\u5185\u5bb9\u4e3a MessageChain \u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61, \u5e76\u7528\u5176\u81ea\u8eab\u62fc\u63a5. merge \u53c2\u6570\u51b3\u5b9a\u662f\u5426\u81ea\u52a8\u5e2e\u4f60\u62fc\u63a5\u6d88\u606f\u94fe, \u9ed8\u8ba4\u4e3a\u662f. >>> MessageChain ([ \" \" ]) . join ([ MessageChain ([ \"A\" ]), MessageChain ([ \"B\" ]), MessageChain ([ \"C\" ])]) MessageChain([Plain(\"A B C\")]) >>> MessageChain ([ \" \" ]) . join ([ MessageChain ([ \"A\" ]), MessageChain ([ \"B\" ]), MessageChain ([ \"C\" ])], merge = False ) MessageChain([Plain(\"A\"), Plain(\" \"), Plain(\"B\"), Plain(\" \"), Plain(\"C\")])","title":"join \u65b9\u6cd5"},{"location":"advance/msg-chain/#_5","text":"\u56e0\u4e3a MessageChain \u662f\u4e00\u4e2a\u53ef\u53d8\u5bf9\u8c61, \u5176\u5e95\u5c42\u7684 Element \u5c5e\u6027\u53ef\u4ee5\u88ab\u4fee\u6539, \u6240\u4ee5\u81ea\u7136\u53ef\u4ee5\u8fd9\u6837\u505a: >>> chain = MessageChain ([ Plain ( \"hello\" ), At ( 12345 )]) >>> chain [ 1 ] . target = 99999 >>> chain MessageChain([Plain(\"hello\"), At(99999)]) \u7136\u540e, \u8fd9\u6837\u662f \u9884\u671f\u884c\u4e3a : >>> chain = MessageChain ([ Plain ( \"Hello\" ), Plain ( \"World\" ), At ( 12345 )]) >>> merged = chain . merge () >>> chain MessageChain([Plain(text='HelloWorld'), At(target=12345)]) >>> merged [ 0 ] . text = \"test\" >>> chain MessageChain([Plain(text='test'), At(target=12345)]) >>> chain = MessageChain ([ Plain ( \"Hello\" ), Plain ( \"World\" ), At ( 12345 )]) >>> merged = chain . merge ( copy = True ) >>> chain MessageChain([Plain(text='HelloWorld'), At(target=12345)]) >>> merged [ 0 ] . text = \"test\" >>> chain MessageChain([Plain(text='HelloWorld'), At(target=12345)]) >>> merged MessageChain([Plain(text='test'), At(target=12345)]) \u539f\u56e0\u5f88\u7b80\u5355, Ariadne \u7684 MessageChain \u662f\u652f\u6301\u94fe\u5f0f\u8c03\u7528\u7684, \u6240\u4ee5 \u6240\u6709\u5bf9\u6d88\u606f\u94fe\u7684\u64cd\u4f5c\u90fd\u4f1a\u8fd4\u56de\u4e00\u4e2a\u6d88\u606f\u94fe\u5f15\u7528 . \u81ea 0.5.1 \u8d77, \u6240\u6709\u6d88\u606f\u94fe\u7684\u4fee\u6539\u64cd\u4f5c\u90fd\u652f\u6301\u5e03\u5c14\u53c2\u6570 copy (\u53ef\u80fd\u4e3a\u4ec5\u5173\u952e\u5b57\u53c2\u6570), copy = True \u65f6\u4f1a\u8fd4\u56de\u6d88\u606f\u94fe\u7684 \u526f\u672c (\u76f8\u5f53\u4e8e\u5728 chain.copy() \u4e0a\u64cd\u4f5c), \u5426\u5219\u4f1a\u8fd4\u56de\u81ea\u8eab\u7684\u5f15\u7528.","title":"\u5143\u7d20\u5b89\u5168\u6027"},{"location":"advance/twilight-old/","text":"Twilight - \u6df7\u5408\u5f0f\u6d88\u606f\u94fe\u5904\u7406\u5668 (\u65e7\u7248\u6587\u6863) \ud83d\udd17 \u672c\u6a21\u5757\u540d\u5b57\u53d6\u81ea My Little Pony \u4e2d\u7684 Twilight Sparkle . Friendship is magic! \u672c\u6587\u6863\u4ec5\u4f9b 0.6.0 \u4ee5\u524d\u7248\u672c\u4f7f\u7528 \u7f18\u8d77 \ud83d\udd17 \u60f3\u5fc5 v4 \u7528\u6237\u90fd\u6216\u591a\u6216\u5c11\u7684\u77e5\u9053 Kanata \u5427. \u5176\u4ecb\u7ecd\u7684 \u6b63\u5219\u8868\u8fbe\u5f0f \u53c2\u6570\u63d0\u53d6/\u5173\u952e\u5b57\u5339\u914d \u975e\u5e38\u7684\u6709\u8da3, \u800c Twilight \u5728\u5176\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u5bf9 argparse \u4e2d\u90e8\u5206\u529f\u80fd\u7684\u652f\u6301. \u521b\u5efa Sparkle \u7c7b \ud83d\udd17 Twilight \u7684\u6700\u4f73\u4f7f\u7528\u65b9\u5f0f\u4e3a\u7ee7\u627f Sparkle \u7c7b\u5e76\u901a\u8fc7 \u7c7b\u53d8\u91cf \u7684\u5f62\u5f0f\u5b9a\u4e49\u5339\u914d\u9879. \u4e4b\u540e\u5728\u5b9e\u4f8b\u5316 Sparkle \u65f6\u6dfb\u52a0\u547d\u4ee4\u5934. class FooSparkle ( Sparkle ): help = ArgumentMatch ( \"--help\" , \"-h\" , action = \"store_true\" ) bar_match = FullMatch ( \"_bar_\" ) regex_match = RegexMatch ( r \"\\d+\" ) wildcard = WildcardMatch () twilight = Twilight ( FooSparkle ([ RegexMatch ( r \"[./!]header\" )])) \u624b\u52a8\u751f\u6210 \ud83d\udd17 \u5728 Twilight \u5bf9\u8c61\u4e0a\u8c03\u7528 generate(message_chain) \u5373\u53ef\u624b\u52a8\u751f\u6210 Sparkle \u800c\u65e0\u9700\u914d\u5408 Broadcast . \u63d0\u793a \u8fd9\u5728\u672c\u5730\u8c03\u8bd5\u65f6\u975e\u5e38\u6709\u7528. \u6548\u679c >>> twilight . generate ( MessageChain ([ \"!header _bar_ 123 --help pwq external\" ])) FooSparkle( [RegexMatch(matched=True, result=MessageChain([Plain(text='!header')]), pattern=...)], # \u6ce8\u610f\u8fd9\u4e2a. help=ArgumentMatch(matched=True, result=True, pattern=...), bar_match=FullMatch(matched=True, result=MessageChain([Plain(text='_bar_')]), pattern=...), regex_match=RegexMatch(matched=True, result=MessageChain([Plain(text='123')]), pattern=...), wildcard=WildcardMatch(matched=True, result=MessageChain([Plain(text='external')]), pattern=...) ) Match \ud83d\udd17 Match \u672c\u8eab\u4ec5\u4e3a \u62bd\u8c61\u57fa\u7c7b, \u65e0\u6cd5\u88ab\u76f4\u63a5\u5b9e\u4f8b\u5316, \u6709\u4ee5\u4e0b\u51e0\u79cd\u53d8\u4f53: RegexMatch : \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d, \u652f\u6301\u4f20\u5165 re.Flag . FullMatch : \u4e25\u683c\u5168\u5339\u914d. UnionMatch : \u591a\u91cd\u5168\u5339\u914d, \u5373\u5728\u4f20\u5165\u7684 pattern \u4e2d\u4efb\u610f\u7b26\u5408\u4e00\u79cd\u5373\u53ef. ElementMatch : \u5143\u7d20\u5339\u914d, \u53ef\u5339\u914d Plain \u4ee5\u5916\u7684\u5143\u7d20\u7c7b\u578b. WildcardMatch : \u4efb\u610f\u5339\u914d, \u53ef\u4ee5\u901a\u8fc7 greed \u53c2\u6570\u786e\u5b9a\u662f\u5426\u8d2a\u5a6a\u5339\u914d. ParamMatch : \u4efb\u610f\u5339\u914d, \u4f46\u662f\u901a\u8fc7\u5f15\u53f7\u8d77\u6b62\u4e0e\u7a7a\u683c\u786e\u5b9a\u5339\u914d. ArgumentMatch : \u53c2\u6570\u5339\u914d, \u5728 match \u5b57\u5178 \u6216 \u7c7b\u53d8\u91cf \u4e2d\u6ca1\u6709\u4ee5\u4e0a\u4e09\u79cd\u5339\u914d\u65f6\u624d\u5141\u8bb8\u4e0d\u4ee5 \"-\" \u6253\u5934. \u8fd9\u4e9b Match \u7c7b\u53ef\u63a5\u53d7\u4ee5\u4e0b\u53c2\u6570: pattern : \u5339\u914d\u9879, \u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32 ( ArgumentMatch \u4e0e UnionMatch \u53ef\u4e3a\u591a\u4e2a, ElementMatch \u5e94\u4f20\u5165\u7c7b\u578b\u800c\u975e\u5b57\u7b26\u4e32). \u5728 WildcardMatch \u4e0a\u4e0d\u53ef\u7528 optional : \u662f\u5426\u53ef\u9009, \u5728 ArgumentMatch \u4e0a\u4f1a\u901a\u8fc7\u4f20\u5165\u7684 pattern \u786e\u5b9a\u662f\u5426\u6709\u6548. (\u5728\u975e ArgumentMatch \u4e0a\u9ed8\u8ba4\u4e3a False, \u5728 ArgumentMatch \u4e0a\u9ed8\u8ba4\u4e3a True.) space : \u5982\u4f55\u5904\u7406\u5c3e\u968f\u7a7a\u683c. (\u4e3a SpacePolicy \u5bf9\u8c61) \u5728 ArgumentMatch \u4e0a\u4e0d\u53ef\u7528 help : \u5e2e\u52a9\u5b57\u7b26\u4e32, \u5728 Twilight.get_help \u4e2d\u4f7f\u7528. alt_help : \u66ff\u4ee3\u5e2e\u52a9\u5b57\u7b26\u4e32, \u5728 Twilight.get_help \u4e2d\u4f7f\u7528. \u5728\u5b8c\u6210 Twilight \u751f\u6210\u540e, Twilight \u9644\u5e26\u7684 Match \u6709\u4ee5\u4e0b\u5c5e\u6027: matched : \u6807\u5fd7\u7740\u5339\u914d\u5230\u7684\u5bf9\u8c61\u662f\u5426\u6709\u5185\u5bb9. result : \u5339\u914d\u7ed3\u679c. regex_match : \u4ec5 RegexMatch \u53ca\u5176\u5b50\u7c7b\u62e5\u6709, \u4e3a\u539f\u6765\u7684 re.Match \u5bf9\u8c61. SpacePolicy \u5bf9\u8c61 \ud83d\udd17 SpacePolicy \u662f\u4e00\u4e2a enum.Enum \u7c7b, \u6709\u5982\u4e0b\u5e38\u91cf: NOSPACE : \u4e0d\u9644\u5e26\u5c3e\u968f\u7a7a\u683c. PRESERVE : \u9884\u7559\u5c3e\u968f\u7a7a\u683c. (\u9ed8\u8ba4) FORCE : \u5f3a\u5236\u9700\u8981\u5c3e\u968f\u7a7a\u683c. \u5b83\u4eec\u5e94\u88ab\u4f5c\u4e3a \u4e0d\u900f\u660e\u5bf9\u8c61 \u4f7f\u7528. Twilight \u4e0e Sparkle \u7684\u5b9e\u4f8b\u5316 \ud83d\udd17 Sparkle \u5728\u5b9e\u4f8b\u5316\u65f6, \u53ef\u63a5\u53d7\u4e00\u4e2a \u989d\u5916 \u53ef\u8fed\u4ee3\u5bf9\u8c61 check \u4e0e \u989d\u5916\u5b57\u5178 match , \u4f5c\u7528\u5982\u4e0b\uff1a check_args \u4ec5\u5e94\u5f53\u5bb9\u7eb3 RegexMatch \u4e0e FullMatch \u5bf9\u8c61, \u7528\u4e8e\u5bf9 MessageChain \u8fdb\u884c\u9884\u5148\u68c0\u67e5 matches \u4e3a\u4e00\u4e2a Dict[str, Match] \u6620\u5c04, \u76f8\u5f53\u4e8e\u62d3\u5c55 Twilight.__class__.__dict__ \u6bd4\u5982, \u8fd9\u51e0\u79cd\u5199\u6cd5\u5176\u5b9e\u5728 \u8fd0\u884c\u65f6 \u7b49\u4ef7. \u4f7f\u7528 \u6d3e\u751f\u7c7b \u76f4\u63a5 \u5b9e\u4f8b\u5316 \u901a\u8fc7 Twilight \u95f4\u63a5\u5b9e\u4f8b\u5316 class FooSparkle ( Sparkle ): match = RegexMatch ( r \"\\d+\" ) t = Twilight ( FooSparkle ([ RegexMatch ( r \"[!.]header\" )])) t = Twilight ( FooSparkle ) t = Twilight ( Sparkle ([ RegexMatch ( r \"[!.]header\" )], { \"match\" : RegexMatch ( r \"\\d+\" )})) t = Twilight ( Sparkle ([ RegexMatch ( r \"[!.]header\" )], { \"match\" : RegexMatch ( r \"\\d+\" )})) \u6ce8\u610f \u5982\u679c\u4f60\u60f3\u8981\u68c0\u67e5 \"\u547d\u4ee4\u5934\", \u8bf7\u4f7f\u7528 check \u800c\u975e\u5411 Sparkle \u6dfb\u52a0\u7c7b\u53d8\u91cf. Sparkle \u5728\u5b9e\u4f8b\u5316\u65f6, \u63a5\u53d7\u4ee5\u4e0b\u53d8\u4f53: check: Dict check: Iterable, match: Dict @overload def __init__ ( self , check : Dict [ str , Match ], * , description : str = \"\" , epilog : str = \"\" , ): \"\"\" Args: check (Dict[str, Match]): \u5339\u914d\u7684\u6620\u5c04. \"\"\" @overload def __init__ ( self , check : Iterable [ RegexMatch ], match : Dict [ str , Match ], * , description : str = \"\" , epilog : str = \"\" , ): \"\"\" Args: check (Iterable[RegexMatch]): \u7528\u4e8e\u68c0\u67e5\u7684 Match \u5bf9\u8c61. match (Dict[str, Match]): \u989d\u5916\u5339\u914d\u7684\u6620\u5c04. \"\"\" description (str, optional): \u672c Sparkle \u7684\u524d\u7f6e\u63cf\u8ff0, \u5728 add_help \u4e2d\u7528\u5230. epilog (str, optional): \u672c Sparkle \u7684\u540e\u7f6e\u63cf\u8ff0, \u5728 add_help \u4e2d\u7528\u5230. Twilight \u53ef\u4f20\u5165 map_params \u5b57\u5178\u7528\u4e8e\u63a7\u5236 MessageChain.asMappingString \u7684\u884c\u4e3a. from_command \ud83d\udd17 \u672c \u7c7b\u65b9\u6cd5 \u5728 Twilight \u4e0e Sparkle \u7c7b\u4e0a\u5747\u53ef\u4f7f\u7528, \u4e0d\u8fc7\u8bf7\u4e0d\u8981\u5728 Sparkle \u5b50\u7c7b\u4e0a\u4f7f\u7528 \u901a\u8fc7 command {0} {1} \u7684\u7c7b shell \u5f62\u5f0f\u5b9a\u4e49\u53c2\u6570, \u5b83\u53ef\u4ee5\u5feb\u901f\u5730\u751f\u6210\u6307\u4ee4\u5904\u7406\u5668. [a|b] \u7684\u5f62\u5f0f\u5141\u8bb8\u4f60\u5b9a\u4e49\u9009\u62e9\u6027\u53c2\u6570. ( a \u6216 b ) \u8bf7\u4f7f\u7528 r-string \u539f\u59cb\u5b57\u7b26\u4e32\u4e2d\u7684\u524d\u5bfc\u53cd\u659c\u6760\u8f6c\u4e49, \u672a\u8f6c\u79fb\u7684\u5d4c\u5957\u62ec\u53f7\u4f1a\u5bfc\u81f4\u9519\u8bef. \u5426\u5219\u4f60\u53ef\u80fd\u9047\u5230 \u53cd\u659c\u6760\u707e\u96be . \u503c\u5f97\u6307\u51fa\u7684\u662f, f-string \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u53cc\u62ec\u53f7\u8f6c\u4e49 ( {{ \u4e0e }} ) \u662f\u65e0\u6548\u7684. \u540c\u65f6, \u4f60\u53ef\u4ee5\u4f20\u5165 extra_arg_mapping ( Dict[str, ArgumentMatch] ) \u6765\u6dfb\u52a0\u989d\u5916\u7684 ArgumentMatch . \u76f4\u63a5\u5b9e\u4f8b\u5316 from_command Twilight ( Sparkle ( [ UnionMatch ( \".permission\" , \".perm\" , space = FORCE ), FullMatch ( \"user\" , space = FORCE ), ParamMatch ( space = FORCE ), ParamMatch ( space = NOSPACE ), ], { ArgumentMatch ( \"--verbose\" , \"-v\" , action = \"store_true\" ), }, ), map_params =... , ) Twilight . from_command ( \"[.permission|.perm] user {0} {1} \" , { ArgumentMatch ( \"--verbose\" , \"-v\" , action = \"store_true\" ), }, map_params =... , ) \u8fd9\u4e8c\u8005\u7b49\u4ef7. \u4f60\u53ef\u4ee5\u901a\u8fc7 param_1, param_2 = sparkle[ParamMatch] \u7684\u5f62\u5f0f\u83b7\u53d6 ParamMatch . \u8be6\u89c1\u4e0b\u4e00\u8282. \u63d0\u53d6 Match \u5bf9\u8c61 \ud83d\udd17 Match \u5bf9\u8c61\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u51e0\u79cd\u65b9\u5f0f\u63d0\u53d6: \u82e5\u662f\u5728\u5b9e\u4f8b\u5316 Sparkle \u65f6\u6dfb\u52a0\u7684, \u90a3\u53ea\u80fd\u901a\u8fc7 Sparkle[int] \u7684\u5f62\u5f0f\u63d0\u53d6. \u5426\u5219, \u53ef\u901a\u8fc7 Sparkle[match_name] \u4e0e Sparkle.match_name \u4e24\u79cd\u65b9\u5f0f\u63d0\u53d6. \u63d0\u793a \u4f60\u53ef\u4ee5\u901a\u8fc7 Sparkle[match_class] \u5f62\u5f0f\u63d0\u53d6 match_class \u7c7b\u578b\u7684 Match \u5bf9\u8c61. \u8fd8\u53ef\u4ee5\u901a\u8fc7 Sparkle[match_class, index] \u63d0\u53d6\u7b2c index \u4e2a match_class \u7c7b\u578b\u7684 Match \u5bf9\u8c61 (\u4ece 0 \u8ba1\u6570). \u8fd9\u51e0\u79cd\u65b9\u5f0f\u4e0e\u8c03\u7528 Sparkle.get_match(...) \u7b49\u4ef7. \u914d\u5408 Broadcast \u4f7f\u7528 \ud83d\udd17 Twilight \u5e94\u4f5c\u4e3a dispatcher \u4f20\u5165 broadcast.receiver / ListenerSchema \u4e2d. \u5728 receiver \u51fd\u6570\u7684\u7c7b\u578b\u6807\u6ce8\u4e2d, \u901a\u8fc7 \u6807\u6ce8\u53c2\u6570\u4e3a Sparkle \u83b7\u53d6\u5f53\u524d Sparkle , \u901a\u8fc7 name: Match \u7684\u5f62\u5f0f\u83b7\u53d6 name \u5bf9\u5e94\u7684\u5339\u914d\u5bf9\u8c61. \u50cf\u8fd9\u6837: @broadcast . receiver ( MessageEvent , dispatchers = [ Twilight ( Sparkle ( [ FullMatch ( \".command\" )], { \"arg\" : RegexMatch ( r \"\\d+\" , optional = True )} )) ]) async def reply ( ... , arg : RegexMatch ): ... \u4f7f\u7528 Sparkle \u4e0e Match \u7684\u5b50\u7c7b\u8fdb\u884c\u6807\u6ce8\u4e5f\u662f\u53ef\u4ee5\u7684. \u4e00\u65e6\u5339\u914d\u5931\u8d25 ( generate \u629b\u51fa\u5f02\u5e38), Broadcast \u7684\u672c\u6b21\u6267\u884c\u5c31\u4f1a\u88ab\u53d6\u6d88. \u521b\u5efa\u5e2e\u52a9 \ud83d\udd17 \u901a\u8fc7 Sparkle.get_help \u65b9\u6cd5\u53ef\u4ee5\u65b9\u4fbf\u7684\u83b7\u53d6\u5e2e\u52a9. \u793a\u4f8b \u5047\u8bbe\u4f60\u60f3\u8981\u521b\u5efa\u4e00\u4e2a\u53ef\u4ee5\u663e\u793a\u901a\u8fc7 \u65e5\u671f \u663e\u793a \u661f\u671f \u7684\u547d\u4ee4: class Command ( Sparkle ): date = RegexMatch ( r \"(?P<year>\\d+)[.-](?P<month>\\d+)[.-](?P<day>\\d+)\" , help = \"\u65e5\u671f\u7684\u5b57\u7b26\u4e32\" ) help = ArgumentMatch ( \"--help\" , \"-h\" , action = \"store_true\" , help = \"\u663e\u793a\u672c\u5e2e\u52a9.\" ) # \u8bed\u6cd5\u4e0e argparse.ArgumentParser.add_argument \u57fa\u672c\u76f8\u540c # \u6ce8\u610f help \u662f\u624b\u52a8\u6dfb\u52a0\u7684 print ( Command () . get_help ()) # \u6ce8\u610f\u9700\u8981\u5728 Sparkle \u5b9e\u4f8b\u4e0a\u8c03\u7528. \u6548\u679c\u5982\u4e0b: \u4f7f\u7528\u65b9\u6cd5: (?P<year>\\d+)[.-](?P<month>\\d+)[.-](?P<day>\\d+) [--help] \u4f4d\u7f6e\u5339\u914d: date -> \u5339\u914d (?P<year>\\d+)[.-](?P<month>\\d+)[.-](?P<day>\\d+) : \u65e5\u671f\u7684\u5b57\u7b26\u4e32 \u53c2\u6570\u5339\u914d: --help, -h \u663e\u793a\u672c\u5e2e\u52a9. \u4f7f\u7528 description, epilog \u4e0e alt_help \u63a7\u5236\u5e2e\u52a9\u751f\u6210 \ud83d\udd17 \u56de\u5230\u521a\u624d\u7684\u793a\u4f8b. \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 description \u4e0e epilog \u63a7\u5236\u5728\u5e2e\u52a9\u5185\u5bb9\u524d\u540e\u6dfb\u52a0\u7684\u6587\u672c. \u5728\u5b9a\u4e49\u7c7b\u65f6\u4f20\u5165 \u5728\u5b9e\u4f8b\u5316\u65f6\u4f20\u5165 \u5728\u8c03\u7528 get_help \u65f6\u4f20\u5165 class Command ( Sparkle , description =... , epilog =... ): ... Command ( description =... , epilog =... ) . get_help () Command () . get_help ( description =... , epilog =... ) \u4ece\u5de6\u5f80\u53f3, \u4f18\u5148\u7ea7\u9012\u589e. \u800c Match \u7684 alt_help \u53ef\u4ee5\u63a7\u5236\u90e8\u5206\u8be5\u5339\u914d\u5bf9\u8c61\u7684\u5e2e\u52a9\u4fe1\u606f. \u5bf9\u6bd4 \u524d \u540e class Command ( Sparkle ): date = RegexMatch ( r \"(?P<year>\\d+)[.-](?P<month>\\d+)[.-](?P<day>\\d+)\" , help = \"\u65e5\u671f\u7684\u5b57\u7b26\u4e32\" ) \u4f7f\u7528\u65b9\u6cd5: (?P<year>\\d+)[.-](?P<month>\\d+)[.-](?P<day>\\d+) \u4f4d\u7f6e\u5339\u914d: date -> \u5339\u914d (?P<year>\\d+)[.-](?P<month>\\d+)[.-](?P<day>\\d+) : \u65e5\u671f\u7684\u5b57\u7b26\u4e32 class Command ( Sparkle ): date = RegexMatch ( r \"(?P<year>\\d+)[.-](?P<month>\\d+)[.-](?P<day>\\d+)\" , help = \"\u65e5\u671f\u7684\u5b57\u7b26\u4e32\" , alt_help = \"YYYY-MM-DD\" ) \u4f7f\u7528\u65b9\u6cd5: YYYY-MM-DD \u4f4d\u7f6e\u5339\u914d: date -> \u5339\u914d YYYY-MM-DD : \u65e5\u671f\u7684\u5b57\u7b26\u4e32 \u4f60\u8fd8\u53ef\u4ee5\u901a\u8fc7 header \u53c2\u6570\u63a7\u5236\u662f\u5426\u8981\u663e\u793a \"\u4f7f\u7528\u65b9\u6cd5\" \u4e00\u884c. Sparkle \u7684\u89e3\u6790\u8fc7\u7a0b \ud83d\udd17 \u5728\u89e3\u6790\u6d88\u606f\u94fe\u65f6, Sparkle.generate \u4f1a\u4f9d\u7167\u5982\u4e0b\u6d41\u7a0b\u89e3\u6790: \u4f7f\u7528 Sparkle.populate_check_match \u89e3\u6790 Twilight \u7684 check_args , \u5e76\u8fd4\u56de\u5269\u4e0b\u90e8\u5206\u7684\u5217\u8868. (\u4f7f\u7528 split \u65b9\u6cd5) \u4f7f\u7528 Sparkle.populate_arg_match \u89e3\u6790 ArgumentMatch \u5e76\u4ece argparse.Namespace \u63d0\u53d6\u7ed3\u679c, \u5411 ArgumentMatch.result \u8d4b\u503c. \u4f7f\u7528 Sparkle.populate_regex_match \u89e3\u6790\u5e76\u8d4b\u503c\u5269\u4e0b\u7684 Match \u5bf9\u8c61. \u6700\u4f73\u5b9e\u8df5 \ud83d\udd17 \u5bf9\u4e8e\u590d\u6742\u7684\u547d\u4ee4, \u7ee7\u627f\u4e00\u4e2a Sparkle \u7c7b\u662f\u6700\u597d\u7684. \u65e0\u8bba\u662f\u7b80\u5355\u8fd8\u662f\u590d\u6742\u7684\u547d\u4ee4, \u4f60\u5e94\u8be5\u4e14\u4ec5\u4ec5\u53ea\u5e94\u8be5\u628a\u547d\u4ee4\u5934\u653e\u5230 check \u53c2\u6570\u4e2d, \u4efb\u4f55\u7a0b\u5e8f\u5e94\u8bbf\u95ee\u7684 Match \u5bf9\u8c61\u90fd\u5e94\u653e\u5728 \u7c7b\u53d8\u91cf \u6216 match \u5b57\u5178 \u91cc. \u6027\u80fd\u8003\u91cf \ud83d\udd17 \u4f60\u53ef\u4ee5\u901a\u8fc7\u8fd0\u884c test/parser_performance.py \u6765\u6d4b\u8bd5 Twilight \u7684\u6027\u80fd. \u5728 i5-10500 \u5904\u7406\u5668\u4e0a, Twilight \u7684\u6027\u80fd\u5927\u7ea6\u4e3a 6000 ~ 10000 msg/s , \u53d6\u51b3\u4e8e Twilight \u7684\u590d\u6742\u7a0b\u5ea6. \u793e\u533a\u6587\u6863\u76f8\u5173\u7ae0\u8282: \u94fe\u63a5","title":"Twilight \u65e7\u7248\u6587\u6863"},{"location":"advance/twilight-old/#twilight-","text":"\u672c\u6a21\u5757\u540d\u5b57\u53d6\u81ea My Little Pony \u4e2d\u7684 Twilight Sparkle . Friendship is magic! \u672c\u6587\u6863\u4ec5\u4f9b 0.6.0 \u4ee5\u524d\u7248\u672c\u4f7f\u7528","title":"Twilight - \u6df7\u5408\u5f0f\u6d88\u606f\u94fe\u5904\u7406\u5668 (\u65e7\u7248\u6587\u6863)"},{"location":"advance/twilight-old/#_1","text":"\u60f3\u5fc5 v4 \u7528\u6237\u90fd\u6216\u591a\u6216\u5c11\u7684\u77e5\u9053 Kanata \u5427. \u5176\u4ecb\u7ecd\u7684 \u6b63\u5219\u8868\u8fbe\u5f0f \u53c2\u6570\u63d0\u53d6/\u5173\u952e\u5b57\u5339\u914d \u975e\u5e38\u7684\u6709\u8da3, \u800c Twilight \u5728\u5176\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u5bf9 argparse \u4e2d\u90e8\u5206\u529f\u80fd\u7684\u652f\u6301.","title":"\u7f18\u8d77"},{"location":"advance/twilight-old/#sparkle","text":"Twilight \u7684\u6700\u4f73\u4f7f\u7528\u65b9\u5f0f\u4e3a\u7ee7\u627f Sparkle \u7c7b\u5e76\u901a\u8fc7 \u7c7b\u53d8\u91cf \u7684\u5f62\u5f0f\u5b9a\u4e49\u5339\u914d\u9879. \u4e4b\u540e\u5728\u5b9e\u4f8b\u5316 Sparkle \u65f6\u6dfb\u52a0\u547d\u4ee4\u5934. class FooSparkle ( Sparkle ): help = ArgumentMatch ( \"--help\" , \"-h\" , action = \"store_true\" ) bar_match = FullMatch ( \"_bar_\" ) regex_match = RegexMatch ( r \"\\d+\" ) wildcard = WildcardMatch () twilight = Twilight ( FooSparkle ([ RegexMatch ( r \"[./!]header\" )]))","title":"\u521b\u5efa Sparkle \u7c7b"},{"location":"advance/twilight-old/#_2","text":"\u5728 Twilight \u5bf9\u8c61\u4e0a\u8c03\u7528 generate(message_chain) \u5373\u53ef\u624b\u52a8\u751f\u6210 Sparkle \u800c\u65e0\u9700\u914d\u5408 Broadcast . \u63d0\u793a \u8fd9\u5728\u672c\u5730\u8c03\u8bd5\u65f6\u975e\u5e38\u6709\u7528. \u6548\u679c >>> twilight . generate ( MessageChain ([ \"!header _bar_ 123 --help pwq external\" ])) FooSparkle( [RegexMatch(matched=True, result=MessageChain([Plain(text='!header')]), pattern=...)], # \u6ce8\u610f\u8fd9\u4e2a. help=ArgumentMatch(matched=True, result=True, pattern=...), bar_match=FullMatch(matched=True, result=MessageChain([Plain(text='_bar_')]), pattern=...), regex_match=RegexMatch(matched=True, result=MessageChain([Plain(text='123')]), pattern=...), wildcard=WildcardMatch(matched=True, result=MessageChain([Plain(text='external')]), pattern=...) )","title":"\u624b\u52a8\u751f\u6210"},{"location":"advance/twilight-old/#match","text":"Match \u672c\u8eab\u4ec5\u4e3a \u62bd\u8c61\u57fa\u7c7b, \u65e0\u6cd5\u88ab\u76f4\u63a5\u5b9e\u4f8b\u5316, \u6709\u4ee5\u4e0b\u51e0\u79cd\u53d8\u4f53: RegexMatch : \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d, \u652f\u6301\u4f20\u5165 re.Flag . FullMatch : \u4e25\u683c\u5168\u5339\u914d. UnionMatch : \u591a\u91cd\u5168\u5339\u914d, \u5373\u5728\u4f20\u5165\u7684 pattern \u4e2d\u4efb\u610f\u7b26\u5408\u4e00\u79cd\u5373\u53ef. ElementMatch : \u5143\u7d20\u5339\u914d, \u53ef\u5339\u914d Plain \u4ee5\u5916\u7684\u5143\u7d20\u7c7b\u578b. WildcardMatch : \u4efb\u610f\u5339\u914d, \u53ef\u4ee5\u901a\u8fc7 greed \u53c2\u6570\u786e\u5b9a\u662f\u5426\u8d2a\u5a6a\u5339\u914d. ParamMatch : \u4efb\u610f\u5339\u914d, \u4f46\u662f\u901a\u8fc7\u5f15\u53f7\u8d77\u6b62\u4e0e\u7a7a\u683c\u786e\u5b9a\u5339\u914d. ArgumentMatch : \u53c2\u6570\u5339\u914d, \u5728 match \u5b57\u5178 \u6216 \u7c7b\u53d8\u91cf \u4e2d\u6ca1\u6709\u4ee5\u4e0a\u4e09\u79cd\u5339\u914d\u65f6\u624d\u5141\u8bb8\u4e0d\u4ee5 \"-\" \u6253\u5934. \u8fd9\u4e9b Match \u7c7b\u53ef\u63a5\u53d7\u4ee5\u4e0b\u53c2\u6570: pattern : \u5339\u914d\u9879, \u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32 ( ArgumentMatch \u4e0e UnionMatch \u53ef\u4e3a\u591a\u4e2a, ElementMatch \u5e94\u4f20\u5165\u7c7b\u578b\u800c\u975e\u5b57\u7b26\u4e32). \u5728 WildcardMatch \u4e0a\u4e0d\u53ef\u7528 optional : \u662f\u5426\u53ef\u9009, \u5728 ArgumentMatch \u4e0a\u4f1a\u901a\u8fc7\u4f20\u5165\u7684 pattern \u786e\u5b9a\u662f\u5426\u6709\u6548. (\u5728\u975e ArgumentMatch \u4e0a\u9ed8\u8ba4\u4e3a False, \u5728 ArgumentMatch \u4e0a\u9ed8\u8ba4\u4e3a True.) space : \u5982\u4f55\u5904\u7406\u5c3e\u968f\u7a7a\u683c. (\u4e3a SpacePolicy \u5bf9\u8c61) \u5728 ArgumentMatch \u4e0a\u4e0d\u53ef\u7528 help : \u5e2e\u52a9\u5b57\u7b26\u4e32, \u5728 Twilight.get_help \u4e2d\u4f7f\u7528. alt_help : \u66ff\u4ee3\u5e2e\u52a9\u5b57\u7b26\u4e32, \u5728 Twilight.get_help \u4e2d\u4f7f\u7528. \u5728\u5b8c\u6210 Twilight \u751f\u6210\u540e, Twilight \u9644\u5e26\u7684 Match \u6709\u4ee5\u4e0b\u5c5e\u6027: matched : \u6807\u5fd7\u7740\u5339\u914d\u5230\u7684\u5bf9\u8c61\u662f\u5426\u6709\u5185\u5bb9. result : \u5339\u914d\u7ed3\u679c. regex_match : \u4ec5 RegexMatch \u53ca\u5176\u5b50\u7c7b\u62e5\u6709, \u4e3a\u539f\u6765\u7684 re.Match \u5bf9\u8c61.","title":"Match"},{"location":"advance/twilight-old/#spacepolicy","text":"SpacePolicy \u662f\u4e00\u4e2a enum.Enum \u7c7b, \u6709\u5982\u4e0b\u5e38\u91cf: NOSPACE : \u4e0d\u9644\u5e26\u5c3e\u968f\u7a7a\u683c. PRESERVE : \u9884\u7559\u5c3e\u968f\u7a7a\u683c. (\u9ed8\u8ba4) FORCE : \u5f3a\u5236\u9700\u8981\u5c3e\u968f\u7a7a\u683c. \u5b83\u4eec\u5e94\u88ab\u4f5c\u4e3a \u4e0d\u900f\u660e\u5bf9\u8c61 \u4f7f\u7528.","title":"SpacePolicy \u5bf9\u8c61"},{"location":"advance/twilight-old/#twilight-sparkle","text":"Sparkle \u5728\u5b9e\u4f8b\u5316\u65f6, \u53ef\u63a5\u53d7\u4e00\u4e2a \u989d\u5916 \u53ef\u8fed\u4ee3\u5bf9\u8c61 check \u4e0e \u989d\u5916\u5b57\u5178 match , \u4f5c\u7528\u5982\u4e0b\uff1a check_args \u4ec5\u5e94\u5f53\u5bb9\u7eb3 RegexMatch \u4e0e FullMatch \u5bf9\u8c61, \u7528\u4e8e\u5bf9 MessageChain \u8fdb\u884c\u9884\u5148\u68c0\u67e5 matches \u4e3a\u4e00\u4e2a Dict[str, Match] \u6620\u5c04, \u76f8\u5f53\u4e8e\u62d3\u5c55 Twilight.__class__.__dict__ \u6bd4\u5982, \u8fd9\u51e0\u79cd\u5199\u6cd5\u5176\u5b9e\u5728 \u8fd0\u884c\u65f6 \u7b49\u4ef7. \u4f7f\u7528 \u6d3e\u751f\u7c7b \u76f4\u63a5 \u5b9e\u4f8b\u5316 \u901a\u8fc7 Twilight \u95f4\u63a5\u5b9e\u4f8b\u5316 class FooSparkle ( Sparkle ): match = RegexMatch ( r \"\\d+\" ) t = Twilight ( FooSparkle ([ RegexMatch ( r \"[!.]header\" )])) t = Twilight ( FooSparkle ) t = Twilight ( Sparkle ([ RegexMatch ( r \"[!.]header\" )], { \"match\" : RegexMatch ( r \"\\d+\" )})) t = Twilight ( Sparkle ([ RegexMatch ( r \"[!.]header\" )], { \"match\" : RegexMatch ( r \"\\d+\" )})) \u6ce8\u610f \u5982\u679c\u4f60\u60f3\u8981\u68c0\u67e5 \"\u547d\u4ee4\u5934\", \u8bf7\u4f7f\u7528 check \u800c\u975e\u5411 Sparkle \u6dfb\u52a0\u7c7b\u53d8\u91cf. Sparkle \u5728\u5b9e\u4f8b\u5316\u65f6, \u63a5\u53d7\u4ee5\u4e0b\u53d8\u4f53: check: Dict check: Iterable, match: Dict @overload def __init__ ( self , check : Dict [ str , Match ], * , description : str = \"\" , epilog : str = \"\" , ): \"\"\" Args: check (Dict[str, Match]): \u5339\u914d\u7684\u6620\u5c04. \"\"\" @overload def __init__ ( self , check : Iterable [ RegexMatch ], match : Dict [ str , Match ], * , description : str = \"\" , epilog : str = \"\" , ): \"\"\" Args: check (Iterable[RegexMatch]): \u7528\u4e8e\u68c0\u67e5\u7684 Match \u5bf9\u8c61. match (Dict[str, Match]): \u989d\u5916\u5339\u914d\u7684\u6620\u5c04. \"\"\" description (str, optional): \u672c Sparkle \u7684\u524d\u7f6e\u63cf\u8ff0, \u5728 add_help \u4e2d\u7528\u5230. epilog (str, optional): \u672c Sparkle \u7684\u540e\u7f6e\u63cf\u8ff0, \u5728 add_help \u4e2d\u7528\u5230. Twilight \u53ef\u4f20\u5165 map_params \u5b57\u5178\u7528\u4e8e\u63a7\u5236 MessageChain.asMappingString \u7684\u884c\u4e3a.","title":"Twilight \u4e0e Sparkle \u7684\u5b9e\u4f8b\u5316"},{"location":"advance/twilight-old/#from_command","text":"\u672c \u7c7b\u65b9\u6cd5 \u5728 Twilight \u4e0e Sparkle \u7c7b\u4e0a\u5747\u53ef\u4f7f\u7528, \u4e0d\u8fc7\u8bf7\u4e0d\u8981\u5728 Sparkle \u5b50\u7c7b\u4e0a\u4f7f\u7528 \u901a\u8fc7 command {0} {1} \u7684\u7c7b shell \u5f62\u5f0f\u5b9a\u4e49\u53c2\u6570, \u5b83\u53ef\u4ee5\u5feb\u901f\u5730\u751f\u6210\u6307\u4ee4\u5904\u7406\u5668. [a|b] \u7684\u5f62\u5f0f\u5141\u8bb8\u4f60\u5b9a\u4e49\u9009\u62e9\u6027\u53c2\u6570. ( a \u6216 b ) \u8bf7\u4f7f\u7528 r-string \u539f\u59cb\u5b57\u7b26\u4e32\u4e2d\u7684\u524d\u5bfc\u53cd\u659c\u6760\u8f6c\u4e49, \u672a\u8f6c\u79fb\u7684\u5d4c\u5957\u62ec\u53f7\u4f1a\u5bfc\u81f4\u9519\u8bef. \u5426\u5219\u4f60\u53ef\u80fd\u9047\u5230 \u53cd\u659c\u6760\u707e\u96be . \u503c\u5f97\u6307\u51fa\u7684\u662f, f-string \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u53cc\u62ec\u53f7\u8f6c\u4e49 ( {{ \u4e0e }} ) \u662f\u65e0\u6548\u7684. \u540c\u65f6, \u4f60\u53ef\u4ee5\u4f20\u5165 extra_arg_mapping ( Dict[str, ArgumentMatch] ) \u6765\u6dfb\u52a0\u989d\u5916\u7684 ArgumentMatch . \u76f4\u63a5\u5b9e\u4f8b\u5316 from_command Twilight ( Sparkle ( [ UnionMatch ( \".permission\" , \".perm\" , space = FORCE ), FullMatch ( \"user\" , space = FORCE ), ParamMatch ( space = FORCE ), ParamMatch ( space = NOSPACE ), ], { ArgumentMatch ( \"--verbose\" , \"-v\" , action = \"store_true\" ), }, ), map_params =... , ) Twilight . from_command ( \"[.permission|.perm] user {0} {1} \" , { ArgumentMatch ( \"--verbose\" , \"-v\" , action = \"store_true\" ), }, map_params =... , ) \u8fd9\u4e8c\u8005\u7b49\u4ef7. \u4f60\u53ef\u4ee5\u901a\u8fc7 param_1, param_2 = sparkle[ParamMatch] \u7684\u5f62\u5f0f\u83b7\u53d6 ParamMatch . \u8be6\u89c1\u4e0b\u4e00\u8282.","title":"from_command"},{"location":"advance/twilight-old/#match_1","text":"Match \u5bf9\u8c61\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u51e0\u79cd\u65b9\u5f0f\u63d0\u53d6: \u82e5\u662f\u5728\u5b9e\u4f8b\u5316 Sparkle \u65f6\u6dfb\u52a0\u7684, \u90a3\u53ea\u80fd\u901a\u8fc7 Sparkle[int] \u7684\u5f62\u5f0f\u63d0\u53d6. \u5426\u5219, \u53ef\u901a\u8fc7 Sparkle[match_name] \u4e0e Sparkle.match_name \u4e24\u79cd\u65b9\u5f0f\u63d0\u53d6. \u63d0\u793a \u4f60\u53ef\u4ee5\u901a\u8fc7 Sparkle[match_class] \u5f62\u5f0f\u63d0\u53d6 match_class \u7c7b\u578b\u7684 Match \u5bf9\u8c61. \u8fd8\u53ef\u4ee5\u901a\u8fc7 Sparkle[match_class, index] \u63d0\u53d6\u7b2c index \u4e2a match_class \u7c7b\u578b\u7684 Match \u5bf9\u8c61 (\u4ece 0 \u8ba1\u6570). \u8fd9\u51e0\u79cd\u65b9\u5f0f\u4e0e\u8c03\u7528 Sparkle.get_match(...) \u7b49\u4ef7.","title":"\u63d0\u53d6 Match \u5bf9\u8c61"},{"location":"advance/twilight-old/#broadcast","text":"Twilight \u5e94\u4f5c\u4e3a dispatcher \u4f20\u5165 broadcast.receiver / ListenerSchema \u4e2d. \u5728 receiver \u51fd\u6570\u7684\u7c7b\u578b\u6807\u6ce8\u4e2d, \u901a\u8fc7 \u6807\u6ce8\u53c2\u6570\u4e3a Sparkle \u83b7\u53d6\u5f53\u524d Sparkle , \u901a\u8fc7 name: Match \u7684\u5f62\u5f0f\u83b7\u53d6 name \u5bf9\u5e94\u7684\u5339\u914d\u5bf9\u8c61. \u50cf\u8fd9\u6837: @broadcast . receiver ( MessageEvent , dispatchers = [ Twilight ( Sparkle ( [ FullMatch ( \".command\" )], { \"arg\" : RegexMatch ( r \"\\d+\" , optional = True )} )) ]) async def reply ( ... , arg : RegexMatch ): ... \u4f7f\u7528 Sparkle \u4e0e Match \u7684\u5b50\u7c7b\u8fdb\u884c\u6807\u6ce8\u4e5f\u662f\u53ef\u4ee5\u7684. \u4e00\u65e6\u5339\u914d\u5931\u8d25 ( generate \u629b\u51fa\u5f02\u5e38), Broadcast \u7684\u672c\u6b21\u6267\u884c\u5c31\u4f1a\u88ab\u53d6\u6d88.","title":"\u914d\u5408 Broadcast \u4f7f\u7528"},{"location":"advance/twilight-old/#_3","text":"\u901a\u8fc7 Sparkle.get_help \u65b9\u6cd5\u53ef\u4ee5\u65b9\u4fbf\u7684\u83b7\u53d6\u5e2e\u52a9. \u793a\u4f8b \u5047\u8bbe\u4f60\u60f3\u8981\u521b\u5efa\u4e00\u4e2a\u53ef\u4ee5\u663e\u793a\u901a\u8fc7 \u65e5\u671f \u663e\u793a \u661f\u671f \u7684\u547d\u4ee4: class Command ( Sparkle ): date = RegexMatch ( r \"(?P<year>\\d+)[.-](?P<month>\\d+)[.-](?P<day>\\d+)\" , help = \"\u65e5\u671f\u7684\u5b57\u7b26\u4e32\" ) help = ArgumentMatch ( \"--help\" , \"-h\" , action = \"store_true\" , help = \"\u663e\u793a\u672c\u5e2e\u52a9.\" ) # \u8bed\u6cd5\u4e0e argparse.ArgumentParser.add_argument \u57fa\u672c\u76f8\u540c # \u6ce8\u610f help \u662f\u624b\u52a8\u6dfb\u52a0\u7684 print ( Command () . get_help ()) # \u6ce8\u610f\u9700\u8981\u5728 Sparkle \u5b9e\u4f8b\u4e0a\u8c03\u7528. \u6548\u679c\u5982\u4e0b: \u4f7f\u7528\u65b9\u6cd5: (?P<year>\\d+)[.-](?P<month>\\d+)[.-](?P<day>\\d+) [--help] \u4f4d\u7f6e\u5339\u914d: date -> \u5339\u914d (?P<year>\\d+)[.-](?P<month>\\d+)[.-](?P<day>\\d+) : \u65e5\u671f\u7684\u5b57\u7b26\u4e32 \u53c2\u6570\u5339\u914d: --help, -h \u663e\u793a\u672c\u5e2e\u52a9.","title":"\u521b\u5efa\u5e2e\u52a9"},{"location":"advance/twilight-old/#description-epilog-alt_help","text":"\u56de\u5230\u521a\u624d\u7684\u793a\u4f8b. \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 description \u4e0e epilog \u63a7\u5236\u5728\u5e2e\u52a9\u5185\u5bb9\u524d\u540e\u6dfb\u52a0\u7684\u6587\u672c. \u5728\u5b9a\u4e49\u7c7b\u65f6\u4f20\u5165 \u5728\u5b9e\u4f8b\u5316\u65f6\u4f20\u5165 \u5728\u8c03\u7528 get_help \u65f6\u4f20\u5165 class Command ( Sparkle , description =... , epilog =... ): ... Command ( description =... , epilog =... ) . get_help () Command () . get_help ( description =... , epilog =... ) \u4ece\u5de6\u5f80\u53f3, \u4f18\u5148\u7ea7\u9012\u589e. \u800c Match \u7684 alt_help \u53ef\u4ee5\u63a7\u5236\u90e8\u5206\u8be5\u5339\u914d\u5bf9\u8c61\u7684\u5e2e\u52a9\u4fe1\u606f. \u5bf9\u6bd4 \u524d \u540e class Command ( Sparkle ): date = RegexMatch ( r \"(?P<year>\\d+)[.-](?P<month>\\d+)[.-](?P<day>\\d+)\" , help = \"\u65e5\u671f\u7684\u5b57\u7b26\u4e32\" ) \u4f7f\u7528\u65b9\u6cd5: (?P<year>\\d+)[.-](?P<month>\\d+)[.-](?P<day>\\d+) \u4f4d\u7f6e\u5339\u914d: date -> \u5339\u914d (?P<year>\\d+)[.-](?P<month>\\d+)[.-](?P<day>\\d+) : \u65e5\u671f\u7684\u5b57\u7b26\u4e32 class Command ( Sparkle ): date = RegexMatch ( r \"(?P<year>\\d+)[.-](?P<month>\\d+)[.-](?P<day>\\d+)\" , help = \"\u65e5\u671f\u7684\u5b57\u7b26\u4e32\" , alt_help = \"YYYY-MM-DD\" ) \u4f7f\u7528\u65b9\u6cd5: YYYY-MM-DD \u4f4d\u7f6e\u5339\u914d: date -> \u5339\u914d YYYY-MM-DD : \u65e5\u671f\u7684\u5b57\u7b26\u4e32 \u4f60\u8fd8\u53ef\u4ee5\u901a\u8fc7 header \u53c2\u6570\u63a7\u5236\u662f\u5426\u8981\u663e\u793a \"\u4f7f\u7528\u65b9\u6cd5\" \u4e00\u884c.","title":"\u4f7f\u7528 description, epilog \u4e0e alt_help \u63a7\u5236\u5e2e\u52a9\u751f\u6210"},{"location":"advance/twilight-old/#sparkle_1","text":"\u5728\u89e3\u6790\u6d88\u606f\u94fe\u65f6, Sparkle.generate \u4f1a\u4f9d\u7167\u5982\u4e0b\u6d41\u7a0b\u89e3\u6790: \u4f7f\u7528 Sparkle.populate_check_match \u89e3\u6790 Twilight \u7684 check_args , \u5e76\u8fd4\u56de\u5269\u4e0b\u90e8\u5206\u7684\u5217\u8868. (\u4f7f\u7528 split \u65b9\u6cd5) \u4f7f\u7528 Sparkle.populate_arg_match \u89e3\u6790 ArgumentMatch \u5e76\u4ece argparse.Namespace \u63d0\u53d6\u7ed3\u679c, \u5411 ArgumentMatch.result \u8d4b\u503c. \u4f7f\u7528 Sparkle.populate_regex_match \u89e3\u6790\u5e76\u8d4b\u503c\u5269\u4e0b\u7684 Match \u5bf9\u8c61.","title":"Sparkle \u7684\u89e3\u6790\u8fc7\u7a0b"},{"location":"advance/twilight-old/#_4","text":"\u5bf9\u4e8e\u590d\u6742\u7684\u547d\u4ee4, \u7ee7\u627f\u4e00\u4e2a Sparkle \u7c7b\u662f\u6700\u597d\u7684. \u65e0\u8bba\u662f\u7b80\u5355\u8fd8\u662f\u590d\u6742\u7684\u547d\u4ee4, \u4f60\u5e94\u8be5\u4e14\u4ec5\u4ec5\u53ea\u5e94\u8be5\u628a\u547d\u4ee4\u5934\u653e\u5230 check \u53c2\u6570\u4e2d, \u4efb\u4f55\u7a0b\u5e8f\u5e94\u8bbf\u95ee\u7684 Match \u5bf9\u8c61\u90fd\u5e94\u653e\u5728 \u7c7b\u53d8\u91cf \u6216 match \u5b57\u5178 \u91cc.","title":"\u6700\u4f73\u5b9e\u8df5"},{"location":"advance/twilight-old/#_5","text":"\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fd0\u884c test/parser_performance.py \u6765\u6d4b\u8bd5 Twilight \u7684\u6027\u80fd. \u5728 i5-10500 \u5904\u7406\u5668\u4e0a, Twilight \u7684\u6027\u80fd\u5927\u7ea6\u4e3a 6000 ~ 10000 msg/s , \u53d6\u51b3\u4e8e Twilight \u7684\u590d\u6742\u7a0b\u5ea6. \u793e\u533a\u6587\u6863\u76f8\u5173\u7ae0\u8282: \u94fe\u63a5","title":"\u6027\u80fd\u8003\u91cf"},{"location":"advance/twilight/","text":"Twilight - \u6df7\u5408\u5f0f\u6d88\u606f\u94fe\u5904\u7406\u5668 \ud83d\udd17 \u672c\u6a21\u5757\u540d\u5b57\u53d6\u81ea My Little Pony \u4e2d\u7684 Twilight Sparkle . Friendship is magic! \u7f18\u8d77 \ud83d\udd17 \u60f3\u5fc5 v4 \u7528\u6237\u90fd\u6216\u591a\u6216\u5c11\u7684\u77e5\u9053 Kanata \u5427. \u5176\u4ecb\u7ecd\u7684 \u6b63\u5219\u8868\u8fbe\u5f0f \u53c2\u6570\u63d0\u53d6/\u5173\u952e\u5b57\u5339\u914d \u975e\u5e38\u7684\u6709\u8da3, \u800c Twilight \u5728\u5176\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u5bf9 argparse \u4e2d\u90e8\u5206\u529f\u80fd\u7684\u652f\u6301. \u5feb\u901f\u5f00\u59cb \ud83d\udd17 from graia.ariadne.message.parser.twilight import Twilight , FullMatch , ParamMatch , RegexResult twilight = Twilight ([ FullMatch ( \"\u6307\u4ee4\" ), ParamMatch () @ \"param\" ]) @broadcast . receiver ( GroupMessage , dispatchers = [ twilight ]) async def twilight_handler ( event : GroupMessage , app : Ariadne , param : RegexResult ): await app . sendMessage ( event , \"\u6536\u5230\u6307\u4ee4: \" + param . result ) \u63a5\u4e0b\u6765, \u8ba9\u6211\u4eec\u89e3\u6790\u4e00\u4e0b\u8fd9\u6bb5\u4ee3\u7801: \u521b\u5efa Twilight \ud83d\udd17 twilight = Twilight ([ FullMatch ( \"\u6307\u4ee4\" ), ParamMatch () @ \"param\" ]) \u8fd9\u91cc\u8bf4\u660e\u6211\u4eec\u9700\u8981\u5339\u914d\u5185\u5bb9\u4e3a \"\u6307\u4ee4 xxx\" \u7684\u6d88\u606f, \u5e76\u4e14\u628a \"xxx\" \u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9 param \u53d8\u91cf. Twilight \u63a5\u53d7\u4e00\u4e2a\u7531 Match \u7ec4\u6210\u7684\u5217\u8868, \u4e4b\u540e\u5bf9\u4e8e\u6bcf\u6761\u6d88\u606f\u5229\u7528 [ re ][] \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u4e0e argparse \u8fdb\u884c\u89e3\u6790 \u624b\u52a8\u751f\u6210 \u5728 Twilight \u5bf9\u8c61\u4e0a\u8c03\u7528 generate(message_chain) \u5373\u53ef\u624b\u52a8\u751f\u6210 Sparkle \u800c\u65e0\u9700\u914d\u5408 Broadcast . \u8fd9\u5bf9\u4e8e\u672c\u5730\u8c03\u8bd5\u5f88\u6709\u7528. \u5206\u914d\u53c2\u6570 \ud83d\udd17 ParamMatch () @ \"param\" \u8fd9\u4e00\u6bb5\u7684 ParamMatch() @ \"param\" \u8bf4\u660e\u8fd9\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\u5185\u7684 param \u5f62\u53c2. \u4e5f\u5c31\u662f param: RegexResult \u8fd9\u91cc. \u4e0e\u6b64\u540c\u65f6, \u4ee5\u4e0b\u7528\u6cd5\u7b49\u6548. >>> ParamMatch () . param ( \"param\" ) >>> \"param\" @ ParamMatch () >>> \"param\" << ParamMatch () >>> ParamMatch () >> \"param\" \u6ce8\u610f\u4f4d\u79fb\u8fd0\u7b97\u7b26 >> \u4e0e << \u59cb\u7ec8\u671d\u5411\u5b57\u7b26\u4e32. \u4e3a\u4ec0\u4e48\u652f\u6301\u8fd9\u4e9b\u8fd0\u7b97\u7b26? >> \u4e0e << \u652f\u6301\u7684\u7075\u611f\u6e90\u4e8e\u5176\u4ed6\u8bed\u8a00\u4e2d\u5bf9\u4e8e\u6587\u4ef6\u6d41\u7684\u64cd\u4f5c: cin >> var ; cout << \"value\" ; \u6211\u4eec\u501f\u9274\u4e86\u8fd9\u4e9b\u8bed\u8a00\u7684\u8bbe\u8ba1, \u5c06 >> \u4e0e << \u7684\u8fd0\u7b97\u7b26\u8bbe\u8ba1\u4e3a\u652f\u6301 str / int \u7c7b\u578b\u4ee5\u8fdb\u884c\u53c2\u6570\u5206\u6d3e. Match \ud83d\udd17 RegexMatch \ud83d\udd17 RegexMatch \u662f Twilight \u7684\u57fa\u7840, \u5b83\u53ef\u4ee5\u5339\u914d\u6307\u5b9a\u7684\u6b63\u5219\u8868\u8fbe\u5f0f. FullMatch UnionMatch ParamMatch WildcardMatch \u90fd\u662f\u57fa\u4e8e RegexMatch \u7684\u5305\u88c5\u7c7b. FullMatch : \u5b8c\u6574\u5339\u914d\u5185\u5bb9 UnionMatch : \u5339\u914d\u591a\u4e2a\u5185\u5bb9 ParamMatch : \u5339\u914d\u6307\u5b9a\u53c2\u6570 WildcardMatch : \u5339\u914d\u4efb\u610f\u5185\u5bb9 flags \u65b9\u6cd5 \ud83d\udd17 \u53ef\u4ee5\u901a\u8fc7 flags \u65b9\u6cd5\u8bbe\u7f6e\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u5339\u914d\u6807\u8bb0. >>> RegexMatch ( r \"\\d+ # digits\" ) . flags ( re . V ) # \u8bbe\u7f6e re.VERBOSE \u6807\u8bb0 space \u65b9\u6cd5 \ud83d\udd17 SpacePolicy \u662f\u4e00\u4e2a enum.Enum \u7c7b, \u6709\u5982\u4e0b\u5e38\u91cf: NOSPACE : \u4e0d\u9644\u5e26\u5c3e\u968f\u7a7a\u683c. PRESERVE : \u9884\u7559\u5c3e\u968f\u7a7a\u683c. (\u9ed8\u8ba4) FORCE : \u5f3a\u5236\u9700\u8981\u5c3e\u968f\u7a7a\u683c. \u5b83\u4eec\u5e94\u88ab\u4f5c\u4e3a \u4e0d\u900f\u660e\u5bf9\u8c61 \u4f7f\u7528. SpacePolicy \u5e94\u8be5\u4f20\u9012\u7ed9 RegexMatch.space \u65b9\u6cd5, \u7528\u4e8e\u786e\u5b9a RegexMatch \u5c3e\u968f\u7a7a\u683c\u7b56\u7565. ArgumentMatch \ud83d\udd17 ArgumentMatch \u601d\u8def\u4e0e RegexMatch \u4e0d\u540c, \u5b83\u57fa\u4e8e argparse \u8fdb\u884c\u53c2\u6570\u89e3\u6790. ArgumentMatch \u7684\u521d\u59cb\u5316\u65b9\u6cd5\u4e0e add_argument \u975e\u5e38\u76f8\u4f3c. \u53d7\u9650\u4e8e\u7bc7\u5e45, \u8fd9\u91cc\u6ca1\u6cd5\u8be6\u7ec6\u5c55\u5f00. \u53ea\u80fd\u7ed9\u51fa\u51e0\u4e2a\u7528\u4f8b: >>> ArgumentMatch ( \"-s\" , \"--switch\" , action = \"store_true\" ) # \u5f00\u5173 >>> ArgumentMatch ( \"-o\" , \"--opt\" , type = str , choices = [ \"head\" , \"body\" ]) # \u53ea\u5141\u8bb8 \"head\" \u6216 \"body\" >>> ArgumentMatch ( \"-m\" , choices = MessageChain ([ \"choice_a\" , \"choice_b\" ])) # \u6ce8\u610f\u9ed8\u8ba4\u662f MessageChain, \u6240\u4ee5\u8981\u8fd9\u6837\u5199 \u914d\u5408 Broadcast \u4f7f\u7528 \ud83d\udd17 Twilight \u5e94\u4f5c\u4e3a dispatcher \u4f20\u5165 broadcast.receiver / ListenerSchema \u4e2d. \u5728 receiver \u51fd\u6570\u7684\u7c7b\u578b\u6807\u6ce8\u4e2d, \u901a\u8fc7 \u6807\u6ce8\u53c2\u6570\u4e3a Sparkle \u83b7\u53d6\u5f53\u524d Sparkle , \u901a\u8fc7 name: Match \u7684\u5f62\u5f0f\u83b7\u53d6 name \u5bf9\u5e94\u7684\u5339\u914d\u5bf9\u8c61. \u50cf\u8fd9\u6837: @broadcast . receiver ( MessageEvent , dispatchers = [ Twilight ( [ FullMatch ( \".command\" ), \"arg\" @ RegexMatch ( r \"\\d+\" , optional = True ) ] ) ] ) async def reply ( ... , arg : RegexResult ): ... \u4f7f\u7528 Sparkle , Match , MatchResult \u7684\u5b50\u7c7b\u8fdb\u884c\u6807\u6ce8\u90fd\u662f\u53ef\u4ee5\u7684. \u4e00\u65e6\u5339\u914d\u5931\u8d25 ( generate \u629b\u51fa\u5f02\u5e38), Broadcast \u7684\u672c\u6b21\u6267\u884c\u5c31\u4f1a\u88ab\u53d6\u6d88. MatchResult \ud83d\udd17 RegexResult \u4e0e ArgResult \u90fd\u662f MatchResult \u7684\u5b50\u7c7b. \u8fd9\u4e8c\u8005\u65b9\u4fbf\u5730\u6807\u6ce8\u4e86\u5339\u914d\u7ed3\u679c\u4fe1\u606f. MatchResult \u7684\u5c5e\u6027: MatchResult.matched : \u5bf9\u5e94\u7684 Match \u5bf9\u8c61\u662f\u5426\u5339\u914d. MatchResult.origin : \u539f\u59cb Match \u5bf9\u8c61. MatchResult.result : \u5339\u914d\u7ed3\u679c. ResultValue \u88c5\u9970\u5668 \ud83d\udd17 ResultValue \u4f5c\u4e3a\u88c5\u9970\u5668\u4f7f\u7528, \u53ef\u4ee5\u76f4\u63a5\u83b7\u53d6\u5339\u914d\u7ed3\u679c\u800c\u4e0d\u9700\u8981\u4ece Match.result \u63d0\u53d6. @broadcast . receiver ( MessageEvent , dispatchers = [ Twilight ( [ FullMatch ( \".command\" ), \"arg\" @ RegexMatch ( r \"\\d+\" , optional = True ) ] ) ] ) async def reply ( ... , arg : MessageChain = ResultValue ()): # \u4fdd\u8bc1\u4e0d\u4f1a\u88ab\u6b63\u5e38\u7684\u6d41\u7a0b\u8986\u76d6 ... int \u7c7b\u578b\u7684\u53c2\u6570\u540d \ud83d\udd17 \u4f60\u53ef\u4ee5\u8fd9\u6837: ParamMatch () @ 1 \u4e4b\u540e\u83b7\u53d6 Sparkle \u5bf9\u8c61, \u5e76\u5bf9\u5176\u8fdb\u884c\u7d22\u5f15\u64cd\u4f5c. p : RegexResult = Sparkle [ 1 ] \u8fd9\u91cc\u53ea\u662f\u987a\u5634\u4e00\u63d0\uff0c\u56e0\u4e3a\u6709\u4e9b\u65f6\u5019\u8fd9\u4e2a\u4e0d\u5982 str \u6765\u7684\u65b9\u4fbf. \u751f\u6210\u5e2e\u52a9 \ud83d\udd17 \u4f7f\u7528 Twilight.get_help \u53ef\u4ee5\u83b7\u5f97\u5e2e\u52a9\u6587\u672c(\u5df2\u8fdb\u884c\u7f29\u8fdb\u5904\u7406). \u5bf9\u4e8e ArgumentMatch , \u7ed3\u679c\u4e0e argparse.ArgumentParser.format_help \u76f8\u8fd1. RegexMatch \u4f1a\u5728\u6709\u53c2\u6570\u5206\u53d1\u4f4d\u7f6e\u65f6\u663e\u793a\u5176\u5206\u53d1\u76ee\u6807. ( name -> help \u5f62\u5f0f) sep \u63a7\u5236\u4e86 name -> help \u683c\u5f0f\u4e2d \u4f7f\u7528\u7684\u5206\u5272\u5f62\u5f0f (\u9ed8\u8ba4\u4e3a \" -> \" ) \u5982\u679c\u6ca1\u6709\u901a\u8fc7 help \u65b9\u6cd5\u4f20\u5165\u5e2e\u52a9\u5b57\u7b26\u4e32, \u5219 UnionMatch \u4e0e ParamMatch \u4f1a\u5c1d\u8bd5\u751f\u6210\u4e00\u4e2a ( ParamMatch \u4e3a \"\u53c2\u6570\" , UnionMatch \u4f1a\u4ece pattern \u63a8\u65ad). \u5426\u5219, \u8be5 RegexMatch \u4f1a\u88ab\u5ffd\u7565. \u4f20\u5165\u7684 usage \u540e\u4f1a\u6dfb\u52a0\u4e0a\u6765\u81ea argparse \u81ea\u52a8\u751f\u6210\u7684\u53c2\u6570\u9009\u9879, \u6240\u4ee5 usage \u4e2d\u53ea\u5e94\u63cf\u8ff0 RegexMatch \u63d0\u4f9b\u7684\u5339\u914d. description \u4e0e epilog \u53c2\u6570\u542b\u4e49\u4e0e argparse.ArgumentParser \u4e2d\u8bed\u4e49\u76f8\u540c. \u4f60\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u5b9e\u4f8b\u770b\u770b\u5b83\u7684\u6548\u679c: >>> print ( ... Twilight ( ... [ ... FullMatch ( \".test\" ) . help ( \"\u5339\u914d .test\" ), ... \"union\" @ UnionMatch ( \"A\" , \"B\" , \"C\" ), ... \"at\" @ ElementMatch ( At ), ... \"op1\" @ ParamMatch (), ... \"op2\" @ ParamMatch () . help ( \"\u64cd\u4f5c\u7b26\" ), ... \"help\" @ ArgumentMatch ( \"--help\" , \"-h\" , action = \"store_true\" ) . help ( \"\u663e\u793a\u8be5\u5e2e\u52a9\" ), ... \"arg\" @ WildcardMatch () . flags ( re . DOTALL ), ... \"v\" @ ArgumentMatch ( \"--verbose\" , \"-v\" , action = \"store_true\" ) . help ( \"\u663e\u793a\u8be6\u7ec6\u4fe1\u606f\" ), ... ] ... ) . get_help ( \"\u7528\u6cd5\u5b57\u7b26\u4e32\" , \"\u63cf\u8ff0\" , \"\u603b\u7ed3\" ) ... ) \u7528\u6cd5\u5b57\u7b26\u4e32 [--help] [--verbose] \u63cf\u8ff0 \u5339\u914d\u9879: \u5339\u914d .test union -> \u5728 ['A', 'B', 'C'] \u4e2d\u9009\u62e9\u4e00\u9879 at -> At \u5143\u7d20 op1 -> \u53c2\u6570 op2 -> \u64cd\u4f5c\u7b26 \u53ef\u9009\u53c2\u6570: --help, -h \u663e\u793a\u8be5\u5e2e\u52a9 --verbose, -v \u663e\u793a\u8be6\u7ec6\u4fe1\u606f \u603b\u7ed3","title":"Twilight"},{"location":"advance/twilight/#twilight-","text":"\u672c\u6a21\u5757\u540d\u5b57\u53d6\u81ea My Little Pony \u4e2d\u7684 Twilight Sparkle . Friendship is magic!","title":"Twilight - \u6df7\u5408\u5f0f\u6d88\u606f\u94fe\u5904\u7406\u5668"},{"location":"advance/twilight/#_1","text":"\u60f3\u5fc5 v4 \u7528\u6237\u90fd\u6216\u591a\u6216\u5c11\u7684\u77e5\u9053 Kanata \u5427. \u5176\u4ecb\u7ecd\u7684 \u6b63\u5219\u8868\u8fbe\u5f0f \u53c2\u6570\u63d0\u53d6/\u5173\u952e\u5b57\u5339\u914d \u975e\u5e38\u7684\u6709\u8da3, \u800c Twilight \u5728\u5176\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u5bf9 argparse \u4e2d\u90e8\u5206\u529f\u80fd\u7684\u652f\u6301.","title":"\u7f18\u8d77"},{"location":"advance/twilight/#_2","text":"from graia.ariadne.message.parser.twilight import Twilight , FullMatch , ParamMatch , RegexResult twilight = Twilight ([ FullMatch ( \"\u6307\u4ee4\" ), ParamMatch () @ \"param\" ]) @broadcast . receiver ( GroupMessage , dispatchers = [ twilight ]) async def twilight_handler ( event : GroupMessage , app : Ariadne , param : RegexResult ): await app . sendMessage ( event , \"\u6536\u5230\u6307\u4ee4: \" + param . result ) \u63a5\u4e0b\u6765, \u8ba9\u6211\u4eec\u89e3\u6790\u4e00\u4e0b\u8fd9\u6bb5\u4ee3\u7801:","title":"\u5feb\u901f\u5f00\u59cb"},{"location":"advance/twilight/#twilight","text":"twilight = Twilight ([ FullMatch ( \"\u6307\u4ee4\" ), ParamMatch () @ \"param\" ]) \u8fd9\u91cc\u8bf4\u660e\u6211\u4eec\u9700\u8981\u5339\u914d\u5185\u5bb9\u4e3a \"\u6307\u4ee4 xxx\" \u7684\u6d88\u606f, \u5e76\u4e14\u628a \"xxx\" \u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9 param \u53d8\u91cf. Twilight \u63a5\u53d7\u4e00\u4e2a\u7531 Match \u7ec4\u6210\u7684\u5217\u8868, \u4e4b\u540e\u5bf9\u4e8e\u6bcf\u6761\u6d88\u606f\u5229\u7528 [ re ][] \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u4e0e argparse \u8fdb\u884c\u89e3\u6790 \u624b\u52a8\u751f\u6210 \u5728 Twilight \u5bf9\u8c61\u4e0a\u8c03\u7528 generate(message_chain) \u5373\u53ef\u624b\u52a8\u751f\u6210 Sparkle \u800c\u65e0\u9700\u914d\u5408 Broadcast . \u8fd9\u5bf9\u4e8e\u672c\u5730\u8c03\u8bd5\u5f88\u6709\u7528.","title":"\u521b\u5efa Twilight"},{"location":"advance/twilight/#_3","text":"ParamMatch () @ \"param\" \u8fd9\u4e00\u6bb5\u7684 ParamMatch() @ \"param\" \u8bf4\u660e\u8fd9\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\u5185\u7684 param \u5f62\u53c2. \u4e5f\u5c31\u662f param: RegexResult \u8fd9\u91cc. \u4e0e\u6b64\u540c\u65f6, \u4ee5\u4e0b\u7528\u6cd5\u7b49\u6548. >>> ParamMatch () . param ( \"param\" ) >>> \"param\" @ ParamMatch () >>> \"param\" << ParamMatch () >>> ParamMatch () >> \"param\" \u6ce8\u610f\u4f4d\u79fb\u8fd0\u7b97\u7b26 >> \u4e0e << \u59cb\u7ec8\u671d\u5411\u5b57\u7b26\u4e32. \u4e3a\u4ec0\u4e48\u652f\u6301\u8fd9\u4e9b\u8fd0\u7b97\u7b26? >> \u4e0e << \u652f\u6301\u7684\u7075\u611f\u6e90\u4e8e\u5176\u4ed6\u8bed\u8a00\u4e2d\u5bf9\u4e8e\u6587\u4ef6\u6d41\u7684\u64cd\u4f5c: cin >> var ; cout << \"value\" ; \u6211\u4eec\u501f\u9274\u4e86\u8fd9\u4e9b\u8bed\u8a00\u7684\u8bbe\u8ba1, \u5c06 >> \u4e0e << \u7684\u8fd0\u7b97\u7b26\u8bbe\u8ba1\u4e3a\u652f\u6301 str / int \u7c7b\u578b\u4ee5\u8fdb\u884c\u53c2\u6570\u5206\u6d3e.","title":"\u5206\u914d\u53c2\u6570"},{"location":"advance/twilight/#match","text":"","title":"Match"},{"location":"advance/twilight/#regexmatch","text":"RegexMatch \u662f Twilight \u7684\u57fa\u7840, \u5b83\u53ef\u4ee5\u5339\u914d\u6307\u5b9a\u7684\u6b63\u5219\u8868\u8fbe\u5f0f. FullMatch UnionMatch ParamMatch WildcardMatch \u90fd\u662f\u57fa\u4e8e RegexMatch \u7684\u5305\u88c5\u7c7b. FullMatch : \u5b8c\u6574\u5339\u914d\u5185\u5bb9 UnionMatch : \u5339\u914d\u591a\u4e2a\u5185\u5bb9 ParamMatch : \u5339\u914d\u6307\u5b9a\u53c2\u6570 WildcardMatch : \u5339\u914d\u4efb\u610f\u5185\u5bb9","title":"RegexMatch"},{"location":"advance/twilight/#flags","text":"\u53ef\u4ee5\u901a\u8fc7 flags \u65b9\u6cd5\u8bbe\u7f6e\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u5339\u914d\u6807\u8bb0. >>> RegexMatch ( r \"\\d+ # digits\" ) . flags ( re . V ) # \u8bbe\u7f6e re.VERBOSE \u6807\u8bb0","title":"flags \u65b9\u6cd5"},{"location":"advance/twilight/#space","text":"SpacePolicy \u662f\u4e00\u4e2a enum.Enum \u7c7b, \u6709\u5982\u4e0b\u5e38\u91cf: NOSPACE : \u4e0d\u9644\u5e26\u5c3e\u968f\u7a7a\u683c. PRESERVE : \u9884\u7559\u5c3e\u968f\u7a7a\u683c. (\u9ed8\u8ba4) FORCE : \u5f3a\u5236\u9700\u8981\u5c3e\u968f\u7a7a\u683c. \u5b83\u4eec\u5e94\u88ab\u4f5c\u4e3a \u4e0d\u900f\u660e\u5bf9\u8c61 \u4f7f\u7528. SpacePolicy \u5e94\u8be5\u4f20\u9012\u7ed9 RegexMatch.space \u65b9\u6cd5, \u7528\u4e8e\u786e\u5b9a RegexMatch \u5c3e\u968f\u7a7a\u683c\u7b56\u7565.","title":"space \u65b9\u6cd5"},{"location":"advance/twilight/#argumentmatch","text":"ArgumentMatch \u601d\u8def\u4e0e RegexMatch \u4e0d\u540c, \u5b83\u57fa\u4e8e argparse \u8fdb\u884c\u53c2\u6570\u89e3\u6790. ArgumentMatch \u7684\u521d\u59cb\u5316\u65b9\u6cd5\u4e0e add_argument \u975e\u5e38\u76f8\u4f3c. \u53d7\u9650\u4e8e\u7bc7\u5e45, \u8fd9\u91cc\u6ca1\u6cd5\u8be6\u7ec6\u5c55\u5f00. \u53ea\u80fd\u7ed9\u51fa\u51e0\u4e2a\u7528\u4f8b: >>> ArgumentMatch ( \"-s\" , \"--switch\" , action = \"store_true\" ) # \u5f00\u5173 >>> ArgumentMatch ( \"-o\" , \"--opt\" , type = str , choices = [ \"head\" , \"body\" ]) # \u53ea\u5141\u8bb8 \"head\" \u6216 \"body\" >>> ArgumentMatch ( \"-m\" , choices = MessageChain ([ \"choice_a\" , \"choice_b\" ])) # \u6ce8\u610f\u9ed8\u8ba4\u662f MessageChain, \u6240\u4ee5\u8981\u8fd9\u6837\u5199","title":"ArgumentMatch"},{"location":"advance/twilight/#broadcast","text":"Twilight \u5e94\u4f5c\u4e3a dispatcher \u4f20\u5165 broadcast.receiver / ListenerSchema \u4e2d. \u5728 receiver \u51fd\u6570\u7684\u7c7b\u578b\u6807\u6ce8\u4e2d, \u901a\u8fc7 \u6807\u6ce8\u53c2\u6570\u4e3a Sparkle \u83b7\u53d6\u5f53\u524d Sparkle , \u901a\u8fc7 name: Match \u7684\u5f62\u5f0f\u83b7\u53d6 name \u5bf9\u5e94\u7684\u5339\u914d\u5bf9\u8c61. \u50cf\u8fd9\u6837: @broadcast . receiver ( MessageEvent , dispatchers = [ Twilight ( [ FullMatch ( \".command\" ), \"arg\" @ RegexMatch ( r \"\\d+\" , optional = True ) ] ) ] ) async def reply ( ... , arg : RegexResult ): ... \u4f7f\u7528 Sparkle , Match , MatchResult \u7684\u5b50\u7c7b\u8fdb\u884c\u6807\u6ce8\u90fd\u662f\u53ef\u4ee5\u7684. \u4e00\u65e6\u5339\u914d\u5931\u8d25 ( generate \u629b\u51fa\u5f02\u5e38), Broadcast \u7684\u672c\u6b21\u6267\u884c\u5c31\u4f1a\u88ab\u53d6\u6d88.","title":"\u914d\u5408 Broadcast \u4f7f\u7528"},{"location":"advance/twilight/#matchresult","text":"RegexResult \u4e0e ArgResult \u90fd\u662f MatchResult \u7684\u5b50\u7c7b. \u8fd9\u4e8c\u8005\u65b9\u4fbf\u5730\u6807\u6ce8\u4e86\u5339\u914d\u7ed3\u679c\u4fe1\u606f. MatchResult \u7684\u5c5e\u6027: MatchResult.matched : \u5bf9\u5e94\u7684 Match \u5bf9\u8c61\u662f\u5426\u5339\u914d. MatchResult.origin : \u539f\u59cb Match \u5bf9\u8c61. MatchResult.result : \u5339\u914d\u7ed3\u679c.","title":"MatchResult"},{"location":"advance/twilight/#resultvalue","text":"ResultValue \u4f5c\u4e3a\u88c5\u9970\u5668\u4f7f\u7528, \u53ef\u4ee5\u76f4\u63a5\u83b7\u53d6\u5339\u914d\u7ed3\u679c\u800c\u4e0d\u9700\u8981\u4ece Match.result \u63d0\u53d6. @broadcast . receiver ( MessageEvent , dispatchers = [ Twilight ( [ FullMatch ( \".command\" ), \"arg\" @ RegexMatch ( r \"\\d+\" , optional = True ) ] ) ] ) async def reply ( ... , arg : MessageChain = ResultValue ()): # \u4fdd\u8bc1\u4e0d\u4f1a\u88ab\u6b63\u5e38\u7684\u6d41\u7a0b\u8986\u76d6 ...","title":"ResultValue \u88c5\u9970\u5668"},{"location":"advance/twilight/#int","text":"\u4f60\u53ef\u4ee5\u8fd9\u6837: ParamMatch () @ 1 \u4e4b\u540e\u83b7\u53d6 Sparkle \u5bf9\u8c61, \u5e76\u5bf9\u5176\u8fdb\u884c\u7d22\u5f15\u64cd\u4f5c. p : RegexResult = Sparkle [ 1 ] \u8fd9\u91cc\u53ea\u662f\u987a\u5634\u4e00\u63d0\uff0c\u56e0\u4e3a\u6709\u4e9b\u65f6\u5019\u8fd9\u4e2a\u4e0d\u5982 str \u6765\u7684\u65b9\u4fbf.","title":"int \u7c7b\u578b\u7684\u53c2\u6570\u540d"},{"location":"advance/twilight/#_4","text":"\u4f7f\u7528 Twilight.get_help \u53ef\u4ee5\u83b7\u5f97\u5e2e\u52a9\u6587\u672c(\u5df2\u8fdb\u884c\u7f29\u8fdb\u5904\u7406). \u5bf9\u4e8e ArgumentMatch , \u7ed3\u679c\u4e0e argparse.ArgumentParser.format_help \u76f8\u8fd1. RegexMatch \u4f1a\u5728\u6709\u53c2\u6570\u5206\u53d1\u4f4d\u7f6e\u65f6\u663e\u793a\u5176\u5206\u53d1\u76ee\u6807. ( name -> help \u5f62\u5f0f) sep \u63a7\u5236\u4e86 name -> help \u683c\u5f0f\u4e2d \u4f7f\u7528\u7684\u5206\u5272\u5f62\u5f0f (\u9ed8\u8ba4\u4e3a \" -> \" ) \u5982\u679c\u6ca1\u6709\u901a\u8fc7 help \u65b9\u6cd5\u4f20\u5165\u5e2e\u52a9\u5b57\u7b26\u4e32, \u5219 UnionMatch \u4e0e ParamMatch \u4f1a\u5c1d\u8bd5\u751f\u6210\u4e00\u4e2a ( ParamMatch \u4e3a \"\u53c2\u6570\" , UnionMatch \u4f1a\u4ece pattern \u63a8\u65ad). \u5426\u5219, \u8be5 RegexMatch \u4f1a\u88ab\u5ffd\u7565. \u4f20\u5165\u7684 usage \u540e\u4f1a\u6dfb\u52a0\u4e0a\u6765\u81ea argparse \u81ea\u52a8\u751f\u6210\u7684\u53c2\u6570\u9009\u9879, \u6240\u4ee5 usage \u4e2d\u53ea\u5e94\u63cf\u8ff0 RegexMatch \u63d0\u4f9b\u7684\u5339\u914d. description \u4e0e epilog \u53c2\u6570\u542b\u4e49\u4e0e argparse.ArgumentParser \u4e2d\u8bed\u4e49\u76f8\u540c. \u4f60\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u5b9e\u4f8b\u770b\u770b\u5b83\u7684\u6548\u679c: >>> print ( ... Twilight ( ... [ ... FullMatch ( \".test\" ) . help ( \"\u5339\u914d .test\" ), ... \"union\" @ UnionMatch ( \"A\" , \"B\" , \"C\" ), ... \"at\" @ ElementMatch ( At ), ... \"op1\" @ ParamMatch (), ... \"op2\" @ ParamMatch () . help ( \"\u64cd\u4f5c\u7b26\" ), ... \"help\" @ ArgumentMatch ( \"--help\" , \"-h\" , action = \"store_true\" ) . help ( \"\u663e\u793a\u8be5\u5e2e\u52a9\" ), ... \"arg\" @ WildcardMatch () . flags ( re . DOTALL ), ... \"v\" @ ArgumentMatch ( \"--verbose\" , \"-v\" , action = \"store_true\" ) . help ( \"\u663e\u793a\u8be6\u7ec6\u4fe1\u606f\" ), ... ] ... ) . get_help ( \"\u7528\u6cd5\u5b57\u7b26\u4e32\" , \"\u63cf\u8ff0\" , \"\u603b\u7ed3\" ) ... ) \u7528\u6cd5\u5b57\u7b26\u4e32 [--help] [--verbose] \u63cf\u8ff0 \u5339\u914d\u9879: \u5339\u914d .test union -> \u5728 ['A', 'B', 'C'] \u4e2d\u9009\u62e9\u4e00\u9879 at -> At \u5143\u7d20 op1 -> \u53c2\u6570 op2 -> \u64cd\u4f5c\u7b26 \u53ef\u9009\u53c2\u6570: --help, -h \u663e\u793a\u8be5\u5e2e\u52a9 --verbose, -v \u663e\u793a\u8be6\u7ec6\u4fe1\u606f \u603b\u7ed3","title":"\u751f\u6210\u5e2e\u52a9"},{"location":"advance/alconna/quickstart/","text":"Alconna - \u529f\u80fd\u5f3a\u5927\u7684\u547d\u4ee4\u89e3\u6790\u5668 \ud83d\udd17 \u5173\u4e8e\u672c\u6a21\u5757 \u672c\u6a21\u5757\u7531 RF-Tar-Railt \u7ef4\u62a4, BlueGlassBlock \u4ec5\u8fdb\u884c\u4e86\u9488\u5bf9 Ariadne \u7684\u5c01\u88c5, \u672c\u6a21\u5757\u4f59\u4e0b\u90e8\u5206\u4ece Alconna wiki \u590d\u5236\u5e76\u4fee\u6539\u800c\u6765. \u5feb\u901f\u5f00\u59cb \ud83d\udd17 \u4ee5\u4e0b\u5c06\u76f4\u89c2\u5c55\u793a Alconna \u7684\u4f7f\u7528\u65b9\u6cd5: from arclet.alconna import AlconnaString , Arpamar from arclet.alconna.graia import AlconnaDispatcher # example: !\u70b9\u6b4c <\u6b4c\u540d> --\u6b4c\u624b <\u6b4c\u624b\u540d> music = AlconnaString ( \"!\u70b9\u6b4c <song_name:str> #\u5728XXX\u4e2d\u641c\u7d22\u6b4c\u540d\" , # \u4e3b\u53c2\u6570: <\u6b4c\u540d> \"--\u6b4c\u624b|-s <singer_name:str> #\u6307\u5b9a\u6b4c\u624b\" # \u9009\u9879\u540d: --\u6b4c\u624b \u9009\u9879\u522b\u540d: -s \u9009\u9879\u53c2\u6570: <\u6b4c\u624b\u540d> ) @app . broadcast . receiver ( FriendMessage , dispatchers = [ AlconnaDispatcher ( alconna = music , help_flag = 'reply' )]) async def friend_message_listener ( app : Ariadne , friend : Friend , result : Arpamar ): await app . sendFriendMessage ( friend , MessageChain . create ( \"\u6b4c\u540d\u662f \" , result . song_name )) if singer_name : await app . sendFriendMessage ( friend , MessageChain . create ( \"\u6b4c\u624b\u662f \" , result . singer_name )) \u6267\u884c\u8fd9\u6bb5\u4ee3\u7801\u540e\uff0c\u5411\u4f60\u7684 bot \u53d1\u9001 !\u70b9\u6b4c \u5927\u5730 -s Beyond \u8bd5\u8bd5. !\u70b9\u6b4c \u5927\u5730 -s Beyond \u6b4c\u540d\u662f \u5927\u5730 \u6b4c\u624b\u662f Beyond !\u70b9\u6b4c --help !\u70b9\u6b4c <song_name> \u5728XXX\u4e2d\u641c\u7d22\u6b4c\u540d \u53ef\u7528\u7684\u9009\u9879\u6709: # \u6307\u5b9a\u6b4c\u624b -s, --\u6b4c\u624b <singer_name> \u7ed3\u6784 \ud83d\udd17 \u901a\u8fc7\u9605\u8bfb Alconna \u7684\u7b7e\u540d\u53ef\u4ee5\u5f97\u77e5\uff0cAlconna \u652f\u6301\u56db\u5927\u7c7b\u53c2\u6570\uff1a headers : \u547c\u53eb\u8be5\u547d\u4ee4\u7684\u547d\u4ee4\u5934\uff0c\u4e00\u822c\u662f\u4f60\u7684\u673a\u5668\u4eba\u7684\u540d\u5b57\u6216\u8005\u7b26\u53f7\uff0c\u4e0e command \u81f3\u5c11\u6709\u4e00\u4e2a\u586b\u5199. \u4f8b\u5982: /, ! command : \u547d\u4ee4\u540d\u79f0\uff0c\u4f60\u7684\u547d\u4ee4\u7684\u540d\u5b57\uff0c\u4e0e headers \u81f3\u5c11\u6709\u4e00\u4e2a\u586b\u5199 options : \u547d\u4ee4\u9009\u9879\uff0c\u4f60\u7684\u547d\u4ee4\u53ef\u9009\u62e9\u7684\u6240\u6709 option,\u662f\u4e00\u4e2a\u5305\u542b Subcommand \u4e0e Option \u7684\u5217\u8868 main_args : \u4e3b\u53c2\u6570\uff0c\u586b\u5165\u540e\u5f53\u4e14\u4ec5\u5f53\u547d\u4ee4\u4e2d\u542b\u6709\u8be5\u53c2\u6570\u65f6\u624d\u4f1a\u6210\u529f\u89e3\u6790 \u89e3\u6790\u65f6\uff0c\u5148\u5224\u65ad\u547d\u4ee4\u5934(\u5373 headers + command ),\u518d\u5224\u65ad options \u4e0e main args , \u8fd9\u91cc options \u4e0e main args \u5728\u8f93\u5165\u6307\u4ee4\u65f6\u662f\u4e0d\u5206\u5148\u540e\u7684 \u5047\u8bbe\u6709\u4e2a Alconna \u5982\u4e0b: Alconna ( command = \"name\" , main_args = \"main_args\" , headers = [ \"/\" ], options = [ Subcommand ( \"sub_name\" , Option ( \"sub_opt\" , sub_opt_arg = \"sub_arg\" ), sub_main_arg = \"sub_main_arg\" ), Option ( \"opt\" , opt_arg = \"opt_arg\" ) ], ) \u5219\u5b83\u53ef\u4ee5\u89e3\u6790\u5982\u4e0b\u547d\u4ee4: /name sub_name sub_opt sub_arg sub_main_arg opt arg main_args /name sub_name sub_main_arg opt arg main_argument /name main_args opt arg /name main_args \u89e3\u6790\u6210\u529f\u7684\u547d\u4ee4\u7684\u53c2\u6570\u4f1a\u4fdd\u5b58\u5728 analysis_message \u65b9\u6cd5\u8fd4\u56de\u7684 Arpamar \u5b9e\u4f8b\u4e2d \u521b\u5efa Alconna \ud83d\udd17 alconna = Alconna ( command = \"\u6307\u4ee4\" , main_args = Args . foo [ str ], options = [ Option ( \"\u9009\u9879\" )]) \u8fd9\u91cc\u8bf4\u660e\u6211\u4eec\u9700\u8981\u5339\u914d\u5185\u5bb9\u4e3a \"\u6307\u4ee4 something:str\"\u7684\u6d88\u606f, \u5e76\u628a \"something\" \u8d4b\u4e88\u53c2\u6570\u540d \"foo\"; \u8be5\u6307\u4ee4\u53ef\u4ee5\u4f7f\u7528 \"\u9009\u9879\" \u8fd9\u4e2a\u547d\u4ee4\u9009\u9879 \u800c\u540e\u53e6\u67094\u79cd\u6784\u9020\u65b9\u5f0f, \u53ef\u4ee5\u6ee1\u8db3\u4e0d\u540c\u4f7f\u7528\u8005\u7684\u9700\u6c42: - koishi-like: \u4ee5\u7c7b\u4f3c koishi \u4e2d\u6307\u4ee4\u521b\u5efa\u7684\u65b9\u5f0f\u521b\u5efa Alconna - format: \u4ee5\u7c7b\u4f3cf-string\u7684\u683c\u5f0f\u521b\u5efa Alconna - click-like: \u4ee5\u7c7b\u4f3c click \u4e2d\u6307\u4ee4\u521b\u5efa\u7684\u65b9\u5f0f\u521b\u5efa Alconna - fire-like: \u4ee5\u7c7b\u578b python-fire \u4e2d\u6307\u4ee4\u521b\u5efa\u7684\u65b9\u5f0f\u521b\u5efa Alconna \u4f7f\u7528 AlconnaDispatcher \ud83d\udd17 \u60a8\u53ef\u4ee5\u5728 Ariadne \u4e2d\u4f7f\u7528 AlconnaDispatcher \u6765\u5e2e\u52a9\u89e3\u6790\u547d\u4ee4. \u53c2\u6570\u6807\u6ce8 \ud83d\udd17 AlconnaDispatcher \u53ef\u4ee5\u5206\u914d\u4ee5\u4e0b\u51e0\u79cd\u53c2\u6570: Alconna : \u4f7f\u7528\u7684 Alconna \u5bf9\u8c61. Arpamar : Alconna \u751f\u6210\u7684\u6570\u636e\u5bb9\u5668. AlconnaProperty : AlconnaDispatcher \u8fd4\u56de\u7684\u7279\u6b8a\u5bf9\u8c61, \u53ef\u4ee5\u83b7\u53d6: origin : \u539f\u59cb\u6d88\u606f\u94fe help_text : \u53ef\u80fd\u7684\u5e2e\u52a9\u4fe1\u606f result : Arpamar source : \u539f\u59cb\u4e8b\u4ef6 \u5176\u4ed6\u7c7b\u578b: \u5728 name \u4e0a\u8fdb\u884c\u6b64\u6807\u6ce8\u7b49\u4ef7\u4e8e arpamar.all_matched_args.get(name) \u7279\u6b8a\u4e8b\u4ef6 \ud83d\udd17 \u5f53 AlconnaDispatcher \u7684 reply_help \u4e3a False \u65f6, \u5176\u4f1a\u5411bcc\u5e7f\u64ad\u4e00\u4e2a AlconnaHelpMessage \u4e8b\u4ef6 \u8be5\u4e8b\u4ef6\u53ef\u83b7\u53d6\u7684\u53c2\u6570\u5982\u4e0b: - help_string (str): \u53ef\u80fd\u7684\u5e2e\u52a9\u4fe1\u606f - alconna (Alconna): \u8be5\u5e2e\u52a9\u4fe1\u606f\u5bf9\u5e94\u7684\u547d\u4ee4 - sender , messageChain , app , ...: \u4ece\u6e90\u6d88\u606f\u4e8b\u4ef6\u4e2d\u53ef\u83b7\u53d6\u7684\u6240\u6709\u53c2\u6570 \u4e0e Twilight \u5bf9\u6bd4 \ud83d\udd17 Twilight \u504f\u91cd\u4e8e\u5bf9\u6d88\u606f\u94fe\u7684\u6b63\u5219\u5316\u5904\u7406, \u800c Alconna \u504f\u91cd\u4e8e\u5bf9\u53c2\u6570\u7684\u5404\u79cd\u5f62\u5f0f\u89e3\u6790, \u4e0d\u9650\u4e8e\u6d88\u606f\u94fe (\u66f4\u50cf argparse \u6a21\u5757). \u53e6\u4e00\u70b9, Alconna \u7684\u529f\u80fd\u76f8\u5bf9\u590d\u6742, \u4e0d\u592a\u9002\u5408\u521d\u8bc6\u6d88\u606f\u89e3\u6790\u7684\u7528\u6237. \u5982\u679c\u4f60\u60f3\u8981 argparse \u4e2d\u5404\u79cd\u7279\u522b Action (\u5982 append ) \u7684\u539f\u751f\u652f\u6301, \u53ef\u80fd Twilight \u4f1a\u66f4\u597d\u7f16\u5199. \u540c\u65f6, Twilight \u662f\u57fa\u4e8e\u5bf9\u8c61\u7684\u53c2\u6570\u5904\u7406\u5668, \u5728\u7c7b\u578b\u8865\u5168\u4e0a\u66f4\u5b8c\u5907. \u4f46\u662f Alconna \u6709\u66f4\u597d\u66f4\u5f3a\u5927\u7684\u53c2\u6570\u7c7b\u578b\u89e3\u6790\u4e0e\u5b50\u547d\u4ee4\u7684\u652f\u6301, \u4e14\u6027\u80fd\u5360\u4f18, \u9b54\u6cd5\u8f83\u591a(\u8feb\u771f). \u603b\u4e4b, \u6839\u636e\u81ea\u5df1\u7684\u9700\u8981, \u9009\u62e9\u5408\u9002\u7684\u5de5\u5177. \u4e0b\u4e00\u6b65 \ud83d\udd17 Ariadne \u53ea\u5bf9 Alconna \u8fdb\u884c\u4e86\u7b80\u5355\u7684\u5c01\u88c5, \u63a5\u4e0b\u6765\u4f60\u53ef\u4ee5\u8bbf\u95ee\u5176 \u6587\u6863 \u8fdb\u4e00\u6b65\u4e86\u89e3\u7528\u6cd5. \u793e\u533a\u6587\u6863\u76f8\u5173\u7ae0\u8282: \u94fe\u63a5","title":"Alconna"},{"location":"advance/alconna/quickstart/#alconna-","text":"\u5173\u4e8e\u672c\u6a21\u5757 \u672c\u6a21\u5757\u7531 RF-Tar-Railt \u7ef4\u62a4, BlueGlassBlock \u4ec5\u8fdb\u884c\u4e86\u9488\u5bf9 Ariadne \u7684\u5c01\u88c5, \u672c\u6a21\u5757\u4f59\u4e0b\u90e8\u5206\u4ece Alconna wiki \u590d\u5236\u5e76\u4fee\u6539\u800c\u6765.","title":"Alconna - \u529f\u80fd\u5f3a\u5927\u7684\u547d\u4ee4\u89e3\u6790\u5668"},{"location":"advance/alconna/quickstart/#_1","text":"\u4ee5\u4e0b\u5c06\u76f4\u89c2\u5c55\u793a Alconna \u7684\u4f7f\u7528\u65b9\u6cd5: from arclet.alconna import AlconnaString , Arpamar from arclet.alconna.graia import AlconnaDispatcher # example: !\u70b9\u6b4c <\u6b4c\u540d> --\u6b4c\u624b <\u6b4c\u624b\u540d> music = AlconnaString ( \"!\u70b9\u6b4c <song_name:str> #\u5728XXX\u4e2d\u641c\u7d22\u6b4c\u540d\" , # \u4e3b\u53c2\u6570: <\u6b4c\u540d> \"--\u6b4c\u624b|-s <singer_name:str> #\u6307\u5b9a\u6b4c\u624b\" # \u9009\u9879\u540d: --\u6b4c\u624b \u9009\u9879\u522b\u540d: -s \u9009\u9879\u53c2\u6570: <\u6b4c\u624b\u540d> ) @app . broadcast . receiver ( FriendMessage , dispatchers = [ AlconnaDispatcher ( alconna = music , help_flag = 'reply' )]) async def friend_message_listener ( app : Ariadne , friend : Friend , result : Arpamar ): await app . sendFriendMessage ( friend , MessageChain . create ( \"\u6b4c\u540d\u662f \" , result . song_name )) if singer_name : await app . sendFriendMessage ( friend , MessageChain . create ( \"\u6b4c\u624b\u662f \" , result . singer_name )) \u6267\u884c\u8fd9\u6bb5\u4ee3\u7801\u540e\uff0c\u5411\u4f60\u7684 bot \u53d1\u9001 !\u70b9\u6b4c \u5927\u5730 -s Beyond \u8bd5\u8bd5. !\u70b9\u6b4c \u5927\u5730 -s Beyond \u6b4c\u540d\u662f \u5927\u5730 \u6b4c\u624b\u662f Beyond !\u70b9\u6b4c --help !\u70b9\u6b4c <song_name> \u5728XXX\u4e2d\u641c\u7d22\u6b4c\u540d \u53ef\u7528\u7684\u9009\u9879\u6709: # \u6307\u5b9a\u6b4c\u624b -s, --\u6b4c\u624b <singer_name>","title":"\u5feb\u901f\u5f00\u59cb"},{"location":"advance/alconna/quickstart/#_2","text":"\u901a\u8fc7\u9605\u8bfb Alconna \u7684\u7b7e\u540d\u53ef\u4ee5\u5f97\u77e5\uff0cAlconna \u652f\u6301\u56db\u5927\u7c7b\u53c2\u6570\uff1a headers : \u547c\u53eb\u8be5\u547d\u4ee4\u7684\u547d\u4ee4\u5934\uff0c\u4e00\u822c\u662f\u4f60\u7684\u673a\u5668\u4eba\u7684\u540d\u5b57\u6216\u8005\u7b26\u53f7\uff0c\u4e0e command \u81f3\u5c11\u6709\u4e00\u4e2a\u586b\u5199. \u4f8b\u5982: /, ! command : \u547d\u4ee4\u540d\u79f0\uff0c\u4f60\u7684\u547d\u4ee4\u7684\u540d\u5b57\uff0c\u4e0e headers \u81f3\u5c11\u6709\u4e00\u4e2a\u586b\u5199 options : \u547d\u4ee4\u9009\u9879\uff0c\u4f60\u7684\u547d\u4ee4\u53ef\u9009\u62e9\u7684\u6240\u6709 option,\u662f\u4e00\u4e2a\u5305\u542b Subcommand \u4e0e Option \u7684\u5217\u8868 main_args : \u4e3b\u53c2\u6570\uff0c\u586b\u5165\u540e\u5f53\u4e14\u4ec5\u5f53\u547d\u4ee4\u4e2d\u542b\u6709\u8be5\u53c2\u6570\u65f6\u624d\u4f1a\u6210\u529f\u89e3\u6790 \u89e3\u6790\u65f6\uff0c\u5148\u5224\u65ad\u547d\u4ee4\u5934(\u5373 headers + command ),\u518d\u5224\u65ad options \u4e0e main args , \u8fd9\u91cc options \u4e0e main args \u5728\u8f93\u5165\u6307\u4ee4\u65f6\u662f\u4e0d\u5206\u5148\u540e\u7684 \u5047\u8bbe\u6709\u4e2a Alconna \u5982\u4e0b: Alconna ( command = \"name\" , main_args = \"main_args\" , headers = [ \"/\" ], options = [ Subcommand ( \"sub_name\" , Option ( \"sub_opt\" , sub_opt_arg = \"sub_arg\" ), sub_main_arg = \"sub_main_arg\" ), Option ( \"opt\" , opt_arg = \"opt_arg\" ) ], ) \u5219\u5b83\u53ef\u4ee5\u89e3\u6790\u5982\u4e0b\u547d\u4ee4: /name sub_name sub_opt sub_arg sub_main_arg opt arg main_args /name sub_name sub_main_arg opt arg main_argument /name main_args opt arg /name main_args \u89e3\u6790\u6210\u529f\u7684\u547d\u4ee4\u7684\u53c2\u6570\u4f1a\u4fdd\u5b58\u5728 analysis_message \u65b9\u6cd5\u8fd4\u56de\u7684 Arpamar \u5b9e\u4f8b\u4e2d","title":"\u7ed3\u6784"},{"location":"advance/alconna/quickstart/#alconna","text":"alconna = Alconna ( command = \"\u6307\u4ee4\" , main_args = Args . foo [ str ], options = [ Option ( \"\u9009\u9879\" )]) \u8fd9\u91cc\u8bf4\u660e\u6211\u4eec\u9700\u8981\u5339\u914d\u5185\u5bb9\u4e3a \"\u6307\u4ee4 something:str\"\u7684\u6d88\u606f, \u5e76\u628a \"something\" \u8d4b\u4e88\u53c2\u6570\u540d \"foo\"; \u8be5\u6307\u4ee4\u53ef\u4ee5\u4f7f\u7528 \"\u9009\u9879\" \u8fd9\u4e2a\u547d\u4ee4\u9009\u9879 \u800c\u540e\u53e6\u67094\u79cd\u6784\u9020\u65b9\u5f0f, \u53ef\u4ee5\u6ee1\u8db3\u4e0d\u540c\u4f7f\u7528\u8005\u7684\u9700\u6c42: - koishi-like: \u4ee5\u7c7b\u4f3c koishi \u4e2d\u6307\u4ee4\u521b\u5efa\u7684\u65b9\u5f0f\u521b\u5efa Alconna - format: \u4ee5\u7c7b\u4f3cf-string\u7684\u683c\u5f0f\u521b\u5efa Alconna - click-like: \u4ee5\u7c7b\u4f3c click \u4e2d\u6307\u4ee4\u521b\u5efa\u7684\u65b9\u5f0f\u521b\u5efa Alconna - fire-like: \u4ee5\u7c7b\u578b python-fire \u4e2d\u6307\u4ee4\u521b\u5efa\u7684\u65b9\u5f0f\u521b\u5efa Alconna","title":"\u521b\u5efa Alconna"},{"location":"advance/alconna/quickstart/#alconnadispatcher","text":"\u60a8\u53ef\u4ee5\u5728 Ariadne \u4e2d\u4f7f\u7528 AlconnaDispatcher \u6765\u5e2e\u52a9\u89e3\u6790\u547d\u4ee4.","title":"\u4f7f\u7528 AlconnaDispatcher"},{"location":"advance/alconna/quickstart/#_3","text":"AlconnaDispatcher \u53ef\u4ee5\u5206\u914d\u4ee5\u4e0b\u51e0\u79cd\u53c2\u6570: Alconna : \u4f7f\u7528\u7684 Alconna \u5bf9\u8c61. Arpamar : Alconna \u751f\u6210\u7684\u6570\u636e\u5bb9\u5668. AlconnaProperty : AlconnaDispatcher \u8fd4\u56de\u7684\u7279\u6b8a\u5bf9\u8c61, \u53ef\u4ee5\u83b7\u53d6: origin : \u539f\u59cb\u6d88\u606f\u94fe help_text : \u53ef\u80fd\u7684\u5e2e\u52a9\u4fe1\u606f result : Arpamar source : \u539f\u59cb\u4e8b\u4ef6 \u5176\u4ed6\u7c7b\u578b: \u5728 name \u4e0a\u8fdb\u884c\u6b64\u6807\u6ce8\u7b49\u4ef7\u4e8e arpamar.all_matched_args.get(name)","title":"\u53c2\u6570\u6807\u6ce8"},{"location":"advance/alconna/quickstart/#_4","text":"\u5f53 AlconnaDispatcher \u7684 reply_help \u4e3a False \u65f6, \u5176\u4f1a\u5411bcc\u5e7f\u64ad\u4e00\u4e2a AlconnaHelpMessage \u4e8b\u4ef6 \u8be5\u4e8b\u4ef6\u53ef\u83b7\u53d6\u7684\u53c2\u6570\u5982\u4e0b: - help_string (str): \u53ef\u80fd\u7684\u5e2e\u52a9\u4fe1\u606f - alconna (Alconna): \u8be5\u5e2e\u52a9\u4fe1\u606f\u5bf9\u5e94\u7684\u547d\u4ee4 - sender , messageChain , app , ...: \u4ece\u6e90\u6d88\u606f\u4e8b\u4ef6\u4e2d\u53ef\u83b7\u53d6\u7684\u6240\u6709\u53c2\u6570","title":"\u7279\u6b8a\u4e8b\u4ef6"},{"location":"advance/alconna/quickstart/#twilight","text":"Twilight \u504f\u91cd\u4e8e\u5bf9\u6d88\u606f\u94fe\u7684\u6b63\u5219\u5316\u5904\u7406, \u800c Alconna \u504f\u91cd\u4e8e\u5bf9\u53c2\u6570\u7684\u5404\u79cd\u5f62\u5f0f\u89e3\u6790, \u4e0d\u9650\u4e8e\u6d88\u606f\u94fe (\u66f4\u50cf argparse \u6a21\u5757). \u53e6\u4e00\u70b9, Alconna \u7684\u529f\u80fd\u76f8\u5bf9\u590d\u6742, \u4e0d\u592a\u9002\u5408\u521d\u8bc6\u6d88\u606f\u89e3\u6790\u7684\u7528\u6237. \u5982\u679c\u4f60\u60f3\u8981 argparse \u4e2d\u5404\u79cd\u7279\u522b Action (\u5982 append ) \u7684\u539f\u751f\u652f\u6301, \u53ef\u80fd Twilight \u4f1a\u66f4\u597d\u7f16\u5199. \u540c\u65f6, Twilight \u662f\u57fa\u4e8e\u5bf9\u8c61\u7684\u53c2\u6570\u5904\u7406\u5668, \u5728\u7c7b\u578b\u8865\u5168\u4e0a\u66f4\u5b8c\u5907. \u4f46\u662f Alconna \u6709\u66f4\u597d\u66f4\u5f3a\u5927\u7684\u53c2\u6570\u7c7b\u578b\u89e3\u6790\u4e0e\u5b50\u547d\u4ee4\u7684\u652f\u6301, \u4e14\u6027\u80fd\u5360\u4f18, \u9b54\u6cd5\u8f83\u591a(\u8feb\u771f). \u603b\u4e4b, \u6839\u636e\u81ea\u5df1\u7684\u9700\u8981, \u9009\u62e9\u5408\u9002\u7684\u5de5\u5177.","title":"\u4e0e Twilight \u5bf9\u6bd4"},{"location":"advance/alconna/quickstart/#_5","text":"Ariadne \u53ea\u5bf9 Alconna \u8fdb\u884c\u4e86\u7b80\u5355\u7684\u5c01\u88c5, \u63a5\u4e0b\u6765\u4f60\u53ef\u4ee5\u8bbf\u95ee\u5176 \u6587\u6863 \u8fdb\u4e00\u6b65\u4e86\u89e3\u7528\u6cd5. \u793e\u533a\u6587\u6863\u76f8\u5173\u7ae0\u8282: \u94fe\u63a5","title":"\u4e0b\u4e00\u6b65"},{"location":"advance/broadcast/depend/","text":"Depend - \u4f9d\u8d56\u6ce8\u5165 \ud83d\udd17 \u6709\u65f6, \u524d\u9762\u4ecb\u7ecd\u7684\u57fa\u7840\u6d88\u606f\u94fe\u5904\u7406\u5668\u4e0e Twilight \u6d88\u606f\u94fe\u5904\u7406\u5668, \u90fd\u4e0d\u80fd\u6ee1\u8db3\u6211\u4eec\u7684\u9700\u6c42. \u4f8b\u5982, \u5bf9\u67d0\u4e9b\u6570\u636e (\u597d\u53cb\u53f7, \u7fa4\u53f7, \u6743\u9650\u7b49) \u7684\u4e3b\u52a8\u5224\u65ad. \u6b64\u65f6, Depend \u5373\u53ef\u52a9\u4f60\u4e00\u81c2\u4e4b\u529b. \u6211\u4eec\u53ef\u5229\u7528\u5176\u6784\u9020\u4e00\u4e2a Decorator . \u4f60\u53ef\u4ee5\u4ece graia.broadcast.builtin.decorators \u5bfc\u5165 Depend . \u8fd9\u91cc\u6240\u8bf4\u7684 Decorator \u662f Graia Broadcast \u7684\u4e00\u90e8\u5206, \u800c\u975e Python \u7684 @decorator \u8bed\u6cd5\u7cd6. \u57fa\u7840: \u7528\u4e8e\u9a8c\u8bc1\u7684\u4f9d\u8d56 \ud83d\udd17 \u9996\u5148, \u6211\u4eec\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u5f02\u6b65\u51fd\u6570. \u5b83\u53ef\u4ee5\u63a5\u6536 \u4e0e\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\u76f8\u540c\u7684\u53c2\u6570 . \u5982\u679c\u6211\u4eec\u60f3\u5bf9\u7fa4\u53f7\u8fdb\u884c\u68c0\u67e5, \u53ef\u4ee5\u8fd9\u6837\u5199\uff1a async def check_group ( group : Group ): if group . id != 12345678 : raise ExecutionStop \u8fd9\u91cc, \u89e6\u53d1\u7684 ExecutionStop \u5f02\u5e38, \u4f1a\u7ed3\u675f Ariadne \u5bf9\u6d88\u606f\u7684\u5904\u7406, \u4e5f\u5c31\u662f\u8bf4, \u9664\u4e86\u7fa4\u53f7\u4e3a 12345678 \u4ee5\u5916\u7684\u7fa4\u91cc\u6709\u6d88\u606f\u65f6, \u673a\u5668\u4eba\u5c31\u4e0d\u4f1a\u54cd\u5e94\u4e86. \u6211\u4eec\u7528 Depend(check_group) \u521b\u5efa\u4e00\u4e2a Decorator , \u5e76\u628a\u5b83\u4f20\u5165 broadcast.receiver \u4e2d: @broadcast . receiver ( GroupMessage , decorators = [ Depend ( check_group )]) async def foo ( ... ): ... \u4ec0\u4e48\u662f \u4f9d\u8d56\u6ce8\u5165 ? \u4f9d\u8d56\u6ce8\u5165 \u8fd9\u4e2a\u8bcd\u542c\u8d77\u6765\u633a\u9ad8\u5927\u4e0a, \u4f46\u5b9e\u9645\u4e0a\u5b83\u7684\u8bbe\u8ba1\u601d\u60f3\u53ea\u6709\u4e00\u4e2a: \u4ee3\u7801\u590d\u7528. \u4e0a\u9762\u4f60\u7528 Depend \u6ce8\u5165\u7684\u51fd\u6570, \u57fa\u672c\u7b49\u4ef7\u4e8e\u4ee5\u4e0b\u8868\u793a: \u4e0d\u7528 Depend \u4f7f\u7528 Depend @broadcast . receiver ( GroupMessage ) async def foo ( ... , group : Group ): if group . id != 12345678 : raise ExecutionStop ... # \u8df3\u8fc7\u5176\u4ed6\u4ee3\u7801 @broadcast . receiver ( GroupMessage , decorators = [ Depend ( check_group )]) async def foo ( ... ): ... \u8fd0\u884c\u673a\u5668\u4eba\u8fdb\u884c\u6d4b\u8bd5, \u6b64\u65f6\u673a\u5668\u4eba\u53ea\u4f1a\u54cd\u5e94\u7fa4\u53f7\u4e3a 12345678 \u7684\u7fa4\u91cc\u7684\u6d88\u606f. \u63d0\u793a \u4f60\u4e5f\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u5305\u88c5\u5668\u51fd\u6570: def require_group ( * group_id : int ): async def wrapper ( group : Group ): if group . id not in group_id : raise ExecutionStop return wrapper @broadcast . receiver ( GroupMessage , decorators = [ Depend ( require_group ( 12345678 , 87654321 ))]) async def foo ( ... ): ... Decorator \u4e5f\u53ef\u4ee5\u914d\u5408\u524d\u9762\u63d0\u5230\u7684\u57fa\u7840\u6d88\u606f\u94fe\u5904\u7406\u5668, \u8fd8\u6709 Twilight \u4e00\u8d77\u4f7f\u7528: @broadcast . receiver ( GroupMessage , dispatchers = [ Twilight ( Sparkle ([ UnionMatch ( \"get_data\" , \"data\" )]))], decorators = [ Depend ( check_group )], ) async def get_data ( ... ): ... \u4e0b\u4e00\u6b65: \u4ee3\u7801\u590d\u7528 \ud83d\udd17 Depend \u53ef\u4ee5\u8fd4\u56de\u503c, \u4ee5\u4fbf\u4f60\u5728\u51fd\u6570\u4e2d\u76f4\u63a5\u4f7f\u7528. \u6bd4\u5982, \u5047\u8bbe\u4f60\u60f3\u5199\u4e00\u4e2a\u81ea\u52a8\u63d0\u53d6\u6d88\u606f\u4e2d\u56fe\u7247, \u5e76\u81ea\u52a8\u4e0b\u8f7d\u5176 bytes \u7684 Depend : \u8fd9\u91cc\u6211\u4eec\u5c06\u4f7f\u7528 Python \u7684 @decorator \u76f4\u63a5\u5305\u88c5\u8fd9\u4e2a\u5185\u90e8\u51fd\u6570. @Depend async def get_img_bytes ( chain : MessageChain ) -> List [ bytes ]: result : List [ bytes ] = [] for element in chain : if isinstance ( element , Image ): result . append ( await element . get_bytes ()) return result # example @broadcast . receiver ( GroupMessage ) async def save_images ( ... , img_bytes : List [ bytes ] = get_img_bytes ): for img_bytes in img_bytes : ... # do sth \u5c31\u662f\u8fd9\u6837! \u4f60\u53ef\u4ee5\u4e14\u5e94\u8be5\u901a\u8fc7\u5728\u51fd\u6570\u5b9a\u4e49\u7684 \u9ed8\u8ba4\u503c \u4f4d\u7f6e\u653e\u7f6e Decorator \u6765\u521b\u5efa\u6240\u8c13\u7684 \u201c\u6709\u5934\u88c5\u9970\u5668\u201d , Depend \u5305\u88c5\u51fd\u6570\u6240\u8fd4\u56de\u7684 \u6240\u6709 \u503c (\u5305\u62ec None ) \u90fd\u4f1a\u88ab\u4f20\u9012\u56de\u53bb. \u540c\u6837, \u5f15\u53d1\u7684 ExecutionStop \u4f1a\u62db\u81f4\u6267\u884c\u7684\u505c\u6b62. \u6700\u540e\u987a\u53e3\u4e00\u63d0, \u6709\u5934\u548c\u65e0\u5934\u88c5\u9970\u5668\u5e76\u4e0d\u51b2\u7a81. \u793e\u533a\u6587\u6863\u76f8\u5173\u7ae0\u8282: \u94fe\u63a5","title":"\u4f9d\u8d56\u6ce8\u5165"},{"location":"advance/broadcast/depend/#depend-","text":"\u6709\u65f6, \u524d\u9762\u4ecb\u7ecd\u7684\u57fa\u7840\u6d88\u606f\u94fe\u5904\u7406\u5668\u4e0e Twilight \u6d88\u606f\u94fe\u5904\u7406\u5668, \u90fd\u4e0d\u80fd\u6ee1\u8db3\u6211\u4eec\u7684\u9700\u6c42. \u4f8b\u5982, \u5bf9\u67d0\u4e9b\u6570\u636e (\u597d\u53cb\u53f7, \u7fa4\u53f7, \u6743\u9650\u7b49) \u7684\u4e3b\u52a8\u5224\u65ad. \u6b64\u65f6, Depend \u5373\u53ef\u52a9\u4f60\u4e00\u81c2\u4e4b\u529b. \u6211\u4eec\u53ef\u5229\u7528\u5176\u6784\u9020\u4e00\u4e2a Decorator . \u4f60\u53ef\u4ee5\u4ece graia.broadcast.builtin.decorators \u5bfc\u5165 Depend . \u8fd9\u91cc\u6240\u8bf4\u7684 Decorator \u662f Graia Broadcast \u7684\u4e00\u90e8\u5206, \u800c\u975e Python \u7684 @decorator \u8bed\u6cd5\u7cd6.","title":"Depend - \u4f9d\u8d56\u6ce8\u5165"},{"location":"advance/broadcast/depend/#_1","text":"\u9996\u5148, \u6211\u4eec\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u5f02\u6b65\u51fd\u6570. \u5b83\u53ef\u4ee5\u63a5\u6536 \u4e0e\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\u76f8\u540c\u7684\u53c2\u6570 . \u5982\u679c\u6211\u4eec\u60f3\u5bf9\u7fa4\u53f7\u8fdb\u884c\u68c0\u67e5, \u53ef\u4ee5\u8fd9\u6837\u5199\uff1a async def check_group ( group : Group ): if group . id != 12345678 : raise ExecutionStop \u8fd9\u91cc, \u89e6\u53d1\u7684 ExecutionStop \u5f02\u5e38, \u4f1a\u7ed3\u675f Ariadne \u5bf9\u6d88\u606f\u7684\u5904\u7406, \u4e5f\u5c31\u662f\u8bf4, \u9664\u4e86\u7fa4\u53f7\u4e3a 12345678 \u4ee5\u5916\u7684\u7fa4\u91cc\u6709\u6d88\u606f\u65f6, \u673a\u5668\u4eba\u5c31\u4e0d\u4f1a\u54cd\u5e94\u4e86. \u6211\u4eec\u7528 Depend(check_group) \u521b\u5efa\u4e00\u4e2a Decorator , \u5e76\u628a\u5b83\u4f20\u5165 broadcast.receiver \u4e2d: @broadcast . receiver ( GroupMessage , decorators = [ Depend ( check_group )]) async def foo ( ... ): ... \u4ec0\u4e48\u662f \u4f9d\u8d56\u6ce8\u5165 ? \u4f9d\u8d56\u6ce8\u5165 \u8fd9\u4e2a\u8bcd\u542c\u8d77\u6765\u633a\u9ad8\u5927\u4e0a, \u4f46\u5b9e\u9645\u4e0a\u5b83\u7684\u8bbe\u8ba1\u601d\u60f3\u53ea\u6709\u4e00\u4e2a: \u4ee3\u7801\u590d\u7528. \u4e0a\u9762\u4f60\u7528 Depend \u6ce8\u5165\u7684\u51fd\u6570, \u57fa\u672c\u7b49\u4ef7\u4e8e\u4ee5\u4e0b\u8868\u793a: \u4e0d\u7528 Depend \u4f7f\u7528 Depend @broadcast . receiver ( GroupMessage ) async def foo ( ... , group : Group ): if group . id != 12345678 : raise ExecutionStop ... # \u8df3\u8fc7\u5176\u4ed6\u4ee3\u7801 @broadcast . receiver ( GroupMessage , decorators = [ Depend ( check_group )]) async def foo ( ... ): ... \u8fd0\u884c\u673a\u5668\u4eba\u8fdb\u884c\u6d4b\u8bd5, \u6b64\u65f6\u673a\u5668\u4eba\u53ea\u4f1a\u54cd\u5e94\u7fa4\u53f7\u4e3a 12345678 \u7684\u7fa4\u91cc\u7684\u6d88\u606f. \u63d0\u793a \u4f60\u4e5f\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u5305\u88c5\u5668\u51fd\u6570: def require_group ( * group_id : int ): async def wrapper ( group : Group ): if group . id not in group_id : raise ExecutionStop return wrapper @broadcast . receiver ( GroupMessage , decorators = [ Depend ( require_group ( 12345678 , 87654321 ))]) async def foo ( ... ): ... Decorator \u4e5f\u53ef\u4ee5\u914d\u5408\u524d\u9762\u63d0\u5230\u7684\u57fa\u7840\u6d88\u606f\u94fe\u5904\u7406\u5668, \u8fd8\u6709 Twilight \u4e00\u8d77\u4f7f\u7528: @broadcast . receiver ( GroupMessage , dispatchers = [ Twilight ( Sparkle ([ UnionMatch ( \"get_data\" , \"data\" )]))], decorators = [ Depend ( check_group )], ) async def get_data ( ... ): ...","title":"\u57fa\u7840: \u7528\u4e8e\u9a8c\u8bc1\u7684\u4f9d\u8d56"},{"location":"advance/broadcast/depend/#_2","text":"Depend \u53ef\u4ee5\u8fd4\u56de\u503c, \u4ee5\u4fbf\u4f60\u5728\u51fd\u6570\u4e2d\u76f4\u63a5\u4f7f\u7528. \u6bd4\u5982, \u5047\u8bbe\u4f60\u60f3\u5199\u4e00\u4e2a\u81ea\u52a8\u63d0\u53d6\u6d88\u606f\u4e2d\u56fe\u7247, \u5e76\u81ea\u52a8\u4e0b\u8f7d\u5176 bytes \u7684 Depend : \u8fd9\u91cc\u6211\u4eec\u5c06\u4f7f\u7528 Python \u7684 @decorator \u76f4\u63a5\u5305\u88c5\u8fd9\u4e2a\u5185\u90e8\u51fd\u6570. @Depend async def get_img_bytes ( chain : MessageChain ) -> List [ bytes ]: result : List [ bytes ] = [] for element in chain : if isinstance ( element , Image ): result . append ( await element . get_bytes ()) return result # example @broadcast . receiver ( GroupMessage ) async def save_images ( ... , img_bytes : List [ bytes ] = get_img_bytes ): for img_bytes in img_bytes : ... # do sth \u5c31\u662f\u8fd9\u6837! \u4f60\u53ef\u4ee5\u4e14\u5e94\u8be5\u901a\u8fc7\u5728\u51fd\u6570\u5b9a\u4e49\u7684 \u9ed8\u8ba4\u503c \u4f4d\u7f6e\u653e\u7f6e Decorator \u6765\u521b\u5efa\u6240\u8c13\u7684 \u201c\u6709\u5934\u88c5\u9970\u5668\u201d , Depend \u5305\u88c5\u51fd\u6570\u6240\u8fd4\u56de\u7684 \u6240\u6709 \u503c (\u5305\u62ec None ) \u90fd\u4f1a\u88ab\u4f20\u9012\u56de\u53bb. \u540c\u6837, \u5f15\u53d1\u7684 ExecutionStop \u4f1a\u62db\u81f4\u6267\u884c\u7684\u505c\u6b62. \u6700\u540e\u987a\u53e3\u4e00\u63d0, \u6709\u5934\u548c\u65e0\u5934\u88c5\u9970\u5668\u5e76\u4e0d\u51b2\u7a81. \u793e\u533a\u6587\u6863\u76f8\u5173\u7ae0\u8282: \u94fe\u63a5","title":"\u4e0b\u4e00\u6b65: \u4ee3\u7801\u590d\u7528"},{"location":"advance/broadcast/interrupt/","text":"Interrupt - \u4e2d\u65ad \ud83d\udd17 \u6709\u65f6\u4f60\u53ef\u80fd\u9700\u8981\u8fdb\u4e00\u6b65\u83b7\u53d6\u4fe1\u606f\u4ee5\u5904\u7406. \u6bd4\u5982\u8fd9\u6837: /kick 12345678 \u8bf7\u53d1\u9001 \"/confirm\" \u786e\u8ba4 /confirm \u5df2\u5c06 BadUser(12345678) \u8e22\u51fa \u5bf9\u4e8e\u6b64\u79cd\u4ea4\u4e92\u65b9\u5f0f, \u6211\u4eec\u63d0\u4f9b\u4e86 Interrupt \u4ee5\u652f\u6301. \u5f00\u59cb\u4f7f\u7528 \ud83d\udd17 \u5148\u8fdb\u884c\u5bfc\u5165: from graia.broadcast.interrupt import InterruptControl from graia.broadcast.interrupt.waiter import Waiter \u521b\u5efa InterruptControl \u5bf9\u8c61: \u76f4\u63a5\u521b\u5efa \u901a\u8fc7 Ariadne.create inc = InterruptControl ( broadcast ) inc = AriadneInstance . create ( InterruptControl ) \u4e4b\u540e\u521b\u5efa Waiter : \u901a\u8fc7\u51fd\u6570\u521b\u5efa \u7ee7\u627f Waiter.create \u751f\u6210\u7684\u7c7b \u76f4\u63a5\u7ee7\u627f Waiter @Waiter . create_using_function ([ ListeningEvent ]) def waiter ( ... ): # \u5224\u65ad\u548c\u5904\u7406 if condition : return True # \u53ea\u8981\u4e0d\u662f None \u5c31\u4f1a\u7ee7\u7eed\u6267\u884c \u63d0\u793a: \u8fd9\u4e2a\u51fd\u6570 \u63a8\u8350 \u4e3a\u95ed\u5305(\u5c40\u90e8)\u51fd\u6570 class DirectWaiter ( Waiter . create ([ GroupMessage ])): def __init__ ( self , group : Union [ Group , int ], member : Union [ Member , int ]): self . group = group if isinstance ( group , int ) else group . id self . member = member if isinstance ( member , int ) else member . id # detected_event \u65b9\u6cd5\u662f\u5fc5\u987b\u7684 async def detected_event ( self , group : Group , member : Member , message : MessageChain ): if self . group == group . id and self . member == member . id : return message class DirectWaiter ( Waiter ): listening_events = [ GroupMessage ] using_dispatchers = None using_decorators = None priority = 15 block_propagation = False def __init__ ( self , group : Union [ Group , int ], member : Union [ Member , int ]): self . group = group if isinstance ( group , int ) else group . id self . member = member if isinstance ( member , int ) else member . id # detected_event \u65b9\u6cd5\u662f\u5fc5\u987b\u7684 async def detected_event ( self , group : Group , member : Member , message : MessageChain ): if self . group == group . id and self . member == member . id : return message \u6ce8\u610f waiter() \u51fd\u6570\u5185\u586b\u5145\u7684\u53c2\u6570 \u4e0d\u80fd\u901a\u8fc7\u624b\u5de5\u4f20\u5165 , \u800c\u5e94\u8be5\u901a\u8fc7\u4e0e broadcast.receiver() \u4e00\u6837\u7684\u53c2\u6570\u5206\u6d3e\u673a\u5236\u8fdb\u884c\u81ea\u52a8\u586b\u5145. \u6ce8\u610f ListeningEvent \u4e0d\u80fd\u4f7f\u7528 \"GroupMessage\" \u8fd9\u79cd\u5b57\u7b26\u4e32\u5f62\u5f0f, \u800c\u8981\u5bfc\u5165\u5177\u4f53\u4e8b\u4ef6\u4e4b\u540e\u586b\u5165. \u63d0\u793a \u7ecf\u8fc7\u5305\u88c5\u540e, waiter \u51fd\u6570\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a SingleWaiter \u5bf9\u8c61. \u53ef\u4ee5\u5c06 Waiter.create_using_function \u770b\u4f5c Broadcast.receiver . dispatcher , decorator \u7b49 Broadcast \u7279\u6027\u662f\u53d7\u652f\u6301\u7684. \u4e4b\u540e\u5728\u4e3b\u76d1\u542c\u51fd\u6570\u4e2d: @broadcast . receiver ( ListeningEvent ) async def handler ( ... ): ... result = await inc . wait ( waiter ) # \u5728\u6b64\u5904\u7b49\u5f85 ... \u5728 InterruptControl.wait \u4e0a\u4f7f\u7528 timeout \u53c2\u6570\u53ef\u4ee5\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4, \u8d85\u65f6\u4f1a\u5f15\u53d1 TimeoutError . \u65b9\u4fbf\u7684\u5c01\u88c5 \ud83d\udd17 \u4ece Ariadne 0.6.16 \u5f00\u59cb, \u6211\u4eec\u5f15\u5165\u4e86\u4e24\u4e2a\u65b9\u4fbf\u7684 Waiter \u5c01\u88c5\uff1a FunctionWaiter EventWaiter \u4e8c\u8005\u652f\u6301\u4ee5\u4e0b\u7528\u6cd5: res = await FunctionWaiter ( ... ) . wait () try : res = await EventWaiter ( ... ) . wait ( timeout = 30 ) except asyncio . TimeoutError : ... \u7b49\u4ef7\u4e8e: inc = InterruptControl ( broadcast ) res = await inc . wait ( FunctionWaiter ( ... )) try : res = await inc . wait ( EventWaiter ( ... ), timeout = 30 ) except asyncio . TimeoutError : ... FunctionWaiter \u5bf9 Waiter.create_using_function \u7684\u7b80\u5355\u5c01\u88c5. \u5b83\u7684\u53c2\u6570\u540d\u66f4\u81ea\u7136, \u4e14\u81ea\u52a8\u652f\u6301\u4e86\u7c7b\u578b\u6807\u6ce8. EventWaiter \u8fd4\u56de\u5bf9\u5e94\u7684\u4e8b\u4ef6, \u548c Application \u4e2d\u63d0\u4f9b\u7684\u65b9\u4fbf\u5c01\u88c5\u7c7b\u4f3c. \u540c\u65f6\u63d0\u4f9b\u4e86 extra_validator \u4ee5\u4f9b\u4f60\u81ea\u5b9a\u4e49\u989d\u5916\u7684\u9a8c\u8bc1. \u914d\u5408 util.validator \u6a21\u5757\u4f7f\u7528\u66f4\u4f73 \u5b83\u662f\u600e\u4e48\u8fd0\u4f5c\u7684? \ud83d\udd17 Interrupt \u521b\u5efa\u7684 Waiter \u5bf9\u8c61\u5f88\u50cf asyncio.Future , \u662f\u57fa\u4e8e\u56de\u8c03\u7684\u8bbe\u8ba1. \u5728 inc.wait() \u65f6, \u4f1a\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u7684\u4e8b\u4ef6\u76d1\u542c\u5668, \u7b49\u5f85 Waiter \u6210\u529f\u6267\u884c\u4e8b\u4ef6\u5904\u7406, \u5e76\u5c06\u5176\u5904\u7406\u7ed3\u679c\u4f20\u56de inc.wait() \u7684\u8c03\u7528\u8005. \u4e5f\u5c31\u662f\u8bf4, inc.wait \u5224\u65ad, \u5904\u7406\u7684\u662f \"\u4e0b\u4e00\u4e2a\" \u6d88\u606f / \u4e8b\u4ef6. \u989d\u5916\u6d88\u606f \u4f60\u53ef\u4ee5\u5229\u7528 asyncio.wait_for() \u6765\u8fdb\u884c\u5e26\u6709\u8d85\u65f6\u7684\u76d1\u542c. \u5f53\u5176 Waiter \u5305\u88c5\u7684\u51fd\u6570\u8fd4\u56de\u975e None \u503c\u65f6, InterruptControl.wait \u65b9\u6cd5\u5c06\u8be5\u8fd4\u56de\u503c\u4f5c\u4e3a\u6267\u884c\u7ed3\u679c\u8fd4\u56de. \u4f60\u53ef\u4ee5\u8fdb\u4e00\u6b65\u5904\u7406\u8fd4\u56de\u503c. \u4f7f\u7528\u5faa\u73af\u53ef\u4ee5\u63a5\u53d7\u591a\u4e2a\u6d88\u606f\u7684\u53c2\u6570\u8f93\u5165. \u63d0\u793a \u901a\u8fc7\u5f80 Waiter.create_using_function \u6dfb\u52a0\u4e8b\u4ef6\u7c7b\u578b\u53ef\u4ee5\u540c\u65f6\u76d1\u542c\u591a\u4e2a\u4e8b\u4ef6, \u6216\u8005\u76f4\u63a5\u4f20\u5165 list(graia.ariadne.util.gen_subclass(EventType)) \u4e00\u53e3\u6c14\u63a5\u53d7\u6240\u6709\u5b50\u4e8b\u4ef6. \u5c31\u8fd9\u4e48\u591a, \u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u4ecb\u7ecd\u5728 FastAPI \u4e2d\u5e7f\u6cdb\u8fd0\u7528\u7684\u7279\u6027: \u4f9d\u8d56\u6ce8\u5165 ( Depend ). \u793e\u533a\u6587\u6863\u76f8\u5173\u7ae0\u8282: \u94fe\u63a5","title":"\u4e2d\u65ad"},{"location":"advance/broadcast/interrupt/#interrupt-","text":"\u6709\u65f6\u4f60\u53ef\u80fd\u9700\u8981\u8fdb\u4e00\u6b65\u83b7\u53d6\u4fe1\u606f\u4ee5\u5904\u7406. \u6bd4\u5982\u8fd9\u6837: /kick 12345678 \u8bf7\u53d1\u9001 \"/confirm\" \u786e\u8ba4 /confirm \u5df2\u5c06 BadUser(12345678) \u8e22\u51fa \u5bf9\u4e8e\u6b64\u79cd\u4ea4\u4e92\u65b9\u5f0f, \u6211\u4eec\u63d0\u4f9b\u4e86 Interrupt \u4ee5\u652f\u6301.","title":"Interrupt - \u4e2d\u65ad"},{"location":"advance/broadcast/interrupt/#_1","text":"\u5148\u8fdb\u884c\u5bfc\u5165: from graia.broadcast.interrupt import InterruptControl from graia.broadcast.interrupt.waiter import Waiter \u521b\u5efa InterruptControl \u5bf9\u8c61: \u76f4\u63a5\u521b\u5efa \u901a\u8fc7 Ariadne.create inc = InterruptControl ( broadcast ) inc = AriadneInstance . create ( InterruptControl ) \u4e4b\u540e\u521b\u5efa Waiter : \u901a\u8fc7\u51fd\u6570\u521b\u5efa \u7ee7\u627f Waiter.create \u751f\u6210\u7684\u7c7b \u76f4\u63a5\u7ee7\u627f Waiter @Waiter . create_using_function ([ ListeningEvent ]) def waiter ( ... ): # \u5224\u65ad\u548c\u5904\u7406 if condition : return True # \u53ea\u8981\u4e0d\u662f None \u5c31\u4f1a\u7ee7\u7eed\u6267\u884c \u63d0\u793a: \u8fd9\u4e2a\u51fd\u6570 \u63a8\u8350 \u4e3a\u95ed\u5305(\u5c40\u90e8)\u51fd\u6570 class DirectWaiter ( Waiter . create ([ GroupMessage ])): def __init__ ( self , group : Union [ Group , int ], member : Union [ Member , int ]): self . group = group if isinstance ( group , int ) else group . id self . member = member if isinstance ( member , int ) else member . id # detected_event \u65b9\u6cd5\u662f\u5fc5\u987b\u7684 async def detected_event ( self , group : Group , member : Member , message : MessageChain ): if self . group == group . id and self . member == member . id : return message class DirectWaiter ( Waiter ): listening_events = [ GroupMessage ] using_dispatchers = None using_decorators = None priority = 15 block_propagation = False def __init__ ( self , group : Union [ Group , int ], member : Union [ Member , int ]): self . group = group if isinstance ( group , int ) else group . id self . member = member if isinstance ( member , int ) else member . id # detected_event \u65b9\u6cd5\u662f\u5fc5\u987b\u7684 async def detected_event ( self , group : Group , member : Member , message : MessageChain ): if self . group == group . id and self . member == member . id : return message \u6ce8\u610f waiter() \u51fd\u6570\u5185\u586b\u5145\u7684\u53c2\u6570 \u4e0d\u80fd\u901a\u8fc7\u624b\u5de5\u4f20\u5165 , \u800c\u5e94\u8be5\u901a\u8fc7\u4e0e broadcast.receiver() \u4e00\u6837\u7684\u53c2\u6570\u5206\u6d3e\u673a\u5236\u8fdb\u884c\u81ea\u52a8\u586b\u5145. \u6ce8\u610f ListeningEvent \u4e0d\u80fd\u4f7f\u7528 \"GroupMessage\" \u8fd9\u79cd\u5b57\u7b26\u4e32\u5f62\u5f0f, \u800c\u8981\u5bfc\u5165\u5177\u4f53\u4e8b\u4ef6\u4e4b\u540e\u586b\u5165. \u63d0\u793a \u7ecf\u8fc7\u5305\u88c5\u540e, waiter \u51fd\u6570\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a SingleWaiter \u5bf9\u8c61. \u53ef\u4ee5\u5c06 Waiter.create_using_function \u770b\u4f5c Broadcast.receiver . dispatcher , decorator \u7b49 Broadcast \u7279\u6027\u662f\u53d7\u652f\u6301\u7684. \u4e4b\u540e\u5728\u4e3b\u76d1\u542c\u51fd\u6570\u4e2d: @broadcast . receiver ( ListeningEvent ) async def handler ( ... ): ... result = await inc . wait ( waiter ) # \u5728\u6b64\u5904\u7b49\u5f85 ... \u5728 InterruptControl.wait \u4e0a\u4f7f\u7528 timeout \u53c2\u6570\u53ef\u4ee5\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4, \u8d85\u65f6\u4f1a\u5f15\u53d1 TimeoutError .","title":"\u5f00\u59cb\u4f7f\u7528"},{"location":"advance/broadcast/interrupt/#_2","text":"\u4ece Ariadne 0.6.16 \u5f00\u59cb, \u6211\u4eec\u5f15\u5165\u4e86\u4e24\u4e2a\u65b9\u4fbf\u7684 Waiter \u5c01\u88c5\uff1a FunctionWaiter EventWaiter \u4e8c\u8005\u652f\u6301\u4ee5\u4e0b\u7528\u6cd5: res = await FunctionWaiter ( ... ) . wait () try : res = await EventWaiter ( ... ) . wait ( timeout = 30 ) except asyncio . TimeoutError : ... \u7b49\u4ef7\u4e8e: inc = InterruptControl ( broadcast ) res = await inc . wait ( FunctionWaiter ( ... )) try : res = await inc . wait ( EventWaiter ( ... ), timeout = 30 ) except asyncio . TimeoutError : ... FunctionWaiter \u5bf9 Waiter.create_using_function \u7684\u7b80\u5355\u5c01\u88c5. \u5b83\u7684\u53c2\u6570\u540d\u66f4\u81ea\u7136, \u4e14\u81ea\u52a8\u652f\u6301\u4e86\u7c7b\u578b\u6807\u6ce8. EventWaiter \u8fd4\u56de\u5bf9\u5e94\u7684\u4e8b\u4ef6, \u548c Application \u4e2d\u63d0\u4f9b\u7684\u65b9\u4fbf\u5c01\u88c5\u7c7b\u4f3c. \u540c\u65f6\u63d0\u4f9b\u4e86 extra_validator \u4ee5\u4f9b\u4f60\u81ea\u5b9a\u4e49\u989d\u5916\u7684\u9a8c\u8bc1. \u914d\u5408 util.validator \u6a21\u5757\u4f7f\u7528\u66f4\u4f73","title":"\u65b9\u4fbf\u7684\u5c01\u88c5"},{"location":"advance/broadcast/interrupt/#_3","text":"Interrupt \u521b\u5efa\u7684 Waiter \u5bf9\u8c61\u5f88\u50cf asyncio.Future , \u662f\u57fa\u4e8e\u56de\u8c03\u7684\u8bbe\u8ba1. \u5728 inc.wait() \u65f6, \u4f1a\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u7684\u4e8b\u4ef6\u76d1\u542c\u5668, \u7b49\u5f85 Waiter \u6210\u529f\u6267\u884c\u4e8b\u4ef6\u5904\u7406, \u5e76\u5c06\u5176\u5904\u7406\u7ed3\u679c\u4f20\u56de inc.wait() \u7684\u8c03\u7528\u8005. \u4e5f\u5c31\u662f\u8bf4, inc.wait \u5224\u65ad, \u5904\u7406\u7684\u662f \"\u4e0b\u4e00\u4e2a\" \u6d88\u606f / \u4e8b\u4ef6. \u989d\u5916\u6d88\u606f \u4f60\u53ef\u4ee5\u5229\u7528 asyncio.wait_for() \u6765\u8fdb\u884c\u5e26\u6709\u8d85\u65f6\u7684\u76d1\u542c. \u5f53\u5176 Waiter \u5305\u88c5\u7684\u51fd\u6570\u8fd4\u56de\u975e None \u503c\u65f6, InterruptControl.wait \u65b9\u6cd5\u5c06\u8be5\u8fd4\u56de\u503c\u4f5c\u4e3a\u6267\u884c\u7ed3\u679c\u8fd4\u56de. \u4f60\u53ef\u4ee5\u8fdb\u4e00\u6b65\u5904\u7406\u8fd4\u56de\u503c. \u4f7f\u7528\u5faa\u73af\u53ef\u4ee5\u63a5\u53d7\u591a\u4e2a\u6d88\u606f\u7684\u53c2\u6570\u8f93\u5165. \u63d0\u793a \u901a\u8fc7\u5f80 Waiter.create_using_function \u6dfb\u52a0\u4e8b\u4ef6\u7c7b\u578b\u53ef\u4ee5\u540c\u65f6\u76d1\u542c\u591a\u4e2a\u4e8b\u4ef6, \u6216\u8005\u76f4\u63a5\u4f20\u5165 list(graia.ariadne.util.gen_subclass(EventType)) \u4e00\u53e3\u6c14\u63a5\u53d7\u6240\u6709\u5b50\u4e8b\u4ef6. \u5c31\u8fd9\u4e48\u591a, \u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u4ecb\u7ecd\u5728 FastAPI \u4e2d\u5e7f\u6cdb\u8fd0\u7528\u7684\u7279\u6027: \u4f9d\u8d56\u6ce8\u5165 ( Depend ). \u793e\u533a\u6587\u6863\u76f8\u5173\u7ae0\u8282: \u94fe\u63a5","title":"\u5b83\u662f\u600e\u4e48\u8fd0\u4f5c\u7684?"},{"location":"appendix/CHANGELOG/","text":"\u66f4\u6539\u65e5\u5fd7 \ud83d\udd17 0.6.16 \ud83d\udd17 \u65b0\u589e \ud83d\udd17 \u73b0\u5728\u53ef\u4ee5\u901a\u8fc7 graia.ariadne.util.interrupt \u4e2d\u7684 FunctionWaiter \u4e0e EventWaiter \u66f4\u65b9\u4fbf\u5730\u4f7f\u7528\u4e2d\u65ad(Interrupt)\u4e86. ( \u4f7f\u7528\u8bf4\u660e ) \u73b0\u5728\u53ef\u4ee5\u4f7f\u7528 graia.ariadne.util.validator \u4e2d\u7684 CertainGroup \u3001 CertainFriend \u3001 CertainMember \u4e0e Quoting \u4f5c\u4e3a decorator \u7528\u4e8e\u6307\u5b9a \u5fc5\u987b\u7531\u54ea\u4e2a\u7fa4/\u597d\u53cb/\u7fa4\u6210\u5458 \u6216 \u5fc5\u987b\u56de\u590d\u6307\u5b9a\u6d88\u606f(\u4f7f\u7528\u6d88\u606fID) \u624d\u80fd\u89e6\u53d1. \u65b0\u589e FuzzyMatch . (\u6a21\u7cca\u5339\u914d\uff0c\u66f4\u63a8\u8350\u4f7f\u7528 FuzzyDispatcher \uff0c \u4f7f\u7528\u8bf4\u660e ) \u53ef\u4ee5\u5728 Group \u3001 Member \u3001 Friend \u4e0e Stranger \u4e4b\u95f4\u4f7f\u7528 == \u8fd0\u7b97\u7b26\u5224\u65ad\u662f\u5426\u4e3a\u540c\u4e00\u5bf9\u8c61\u4e86. \u6539\u8fdb \ud83d\udd17 \u63d0\u9ad8\u4e86 Adapter \u7684\u7a33\u5b9a\u6027. \u4f18\u5316\u4e86 Twilight \u7684\u5e2e\u52a9\u5b57\u7b26\u4e32\u751f\u6210\u5668. (\u5982: \u53ef\u81ea\u5b9a\u4e49\u683c\u5f0f\u5316\u5e2e\u52a9\u5b57\u7b26\u4e32\u7684\u683c\u5f0f) \u4f18\u5316\u4e86 Ariadne \u7684\u751f\u547d\u5468\u671f\u7684\u5b9e\u73b0. \u4fee\u590d \ud83d\udd17 \u4fee\u590d\u4e86 GroupNameChangeEvent \u4e0e GroupEntranceAnnouncementChangeEvent \u7684\u5b57\u6bb5\u7c7b\u578b. 0.6.15 \ud83d\udd17 \u4fee\u590d Ariadne Adapter \u8fc7\u65e9\u8bbe\u7f6e connected \u65d7\u6807\u7684 bug. ( #131 ) \u63d0\u5347\u4e86 CoolDown \u7684\u4ee3\u7801\u8865\u5168. 0.6.14 \ud83d\udd17 \u4fee\u590d Python 3.8 \u517c\u5bb9\u6027 ( #130 ) \u652f\u6301\u98ce\u63a7\u65e5\u5fd7\u8b66\u544a. \u8865\u5145 graia.ariadne.entry \u5bfc\u51fa. 0.6.13 \ud83d\udd17 \u5c06 WildcardMatch \u884c\u4e3a\u66f4\u6362\u4e3a\u4ee5\u524d\u7684\u884c\u4e3a (\u4f9d\u7167\u662f\u5426\u6709\u5185\u5bb9\u5224\u65ad matched \u5b57\u6bb5). \u4fee\u590d AriadneBaseModel.dict \u4f1a\u5f15\u53d1 Deprecated \u7684\u9519\u8bef. 0.6.12 \ud83d\udd17 \u652f\u6301 NudgeEvent \u63a5\u6536 Union[Friend, Group] \u6765\u83b7\u53d6\u6233\u4e00\u6233\u4f4d\u7f6e. \u4fee\u590d get_running . 0.6.11 \ud83d\udd17 \u4fee\u590d MentionMe , \u4f18\u5316\u4e86 Adapter \u6027\u80fd. \u66f4\u65b0\u4e86 API \u6587\u6863 . 0.6.10 \ud83d\udd17 \u79fb\u9664\u5f03\u7528\u7684 getMemberInfo : \u8bf7\u6539\u7528 getMember . \u4fee\u590d\u4e86\u81ea\u52a8\u91cd\u8fde. 0.6.9 \ud83d\udd17 \u4fee\u590d #122 0.6.8 \ud83d\udd17 \u652f\u6301\u4e86 registerCommand executeCommand CommandExecuted \u76f8\u5173\u7684 API \u4e0e\u4e8b\u4ef6. \u4fee\u590d\u4e86 getUserProfile . \u4fee\u590d\u4e86\u4ec5\u4f7f\u7528 Websocket \u7684\u9002\u914d\u5668\u7684\u9519\u8bef\u884c\u4e3a. \u5f03\u7528 getMemberInfo \u5df2\u88ab\u5f03\u7528\uff0c\u8bf7\u4f7f\u7528 getMember \u66ff\u4ee3, \u5c06\u5728 0.6.10 \u6216\u66f4\u9ad8\u7248\u672c\u4e2d\u79fb\u9664\u3002 0.6.7 \ud83d\udd17 \u4fee\u590d Alconna . \u4fee\u590d getFileIterator \u4e0e getAnnouncementIterator . 0.6.6 \ud83d\udd17 \u4e3a Twilight \u4f7f\u7528\u6cdb\u578b\u53c2\u6570\u5206\u53d1. \u652f\u6301\u4f7f\u7528 Compose \u6765\u7ec4\u5408\u57fa\u672c\u7684 Decorator . \u4fee\u590d\u76f4\u63a5\u4ece typing \u5bfc\u5165 Annotated \u5bfc\u81f4\u7684 Python 3.8 \u65e0\u6cd5\u4f7f\u7528. \u4fee\u590d\u4e00\u4e9b\u5730\u65b9\u9519\u8bef\u7684 get_running \u5bfc\u5165. \u4fee\u590d publishAnnouncement \u4e2d\u672a\u5bf9 base64 \u8fdb\u884c\u89e3\u7801\u7684\u95ee\u9898. \u79fb\u9664 Commander \u7684 assert \u8f85\u52a9\u51fd\u6570\u4f7f\u7528. \u5c06 graia.ariadne.util.helper.CoolDown \u6539\u4e3a graia.ariadne.util.cooldown.CoolDown . 0.6.5 \ud83d\udd17 \u66f4\u6539 Alconna \u9002\u5e94 0.7.2 \u6539\u53d8 ( #118 ) ( @RF-Tar-Railt ) 0.6.4 \ud83d\udd17 \u4e3a\u6240\u6709\u4e8b\u4ef6\u542f\u7528\u6cdb\u578b\u53c2\u6570\u5206\u53d1\u652f\u6301. \u4fee\u590d CoolDown ( #117 ) ( @Redlnn ) 0.6.3 \ud83d\udd17 \u4fee\u590d \ud83d\udd17 Mention \u4e0e MentionMe \u5b9e\u73b0. Twilight \u5bf9 ArgumentMatch \u662f\u5426\u5339\u914d\u5224\u65ad\u9519\u8bef. \u6539\u8fdb \ud83d\udd17 \u5141\u8bb8 Group.getAvatar \u4f7f\u7528 cover \u53c2\u6570\u540d\u83b7\u53d6\u5176\u4ed6\u5c01\u9762. ( #116 ) ( @SocialSisterYi ) \u652f\u6301 twilight.Match \u4f7f\u7528\u4f4d\u79fb\u7b26\u53f7. \u5141\u8bb8 Ariadne.create \u5c1d\u8bd5\u9012\u5f52\u521b\u5efa\u5bf9\u8c61. Twilight \u66f4\u597d\u7684\u5e2e\u52a9\u751f\u6210. \u66f4\u65b0 Alconna \u81f3 0.7+ \u5e76\u6dfb\u52a0 skip_for_unmatch \u53c2\u6570. ( #115 ) 0.6.2 \ud83d\udd17 \u6dfb\u52a0 \ud83d\udd17 \u589e\u52a0 graia.ariadne.util.helper.CoolDown \u5de5\u5177\u7c7b. \u6539\u8fdb \ud83d\udd17 ReverseAdapter \u73b0\u5728\u4f1a\u5728 5s \u5185\u9000\u51fa\u5931\u8d25\u540e\u5f3a\u5236\u9000\u51fa. 0.6.1 \ud83d\udd17 \u6539\u52a8 \ud83d\udd17 \u91cd\u547d\u540d\u539f\u6765\u7684 CombinedAdapter \u4e3a ComposeForwardAdapter \u6dfb\u52a0 \ud83d\udd17 \u589e\u52a0\u4e86 ReverseAdapter , \u57fa\u4e8e\u670d\u52a1\u5668\u7684\u9002\u914d\u5668. ( #114 ) \u4fee\u590d \ud83d\udd17 WebsocketAdapter.call_api \u65e0\u6cd5\u6b63\u5e38\u8fd0\u4f5c Twilight.from_command ( #112 ) Alconna \u76f8\u5173 ( #111 ) 0.6.0 \ud83d\udd17 \u8b66\u544a 0.6.0 Twilight API \u6709\u91cd\u5927\u53d8\u52a8, \u4e3a\u4e0d\u517c\u5bb9\u66f4\u65b0 \u7834\u574f\u6027\u53d8\u52a8 \ud83d\udd17 \u91cd\u6784 Twilight ( #106 ) \u5c06 Ariadne.get_running \u79fb\u81f3 graia.ariadne \u547d\u540d\u7a7a\u95f4. asMappingString \u4e0e fromMappingString \u73b0\u5728\u4ec5\u4f9b\u5185\u90e8\u4f7f\u7528. \u6dfb\u52a0 \ud83d\udd17 \u5b8c\u6210\u65b0\u7248 Mirai API HTTP \u652f\u6301: ( #102 ) \u652f\u6301 \u7fa4\u516c\u544a\u63a5\u53e3 \u652f\u6301 getFileIterator \u4e0e getAnnouncementIterator \u7528\u4e8e\u904d\u5386\u6587\u4ef6\u4fe1\u606f\u4e0e\u7fa4\u516c\u544a. \u6dfb\u52a0 MatchTemplate \u7528\u4e8e\u6d88\u606f\u94fe\u6a21\u677f\u5339\u914d. \u6539\u8fdb \ud83d\udd17 MessageChain.download_binary \u4f1a\u8fd4\u56de\u81ea\u8eab\u4ee5\u652f\u6301\u94fe\u5f0f\u8c03\u7528. MessageChain \u4e0e Element \u90fd\u5b8c\u6574\u652f\u6301\u76f8\u52a0\u64cd\u4f5c. Twilight \u6027\u80fd\u5927\u5e45\u5ea6\u63d0\u5347. \u63d0\u9ad8\u6d88\u606f\u65e5\u5fd7\u8bb0\u5f55\u7684\u4f18\u5148\u7ea7. ( #107 ) \u4fee\u590d \ud83d\udd17 AlconnaDispatcher \u65e0\u6cd5\u8fd0\u4f5c. Mention \u65e0\u6cd5\u8fd0\u4f5c. \u672a\u5c06 MiddlewareDispatcher \u6ce8\u5165\u5bfc\u81f4\u65e0\u6cd5\u5904\u7406 ExceptionThrowed . \u6587\u4ef6\u4e0a\u4f20\u65f6\u6587\u4ef6\u540d\u4f1a\u88ab\u7f16\u7801 ( #108 ) \u5220\u9664 \ud83d\udd17 Literature \u6d88\u606f\u94fe\u89e3\u6790\u5668. Component \u6d88\u606f\u94fe\u5de5\u5177. 0.5.3 \ud83d\udd17 \u6dfb\u52a0 \ud83d\udd17 \u5b8c\u6210\u65b0\u7248 Mirai API HTTP \u652f\u6301: ( #102 ) \u6dfb\u52a0 ActiveMessage \u7cfb\u5217\u4e3b\u52a8\u4e8b\u4ef6: ActiveFriendMessage ActiveGroupMessage ActiveTempMessage \u53ca\u5176\u5bf9\u5e94 SyncMessage . \u6dfb\u52a0 MarketFace \u5143\u7d20\u7c7b\u578b (\u7528\u6237\u65e0\u6cd5\u53d1\u9001). \u6dfb\u52a0 getUserProfile API (\u672a merge). \u5728 Member Group Friend \u4e0a\u6dfb\u52a0 getAvatar API. Ariadne.get_running API \u7528\u4e8e\u66ff\u4ee3\u65e7\u7684 xxx_ctx.get() . Commander \u7684 Saya \u652f\u6301. \u4fee\u590d \ud83d\udd17 Broadcast \u7684 Decorator \u65e0\u6cd5\u6b63\u5e38\u8fd0\u4f5c. \u66f4\u597d\u7684\u591a\u8d26\u53f7\u652f\u6301. 0.5.2 \ud83d\udd17 \u6dfb\u52a0 \ud83d\udd17 \u5b9e\u73b0 MessageChain.replace ( #97 ) \u4fee\u590d \ud83d\udd17 Commander \u884c\u4e3a\u9519\u8bef, \u6027\u80fd\u8fc7\u4f4e. 0.5.1 \u5bf9 Broadcast Control v0.15 \u7684\u9002\u914d\u4e0d\u5b8c\u5584. \u90e8\u5206\u6d88\u606f\u94fe\u5904\u7406\u5668\u56e0 asMappingString API \u53d8\u52a8\u635f\u574f. \u5220\u9664 \ud83d\udd17 Twilight \u4e2d\u7684 ArgumentMatch \u82e5\u662f\u4f4d\u7f6e\u5339\u914d\u73b0\u5728\u4f1a\u5f15\u53d1\u5f02\u5e38. \u5220\u9664 graia.ariadne.message.parser.pattern \u6a21\u5757. 0.5.1 \ud83d\udd17 \u6dfb\u52a0 \ud83d\udd17 \u5b9e\u73b0 Ariadne Commander . ( #70 #76 #80 #82 #86 ) Ariadne.sendMessage \u652f\u6301\u901a\u8fc7 action \u81ea\u5b9a\u4e49\u884c\u4e3a. ( #75 ) \u652f\u6301 MessageChain[int : int] \u683c\u5f0f\u7684\u539f\u59cb\u5207\u7247. \u652f\u6301\u5bf9 Friend Group Member \u7b49\u5bf9\u8c61\u6267\u884c int \u4ee5\u83b7\u53d6\u5176 id \u5c5e\u6027. \u5e76\u62d3\u5c55\u4e86\u4e00\u4e9b\u65b9\u4fbf\u65b9\u6cd5. \u6709\u591a\u4e2a Member \u5bf9\u8c61\u5c5e\u6027\u7684\u4e8b\u4ef6\u5bf9 Member \u7684\u5206\u6d3e ( #81 ) Ariadne \u7684\u64cd\u4f5c\u5747\u4f1a\u5f15\u53d1\u5ba1\u8ba1\u4e8b\u4ef6 (Audit Event): CallAriadneAPI , \u5e26\u6709 api_name args kwargs \u4e09\u4e2a\u53c2\u6570. ( #74 ) Ariadne \u6536\u5230\u7684\u4e8b\u4ef6\u4f1a\u989d\u5916\u5f15\u53d1\u5ba1\u8ba1\u4e8b\u4ef6 (Audit Event): AriadnePostRemoteEvent , \u643a\u5e26 event \u5355\u4e2a\u53c2\u6570. ( #73 ) \u6dfb\u52a0\u4e86 SenderDispatcher . ( #84 ) \u652f\u6301\u5bf9 MemberPerm \u8fdb\u884c\u5bcc\u6bd4\u8f83\u64cd\u4f5c. ( #85 ) MessageChain \u90e8\u5206\u64cd\u4f5c\u52a0\u901f. \u66f4\u597d\u7684 Mirai Event \u6587\u6863\u5b57\u7b26\u4e32. Ariadne.recallMessage \u652f\u6301\u4f7f\u7528 MessageChain . \u9ed8\u8ba4\u5173\u95ed\u9002\u914d\u5668 websocket \u65e5\u5fd7, \u66f4\u597d\u7684\u8fde\u63a5\u5931\u8d25\u63d0\u793a. \u4fee\u590d \ud83d\udd17 MessageChain.endswith \u7684\u884c\u4e3a\u5f02\u5e38 ( #68 ) \u6d88\u606f\u5143\u7d20\u4e2d\u7684\u6233\u4e00\u6233 (Poke) \u65e0\u6cd5\u53d1\u9001 ( #77 ) \u81ea\u52a8\u5904\u7406\u4e0d\u652f\u6301\u7684\u6d88\u606f\u7c7b\u578b ( #79 ) Commander \u4e0e Console \u4f1a\u81ea\u52a8\u89e3\u6790 dispatcher \u7684 mixin . \u4fee\u590d BotMuteEvent \u7684 Group \u89e3\u6790\u95ee\u9898. \u4fee\u590d\u90e8\u5206\u4e8b\u4ef6\u7684\u5206\u7c7b\u9519\u8bef\u95ee\u9898. \u4fee\u590d\u4e0d\u540c\u7c7b\u578b\u5b50\u4e8b\u4ef6\u88ab\u540c\u65f6\u76d1\u542c\u65f6\u7684 Broadcast \u9519\u8bef\u8c03\u7528 Dispatcher \u7684\u95ee\u9898 ( #83 ) \u4fdd\u8bc1 MessageChain \u5143\u7d20\u5bf9\u8c61\u5b89\u5168\u6027. \u964d\u4f4e\u5168\u5c40 ApplicationMiddlewareDispatcher \u4f18\u5148\u7ea7. \u652f\u6301 Graia Broadcast v0.15 ( #88 ) \u5f03\u7528 \ud83d\udd17 Twilight \u4e2d\u7684 ArgumentMatch \u82e5\u662f\u4f4d\u7f6e\u5339\u914d\u5219\u4f1a\u88ab\u9759\u9ed8\u66ff\u6362\u4e3a ParamMatch . \u5728 0.5.2 \u4e2d\u8fd9\u6837\u7684\u6784\u9020\u65b9\u5f0f\u4f1a\u76f4\u63a5\u5f15\u53d1\u5f02\u5e38. \u79fb\u9664 \ud83d\udd17 \u79fb\u9664\u6a21\u5757 graia.ariadne.event.network . ( \u56e0\u4e3a\u6ca1\u6709\u4eba\u7528 ) 0.5.0 \ud83d\udd17 \u6dfb\u52a0 \ud83d\udd17 \u6dfb\u52a0\u4e86\u5185\u7f6e Console ( #41 ) \u6dfb\u52a0\u4e86\u65b0\u7684\u6d88\u606f\u94fe\u89e3\u6790\u5de5\u5177\u2014\u2014 Alconna ( #37 ) \u6539\u52a8 \ud83d\udd17 \u73b0\u5728\u53ef\u4ee5\u63a5\u6536 Broadcast \u4e0e Adapter \u5b9e\u4f8b\u4e86 \u53ef\u4ee5\u6784\u9020\u8f6c\u53d1\u6d88\u606f\u4e86 \u53ef\u4ee5\u7981\u7528 WebsocketAdapter \u7684\u5fc3\u8df3\u5305\u7684 log\u4e86 ArgumentMatch \u652f\u6301\u7c7b\u578b\u5339\u914d\u4e86 \u65b0\u7684\u542f\u52a8\u4e0e\u505c\u6b62 Ariadne \u7684\u65b9\u6cd5 Adapter \u7684\u505c\u6b62\u8fc7\u7a0b\u66f4\u5b89\u5168\u4e86 ( #30 , #65 ) \u53ef\u4ee5\u66f4\u597d\u7684\u83b7\u53d6\u5b9e\u4f8b\u6240\u8f96\u8d26\u53f7\u4e86( #31 ) \u63d0\u5347 Twilight \u7684\u6027\u80fd ( #44 ) sendNudge \uff08\u53d1\u9001\u6233\u4e00\u6233\uff09\u73b0\u5728\u66f4\u7075\u6d3b\u4e86 ( #47 ) \u5411 ParallelExecutor \u6dfb\u52a0 to_thread \u4e0e to_process ( #50 ) \u5c06 graia.ariadne.message.parser.pattern \u7684\u6240\u6709\u5185\u5bb9\u79fb\u5230 Literature \u4e0e Twilight \u6a21\u5757\u91cc ( #53 ) \u6dfb\u52a0 ParamMatch \u5e76\u62d3\u5c55 Sparkle.__getitem__ ( #57 ) \u6dfb\u52a0 space \u53c2\u6570\u4e0e SpacePolicy \u4ee5\u66ff\u4ee3 preserve_space ( #59 ) Ariadne.uploadFile \u652f\u6301\u6307\u5b9a\u6587\u4ef6\u540d ( #66 ) \u4fee\u590d \ud83d\udd17 Ariadne.uploadImage \u51fa\u9519 ( #43 ) async_exec \u76f8\u5173 ( #50 ) Queue.get \u4efb\u52a1\u9000\u51fa\u65f6\u6ca1\u88ab await ( #51 ) \u81ea\u52a8\u7528 repr() \u8f6c\u4e49 log \u4e2d\u53d1\u9001\u7684\u6d88\u606f ( #58 ) Adapter \u4e0d\u4f1a\u81ea\u52a8\u91cd\u8fde ( #60 ) NudgeEvent \u63a5\u6536\u964c\u751f\u4eba\u7684\u6233\u4e00\u6233\u51fa\u9519 ( #63 ) Breaking Changes \ud83d\udd17 Ariadne.request_stop -> Ariadne.stop Ariadne.wait_for_stop -> Ariadne.join","title":"\u66f4\u65b0\u65e5\u5fd7"},{"location":"appendix/CHANGELOG/#_1","text":"","title":"\u66f4\u6539\u65e5\u5fd7"},{"location":"appendix/CHANGELOG/#0616","text":"","title":"0.6.16"},{"location":"appendix/CHANGELOG/#_2","text":"\u73b0\u5728\u53ef\u4ee5\u901a\u8fc7 graia.ariadne.util.interrupt \u4e2d\u7684 FunctionWaiter \u4e0e EventWaiter \u66f4\u65b9\u4fbf\u5730\u4f7f\u7528\u4e2d\u65ad(Interrupt)\u4e86. ( \u4f7f\u7528\u8bf4\u660e ) \u73b0\u5728\u53ef\u4ee5\u4f7f\u7528 graia.ariadne.util.validator \u4e2d\u7684 CertainGroup \u3001 CertainFriend \u3001 CertainMember \u4e0e Quoting \u4f5c\u4e3a decorator \u7528\u4e8e\u6307\u5b9a \u5fc5\u987b\u7531\u54ea\u4e2a\u7fa4/\u597d\u53cb/\u7fa4\u6210\u5458 \u6216 \u5fc5\u987b\u56de\u590d\u6307\u5b9a\u6d88\u606f(\u4f7f\u7528\u6d88\u606fID) \u624d\u80fd\u89e6\u53d1. \u65b0\u589e FuzzyMatch . (\u6a21\u7cca\u5339\u914d\uff0c\u66f4\u63a8\u8350\u4f7f\u7528 FuzzyDispatcher \uff0c \u4f7f\u7528\u8bf4\u660e ) \u53ef\u4ee5\u5728 Group \u3001 Member \u3001 Friend \u4e0e Stranger \u4e4b\u95f4\u4f7f\u7528 == \u8fd0\u7b97\u7b26\u5224\u65ad\u662f\u5426\u4e3a\u540c\u4e00\u5bf9\u8c61\u4e86.","title":"\u65b0\u589e"},{"location":"appendix/CHANGELOG/#_3","text":"\u63d0\u9ad8\u4e86 Adapter \u7684\u7a33\u5b9a\u6027. \u4f18\u5316\u4e86 Twilight \u7684\u5e2e\u52a9\u5b57\u7b26\u4e32\u751f\u6210\u5668. (\u5982: \u53ef\u81ea\u5b9a\u4e49\u683c\u5f0f\u5316\u5e2e\u52a9\u5b57\u7b26\u4e32\u7684\u683c\u5f0f) \u4f18\u5316\u4e86 Ariadne \u7684\u751f\u547d\u5468\u671f\u7684\u5b9e\u73b0.","title":"\u6539\u8fdb"},{"location":"appendix/CHANGELOG/#_4","text":"\u4fee\u590d\u4e86 GroupNameChangeEvent \u4e0e GroupEntranceAnnouncementChangeEvent \u7684\u5b57\u6bb5\u7c7b\u578b.","title":"\u4fee\u590d"},{"location":"appendix/CHANGELOG/#0615","text":"\u4fee\u590d Ariadne Adapter \u8fc7\u65e9\u8bbe\u7f6e connected \u65d7\u6807\u7684 bug. ( #131 ) \u63d0\u5347\u4e86 CoolDown \u7684\u4ee3\u7801\u8865\u5168.","title":"0.6.15"},{"location":"appendix/CHANGELOG/#0614","text":"\u4fee\u590d Python 3.8 \u517c\u5bb9\u6027 ( #130 ) \u652f\u6301\u98ce\u63a7\u65e5\u5fd7\u8b66\u544a. \u8865\u5145 graia.ariadne.entry \u5bfc\u51fa.","title":"0.6.14"},{"location":"appendix/CHANGELOG/#0613","text":"\u5c06 WildcardMatch \u884c\u4e3a\u66f4\u6362\u4e3a\u4ee5\u524d\u7684\u884c\u4e3a (\u4f9d\u7167\u662f\u5426\u6709\u5185\u5bb9\u5224\u65ad matched \u5b57\u6bb5). \u4fee\u590d AriadneBaseModel.dict \u4f1a\u5f15\u53d1 Deprecated \u7684\u9519\u8bef.","title":"0.6.13"},{"location":"appendix/CHANGELOG/#0612","text":"\u652f\u6301 NudgeEvent \u63a5\u6536 Union[Friend, Group] \u6765\u83b7\u53d6\u6233\u4e00\u6233\u4f4d\u7f6e. \u4fee\u590d get_running .","title":"0.6.12"},{"location":"appendix/CHANGELOG/#0611","text":"\u4fee\u590d MentionMe , \u4f18\u5316\u4e86 Adapter \u6027\u80fd. \u66f4\u65b0\u4e86 API \u6587\u6863 .","title":"0.6.11"},{"location":"appendix/CHANGELOG/#0610","text":"\u79fb\u9664\u5f03\u7528\u7684 getMemberInfo : \u8bf7\u6539\u7528 getMember . \u4fee\u590d\u4e86\u81ea\u52a8\u91cd\u8fde.","title":"0.6.10"},{"location":"appendix/CHANGELOG/#069","text":"\u4fee\u590d #122","title":"0.6.9"},{"location":"appendix/CHANGELOG/#068","text":"\u652f\u6301\u4e86 registerCommand executeCommand CommandExecuted \u76f8\u5173\u7684 API \u4e0e\u4e8b\u4ef6. \u4fee\u590d\u4e86 getUserProfile . \u4fee\u590d\u4e86\u4ec5\u4f7f\u7528 Websocket \u7684\u9002\u914d\u5668\u7684\u9519\u8bef\u884c\u4e3a. \u5f03\u7528 getMemberInfo \u5df2\u88ab\u5f03\u7528\uff0c\u8bf7\u4f7f\u7528 getMember \u66ff\u4ee3, \u5c06\u5728 0.6.10 \u6216\u66f4\u9ad8\u7248\u672c\u4e2d\u79fb\u9664\u3002","title":"0.6.8"},{"location":"appendix/CHANGELOG/#067","text":"\u4fee\u590d Alconna . \u4fee\u590d getFileIterator \u4e0e getAnnouncementIterator .","title":"0.6.7"},{"location":"appendix/CHANGELOG/#066","text":"\u4e3a Twilight \u4f7f\u7528\u6cdb\u578b\u53c2\u6570\u5206\u53d1. \u652f\u6301\u4f7f\u7528 Compose \u6765\u7ec4\u5408\u57fa\u672c\u7684 Decorator . \u4fee\u590d\u76f4\u63a5\u4ece typing \u5bfc\u5165 Annotated \u5bfc\u81f4\u7684 Python 3.8 \u65e0\u6cd5\u4f7f\u7528. \u4fee\u590d\u4e00\u4e9b\u5730\u65b9\u9519\u8bef\u7684 get_running \u5bfc\u5165. \u4fee\u590d publishAnnouncement \u4e2d\u672a\u5bf9 base64 \u8fdb\u884c\u89e3\u7801\u7684\u95ee\u9898. \u79fb\u9664 Commander \u7684 assert \u8f85\u52a9\u51fd\u6570\u4f7f\u7528. \u5c06 graia.ariadne.util.helper.CoolDown \u6539\u4e3a graia.ariadne.util.cooldown.CoolDown .","title":"0.6.6"},{"location":"appendix/CHANGELOG/#065","text":"\u66f4\u6539 Alconna \u9002\u5e94 0.7.2 \u6539\u53d8 ( #118 ) ( @RF-Tar-Railt )","title":"0.6.5"},{"location":"appendix/CHANGELOG/#064","text":"\u4e3a\u6240\u6709\u4e8b\u4ef6\u542f\u7528\u6cdb\u578b\u53c2\u6570\u5206\u53d1\u652f\u6301. \u4fee\u590d CoolDown ( #117 ) ( @Redlnn )","title":"0.6.4"},{"location":"appendix/CHANGELOG/#063","text":"","title":"0.6.3"},{"location":"appendix/CHANGELOG/#_5","text":"Mention \u4e0e MentionMe \u5b9e\u73b0. Twilight \u5bf9 ArgumentMatch \u662f\u5426\u5339\u914d\u5224\u65ad\u9519\u8bef.","title":"\u4fee\u590d"},{"location":"appendix/CHANGELOG/#_6","text":"\u5141\u8bb8 Group.getAvatar \u4f7f\u7528 cover \u53c2\u6570\u540d\u83b7\u53d6\u5176\u4ed6\u5c01\u9762. ( #116 ) ( @SocialSisterYi ) \u652f\u6301 twilight.Match \u4f7f\u7528\u4f4d\u79fb\u7b26\u53f7. \u5141\u8bb8 Ariadne.create \u5c1d\u8bd5\u9012\u5f52\u521b\u5efa\u5bf9\u8c61. Twilight \u66f4\u597d\u7684\u5e2e\u52a9\u751f\u6210. \u66f4\u65b0 Alconna \u81f3 0.7+ \u5e76\u6dfb\u52a0 skip_for_unmatch \u53c2\u6570. ( #115 )","title":"\u6539\u8fdb"},{"location":"appendix/CHANGELOG/#062","text":"","title":"0.6.2"},{"location":"appendix/CHANGELOG/#_7","text":"\u589e\u52a0 graia.ariadne.util.helper.CoolDown \u5de5\u5177\u7c7b.","title":"\u6dfb\u52a0"},{"location":"appendix/CHANGELOG/#_8","text":"ReverseAdapter \u73b0\u5728\u4f1a\u5728 5s \u5185\u9000\u51fa\u5931\u8d25\u540e\u5f3a\u5236\u9000\u51fa.","title":"\u6539\u8fdb"},{"location":"appendix/CHANGELOG/#061","text":"","title":"0.6.1"},{"location":"appendix/CHANGELOG/#_9","text":"\u91cd\u547d\u540d\u539f\u6765\u7684 CombinedAdapter \u4e3a ComposeForwardAdapter","title":"\u6539\u52a8"},{"location":"appendix/CHANGELOG/#_10","text":"\u589e\u52a0\u4e86 ReverseAdapter , \u57fa\u4e8e\u670d\u52a1\u5668\u7684\u9002\u914d\u5668. ( #114 )","title":"\u6dfb\u52a0"},{"location":"appendix/CHANGELOG/#_11","text":"WebsocketAdapter.call_api \u65e0\u6cd5\u6b63\u5e38\u8fd0\u4f5c Twilight.from_command ( #112 ) Alconna \u76f8\u5173 ( #111 )","title":"\u4fee\u590d"},{"location":"appendix/CHANGELOG/#060","text":"\u8b66\u544a 0.6.0 Twilight API \u6709\u91cd\u5927\u53d8\u52a8, \u4e3a\u4e0d\u517c\u5bb9\u66f4\u65b0","title":"0.6.0"},{"location":"appendix/CHANGELOG/#_12","text":"\u91cd\u6784 Twilight ( #106 ) \u5c06 Ariadne.get_running \u79fb\u81f3 graia.ariadne \u547d\u540d\u7a7a\u95f4. asMappingString \u4e0e fromMappingString \u73b0\u5728\u4ec5\u4f9b\u5185\u90e8\u4f7f\u7528.","title":"\u7834\u574f\u6027\u53d8\u52a8"},{"location":"appendix/CHANGELOG/#_13","text":"\u5b8c\u6210\u65b0\u7248 Mirai API HTTP \u652f\u6301: ( #102 ) \u652f\u6301 \u7fa4\u516c\u544a\u63a5\u53e3 \u652f\u6301 getFileIterator \u4e0e getAnnouncementIterator \u7528\u4e8e\u904d\u5386\u6587\u4ef6\u4fe1\u606f\u4e0e\u7fa4\u516c\u544a. \u6dfb\u52a0 MatchTemplate \u7528\u4e8e\u6d88\u606f\u94fe\u6a21\u677f\u5339\u914d.","title":"\u6dfb\u52a0"},{"location":"appendix/CHANGELOG/#_14","text":"MessageChain.download_binary \u4f1a\u8fd4\u56de\u81ea\u8eab\u4ee5\u652f\u6301\u94fe\u5f0f\u8c03\u7528. MessageChain \u4e0e Element \u90fd\u5b8c\u6574\u652f\u6301\u76f8\u52a0\u64cd\u4f5c. Twilight \u6027\u80fd\u5927\u5e45\u5ea6\u63d0\u5347. \u63d0\u9ad8\u6d88\u606f\u65e5\u5fd7\u8bb0\u5f55\u7684\u4f18\u5148\u7ea7. ( #107 )","title":"\u6539\u8fdb"},{"location":"appendix/CHANGELOG/#_15","text":"AlconnaDispatcher \u65e0\u6cd5\u8fd0\u4f5c. Mention \u65e0\u6cd5\u8fd0\u4f5c. \u672a\u5c06 MiddlewareDispatcher \u6ce8\u5165\u5bfc\u81f4\u65e0\u6cd5\u5904\u7406 ExceptionThrowed . \u6587\u4ef6\u4e0a\u4f20\u65f6\u6587\u4ef6\u540d\u4f1a\u88ab\u7f16\u7801 ( #108 )","title":"\u4fee\u590d"},{"location":"appendix/CHANGELOG/#_16","text":"Literature \u6d88\u606f\u94fe\u89e3\u6790\u5668. Component \u6d88\u606f\u94fe\u5de5\u5177.","title":"\u5220\u9664"},{"location":"appendix/CHANGELOG/#053","text":"","title":"0.5.3"},{"location":"appendix/CHANGELOG/#_17","text":"\u5b8c\u6210\u65b0\u7248 Mirai API HTTP \u652f\u6301: ( #102 ) \u6dfb\u52a0 ActiveMessage \u7cfb\u5217\u4e3b\u52a8\u4e8b\u4ef6: ActiveFriendMessage ActiveGroupMessage ActiveTempMessage \u53ca\u5176\u5bf9\u5e94 SyncMessage . \u6dfb\u52a0 MarketFace \u5143\u7d20\u7c7b\u578b (\u7528\u6237\u65e0\u6cd5\u53d1\u9001). \u6dfb\u52a0 getUserProfile API (\u672a merge). \u5728 Member Group Friend \u4e0a\u6dfb\u52a0 getAvatar API. Ariadne.get_running API \u7528\u4e8e\u66ff\u4ee3\u65e7\u7684 xxx_ctx.get() . Commander \u7684 Saya \u652f\u6301.","title":"\u6dfb\u52a0"},{"location":"appendix/CHANGELOG/#_18","text":"Broadcast \u7684 Decorator \u65e0\u6cd5\u6b63\u5e38\u8fd0\u4f5c. \u66f4\u597d\u7684\u591a\u8d26\u53f7\u652f\u6301.","title":"\u4fee\u590d"},{"location":"appendix/CHANGELOG/#052","text":"","title":"0.5.2"},{"location":"appendix/CHANGELOG/#_19","text":"\u5b9e\u73b0 MessageChain.replace ( #97 )","title":"\u6dfb\u52a0"},{"location":"appendix/CHANGELOG/#_20","text":"Commander \u884c\u4e3a\u9519\u8bef, \u6027\u80fd\u8fc7\u4f4e. 0.5.1 \u5bf9 Broadcast Control v0.15 \u7684\u9002\u914d\u4e0d\u5b8c\u5584. \u90e8\u5206\u6d88\u606f\u94fe\u5904\u7406\u5668\u56e0 asMappingString API \u53d8\u52a8\u635f\u574f.","title":"\u4fee\u590d"},{"location":"appendix/CHANGELOG/#_21","text":"Twilight \u4e2d\u7684 ArgumentMatch \u82e5\u662f\u4f4d\u7f6e\u5339\u914d\u73b0\u5728\u4f1a\u5f15\u53d1\u5f02\u5e38. \u5220\u9664 graia.ariadne.message.parser.pattern \u6a21\u5757.","title":"\u5220\u9664"},{"location":"appendix/CHANGELOG/#051","text":"","title":"0.5.1"},{"location":"appendix/CHANGELOG/#_22","text":"\u5b9e\u73b0 Ariadne Commander . ( #70 #76 #80 #82 #86 ) Ariadne.sendMessage \u652f\u6301\u901a\u8fc7 action \u81ea\u5b9a\u4e49\u884c\u4e3a. ( #75 ) \u652f\u6301 MessageChain[int : int] \u683c\u5f0f\u7684\u539f\u59cb\u5207\u7247. \u652f\u6301\u5bf9 Friend Group Member \u7b49\u5bf9\u8c61\u6267\u884c int \u4ee5\u83b7\u53d6\u5176 id \u5c5e\u6027. \u5e76\u62d3\u5c55\u4e86\u4e00\u4e9b\u65b9\u4fbf\u65b9\u6cd5. \u6709\u591a\u4e2a Member \u5bf9\u8c61\u5c5e\u6027\u7684\u4e8b\u4ef6\u5bf9 Member \u7684\u5206\u6d3e ( #81 ) Ariadne \u7684\u64cd\u4f5c\u5747\u4f1a\u5f15\u53d1\u5ba1\u8ba1\u4e8b\u4ef6 (Audit Event): CallAriadneAPI , \u5e26\u6709 api_name args kwargs \u4e09\u4e2a\u53c2\u6570. ( #74 ) Ariadne \u6536\u5230\u7684\u4e8b\u4ef6\u4f1a\u989d\u5916\u5f15\u53d1\u5ba1\u8ba1\u4e8b\u4ef6 (Audit Event): AriadnePostRemoteEvent , \u643a\u5e26 event \u5355\u4e2a\u53c2\u6570. ( #73 ) \u6dfb\u52a0\u4e86 SenderDispatcher . ( #84 ) \u652f\u6301\u5bf9 MemberPerm \u8fdb\u884c\u5bcc\u6bd4\u8f83\u64cd\u4f5c. ( #85 ) MessageChain \u90e8\u5206\u64cd\u4f5c\u52a0\u901f. \u66f4\u597d\u7684 Mirai Event \u6587\u6863\u5b57\u7b26\u4e32. Ariadne.recallMessage \u652f\u6301\u4f7f\u7528 MessageChain . \u9ed8\u8ba4\u5173\u95ed\u9002\u914d\u5668 websocket \u65e5\u5fd7, \u66f4\u597d\u7684\u8fde\u63a5\u5931\u8d25\u63d0\u793a.","title":"\u6dfb\u52a0"},{"location":"appendix/CHANGELOG/#_23","text":"MessageChain.endswith \u7684\u884c\u4e3a\u5f02\u5e38 ( #68 ) \u6d88\u606f\u5143\u7d20\u4e2d\u7684\u6233\u4e00\u6233 (Poke) \u65e0\u6cd5\u53d1\u9001 ( #77 ) \u81ea\u52a8\u5904\u7406\u4e0d\u652f\u6301\u7684\u6d88\u606f\u7c7b\u578b ( #79 ) Commander \u4e0e Console \u4f1a\u81ea\u52a8\u89e3\u6790 dispatcher \u7684 mixin . \u4fee\u590d BotMuteEvent \u7684 Group \u89e3\u6790\u95ee\u9898. \u4fee\u590d\u90e8\u5206\u4e8b\u4ef6\u7684\u5206\u7c7b\u9519\u8bef\u95ee\u9898. \u4fee\u590d\u4e0d\u540c\u7c7b\u578b\u5b50\u4e8b\u4ef6\u88ab\u540c\u65f6\u76d1\u542c\u65f6\u7684 Broadcast \u9519\u8bef\u8c03\u7528 Dispatcher \u7684\u95ee\u9898 ( #83 ) \u4fdd\u8bc1 MessageChain \u5143\u7d20\u5bf9\u8c61\u5b89\u5168\u6027. \u964d\u4f4e\u5168\u5c40 ApplicationMiddlewareDispatcher \u4f18\u5148\u7ea7. \u652f\u6301 Graia Broadcast v0.15 ( #88 )","title":"\u4fee\u590d"},{"location":"appendix/CHANGELOG/#_24","text":"Twilight \u4e2d\u7684 ArgumentMatch \u82e5\u662f\u4f4d\u7f6e\u5339\u914d\u5219\u4f1a\u88ab\u9759\u9ed8\u66ff\u6362\u4e3a ParamMatch . \u5728 0.5.2 \u4e2d\u8fd9\u6837\u7684\u6784\u9020\u65b9\u5f0f\u4f1a\u76f4\u63a5\u5f15\u53d1\u5f02\u5e38.","title":"\u5f03\u7528"},{"location":"appendix/CHANGELOG/#_25","text":"\u79fb\u9664\u6a21\u5757 graia.ariadne.event.network . ( \u56e0\u4e3a\u6ca1\u6709\u4eba\u7528 )","title":"\u79fb\u9664"},{"location":"appendix/CHANGELOG/#050","text":"","title":"0.5.0"},{"location":"appendix/CHANGELOG/#_26","text":"\u6dfb\u52a0\u4e86\u5185\u7f6e Console ( #41 ) \u6dfb\u52a0\u4e86\u65b0\u7684\u6d88\u606f\u94fe\u89e3\u6790\u5de5\u5177\u2014\u2014 Alconna ( #37 )","title":"\u6dfb\u52a0"},{"location":"appendix/CHANGELOG/#_27","text":"\u73b0\u5728\u53ef\u4ee5\u63a5\u6536 Broadcast \u4e0e Adapter \u5b9e\u4f8b\u4e86 \u53ef\u4ee5\u6784\u9020\u8f6c\u53d1\u6d88\u606f\u4e86 \u53ef\u4ee5\u7981\u7528 WebsocketAdapter \u7684\u5fc3\u8df3\u5305\u7684 log\u4e86 ArgumentMatch \u652f\u6301\u7c7b\u578b\u5339\u914d\u4e86 \u65b0\u7684\u542f\u52a8\u4e0e\u505c\u6b62 Ariadne \u7684\u65b9\u6cd5 Adapter \u7684\u505c\u6b62\u8fc7\u7a0b\u66f4\u5b89\u5168\u4e86 ( #30 , #65 ) \u53ef\u4ee5\u66f4\u597d\u7684\u83b7\u53d6\u5b9e\u4f8b\u6240\u8f96\u8d26\u53f7\u4e86( #31 ) \u63d0\u5347 Twilight \u7684\u6027\u80fd ( #44 ) sendNudge \uff08\u53d1\u9001\u6233\u4e00\u6233\uff09\u73b0\u5728\u66f4\u7075\u6d3b\u4e86 ( #47 ) \u5411 ParallelExecutor \u6dfb\u52a0 to_thread \u4e0e to_process ( #50 ) \u5c06 graia.ariadne.message.parser.pattern \u7684\u6240\u6709\u5185\u5bb9\u79fb\u5230 Literature \u4e0e Twilight \u6a21\u5757\u91cc ( #53 ) \u6dfb\u52a0 ParamMatch \u5e76\u62d3\u5c55 Sparkle.__getitem__ ( #57 ) \u6dfb\u52a0 space \u53c2\u6570\u4e0e SpacePolicy \u4ee5\u66ff\u4ee3 preserve_space ( #59 ) Ariadne.uploadFile \u652f\u6301\u6307\u5b9a\u6587\u4ef6\u540d ( #66 )","title":"\u6539\u52a8"},{"location":"appendix/CHANGELOG/#_28","text":"Ariadne.uploadImage \u51fa\u9519 ( #43 ) async_exec \u76f8\u5173 ( #50 ) Queue.get \u4efb\u52a1\u9000\u51fa\u65f6\u6ca1\u88ab await ( #51 ) \u81ea\u52a8\u7528 repr() \u8f6c\u4e49 log \u4e2d\u53d1\u9001\u7684\u6d88\u606f ( #58 ) Adapter \u4e0d\u4f1a\u81ea\u52a8\u91cd\u8fde ( #60 ) NudgeEvent \u63a5\u6536\u964c\u751f\u4eba\u7684\u6233\u4e00\u6233\u51fa\u9519 ( #63 )","title":"\u4fee\u590d"},{"location":"appendix/CHANGELOG/#breaking-changes","text":"Ariadne.request_stop -> Ariadne.stop Ariadne.wait_for_stop -> Ariadne.join","title":"Breaking Changes"},{"location":"appendix/NAV/","text":"\u66f4\u65b0\u65e5\u5fd7 \u5e38\u89c1\u95ee\u9898 \u5f02\u6b65\u6559\u7a0b Mirai API HTTP \u5b89\u88c5 \u9e23\u8c22 \u672f\u8bed \u8d5e\u52a9","title":"NAV"},{"location":"appendix/asyncio-intro/","text":"asyncio \u6559\u7a0b \ud83d\udd17 \u672c\u7ae0\u6458\u81ea YiriMirai \u7684\u6587\u6863\u3002 YiriMirai \u662f\u4e00\u4e2a\u8f7b\u91cf, \u4f4e\u8026\u5408\u7684 Python QQ Bot \u6846\u67b6. Python \u4ece 3.4 \u5f00\u59cb\u5f15\u5165\u4e86 asyncio \u5e93\uff0c\u63d0\u4f9b\u5f02\u6b65\u534f\u7a0b\u652f\u6301\uff0c\u4ece Python 3.4 \u5230 3.7\uff0c\u5bf9\u5f02\u6b65\u7684\u652f\u6301\u4e00\u76f4\u5728\u4e0d\u65ad\u5730\u8fdb\u6b65\u3002\u53ef\u4ee5\u8bf4\uff0c\u5f02\u6b65\u5c31\u662f Python \u672a\u6765\u7684\u8d8b\u52bf\u4e4b\u4e00\u3002 \u5728\u4e86\u89e3\u5f02\u6b65\u4e4b\u524d\uff0c\u4f60\u53ef\u80fd\u5df2\u7ecf\u63a5\u89e6\u8fc7\u6216\u542c\u8bf4\u8fc7\u5f88\u591a\u7c7b\u4f3c\u7684\u6982\u5ff5\uff0c\u6bd4\u5982\u201c\u5e76\u53d1\u201d\u201c\u5e76\u884c\u201d\u201c\u591a\u7ebf\u7a0b\u201d\u7b49\u7b49\uff0c\u8fd9\u4e48\u591a\u540d\u8bcd\uff0c\u518d\u52a0\u4e0a\u4e00\u4e2a\u201c\u5f02\u6b65\u201d\uff0c\u8ba9\u4eba\u6709\u4e9b\u6df7\u4e71\u3002 \u4e0d\u8fc7\uff0c\u867d\u7136\u770b\u8d77\u6765\u5f88\u590d\u6742\uff0c\u4f46\u662f\uff0c\u901a\u8fc7\u8fd9\u7bc7\u6559\u7a0b\uff0c\u6211\u76f8\u4fe1\u4f60\u80fd\u591f\u5bf9\u201c\u5f02\u6b65\u201d\u548c\u201c\u534f\u7a0b\u201d\u6709\u4e00\u4e2a\u6e05\u6670\u7684\u628a\u63e1\u3002 \u4ee5\u4e0b\u662f\u8fd9\u7bc7\u6559\u7a0b\u6db5\u76d6\u7684\u5185\u5bb9\uff1a \u5f02\u6b65\uff1a\u4e00\u79cd\u7f16\u7a0b\u8303\u5f0f\uff0c\u72ec\u7acb\u4e8e\u7f16\u7a0b\u8bed\u8a00\uff0c\u53ef\u4ee5\u5177\u6709\u591a\u79cd\u8bed\u8a00\u7684\u4e0d\u540c\u5b9e\u73b0\u3002 async/await\uff1a\u4e24\u4e2a\u65b0\u7684 Python \u5173\u952e\u5b57\uff0c\u7528\u4e8e\u89c4\u5b9a\u5f02\u6b65\u903b\u8f91\u3002 asyncio\uff1a\u4e00\u4e2a Python \u5185\u7f6e\u7684\u5305\uff0c\u63d0\u4f9b\u534f\u7a0b\u7684\u57fa\u7840\u529f\u80fd\u548c\u7ba1\u7406\u534f\u7a0b\u7684\u65b9\u6cd5\u3002 \u5982\u679c\u4f60\u5fc3\u6025\u4e86\uff0c\u8bf7\u76f4\u63a5\u8df3\u5230 \u4f7f\u7528\u534f\u7a0b \u4ec0\u4e48\u662f\u5f02\u6b65\uff1f \ud83d\udd17 \u5728\u8bb2\u5f02\u6b65\u4e4b\u524d\uff0c\u9700\u8981\u5148\u77e5\u9053\u4e00\u4e2a\u4e0e\u4e4b\u76f8\u5bf9\u7684\u6982\u5ff5\uff1a\u540c\u6b65\u3002 \u5176\u5b9e\u540c\u6b65\u5bf9\u6211\u4eec\u800c\u8a00\u5e76\u4e0d\u964c\u751f\u3002\u5728\u63a5\u89e6\u5230\u5f02\u6b65\u4e4b\u524d\uff0c\u6211\u4eec\u8ba4\u77e5\u7684\u4e00\u5207\u90fd\u662f\u540c\u6b65\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u60f3\u8c61\u4ee3\u7801\u4e00\u53e5\u4e00\u53e5\u5730\u6267\u884c\uff0c\u9047\u5230\u51fd\u6570\u5c31\u8fdb\u5165\uff0c\u6267\u884c\u5b8c\u51fd\u6570\u518d\u6267\u884c\u51fd\u6570\u540e\u9762\u7684\u4e1c\u897f\uff0c\u6240\u6709\u7684\u6267\u884c\u987a\u5e8f\u90fd\u4e25\u683c\u5730\u548c\u4ee3\u7801\u4e66\u5199\u7684\u987a\u5e8f\u4e00\u81f4\u2014\u2014\u8fd9\u5c31\u662f\u540c\u6b65\u3002 \u6bd4\u5982\u8fd9\u6837\u7684\u4ee3\u7801\uff1a import time print ( 1 ) time . sleep ( 10 ) print ( 2 ) \u6211\u4eec\u53ef\u4ee5\u6e05\u6670\u5730\u9884\u77e5\u5b83\u7684\u884c\u4e3a\uff1a\u5148\u6253\u5370 1\uff0c\u7136\u540e\u7b49\u5f85 10 \u79d2\uff0c\u6700\u540e\u6253\u5370 2\u3002 \u540c\u6b65\u6700\u5927\u7684\u4f18\u70b9\u662f \u601d\u8def\u6e05\u6670 \u3002 \u4f60\u6c38\u8fdc\u53ef\u4ee5\u77e5\u9053\u4f60\u7684\u7a0b\u5e8f\u662f\u6309\u7167\u600e\u6837\u7684\u987a\u5e8f\u6267\u884c\u7684\uff0c\u4e0d\u7528\u62c5\u5fc3\u4efb\u4f55\u610f\u6599\u4e4b\u5916\u7684\u60c5\u51b5 \u3002 \u4f46\u540c\u65f6\uff0c\u540c\u6b65\u4e5f\u6709\u4e0d\u53ef\u907f\u514d\u7684\u7f3a\u70b9\uff1a\u5728\u67d0\u4e9b\u60c5\u5883\u4e0b\uff0c\u5b83\u4f1a\u5e26\u6765\u6027\u80fd\u7684\u6d6a\u8d39\u3002 \u4ee5\u4e00\u4e2a\u751f\u6d3b\u4e2d\u7684\u573a\u666f\u4e3a\u4f8b\uff1a\u4f60\u5728\u7f51\u4e0a\u4e0b\u8f7d\u4e00\u4e2a\u6587\u4ef6\uff0c\u4f46\u662f\u6587\u4ef6\u5f88\u5927\uff0c\u9700\u8981\u5f88\u957f\u65f6\u95f4\u624d\u80fd\u4e0b\u5b8c\u3002\u8fd9\u65f6\u5019\uff0c\u4f60\u80af\u5b9a\u4e0d\u4f1a\u76ef\u7740\u8fdb\u5ea6\u6761\u4e00\u70b9\u70b9\u8d70\uff0c\u800c\u662f\u53bb\u505a\u70b9\u522b\u7684\u4e8b\u60c5\uff0c\u8bfb\u4e00\u4f1a\u4e66\uff0c\u770b\u4e00\u4f1a\u7535\u5f71\uff0c\u4e4b\u7c7b\u7684\u3002 \u4f46\u5982\u679c\u6709\u4e00\u4e2a\u5b8c\u5168\u201c\u540c\u6b65\u201d\u7684\u4eba\uff0c\u4ed6\u4e3a\u81ea\u5df1\u8bbe\u5b9a\u7684\u7a0b\u5e8f\u662f\u4e0b\u8f7d\u8fd9\u4e2a\u6587\u4ef6\uff0c\u7136\u540e\u8fd0\u884c\u5b83\uff0c\u8fd9\u6837\u7684\u8bdd\uff0c\u4ed6\u4e3a\u4e86\u4e0d\u8ba9\u81ea\u5df1\u7684\u8fd0\u884c\u903b\u8f91\u4e71\u6389\uff0c\u5c31\u4f1a\u4e00\u76f4\u5b88\u5728\u7535\u8111\u524d\uff0c\u76f4\u5230\u6587\u4ef6\u4e0b\u8f7d\u5b8c\u6210\u624d\u505a\u4e0b\u4e00\u6b65\u7684\u5de5\u4f5c\u3002\u6b63\u5e38\u4eba\u80af\u5b9a\u4e0d\u80fd\u5fcd\u53d7\u8fd9\u6837\u65e0\u804a\u7684\u7b49\u5f85\uff0c\u4e5f\u4e0d\u4f1a\u5e0c\u671b\u81ea\u5df1\u7684\u7a0b\u5e8f\u5728\u8fd9\u79cd\u65e0\u804a\u7684\u4e8b\u4e0a\u6d6a\u8d39\u65f6\u95f4\u3002 \u4e3a\u4e86\u80fd\u5145\u5206\u5229\u7528\u8fd9\u4e9b\u53ef\u80fd\u88ab\u6d6a\u8d39\u6389\u7684\u65f6\u95f4\uff0c\u4eba\u4eec\u60f3\u51fa\u8fc7\u5f88\u591a\u65b9\u6cd5\uff0c\u6bd4\u5982 \u591a\u7ebf\u7a0b \uff0c\u6bd4\u5982 \u56de\u8c03 \u3002 \u591a\u7ebf\u7a0b\u662f\u6700\u5bb9\u6613\u60f3\u5230\u7684\u4e00\u79cd\u65b9\u5f0f\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u591a\u4e2a\u7ebf\u7a0b\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u5185\u90e8\u662f\u540c\u6b65\u7684\uff0c\u518d\u8ba9\u8fd9\u4e9b\u7ebf\u7a0b\u540c\u65f6\u8fd0\u884c\u3002\u8fd9\u6837\uff0c\u5728\u4e00\u4e2a\u7ebf\u7a0b\u7b49\u5f85\u7684\u65f6\u5019\uff0c\u5176\u4f59\u7684\u7ebf\u7a0b\u53ef\u4ee5\u7ee7\u7eed\u8fd0\u884c\uff0c\u4e0d\u4f1a\u56e0\u6b64\u505c\u6b62\u3002 \u8fd9\u770b\u4e0a\u53bb\u5341\u5206\u7f8e\u597d\uff0c\u7136\u800c\u73b0\u5b9e\u5e76\u4e0d\u50cf\u6211\u4eec\u60f3\u8c61\u5f97\u90a3\u4e48\u7b80\u5355\u3002\u867d\u7136\u7ebf\u7a0b\u5404\u81ea\u5185\u90e8\u7684\u4ee3\u7801\u662f\u540c\u6b65\u7684\uff0c\u4f46\u4e0d\u540c\u7ebf\u7a0b\u4e4b\u95f4\u7684\u4ee3\u7801\u6267\u884c\u987a\u5e8f\u5df2\u7ecf\u65e0\u4ece\u786e\u5b9a\u3002\u6362\u8a00\u4e4b\uff0c\u6211\u4eec\u5f15\u5165\u4e86\u201c\u5f02\u6b65\u201d\u3002 \u4ee3\u7801\u7684\u6267\u884c\u987a\u5e8f\u4e0e\u4e66\u5199\u987a\u5e8f\u4e0d\u4e00\u81f4\u7684\u73b0\u8c61\u5c31\u662f\u5f02\u6b65 \u3002 \u719f\u6089\u591a\u7ebf\u7a0b\u7684\u4eba\u5e94\u8be5\u4e86\u89e3\u8fc7\u201c\u9501\u201d\u7684\u5404\u79cd\u82b1\u6837\u3002\u4e24\u4e2a\u7ebf\u7a0b\u5171\u4eab\u8d44\u6e90\u65f6\uff0c\u5982\u679c\u540c\u65f6\u5bf9\u540c\u4e00\u4e2a\u53d8\u91cf\u8fdb\u884c\u4fee\u6539\uff0c\u5c31\u6709\u53ef\u80fd\u5bfc\u81f4\u51fa\u4e4e\u9884\u6599\u7684\u60c5\u51b5\u3002\u6240\u4ee5\u4eba\u4eec\u53d1\u660e\u4e86\u201c\u9501\u201d\uff0c\u6765\u4fdd\u8bc1\u540c\u4e00\u65f6\u523b\u53ea\u6709\u552f\u4e00\u7684\u7ebf\u7a0b\u5bf9\u67d0\u4e00\u4e2a\u53d8\u91cf\u8fdb\u884c\u4fee\u6539\u3002\u53ef\u4ee5\u8bf4\uff0c\u201c\u9501\u201d\u662f\u4e3a\u4e86\u5236\u670d\u5f02\u6b65\u800c\u53d1\u660e\u7684\u3002 graph TD; subgraph \u6267\u884c\u987a\u5e8f H{{b = 1}} --> F[a = 1] F --> G{{a += b}} G --> I[\"print(a)\"] end subgraph Thread1 A[a = 1] --> B[\"print(a)\"] B --> E([Output: 2]) end subgraph Thread2 C{{b = 1}} --> D{{a += b}} D -.->|Breaking!| E end \u5982\u6b64\u770b\u6765\uff0c\u5f02\u6b65\u4f3c\u4e4e\u662f\u4e00\u4ef6\u4e0d\u592a\u597d\u7684\u4e8b\u60c5\u3002\u5b83\u8ba9\u7a0b\u5e8f\u7684\u8fd0\u884c\u5e73\u6dfb\u4e86\u4e00\u79cd\u4e0d\u53ef\u63a7\u7684\u968f\u610f\u6027\uff0c\u6211\u4eec\u4e0d\u518d\u80fd\u770b\u5230\u4ee3\u7801\u5c31\u76f4\u63a5\u63a8\u6f14\u51fa\u7ed3\u679c\uff0c\u56e0\u4e3a\u5373\u4f7f\u662f\u76f8\u90bb\u4e66\u5199\u7684\u50f5\u5c40\u4ee3\u7801\uff0c\u4e4b\u95f4\u4e5f\u53ef\u80fd\u4f1a\u6709\u522b\u7684\u4ee3\u7801\u6267\u884c\u3002 \u4f46\u662f \u5f02\u6b65\u76f8\u8f83\u4e8e\u540c\u6b65\u800c\u8a00\uff0c\u5e26\u6765\u7684\u6027\u80fd\u63d0\u5347\u5b9e\u5728\u662f\u592a\u8bf1\u4eba\u4e86 \u3002\u4e00\u4e2a\u7f51\u7ad9\u7684\u670d\u52a1\u5668\uff0c\u5982\u679c\u662f\u540c\u6b65\u7684\uff0c\u90a3\u4e48\u5b83\u540c\u65f6\u53ea\u80fd\u8ba9\u4e00\u4e2a\u7528\u6237\u8bbf\u95ee\u2014\u2014\u8fd9\u7b80\u76f4\u662f\u4e0d\u53ef\u7406\u55bb\u7684\u4e8b\u60c5\u3002\u5f02\u6b65\u5c31\u50cf\u51e0\u4e07\u5e74\u524d\u8e72\u8e1e\u5728\u8349\u539f\u6e05\u51b7\u7684\u6708\u5149\u4e0b\uff0c\u7528\u9510\u5229\u7684\u773c\u795e\u773a\u671b\u4eba\u7c7b\u8425\u5730\u7bdd\u706b\u7684\u4e00\u53ea\u79c0\u7f8e\u7684\u72fc\uff0c\u800c\u730e\u624b\u4eec\u5219\u601d\u8003\u7740\u5982\u4f55\u7ed9\u5b83\u5957\u4e0a\u9879\u5708\uff0c\u53d8\u6210\u81ea\u5df1\u5fe0\u5b9e\u7684\u730e\u72ac\u3002 \u6240\u4ee5\uff0c\u591a\u7ebf\u7a0b\u3001\u56de\u8c03\uff0c\u5305\u62ec\u534f\u7a0b\uff0c\u8fd9\u4e00\u7cfb\u5217\u8bbe\u8ba1\uff0c\u4e0e\u5176\u8bf4\u662f\u4e3a\u4e86\u5145\u5206\u5229\u7528\u8ba1\u7b97\u8d44\u6e90\uff0c\u4e0d\u5982\u8bf4\u662f\u4e3a\u4e86 \u5728\u4eba\u7c7b\u53ef\u7406\u89e3\u7684\u8303\u7574\u5185\uff0c\u66f4\u597d\u5730\u5236\u670d\u5f02\u6b65 \u3002 \u9501\u7684\u201c\u56f0\u5883\u201d \ud83d\udd17 \u591a\u7ebf\u7a0b\u548c\u9501\u7684\u7ed3\u5408\uff0c\u81f3\u4eca\u4ecd\u7136\u662f\u5f02\u6b65\u7f16\u7a0b\u7684\u6700\u4f73\u9009\u62e9\u4e4b\u4e00\u3002\u56e0\u6b64\uff0c\u600e\u4e48\u52a0\u9501\u3001\u5728\u4f55\u5904\u52a0\u9501\uff0c\u5c31\u6210\u4e3a\u4e86\u4e00\u95e8\u91cd\u8981\u7684\u5b66\u95ee\u3002 \u9501\u662f\u4e2a\u597d\u4e1c\u897f\uff0c\u4f46\u662f\u4e0d\u80fd\u6709\u592a\u591a\u3002\u4e00\u65b9\u9762\uff0c\u53cd\u590d\u5730\u83b7\u53d6\u9501\u91ca\u653e\u9501\u4f1a\u5360\u7528\u8fd0\u884c\u65f6\u95f4\uff1b\u53e6\u4e00\u65b9\u9762\uff0c\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u957f\u65f6\u95f4\u6301\u6709\u67d0\u4e2a\u9501\u65f6\uff0c\u5176\u4ed6\u7684\u7ebf\u7a0b\u5982\u679c\u60f3\u8981\u8bbf\u95ee\u8fd9\u4e2a\u8d44\u6e90\uff0c\u4e5f\u5fc5\u987b\u5728\u539f\u5730\u7b49\u5f85\uff0c \u6781\u7aef\u60c5\u51b5\u4e0b\uff0c\u540c\u4e00\u65f6\u95f4\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5728\u6267\u884c\uff01 \u4eba\u4eec\u5728\u4f18\u5316\u9501\u7684\u4f7f\u7528\u4e0a\u82b1\u4e86\u5f88\u5927\u5de5\u592b\uff0c\u4ece\u4e2d\u884d\u751f\u51fa\u7684\u5404\u79cd\u7406\u8bba\u6b64\u5904\u4e0d\u518d\u8d58\u8ff0\u3002\u968f\u7740\u9501\u7684\u4f7f\u7528\u65b9\u5f0f\u9010\u6e10\u53d8\u5f97\u590d\u6742\uff0c\u4eba\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u60f3\u8981\u5b8c\u7f8e\u5730\u63a7\u5236\u9501\u7684\u7c92\u5ea6\uff0c\u5c31\u4e0d\u5f97\u4e0d\u5bf9\u82b1\u5927\u91cf\u7684\u4ee3\u7801\u53bb\u7cbe\u7ec6\u5730\u63a7\u5236\u6bcf\u4e00\u4e2a\u9501\uff0c\u8fd9\u8ba9\u7f16\u5199\u4ee3\u7801\u7684\u96be\u5ea6\u5927\u5927\u63d0\u9ad8\u4e86\u3002 \u6709\u7684\u65f6\u5019\uff0c\u63a7\u5236\u9501\u5e26\u6765\u7684\u590d\u6742\u5ea6\u5df2\u7ecf\u8d85\u51fa\u4e86\u4eba\u80fd\u5fcd\u53d7\u7684\u8303\u56f4\u3002\u4e8e\u662f\u6211\u4eec\u7ecf\u5e38\u89c1\u5230\u8bb8\u591a\u7b80\u5355\u7c97\u66b4\u7684\u64cd\u4f5c\u2014\u2014\u6bd4\u5982\u5728 CPython \u4e2d\u81ed\u540d\u662d\u8457\u7684 GIL\u3002\u5b83\u5c06\u6574\u4e2a Python \u89e3\u91ca\u5668\u52a0\u9501\uff0c\u6765\u5f7b\u5e95\u89e3\u51b3 Python \u4ee3\u7801\u5185\u7684\u7ebf\u7a0b\u51b2\u7a81\u95ee\u9898\uff1b\u540e\u679c\u5c31\u662f\uff0c \u6240\u6709\u7684 Python \u7ebf\u7a0b\u90fd\u5fc5\u987b\u7b49\u5f85\u8fd9\u4e2a\u9501\uff0c\u786c\u751f\u751f\u5730\u8ba9\u591a\u7ebf\u7a0b\u7a0b\u5e8f\u51e0\u4e4e\u9000\u5316\u6210\u4e86\u5355\u7ebf\u7a0b \u3002 \u5f53\u7136\uff0cGIL \u7684\u5b58\u5728\u4e5f\u6ca1\u6709\u5b8c\u5168\u628a\u591a\u7ebf\u7a0b\u7684\u4f18\u70b9\u62b9\u6d88\u6389\u3002\u6bd4\u5982\u4e00\u4e2a\u7ebf\u7a0b\u5728 sleep \u7684\u65f6\u5019\uff0c\u6216\u8005\u5728\u7b49\u5f85\u7f51\u7edc\u8bf7\u6c42\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u8fd8\u662f\u4f1a\u4e56\u4e56\u5730\u91ca\u653e\u6389 GIL \u9501\uff0c\u8ba9\u5176\u4ed6\u7ebf\u7a0b\u8fd0\u884c\u7684\u3002\u4e0d\u8fc7\u8fd9\u65f6\u5019\uff0c\u91ca\u653e GIL \u7684\u7ebf\u7a0b\u5b9e\u9645\u4e0a\u53ea\u662f\u5728\u7b49\u7740\uff0c\u4ec0\u4e48\u90fd\u4e0d\u5e72\uff0c\u6700\u540e\u8fd8\u662f\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5728\u8fd0\u884c\u3002 \u65e2\u7136\u8fd8\u662f\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5728\u8fd0\u884c\uff0c\u90a3\u4e48\u4e3a\u4ec0\u4e48\u4e0d\u5e72\u8106\u7528\u5355\u7ebf\u7a0b\u5b9e\u73b0\u5462\uff1f \u7b54\u6848\u662f\uff1a\u5f53\u7136\u53ef\u4ee5 \u3002\u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\uff0c\u4eba\u4eec\u7ed9\u51fa\u4e86\u8bb8\u591a\u7b54\u6848\uff0c\u5176\u4e2d\u6700\u8457\u540d\u7684\u662f\u4e24\u79cd\uff1a \u56de\u8c03\u548c\u534f\u7a0b \u3002 \u4ece\u56de\u8c03\u5230\u534f\u7a0b\uff08\u4e0a\uff09 \ud83d\udd17 \u4ecb\u7ecd\u4e86\u8fd9\u4e48\u591a\uff0c\u6211\u4eec\u7ec8\u4e8e\u7b2c\u4e00\u6b21\u63d0\u5230\u4e86\u201c\u534f\u7a0b\u201d\u8fd9\u4e2a\u8bcd\u3002\u4e0d\u8fc7\u5148\u4e0d\u8981\u7740\u6025\uff0c\u8981\u60f3\u7406\u89e3\u534f\u7a0b\u7684\u6982\u5ff5\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e9b\u57fa\u7840\u7684\u4e1c\u897f\u3002 \u56de\u5230\u4e0a\u9762\u521a\u521a\u63d0\u51fa\u7684\u95ee\u9898\uff0c\u4e0d\u8fc7\u8fd9\u91cc\u8981\u6362\u4e2a\u8bf4\u6cd5\uff1a \u600e\u6837\u5728\u5355\u7ebf\u7a0b\u4e2d\u5b9e\u73b0\u5f02\u6b65 \uff1f \u5176\u5b9e\u5728\u521a\u624d\u7684\u8ba8\u8bba\u4e2d\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u95ee\u9898\u7684\u7b54\u6848\uff0c\u90a3\u5c31\u662f\uff0c\u50cf\u5e26\u7740 GIL \u7684\u591a\u7ebf\u7a0b\u4e00\u6837\uff0c\u5728\u67d0\u4e2a\u5730\u65b9\u9700\u8981\u7b49\u5f85\u65f6\uff0c\u5c31\u7acb\u9a6c\u5207\u6362\u5230\u522b\u7684\u4efb\u52a1\uff0c\u7b49\u5f85\u5b8c\u6210\u4e4b\u540e\uff0c\u518d\u7ee7\u7eed\u521a\u624d\u7684\u4efb\u52a1\u3002 graph LR; A[\"\u4efb\u52a11(\u53d1\u8d77\u8bf7\u6c42)\"] -.-> C{{\u7b49\u5f85}} A --->|\u5207\u6362\u5230| D[\u4efb\u52a12] C -..-> E{{\u7b49\u5f85\u5b8c\u6210}} E -.-> F[\"\u4efb\u52a13(\u9700\u8981\u8bf7\u6c42\u7ed3\u679c)\"] D --->|\u7ee7\u7eed\u6267\u884c| F \u5355\u7ebf\u7a0b\u5f02\u6b65\u7684\u903b\u8f91\u770b\u8d77\u6765\u5c31\u662f\u8fd9\u4e48\u7b80\u5355\uff0c\u4e5f\u5341\u5206\u5bb9\u6613\u7406\u89e3\u3002\u4f46\u662f\uff0c\u6613\u4e8e\u7406\u89e3\u4e0d\u4ee3\u8868\u6613\u4e8e\u5b9e\u73b0\u3002\u5f53\u4eba\u4eec\u771f\u7684\u5f00\u59cb\u52a8\u624b\u5199\u4e00\u6bb5\u5355\u7ebf\u7a0b\u5f02\u6b65\u7684\u4ee3\u7801\u65f6\uff0c\u5c31\u53d1\u73b0\u6709\u8bb8\u591a\u663e\u800c\u6613\u89c1\u5374\u96be\u4ee5\u8bf4\u660e\u7684\u95ee\u9898\u3002 \u201c\u9700\u8981\u7b49\u5f85\u201d\u662f\u4ec0\u4e48\uff1f\u201c\u5207\u6362\u201d\u662f\u600e\u4e48\u5b8c\u6210\u7684\uff1f\u201c\u7b49\u5f85\u5b8c\u6210\u201d\u6307\u7684\u662f\u4ec0\u4e48\uff1f\u201c\u7ee7\u7eed\u201d\u53c8\u662f\u600e\u4e48\u5b9e\u73b0\u7684\uff1f \u8fd9\u4e9b\u95ee\u9898\u8bf4\u590d\u6742\u4e5f\u590d\u6742\uff0c\u8bf4\u7b80\u5355\u4e5f\u7b80\u5355\u3002\u4e3a\u4e86\u4e0d\u6d6a\u8d39\u5927\u5bb6\u7684\u601d\u8003\u65f6\u95f4\uff0c\u6211\u5728\u8fd9\u91cc\u76f4\u63a5\u516c\u5e03\u7b54\u6848\uff1a \u7b2c\u4e00\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u5176\u5b9e\u5f88\u76f4\u767d\u3002\u54ea\u4e9b\u4efb\u52a1\u9700\u8981\u7b49\u5f85\uff0c\u5728\u7a0b\u5e8f\u8fd0\u884c\u4e4b\u524d\u5c31\u80fd\u770b\u51fa\u6765\u3002\u7b80\u5355\u5982 sleep \uff0c\u590d\u6742\u5982\u7f51\u7edc\u8bf7\u6c42\uff0c\u8fd9\u4e9b\u6d88\u8017\u65f6\u95f4\uff0c\u4f46\u4e0d\u600e\u4e48\u6d88\u8017 CPU \u7684\u4efb\u52a1\uff0c\u5c31\u662f\u9700\u8981\u7b49\u5f85\u7684\u4efb\u52a1\u3002 \u7b2c\u4e8c\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u6709\u4e24\u79cd\uff0c\u5bf9\u8fd9\u4e2a\u95ee\u9898\u7684\u56de\u7b54\u7684\u4e0d\u540c\u4e5f\u6b63\u662f\u56de\u8c03\u4e0e\u534f\u7a0b\u6700\u521d\u7684\u5206\u6b67\u4e4b\u5904\u3002\u534f\u7a0b\u5f0f\u7684\u7b54\u6848\u7a0d\u540e\u4f1a\u8bf4\uff0c\u6682\u4e14\u4e0d\u8868\uff0c\u5148\u770b\u770b\u56de\u8c03\u5f0f\u7684\u7b54\u6848\uff0c\u975e\u5e38\u7b80\u5355\u7c97\u66b4\uff1a \u4e0d\u8981\u5207\u6362 \u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff1a import requests # job 1 response = requests . get ( 'http://example.org/very_large_file.txt' ) print ( response . text . count ( 'e' )) # job 2 for i in range ( 10 ): print ( i ) \u6211\u4eec\u6709\u4e24\u4e2a\u4efb\u52a1\uff0c\u4e00\u4e2a\u662f\u6293\u53d6\u7f51\u7edc\u4e0a\u7684\u6587\u4ef6\uff0c\u4e00\u4e2a\u662f\u6253\u5370\u6570\u5b57\u3002\u7f51\u7edc\u4e0a\u7684\u6587\u4ef6\u975e\u5e38\u5927\uff0c\u9700\u8981\u5f88\u957f\u65f6\u95f4\u6765\u52a0\u8f7d\uff0c\u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u5e0c\u671b\u53ef\u4ee5\u5728\u7b49\u5f85\u6587\u4ef6\u4e0b\u8f7d\u7684\u65f6\u5019\uff0c\u53bb\u6267\u884c\u6253\u5370\u6570\u5b57\u7684\u4efb\u52a1\u3002\u4f46\u662f\u95ee\u9898\u6765\u4e86\uff1a\u524d\u4e24\u884c\u4ee3\u7801\u5199\u7684\u4e25\u4e1d\u5408\u7f1d\uff0c\u8be5\u600e\u4e48\u628a\u6253\u5370\u6570\u5b57\u7684\u4efb\u52a1\u63d2\u8fdb\u53bb\uff1f \u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u77e5\u9053\uff0c\u4e00\u5207\u95ee\u9898\u7684\u6839\u6e90\u90fd\u51fa\u5728 requests.get \u7684\u8c03\u7528\u4e0a\u3002\u8fd9\u662f\u4e00\u4e2a\u540c\u6b65\u7684\u8c03\u7528\uff0c\u4e0d\u7b49\u5230\u4e0b\u8f7d\u5b8c\u6210\u5c31\u4e0d\u4f1a\u8fd4\u56de\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u7684\u662f\u4e00\u4e2a\u5f02\u6b65\u7684\u65b9\u6cd5\uff0c\u80fd\u591f\u5728\u4e0b\u8f7d\u5b8c\u6210\u4e4b\u524d\u5c31\u8fd4\u56de\u3002 def get_async (): ... # job 1 get_async ( 'http://example.org/very_large_file.txt' ) # print(response.text.count('e')) # job 2 for i in range ( 10 ): print ( i ) \u867d\u7136\u5b9e\u9645\u4e0a Python \u5e76\u6ca1\u6709\u54ea\u4e00\u4e2a\u5e93\u63d0\u4f9b\u8fd9\u6837\u7684\u4e00\u4e2a get_async \uff0c\u4f46\u5728\u8fd9\u91cc\u6211\u4eec\u4e0d\u59a8\u505a\u4e00\u6b21\u8ff7\u4eba\u7684\u5047\u8bbe\u3002 \u6211\u4eec\u5e0c\u671b\u80fd\u6709\u4e00\u4e2a\u5f02\u6b65\u7684 get_async \uff0c\u8c03\u7528\u540e\u4f1a\u53d1\u8d77\u4e00\u6b21\u7f51\u7edc\u8bf7\u6c42\uff0c\u7136\u540e\u7acb\u523b\u8fd4\u56de\uff0c\u8fd9\u6837\uff0c\u7a0b\u5e8f\u7684\u6d41\u7a0b\u5c31\u987a\u7406\u6210\u7ae0\u5730\u8d70\u5230\u4e86\u6253\u5370\u6570\u5b57\u7684\u5730\u65b9 \u3002 \u53ea\u662f\u6709\u4e00\u4e2a\u95ee\u9898\u8fd8\u6ca1\u6709\u89e3\u51b3\u2014\u2014\u4ece\u54ea\u91cc\u8bfb\u53d6\u4e0b\u8f7d\u7684\u6587\u4ef6\u5462\uff1f \u597d\u50cf\u6709\u70b9\u5c34\u5c2c\u3002 get_async \u521b\u5efa\u4e86\u4e0b\u8f7d\u4efb\u52a1\u4e4b\u540e\uff0c\u5c31\u628a\u5b83\u4e22\u5230\u4e00\u8fb9\u4e0d\u7ba1\u4e86\uff0c\u4e0b\u8f7d\u5b8c\u7684\u4e1c\u897f\u4e5f\u6ca1\u6709\u529e\u6cd5\u62ff\u5230\u3002\u6211\u4eec\u5f53\u7136\u4e0d\u5141\u8bb8\u8fd9\u79cd\u4e70\u691f\u8fd8\u73e0\u7684\u884c\u4e3a\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u4e00\u70b9\u70b9\u7684\u5904\u7406\uff0c\u8ba9\u6211\u4eec\u80fd\u591f\u4ee5\u67d0\u79cd\u65b9\u5f0f\uff0c\u62ff\u5230\u4e0b\u8f7d\u7684\u6587\u4ef6\u3002 \u8fd9\u5c31\u6d89\u53ca\u5230\u521a\u624d\u63d0\u51fa\u7684\u7b2c\u4e09\u548c\u7b2c\u56db\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u4e86\u3002\u201c\u7b49\u5f85\u5b8c\u6210\u201d\u81ea\u7136\u662f\u6307\u6587\u4ef6\u4e0b\u8f7d\u5b8c\u6210\uff0c\u800c\u201c\u7ee7\u7eed\u201d\u7684\u65b9\u5f0f\u624d\u662f\u91cd\u5934\u620f\u2014\u2014 \u56de\u8c03 \u3002 \u56de\u8c03\uff08callback\uff09\u662f\u5c06\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\u4ee5\u51fd\u6570\u7684\u5f62\u5f0f\u4f20\u9012\u51fa\u53bb\uff0c\u4f9b\u5916\u90e8\u8c03\u7528\u7684\u4e00\u79cd\u6a21\u5f0f\u3002\u8fd9\u4e48\u8bf4\u6709\u70b9\u62bd\u8c61\uff0c\u6211\u4eec\u7ed3\u5408\u521a\u624d\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u3002 \u5728\u521a\u624d\uff0c\u6211\u4eec\u9047\u5230\u4e86\u6ca1\u529e\u6cd5\u62ff\u5230\u4e0b\u8f7d\u7684\u6587\u4ef6\u7684\u95ee\u9898\u3002\u5176\u5b9e\u6362\u4e2a\u89d2\u5ea6\u6765\u770b\uff0c\u6211\u4eec\u9700\u8981\u7684\uff0c\u662f\u4e00\u4e2a \u80fd\u591f\u5728\u4e0b\u8f7d\u5b8c\u6210\u4e4b\u540e\uff0c\u6267\u884c\u4e00\u6bb5\u5229\u7528\u4e0b\u8f7d\u7684\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u7684\u4ee3\u7801\u7684\u65b9\u6cd5 \u3002 \u5229\u7528\u56de\u8c03\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u5b8c\u6210\u8fd9\u4e00\u70b9\u3002 def get_async (): ... # job 1 get_async ( 'http://example.org/very_large_file.txt' , callback = job1_continuation ) def job1_continuation ( response ): print ( response . text . count ( 'e' )) # job 2 for i in range ( 10 ): print ( i ) \u628a\u7b2c\u4e00\u4e2a\u4efb\u52a1\u7684\u5269\u4f59\u90e8\u5206\u5199\u5230\u56de\u8c03\u51fd\u6570\u91cc\uff0c\u7136\u540e\u4f20\u7ed9 get_async \u3002\u5f53\u6587\u4ef6\u4e0b\u8f7d\u5b8c\u6210\u540e\uff0c\u56de\u8c03\u51fd\u6570\u5c31\u4f1a\u4ee5\u4e0b\u8f7d\u7684\u6587\u4ef6\u7684\u5185\u5bb9\u4f5c\u4e3a\u53c2\u6570\uff0c\u8c03\u7528\u56de\u8c03\u51fd\u6570\u3002\u8fd9\u5c31\u6210\u529f\u5730\u5c06\u4e00\u6bb5\u540c\u6b65\u7684\u4ee3\u7801\u6539\u9020\u6210\u4e86\u5f02\u6b65\u3002\u53ef\u559c\u53ef\u8d3a\uff0c\u53ef\u559c\u53ef\u8d3a\u3002 \u4e0d\u8fc7\uff0c\u597d\u50cf\u5fd8\u4e86\u70b9\u4ec0\u4e48\uff1f \u6211\u4eec\u5e76\u6ca1\u6709\u8bf4\u8fd9\u4e2a\u8981\u600e\u4e48\u5b9e\u73b0\uff0c\u5b9e\u9645\u4e0a\uff0c\u50cf Go Kotlin \u7b49\u8bed\u8a00\u90fd\u4f7f\u7528\u57fa\u4e8e\u7ebf\u7a0b\u7684\u534f\u7a0b\uff0c\u5e76\u6ca1\u6709 JavaScript Python \u5f0f\u7684\u57fa\u4e8e\u56de\u8c03\u4e0eIO\u590d\u7528\u7684\u534f\u7a0b\u3002 \u7b49\u4e0b\uff0c\u6211\u521a\u521a\u662f\u4e0d\u662f\u63d0\u5230\u4e86 I/O \u590d\u7528 \uff1f \u6ca1\u9519\uff0c\u8fd9\u5c31\u662f Python \u4e2d\u7f51\u7edc\u56de\u8c03\u7684\u5e95\u5c42\u5b9e\u73b0 select \u6a21\u5757\u4e0e selectors \u6a21\u5757\uff0c\u5bf9\u5f02\u6b65\u64cd\u4f5c\u63d0\u4f9b\u4e86\u6700\u57fa\u672c\u7684\u652f\u6301\u3002 \u6bd4\u5982\uff0c\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5f02\u6b65\u7f51\u7edc\u670d\u52a1\u5668\uff1a import selectors import socket sel = selectors . DefaultSelector () def accept ( sock , mask ): conn , addr = sock . accept () # Should be ready print ( 'accepted' , conn , 'from' , addr ) conn . setblocking ( False ) sel . register ( conn , selectors . EVENT_READ , read ) def read ( conn , mask ): data = conn . recv ( 1000 ) # Should be ready if data : print ( 'echoing' , repr ( data ), 'to' , conn ) conn . send ( data ) # Hope it won't block else : print ( 'closing' , conn ) sel . unregister ( conn ) conn . close () sock = socket . socket () sock . bind (( 'localhost' , 1234 )) sock . listen ( 100 ) sock . setblocking ( False ) sel . register ( sock , selectors . EVENT_READ , accept ) while True : events = sel . select () for key , mask in events : callback = key . data callback ( key . fileobj , mask ) \u5728 Windows \u4e0b\u57fa\u4e8e I/O Completion Port \u7684\u6a21\u578b\u6bd4\u57fa\u4e8e Selector \u7684\u6a21\u578b\u66f4\u53ef\u62d3\u5c55\uff08\u652f\u6301\u5b50\u8fdb\u7a0b\u7b49\uff09\uff0c\u5f53\u7136\u8fd9\u662f\u9898\u5916\u8bdd\u4e86\u3002 \u4ece\u56de\u8c03\u5230\u534f\u7a0b\uff08\u4e0b\uff09 \ud83d\udd17 \u4e0a\u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u7b80\u5355\u8bf4\u4e86\u57fa\u4e8e\u5e95\u5c42 selector \u7684\u56de\u8c03\u534f\u7a0b\uff0c\u5b83\u90fd\u9700\u8981\u901a\u8fc7 socket \u521b\u5efa\u7684\u539f\u59cb\u5957\u63a5\u5b57\u8fdb\u884c\u64cd\u4f5c\uff0c\u975e\u5e38\u7b28\u62d9\u4e14\u4e0d\u53cb\u597d\u3002 \u56de\u8c03\u7684\u672c\u8d28\uff0c\u662f\u5c06\u4e00\u4e2a\u4efb\u52a1\u5206\u6210\u4e24\u90e8\u5206\uff0c\u5728\u8017\u65f6\u64cd\u4f5c\u4e4b\u524d\u7684\u90e8\u5206\uff0c\u548c\u8017\u65f6\u64cd\u4f5c\u4e4b\u540e\u7684\u90e8\u5206\uff0c\u540e\u8005\u662f\u524d\u8005\u7684\u7ee7\u7eed\uff0c\u6216\u8005\u53eb\u505a\u7eed\u4f53\uff08continuation\uff09\u3002\u56de\u8c03\u5f0f\u5c31\u662f\u628a\u7eed\u4f53\u5199\u6210\u56de\u8c03\u51fd\u6570\u7684\u5f62\u5f0f\uff0c\u4f20\u9012\u5230\u5176\u4ed6\u5730\u65b9\uff0c\u8fd9\u79cd\u64cd\u4f5c\u53c8\u53eb\u505a \u7eed\u4f53\u4f20\u9012\uff08continuation-passing\uff09 \u3002\u4ece\u8fd9\u4e2a\u5c42\u9762\u4e0a\u770b\uff0c\u56de\u8c03\u662f\u7eed\u4f53\u4f20\u9012\u98ce\u683c\uff08Continuation-Passing Style, CPS\uff09\u7684\u4e00\u79cd\u3002 CPS \u5176\u5b9e\u662f\u5f88\u65e9\u5c31\u88ab\u7814\u7a76\u8fc7\u7684\u4e1c\u897f\uff0c\u5b83\u6700\u521d\u7684\u5e94\u7528\u4e0d\u662f\u5728\u5f02\u6b65\uff0c\u800c\u662f\u5728\u51fd\u6570\u5f0f\u7f16\u7a0b\u4e2d\u3002\u7528 CPS \u4e66\u5199\u7684 IR \u53ef\u4ee5\u65b9\u4fbf\u5730\u5b9e\u73b0\u60f0\u6027\u6c42\u503c\uff0c\u800c\u4e14\u56e0\u4e3a\u7eed\u4f53\u5929\u751f\u5c31\u662f Monad\uff0c\u6240\u4ee5\u987a\u4fbf\u53ef\u4ee5\u89e3\u51b3\u6c42\u503c\u987a\u5e8f\u7684\u95ee\u9898\u3002\uff08\u8bdd\u8bf4\uff0c\u4e3a\u4ec0\u4e48\u5230\u5904\u90fd\u662f Monad \u5462\uff1f\uff09\u4e0a\u4e00\u53e5\u8bdd\u5927\u53ef\u4e0d\u5fc5\u7406\u89e3\uff0c\u6bd5\u7adf\u6211\u4eec\u4e0d\u662f\u5728\u8bb2\u51fd\u6570\u5f0f\u7f16\u7a0b\uff0c\u4e0d\u8fc7\u662f\u501f\u7528\u4e00\u4e0b CPS \u7684\u672f\u8bed\uff0c\u63d0\u4f9b\u4e00\u4e2a\u65b0\u7684\u89c6\u89d2\u800c\u5df2\u3002 \u4ece CPS \u7684\u89d2\u5ea6\u770b\uff0c\u7eed\u4f53\u5230\u5e95\u662f\u4ec0\u4e48\u5f62\u5f0f\u5e76\u4e0d\u91cd\u8981\uff0c\u53ea\u8981\u4ed6\u80fd\u5305\u542b\u4efb\u52a1\u4e2d\u5c1a\u672a\u5b8c\u6210\u7684\u90e8\u5206\u5c31\u53ef\u4ee5\u3002\u4e8e\u662f\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u5927\u80c6\u7684\u60f3\u6cd5\uff1a \u7eed\u4f53\u80fd\u4e0d\u80fd\u662f\u8fd9\u4e2a\u4efb\u52a1\u81ea\u8eab\u5462 \uff1f \u8fd9\u662f\u4e00\u4e2a\u56de\u8c03\u5f0f\u7684\u4efb\u52a1\uff0c\u5b83\u88ab\u62c6\u6210\u4e86\u4e24\u534a\uff1a def job1 ( url ): get_async ( url , callback = continuation ) def continuation ( response ): print ( response . text . count ( 'e' )) \u73b0\u5728\u6211\u4eec\u8981\u628a\u5b83\u62fc\u56de\u53bb\uff1a from functools import partial def job1 ( url , cont = False ): if not cont : get_async ( url , callback = partial ( job1 , cont = True )) else : response = url print ( response . text . count ( 'e' )) \u770b\u8d77\u6765\u602a\u602a\u7684\u3002\u8fd9\u91cc\u7528\u4e86\u4e00\u4e2a\u53c2\u6570 cont \u6765\u6307\u793a\u8c03\u7528\u65f6\u8fdb\u5165\u7684\u662f\u4efb\u52a1\u7684\u524d\u534a\u90e8\u5206\uff0c\u8fd8\u662f\u540e\u534a\u90e8\u5206\u3002\u56de\u8c03\u51fd\u6570\u4f20\u5165\u662f\u5c31\u662f\u8fd9\u4e2a\u51fd\u6570\u672c\u8eab\uff0c\u53ea\u662f\u7528 partial \u89c4\u5b9a\u4e86\u4e00\u4e0b\u53c2\u6570\uff0c\u8ba9\u56de\u8c03\u80fd\u8fdb\u5165\u7eed\u4f53\u90e8\u5206\u3002 \u8fd9\u79cd\u5947\u602a\u7684\u5199\u6cd5\u8bf4\u4e0d\u4e0a\u597d\uff0c\u53ef\u8bfb\u6027\u4e5f\u4e0d\u662f\u5f88\u9ad8\u3002\u4ed6\u53ea\u662f\u628a\u56de\u8c03\u548c\u4efb\u52a1\u672c\u8eab\u5f3a\u884c\u62fc\u5728\u4e00\u8d77\u800c\u5df2\u3002 \u53ef\u662f\u6709\u4e00\u70b9\u4f18\u52bf\uff0c\u81f3\u5c11 \u5728\u5199\u4ee3\u7801\u7684\u987a\u5e8f\u4e0a\uff0c\u4ed6\u770b\u8d77\u6765\u548c\u540c\u6b65\u4ee3\u7801\u66f4\u50cf\u4e86 \u3002\u8fd9\u4e2a\u4f18\u70b9\u8bf4\u5927\u4e5f\u5927\uff0c\u8bf4\u5c0f\u4e5f\u5c0f\u3002\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u4e2d\uff0c\u8981\u6709\u5f88\u591a\u6b21\u5f02\u6b65\u8c03\u7528\uff0c\u5982\u679c\u4e00\u4e2a\u4e00\u4e2a\u5168\u90e8\u62c6\u5206\u5230\u56de\u8c03\u51fd\u6570\u91cc\uff0c\u5c31\u4f1a\u663e\u5f97\u7279\u522b\u6742\u4e71\uff08\u5c24\u5176\u662f\u5728 Python \u7684\u533f\u540d\u51fd\u6570\u7279\u522b\u4e11\u964b\u7684\u60c5\u51b5\u4e0b\uff09\u3002\u5982\u679c\u6211\u4eec\u80fd\u627e\u5230\u4e00\u4e2a\u826f\u597d\u7684\u5199\u6cd5\uff0c\u65e2\u80fd\u628a\u7834\u788e\u7684\u56de\u8c03\u51fd\u6570\u62fc\u56de\u53bb\uff0c\u53c8\u80fd\u4fdd\u6301\u5f02\u6b65\u7684\u4f18\u70b9\uff0c\u90a3\u5c31\u518d\u597d\u4e0d\u8fc7\u4e86\u3002 \u95ee\u9898\u7684\u5173\u952e\u5728\u54ea\u91cc\uff1f\u4e0a\u9762\u8fd9\u4e2a\u51fd\u6570\u5199\u7684\u5f88\u5947\u602a\uff0c\u539f\u56e0\u662f\u5b83\u8981 \u5b9e\u73b0\u540c\u4e00\u4e2a\u51fd\u6570\u7684\u4e24\u6b21\u8c03\u7528\u6267\u884c\u4e0d\u540c\u7684\u4ee3\u7801 \u3002 \u2026\u2026\u786e\u5b9e\u662f\u4e2a\u5f88\u5947\u602a\u7684\u9700\u6c42\u3002\u4e0d\u8fc7\u6362\u4e00\u4e2a\u89d2\u5ea6\u662f\u4e0d\u662f\u5c31\u5bb9\u6613\u7406\u89e3\u4e86\u5462\uff1f\u8868\u9762\u770b\u662f\u4e24\u6b21\u8c03\u7528\u6267\u884c\u4e0d\u540c\u7684\u4ee3\u7801\uff0c\u5b9e\u9645\u4e0a\u662f \u7b2c\u4e00\u6b21\u8c03\u7528\u540e\uff0c\u5728\u67d0\u4e00\u5904\u6682\u505c\uff0c\u7136\u540e\u7b2c\u4e8c\u6b21\u8c03\u7528\uff0c\u5c31\u4ece\u8fd9\u4e2a\u5730\u65b9\u7ee7\u7eed \u3002 \u5982\u679c\u6709\u4e24\u4e2a\u795e\u79d8\u7684\u51fd\u6570 pause \u548c resume \uff0c\u80fd\u8ba9\u6211\u4eec\u5b9e\u73b0\u8fd9\u4e00\u529f\u80fd\uff0c\u6211\u4eec\u7acb\u9a6c\u53ef\u4ee5\u628a\u4ee3\u7801\u5199\u5f97\u5341\u5206\u4f18\u96c5\uff1a def job1 ( url ): get_async ( url , callback = resume ) response = pause () print ( response . text . count ( 'e' )) \u6267\u884c\u5230 pause \u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u51fd\u6570\u6682\u505c\uff0c\u7b49\u5230 resume \u88ab\u8c03\u7528\u65f6\uff0c\u624d\u7ee7\u7eed\u6267\u884c\u3002 \u975e\u5e38\u597d\uff0c\u73b0\u5728\u95ee\u9898\u53ea\u6709\u4e00\u4e2a\u4e86\uff1a \u600e\u4e48\u624d\u80fd\u5b9e\u73b0\u6682\u505c\u7684\u529f\u80fd\u5462 \uff1f \u7b54\u6848\u5c31\u662f\uff1a\u534f\u7a0b \u3002 async \u548c await \ud83d\udd17 \u6309\u7167\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u6765\u7406\u89e3\uff0c \u534f\u7a0b\u5c31\u662f\u53ef\u4ee5\u6682\u505c\u7684\u51fd\u6570 \u3002 \u5982\u679c\u4f60\u5bf9 Python \u7684\u5176\u4ed6\u90e8\u5206\u6709\u4e00\u5b9a\u4e86\u89e3\uff0c\u4f60\u4e00\u5b9a\u4f1a\u60f3\u5230\u2014\u2014 \u751f\u6210\u5668 \uff08Generator\uff09 \u3002 \u5b9e\u9645\u4e0a\uff0casyncio \u521a\u521a\u88ab\u5f15\u5165\u65f6\uff0c\u534f\u7a0b\u5c31\u662f\u901a\u8fc7 @asyncio.coroutine \u5305\u88c5\u751f\u6210\u5668\u800c\u6210\u7684\u3002 \u5728 yield \u65f6\uff0c\u51fd\u6570\u6682\u505c\u6267\u884c\u4e14\u4fdd\u7559\u672c\u5730\u53d8\u91cf\uff0c\u76f4\u5230\u5728\u5176\u4e0a\u6267\u884c send() \u6216 next() . \u5bf9\u4e8e\u4ee5\u4e0b Python \u4ee3\u7801\uff1a def generator (): yield \"start\" return \"end\" def main (): gen = generator () start = next ( gen ) try : next ( gen ) except StopIteration as e : end = e . value print ( start , end ) main () # \u8f93\u51fa start end \u5b83\u7684\u6267\u884c\u6d41\u7a0b\u5982\u4e0b (\u7bad\u5934\u53cd\u6620\u4e86\u63a7\u5236\u6743\u7684\u4ea4\u6362\uff09\uff1a flowchart TD; subgraph main A[\"gen = generator()\"] --> B[\"start = next(gen)\"] C[\"next(gen)\"] D[\"end = e.value\"] D --> E[\"\u8f93\u51fa start, end\"] end subgraph gen B --> Q[\"gen \u6267\u884c\u5230 yield\uff0c\u8fd4\u56de 'start'\"] Q -->|\"\u8fd4\u56de\u7684 'start' \u8d4b\u503c\u7ed9 start\"| C C --> R[\"gen \u6267\u884c\u5230 return\"] --> S[\"\u629b\u51fa StopIteration\"] Q -->|\"gen \u6302\u8d77\"| R S -->|\"\u8fd4\u56de\u7684 'end' \u8d4b\u503c\u7ed9 end\"| D end Python \u7684\u534f\u7a0b\u5c31\u662f\u4f7f\u7528\u4e86\u8fd9\u4e2a\u601d\u8def\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u6837\u521b\u5efa\u7684\u534f\u7a0b\uff0c\u63a7\u5236\u6743\u4e0d\u4f1a\u76f4\u63a5\u79fb\u4ea4\u7ed9\u8c03\u7528\u8005\uff0c\u800c\u662f \u4e8b\u4ef6\u5faa\u73af \u3002 \u90a3\u534f\u7a0b\u600e\u4e48\u4e92\u76f8\u8c03\u7528\u5462\uff1f\u6ca1\u5173\u7cfb\uff0c\u901a\u8fc7 yield from \u8bed\u6cd5\uff0c\u53ef\u4ee5\u8fdb\u4e00\u6b65\u8f6c\u4ea4\u63a7\u5236\u6743\u7ed9\u4e0b\u5c42\u751f\u6210\u5668\uff0c\u4e5f\u5c31\u662f\u534f\u7a0b\u3002 \u6ca1\u8fc7\u591a\u4e45 (Python 3.5)\uff0c async \u4e0e await \u5c31\u88ab\u52a0\u5165 Python \u4e86\u3002 \u4f7f\u7528\u534f\u7a0b \ud83d\udd17 \u901a\u8fc7 async \u5173\u952e\u5b57\u53ef\u4ee5\u5c06\u4e00\u4e2a\u51fd\u6570\u53d8\u4e3a \u5b9a\u4e49\u4e0a \u7684\u5f02\u6b65\u51fd\u6570\uff0c\u901a\u8fc7 await \u5173\u952e\u5b57\u8c03\u7528\u5176\u4ed6\u7684\u5f02\u6b65\u51fd\u6570\u3002 \u8981\u5728\u534f\u7a0b\u5185\u90e8\u5e76\u53d1\u591a\u4e2a\u534f\u7a0b\uff0c\u6211\u4eec\u9700\u8981 \u521b\u5efa\u4efb\u52a1\uff08Task\uff09 \u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 asyncio.create_task() \u51fd\u6570\u6765\u521b\u5efa\u4e00\u4e2a\u4efb\u52a1\u3002 \u6709\u4e00\u4e2a\u51e0\u4e4e\u7b49\u6548\u7684\u51fd\u6570\uff0c\u53eb\u505a asyncio.ensure_future() \u3002 \u7b49\u4e00\u4e0b\uff0c Future \u662f\u4ec0\u4e48\uff1f Future \u662f\u7528\u4e8e\u8868\u793a \u5f02\u6b65\u8fd0\u7b97\u7ed3\u679c \u7684\u5bf9\u8c61\uff0c\u5b83\u7528\u4e8e\u5c06\u56de\u8c03\u5f0f\u5f02\u6b65\u7f16\u7a0b\u4e0e async await \u8054\u7cfb\u5728\u4e00\u8d77\u3002 \u901a\u8fc7 Future.result() \u65b9\u6cd5\u901a\u77e5\u4e8b\u4ef6\u5faa\u73af\u5f02\u6b65\u8fd0\u7b97\u5b8c\u6210\uff08\u65e0\u8bba\u6210\u529f\u8fd8\u662f\u5931\u8d25\uff09\uff0c\u4e8b\u4ef6\u5faa\u73af\u4fbf\u4f1a\u5c06\u7ed3\u679c\u4f20\u9012\u7ed9\u6b63\u5728\u7b49\u5f85\u7684\u534f\u7a0b\u3002 Task \u5bf9\u8c61\u5c06\u534f\u7a0b\u5305\u88f9\u5728 Future \u4e2d\uff0c\u7528\u4e8e\u63a7\u5236\u534f\u7a0b\u6267\u884c\u3002 \u518d\u7b49\u7b49\uff0c Future \u65e2\u7136\u53ef\u4ee5\u8868\u793a\u5f02\u6b65\u8fd0\u7b97\u7ed3\u679c\uff0c\u90a3\u4e48...... \u901a\u8fc7 AbstractEventLoop.run_in_executor() \uff0c\u53ef\u4ee5\u5c06\u540c\u6b65\u51fd\u6570\u5728\u7ebf\u7a0b/\u8fdb\u7a0b\u5185\u6267\u884c\uff0c\u518d\u5305\u88c5\u6210\u53ef\u4ee5\u88ab\u7b49\u5f85\u7684 Future \u5bf9\u8c61\u3002 async for async with \u5219\u662f\u901a\u8fc7\u5b9e\u73b0 __aiter__() __anext__() __aenter__() __aexit__() \u7b49 dunder \u65b9\u6cd5\u5b9e\u73b0\u7684\u3002","title":"\u5f02\u6b65\u6559\u7a0b"},{"location":"appendix/asyncio-intro/#asyncio","text":"\u672c\u7ae0\u6458\u81ea YiriMirai \u7684\u6587\u6863\u3002 YiriMirai \u662f\u4e00\u4e2a\u8f7b\u91cf, \u4f4e\u8026\u5408\u7684 Python QQ Bot \u6846\u67b6. Python \u4ece 3.4 \u5f00\u59cb\u5f15\u5165\u4e86 asyncio \u5e93\uff0c\u63d0\u4f9b\u5f02\u6b65\u534f\u7a0b\u652f\u6301\uff0c\u4ece Python 3.4 \u5230 3.7\uff0c\u5bf9\u5f02\u6b65\u7684\u652f\u6301\u4e00\u76f4\u5728\u4e0d\u65ad\u5730\u8fdb\u6b65\u3002\u53ef\u4ee5\u8bf4\uff0c\u5f02\u6b65\u5c31\u662f Python \u672a\u6765\u7684\u8d8b\u52bf\u4e4b\u4e00\u3002 \u5728\u4e86\u89e3\u5f02\u6b65\u4e4b\u524d\uff0c\u4f60\u53ef\u80fd\u5df2\u7ecf\u63a5\u89e6\u8fc7\u6216\u542c\u8bf4\u8fc7\u5f88\u591a\u7c7b\u4f3c\u7684\u6982\u5ff5\uff0c\u6bd4\u5982\u201c\u5e76\u53d1\u201d\u201c\u5e76\u884c\u201d\u201c\u591a\u7ebf\u7a0b\u201d\u7b49\u7b49\uff0c\u8fd9\u4e48\u591a\u540d\u8bcd\uff0c\u518d\u52a0\u4e0a\u4e00\u4e2a\u201c\u5f02\u6b65\u201d\uff0c\u8ba9\u4eba\u6709\u4e9b\u6df7\u4e71\u3002 \u4e0d\u8fc7\uff0c\u867d\u7136\u770b\u8d77\u6765\u5f88\u590d\u6742\uff0c\u4f46\u662f\uff0c\u901a\u8fc7\u8fd9\u7bc7\u6559\u7a0b\uff0c\u6211\u76f8\u4fe1\u4f60\u80fd\u591f\u5bf9\u201c\u5f02\u6b65\u201d\u548c\u201c\u534f\u7a0b\u201d\u6709\u4e00\u4e2a\u6e05\u6670\u7684\u628a\u63e1\u3002 \u4ee5\u4e0b\u662f\u8fd9\u7bc7\u6559\u7a0b\u6db5\u76d6\u7684\u5185\u5bb9\uff1a \u5f02\u6b65\uff1a\u4e00\u79cd\u7f16\u7a0b\u8303\u5f0f\uff0c\u72ec\u7acb\u4e8e\u7f16\u7a0b\u8bed\u8a00\uff0c\u53ef\u4ee5\u5177\u6709\u591a\u79cd\u8bed\u8a00\u7684\u4e0d\u540c\u5b9e\u73b0\u3002 async/await\uff1a\u4e24\u4e2a\u65b0\u7684 Python \u5173\u952e\u5b57\uff0c\u7528\u4e8e\u89c4\u5b9a\u5f02\u6b65\u903b\u8f91\u3002 asyncio\uff1a\u4e00\u4e2a Python \u5185\u7f6e\u7684\u5305\uff0c\u63d0\u4f9b\u534f\u7a0b\u7684\u57fa\u7840\u529f\u80fd\u548c\u7ba1\u7406\u534f\u7a0b\u7684\u65b9\u6cd5\u3002 \u5982\u679c\u4f60\u5fc3\u6025\u4e86\uff0c\u8bf7\u76f4\u63a5\u8df3\u5230 \u4f7f\u7528\u534f\u7a0b","title":"asyncio \u6559\u7a0b"},{"location":"appendix/asyncio-intro/#_1","text":"\u5728\u8bb2\u5f02\u6b65\u4e4b\u524d\uff0c\u9700\u8981\u5148\u77e5\u9053\u4e00\u4e2a\u4e0e\u4e4b\u76f8\u5bf9\u7684\u6982\u5ff5\uff1a\u540c\u6b65\u3002 \u5176\u5b9e\u540c\u6b65\u5bf9\u6211\u4eec\u800c\u8a00\u5e76\u4e0d\u964c\u751f\u3002\u5728\u63a5\u89e6\u5230\u5f02\u6b65\u4e4b\u524d\uff0c\u6211\u4eec\u8ba4\u77e5\u7684\u4e00\u5207\u90fd\u662f\u540c\u6b65\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u60f3\u8c61\u4ee3\u7801\u4e00\u53e5\u4e00\u53e5\u5730\u6267\u884c\uff0c\u9047\u5230\u51fd\u6570\u5c31\u8fdb\u5165\uff0c\u6267\u884c\u5b8c\u51fd\u6570\u518d\u6267\u884c\u51fd\u6570\u540e\u9762\u7684\u4e1c\u897f\uff0c\u6240\u6709\u7684\u6267\u884c\u987a\u5e8f\u90fd\u4e25\u683c\u5730\u548c\u4ee3\u7801\u4e66\u5199\u7684\u987a\u5e8f\u4e00\u81f4\u2014\u2014\u8fd9\u5c31\u662f\u540c\u6b65\u3002 \u6bd4\u5982\u8fd9\u6837\u7684\u4ee3\u7801\uff1a import time print ( 1 ) time . sleep ( 10 ) print ( 2 ) \u6211\u4eec\u53ef\u4ee5\u6e05\u6670\u5730\u9884\u77e5\u5b83\u7684\u884c\u4e3a\uff1a\u5148\u6253\u5370 1\uff0c\u7136\u540e\u7b49\u5f85 10 \u79d2\uff0c\u6700\u540e\u6253\u5370 2\u3002 \u540c\u6b65\u6700\u5927\u7684\u4f18\u70b9\u662f \u601d\u8def\u6e05\u6670 \u3002 \u4f60\u6c38\u8fdc\u53ef\u4ee5\u77e5\u9053\u4f60\u7684\u7a0b\u5e8f\u662f\u6309\u7167\u600e\u6837\u7684\u987a\u5e8f\u6267\u884c\u7684\uff0c\u4e0d\u7528\u62c5\u5fc3\u4efb\u4f55\u610f\u6599\u4e4b\u5916\u7684\u60c5\u51b5 \u3002 \u4f46\u540c\u65f6\uff0c\u540c\u6b65\u4e5f\u6709\u4e0d\u53ef\u907f\u514d\u7684\u7f3a\u70b9\uff1a\u5728\u67d0\u4e9b\u60c5\u5883\u4e0b\uff0c\u5b83\u4f1a\u5e26\u6765\u6027\u80fd\u7684\u6d6a\u8d39\u3002 \u4ee5\u4e00\u4e2a\u751f\u6d3b\u4e2d\u7684\u573a\u666f\u4e3a\u4f8b\uff1a\u4f60\u5728\u7f51\u4e0a\u4e0b\u8f7d\u4e00\u4e2a\u6587\u4ef6\uff0c\u4f46\u662f\u6587\u4ef6\u5f88\u5927\uff0c\u9700\u8981\u5f88\u957f\u65f6\u95f4\u624d\u80fd\u4e0b\u5b8c\u3002\u8fd9\u65f6\u5019\uff0c\u4f60\u80af\u5b9a\u4e0d\u4f1a\u76ef\u7740\u8fdb\u5ea6\u6761\u4e00\u70b9\u70b9\u8d70\uff0c\u800c\u662f\u53bb\u505a\u70b9\u522b\u7684\u4e8b\u60c5\uff0c\u8bfb\u4e00\u4f1a\u4e66\uff0c\u770b\u4e00\u4f1a\u7535\u5f71\uff0c\u4e4b\u7c7b\u7684\u3002 \u4f46\u5982\u679c\u6709\u4e00\u4e2a\u5b8c\u5168\u201c\u540c\u6b65\u201d\u7684\u4eba\uff0c\u4ed6\u4e3a\u81ea\u5df1\u8bbe\u5b9a\u7684\u7a0b\u5e8f\u662f\u4e0b\u8f7d\u8fd9\u4e2a\u6587\u4ef6\uff0c\u7136\u540e\u8fd0\u884c\u5b83\uff0c\u8fd9\u6837\u7684\u8bdd\uff0c\u4ed6\u4e3a\u4e86\u4e0d\u8ba9\u81ea\u5df1\u7684\u8fd0\u884c\u903b\u8f91\u4e71\u6389\uff0c\u5c31\u4f1a\u4e00\u76f4\u5b88\u5728\u7535\u8111\u524d\uff0c\u76f4\u5230\u6587\u4ef6\u4e0b\u8f7d\u5b8c\u6210\u624d\u505a\u4e0b\u4e00\u6b65\u7684\u5de5\u4f5c\u3002\u6b63\u5e38\u4eba\u80af\u5b9a\u4e0d\u80fd\u5fcd\u53d7\u8fd9\u6837\u65e0\u804a\u7684\u7b49\u5f85\uff0c\u4e5f\u4e0d\u4f1a\u5e0c\u671b\u81ea\u5df1\u7684\u7a0b\u5e8f\u5728\u8fd9\u79cd\u65e0\u804a\u7684\u4e8b\u4e0a\u6d6a\u8d39\u65f6\u95f4\u3002 \u4e3a\u4e86\u80fd\u5145\u5206\u5229\u7528\u8fd9\u4e9b\u53ef\u80fd\u88ab\u6d6a\u8d39\u6389\u7684\u65f6\u95f4\uff0c\u4eba\u4eec\u60f3\u51fa\u8fc7\u5f88\u591a\u65b9\u6cd5\uff0c\u6bd4\u5982 \u591a\u7ebf\u7a0b \uff0c\u6bd4\u5982 \u56de\u8c03 \u3002 \u591a\u7ebf\u7a0b\u662f\u6700\u5bb9\u6613\u60f3\u5230\u7684\u4e00\u79cd\u65b9\u5f0f\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u591a\u4e2a\u7ebf\u7a0b\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u5185\u90e8\u662f\u540c\u6b65\u7684\uff0c\u518d\u8ba9\u8fd9\u4e9b\u7ebf\u7a0b\u540c\u65f6\u8fd0\u884c\u3002\u8fd9\u6837\uff0c\u5728\u4e00\u4e2a\u7ebf\u7a0b\u7b49\u5f85\u7684\u65f6\u5019\uff0c\u5176\u4f59\u7684\u7ebf\u7a0b\u53ef\u4ee5\u7ee7\u7eed\u8fd0\u884c\uff0c\u4e0d\u4f1a\u56e0\u6b64\u505c\u6b62\u3002 \u8fd9\u770b\u4e0a\u53bb\u5341\u5206\u7f8e\u597d\uff0c\u7136\u800c\u73b0\u5b9e\u5e76\u4e0d\u50cf\u6211\u4eec\u60f3\u8c61\u5f97\u90a3\u4e48\u7b80\u5355\u3002\u867d\u7136\u7ebf\u7a0b\u5404\u81ea\u5185\u90e8\u7684\u4ee3\u7801\u662f\u540c\u6b65\u7684\uff0c\u4f46\u4e0d\u540c\u7ebf\u7a0b\u4e4b\u95f4\u7684\u4ee3\u7801\u6267\u884c\u987a\u5e8f\u5df2\u7ecf\u65e0\u4ece\u786e\u5b9a\u3002\u6362\u8a00\u4e4b\uff0c\u6211\u4eec\u5f15\u5165\u4e86\u201c\u5f02\u6b65\u201d\u3002 \u4ee3\u7801\u7684\u6267\u884c\u987a\u5e8f\u4e0e\u4e66\u5199\u987a\u5e8f\u4e0d\u4e00\u81f4\u7684\u73b0\u8c61\u5c31\u662f\u5f02\u6b65 \u3002 \u719f\u6089\u591a\u7ebf\u7a0b\u7684\u4eba\u5e94\u8be5\u4e86\u89e3\u8fc7\u201c\u9501\u201d\u7684\u5404\u79cd\u82b1\u6837\u3002\u4e24\u4e2a\u7ebf\u7a0b\u5171\u4eab\u8d44\u6e90\u65f6\uff0c\u5982\u679c\u540c\u65f6\u5bf9\u540c\u4e00\u4e2a\u53d8\u91cf\u8fdb\u884c\u4fee\u6539\uff0c\u5c31\u6709\u53ef\u80fd\u5bfc\u81f4\u51fa\u4e4e\u9884\u6599\u7684\u60c5\u51b5\u3002\u6240\u4ee5\u4eba\u4eec\u53d1\u660e\u4e86\u201c\u9501\u201d\uff0c\u6765\u4fdd\u8bc1\u540c\u4e00\u65f6\u523b\u53ea\u6709\u552f\u4e00\u7684\u7ebf\u7a0b\u5bf9\u67d0\u4e00\u4e2a\u53d8\u91cf\u8fdb\u884c\u4fee\u6539\u3002\u53ef\u4ee5\u8bf4\uff0c\u201c\u9501\u201d\u662f\u4e3a\u4e86\u5236\u670d\u5f02\u6b65\u800c\u53d1\u660e\u7684\u3002 graph TD; subgraph \u6267\u884c\u987a\u5e8f H{{b = 1}} --> F[a = 1] F --> G{{a += b}} G --> I[\"print(a)\"] end subgraph Thread1 A[a = 1] --> B[\"print(a)\"] B --> E([Output: 2]) end subgraph Thread2 C{{b = 1}} --> D{{a += b}} D -.->|Breaking!| E end \u5982\u6b64\u770b\u6765\uff0c\u5f02\u6b65\u4f3c\u4e4e\u662f\u4e00\u4ef6\u4e0d\u592a\u597d\u7684\u4e8b\u60c5\u3002\u5b83\u8ba9\u7a0b\u5e8f\u7684\u8fd0\u884c\u5e73\u6dfb\u4e86\u4e00\u79cd\u4e0d\u53ef\u63a7\u7684\u968f\u610f\u6027\uff0c\u6211\u4eec\u4e0d\u518d\u80fd\u770b\u5230\u4ee3\u7801\u5c31\u76f4\u63a5\u63a8\u6f14\u51fa\u7ed3\u679c\uff0c\u56e0\u4e3a\u5373\u4f7f\u662f\u76f8\u90bb\u4e66\u5199\u7684\u50f5\u5c40\u4ee3\u7801\uff0c\u4e4b\u95f4\u4e5f\u53ef\u80fd\u4f1a\u6709\u522b\u7684\u4ee3\u7801\u6267\u884c\u3002 \u4f46\u662f \u5f02\u6b65\u76f8\u8f83\u4e8e\u540c\u6b65\u800c\u8a00\uff0c\u5e26\u6765\u7684\u6027\u80fd\u63d0\u5347\u5b9e\u5728\u662f\u592a\u8bf1\u4eba\u4e86 \u3002\u4e00\u4e2a\u7f51\u7ad9\u7684\u670d\u52a1\u5668\uff0c\u5982\u679c\u662f\u540c\u6b65\u7684\uff0c\u90a3\u4e48\u5b83\u540c\u65f6\u53ea\u80fd\u8ba9\u4e00\u4e2a\u7528\u6237\u8bbf\u95ee\u2014\u2014\u8fd9\u7b80\u76f4\u662f\u4e0d\u53ef\u7406\u55bb\u7684\u4e8b\u60c5\u3002\u5f02\u6b65\u5c31\u50cf\u51e0\u4e07\u5e74\u524d\u8e72\u8e1e\u5728\u8349\u539f\u6e05\u51b7\u7684\u6708\u5149\u4e0b\uff0c\u7528\u9510\u5229\u7684\u773c\u795e\u773a\u671b\u4eba\u7c7b\u8425\u5730\u7bdd\u706b\u7684\u4e00\u53ea\u79c0\u7f8e\u7684\u72fc\uff0c\u800c\u730e\u624b\u4eec\u5219\u601d\u8003\u7740\u5982\u4f55\u7ed9\u5b83\u5957\u4e0a\u9879\u5708\uff0c\u53d8\u6210\u81ea\u5df1\u5fe0\u5b9e\u7684\u730e\u72ac\u3002 \u6240\u4ee5\uff0c\u591a\u7ebf\u7a0b\u3001\u56de\u8c03\uff0c\u5305\u62ec\u534f\u7a0b\uff0c\u8fd9\u4e00\u7cfb\u5217\u8bbe\u8ba1\uff0c\u4e0e\u5176\u8bf4\u662f\u4e3a\u4e86\u5145\u5206\u5229\u7528\u8ba1\u7b97\u8d44\u6e90\uff0c\u4e0d\u5982\u8bf4\u662f\u4e3a\u4e86 \u5728\u4eba\u7c7b\u53ef\u7406\u89e3\u7684\u8303\u7574\u5185\uff0c\u66f4\u597d\u5730\u5236\u670d\u5f02\u6b65 \u3002","title":"\u4ec0\u4e48\u662f\u5f02\u6b65\uff1f"},{"location":"appendix/asyncio-intro/#_2","text":"\u591a\u7ebf\u7a0b\u548c\u9501\u7684\u7ed3\u5408\uff0c\u81f3\u4eca\u4ecd\u7136\u662f\u5f02\u6b65\u7f16\u7a0b\u7684\u6700\u4f73\u9009\u62e9\u4e4b\u4e00\u3002\u56e0\u6b64\uff0c\u600e\u4e48\u52a0\u9501\u3001\u5728\u4f55\u5904\u52a0\u9501\uff0c\u5c31\u6210\u4e3a\u4e86\u4e00\u95e8\u91cd\u8981\u7684\u5b66\u95ee\u3002 \u9501\u662f\u4e2a\u597d\u4e1c\u897f\uff0c\u4f46\u662f\u4e0d\u80fd\u6709\u592a\u591a\u3002\u4e00\u65b9\u9762\uff0c\u53cd\u590d\u5730\u83b7\u53d6\u9501\u91ca\u653e\u9501\u4f1a\u5360\u7528\u8fd0\u884c\u65f6\u95f4\uff1b\u53e6\u4e00\u65b9\u9762\uff0c\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u957f\u65f6\u95f4\u6301\u6709\u67d0\u4e2a\u9501\u65f6\uff0c\u5176\u4ed6\u7684\u7ebf\u7a0b\u5982\u679c\u60f3\u8981\u8bbf\u95ee\u8fd9\u4e2a\u8d44\u6e90\uff0c\u4e5f\u5fc5\u987b\u5728\u539f\u5730\u7b49\u5f85\uff0c \u6781\u7aef\u60c5\u51b5\u4e0b\uff0c\u540c\u4e00\u65f6\u95f4\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5728\u6267\u884c\uff01 \u4eba\u4eec\u5728\u4f18\u5316\u9501\u7684\u4f7f\u7528\u4e0a\u82b1\u4e86\u5f88\u5927\u5de5\u592b\uff0c\u4ece\u4e2d\u884d\u751f\u51fa\u7684\u5404\u79cd\u7406\u8bba\u6b64\u5904\u4e0d\u518d\u8d58\u8ff0\u3002\u968f\u7740\u9501\u7684\u4f7f\u7528\u65b9\u5f0f\u9010\u6e10\u53d8\u5f97\u590d\u6742\uff0c\u4eba\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u60f3\u8981\u5b8c\u7f8e\u5730\u63a7\u5236\u9501\u7684\u7c92\u5ea6\uff0c\u5c31\u4e0d\u5f97\u4e0d\u5bf9\u82b1\u5927\u91cf\u7684\u4ee3\u7801\u53bb\u7cbe\u7ec6\u5730\u63a7\u5236\u6bcf\u4e00\u4e2a\u9501\uff0c\u8fd9\u8ba9\u7f16\u5199\u4ee3\u7801\u7684\u96be\u5ea6\u5927\u5927\u63d0\u9ad8\u4e86\u3002 \u6709\u7684\u65f6\u5019\uff0c\u63a7\u5236\u9501\u5e26\u6765\u7684\u590d\u6742\u5ea6\u5df2\u7ecf\u8d85\u51fa\u4e86\u4eba\u80fd\u5fcd\u53d7\u7684\u8303\u56f4\u3002\u4e8e\u662f\u6211\u4eec\u7ecf\u5e38\u89c1\u5230\u8bb8\u591a\u7b80\u5355\u7c97\u66b4\u7684\u64cd\u4f5c\u2014\u2014\u6bd4\u5982\u5728 CPython \u4e2d\u81ed\u540d\u662d\u8457\u7684 GIL\u3002\u5b83\u5c06\u6574\u4e2a Python \u89e3\u91ca\u5668\u52a0\u9501\uff0c\u6765\u5f7b\u5e95\u89e3\u51b3 Python \u4ee3\u7801\u5185\u7684\u7ebf\u7a0b\u51b2\u7a81\u95ee\u9898\uff1b\u540e\u679c\u5c31\u662f\uff0c \u6240\u6709\u7684 Python \u7ebf\u7a0b\u90fd\u5fc5\u987b\u7b49\u5f85\u8fd9\u4e2a\u9501\uff0c\u786c\u751f\u751f\u5730\u8ba9\u591a\u7ebf\u7a0b\u7a0b\u5e8f\u51e0\u4e4e\u9000\u5316\u6210\u4e86\u5355\u7ebf\u7a0b \u3002 \u5f53\u7136\uff0cGIL \u7684\u5b58\u5728\u4e5f\u6ca1\u6709\u5b8c\u5168\u628a\u591a\u7ebf\u7a0b\u7684\u4f18\u70b9\u62b9\u6d88\u6389\u3002\u6bd4\u5982\u4e00\u4e2a\u7ebf\u7a0b\u5728 sleep \u7684\u65f6\u5019\uff0c\u6216\u8005\u5728\u7b49\u5f85\u7f51\u7edc\u8bf7\u6c42\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u8fd8\u662f\u4f1a\u4e56\u4e56\u5730\u91ca\u653e\u6389 GIL \u9501\uff0c\u8ba9\u5176\u4ed6\u7ebf\u7a0b\u8fd0\u884c\u7684\u3002\u4e0d\u8fc7\u8fd9\u65f6\u5019\uff0c\u91ca\u653e GIL \u7684\u7ebf\u7a0b\u5b9e\u9645\u4e0a\u53ea\u662f\u5728\u7b49\u7740\uff0c\u4ec0\u4e48\u90fd\u4e0d\u5e72\uff0c\u6700\u540e\u8fd8\u662f\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5728\u8fd0\u884c\u3002 \u65e2\u7136\u8fd8\u662f\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5728\u8fd0\u884c\uff0c\u90a3\u4e48\u4e3a\u4ec0\u4e48\u4e0d\u5e72\u8106\u7528\u5355\u7ebf\u7a0b\u5b9e\u73b0\u5462\uff1f \u7b54\u6848\u662f\uff1a\u5f53\u7136\u53ef\u4ee5 \u3002\u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\uff0c\u4eba\u4eec\u7ed9\u51fa\u4e86\u8bb8\u591a\u7b54\u6848\uff0c\u5176\u4e2d\u6700\u8457\u540d\u7684\u662f\u4e24\u79cd\uff1a \u56de\u8c03\u548c\u534f\u7a0b \u3002","title":"\u9501\u7684\u201c\u56f0\u5883\u201d"},{"location":"appendix/asyncio-intro/#_3","text":"\u4ecb\u7ecd\u4e86\u8fd9\u4e48\u591a\uff0c\u6211\u4eec\u7ec8\u4e8e\u7b2c\u4e00\u6b21\u63d0\u5230\u4e86\u201c\u534f\u7a0b\u201d\u8fd9\u4e2a\u8bcd\u3002\u4e0d\u8fc7\u5148\u4e0d\u8981\u7740\u6025\uff0c\u8981\u60f3\u7406\u89e3\u534f\u7a0b\u7684\u6982\u5ff5\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e9b\u57fa\u7840\u7684\u4e1c\u897f\u3002 \u56de\u5230\u4e0a\u9762\u521a\u521a\u63d0\u51fa\u7684\u95ee\u9898\uff0c\u4e0d\u8fc7\u8fd9\u91cc\u8981\u6362\u4e2a\u8bf4\u6cd5\uff1a \u600e\u6837\u5728\u5355\u7ebf\u7a0b\u4e2d\u5b9e\u73b0\u5f02\u6b65 \uff1f \u5176\u5b9e\u5728\u521a\u624d\u7684\u8ba8\u8bba\u4e2d\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u95ee\u9898\u7684\u7b54\u6848\uff0c\u90a3\u5c31\u662f\uff0c\u50cf\u5e26\u7740 GIL \u7684\u591a\u7ebf\u7a0b\u4e00\u6837\uff0c\u5728\u67d0\u4e2a\u5730\u65b9\u9700\u8981\u7b49\u5f85\u65f6\uff0c\u5c31\u7acb\u9a6c\u5207\u6362\u5230\u522b\u7684\u4efb\u52a1\uff0c\u7b49\u5f85\u5b8c\u6210\u4e4b\u540e\uff0c\u518d\u7ee7\u7eed\u521a\u624d\u7684\u4efb\u52a1\u3002 graph LR; A[\"\u4efb\u52a11(\u53d1\u8d77\u8bf7\u6c42)\"] -.-> C{{\u7b49\u5f85}} A --->|\u5207\u6362\u5230| D[\u4efb\u52a12] C -..-> E{{\u7b49\u5f85\u5b8c\u6210}} E -.-> F[\"\u4efb\u52a13(\u9700\u8981\u8bf7\u6c42\u7ed3\u679c)\"] D --->|\u7ee7\u7eed\u6267\u884c| F \u5355\u7ebf\u7a0b\u5f02\u6b65\u7684\u903b\u8f91\u770b\u8d77\u6765\u5c31\u662f\u8fd9\u4e48\u7b80\u5355\uff0c\u4e5f\u5341\u5206\u5bb9\u6613\u7406\u89e3\u3002\u4f46\u662f\uff0c\u6613\u4e8e\u7406\u89e3\u4e0d\u4ee3\u8868\u6613\u4e8e\u5b9e\u73b0\u3002\u5f53\u4eba\u4eec\u771f\u7684\u5f00\u59cb\u52a8\u624b\u5199\u4e00\u6bb5\u5355\u7ebf\u7a0b\u5f02\u6b65\u7684\u4ee3\u7801\u65f6\uff0c\u5c31\u53d1\u73b0\u6709\u8bb8\u591a\u663e\u800c\u6613\u89c1\u5374\u96be\u4ee5\u8bf4\u660e\u7684\u95ee\u9898\u3002 \u201c\u9700\u8981\u7b49\u5f85\u201d\u662f\u4ec0\u4e48\uff1f\u201c\u5207\u6362\u201d\u662f\u600e\u4e48\u5b8c\u6210\u7684\uff1f\u201c\u7b49\u5f85\u5b8c\u6210\u201d\u6307\u7684\u662f\u4ec0\u4e48\uff1f\u201c\u7ee7\u7eed\u201d\u53c8\u662f\u600e\u4e48\u5b9e\u73b0\u7684\uff1f \u8fd9\u4e9b\u95ee\u9898\u8bf4\u590d\u6742\u4e5f\u590d\u6742\uff0c\u8bf4\u7b80\u5355\u4e5f\u7b80\u5355\u3002\u4e3a\u4e86\u4e0d\u6d6a\u8d39\u5927\u5bb6\u7684\u601d\u8003\u65f6\u95f4\uff0c\u6211\u5728\u8fd9\u91cc\u76f4\u63a5\u516c\u5e03\u7b54\u6848\uff1a \u7b2c\u4e00\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u5176\u5b9e\u5f88\u76f4\u767d\u3002\u54ea\u4e9b\u4efb\u52a1\u9700\u8981\u7b49\u5f85\uff0c\u5728\u7a0b\u5e8f\u8fd0\u884c\u4e4b\u524d\u5c31\u80fd\u770b\u51fa\u6765\u3002\u7b80\u5355\u5982 sleep \uff0c\u590d\u6742\u5982\u7f51\u7edc\u8bf7\u6c42\uff0c\u8fd9\u4e9b\u6d88\u8017\u65f6\u95f4\uff0c\u4f46\u4e0d\u600e\u4e48\u6d88\u8017 CPU \u7684\u4efb\u52a1\uff0c\u5c31\u662f\u9700\u8981\u7b49\u5f85\u7684\u4efb\u52a1\u3002 \u7b2c\u4e8c\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u6709\u4e24\u79cd\uff0c\u5bf9\u8fd9\u4e2a\u95ee\u9898\u7684\u56de\u7b54\u7684\u4e0d\u540c\u4e5f\u6b63\u662f\u56de\u8c03\u4e0e\u534f\u7a0b\u6700\u521d\u7684\u5206\u6b67\u4e4b\u5904\u3002\u534f\u7a0b\u5f0f\u7684\u7b54\u6848\u7a0d\u540e\u4f1a\u8bf4\uff0c\u6682\u4e14\u4e0d\u8868\uff0c\u5148\u770b\u770b\u56de\u8c03\u5f0f\u7684\u7b54\u6848\uff0c\u975e\u5e38\u7b80\u5355\u7c97\u66b4\uff1a \u4e0d\u8981\u5207\u6362 \u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff1a import requests # job 1 response = requests . get ( 'http://example.org/very_large_file.txt' ) print ( response . text . count ( 'e' )) # job 2 for i in range ( 10 ): print ( i ) \u6211\u4eec\u6709\u4e24\u4e2a\u4efb\u52a1\uff0c\u4e00\u4e2a\u662f\u6293\u53d6\u7f51\u7edc\u4e0a\u7684\u6587\u4ef6\uff0c\u4e00\u4e2a\u662f\u6253\u5370\u6570\u5b57\u3002\u7f51\u7edc\u4e0a\u7684\u6587\u4ef6\u975e\u5e38\u5927\uff0c\u9700\u8981\u5f88\u957f\u65f6\u95f4\u6765\u52a0\u8f7d\uff0c\u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u5e0c\u671b\u53ef\u4ee5\u5728\u7b49\u5f85\u6587\u4ef6\u4e0b\u8f7d\u7684\u65f6\u5019\uff0c\u53bb\u6267\u884c\u6253\u5370\u6570\u5b57\u7684\u4efb\u52a1\u3002\u4f46\u662f\u95ee\u9898\u6765\u4e86\uff1a\u524d\u4e24\u884c\u4ee3\u7801\u5199\u7684\u4e25\u4e1d\u5408\u7f1d\uff0c\u8be5\u600e\u4e48\u628a\u6253\u5370\u6570\u5b57\u7684\u4efb\u52a1\u63d2\u8fdb\u53bb\uff1f \u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u77e5\u9053\uff0c\u4e00\u5207\u95ee\u9898\u7684\u6839\u6e90\u90fd\u51fa\u5728 requests.get \u7684\u8c03\u7528\u4e0a\u3002\u8fd9\u662f\u4e00\u4e2a\u540c\u6b65\u7684\u8c03\u7528\uff0c\u4e0d\u7b49\u5230\u4e0b\u8f7d\u5b8c\u6210\u5c31\u4e0d\u4f1a\u8fd4\u56de\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u7684\u662f\u4e00\u4e2a\u5f02\u6b65\u7684\u65b9\u6cd5\uff0c\u80fd\u591f\u5728\u4e0b\u8f7d\u5b8c\u6210\u4e4b\u524d\u5c31\u8fd4\u56de\u3002 def get_async (): ... # job 1 get_async ( 'http://example.org/very_large_file.txt' ) # print(response.text.count('e')) # job 2 for i in range ( 10 ): print ( i ) \u867d\u7136\u5b9e\u9645\u4e0a Python \u5e76\u6ca1\u6709\u54ea\u4e00\u4e2a\u5e93\u63d0\u4f9b\u8fd9\u6837\u7684\u4e00\u4e2a get_async \uff0c\u4f46\u5728\u8fd9\u91cc\u6211\u4eec\u4e0d\u59a8\u505a\u4e00\u6b21\u8ff7\u4eba\u7684\u5047\u8bbe\u3002 \u6211\u4eec\u5e0c\u671b\u80fd\u6709\u4e00\u4e2a\u5f02\u6b65\u7684 get_async \uff0c\u8c03\u7528\u540e\u4f1a\u53d1\u8d77\u4e00\u6b21\u7f51\u7edc\u8bf7\u6c42\uff0c\u7136\u540e\u7acb\u523b\u8fd4\u56de\uff0c\u8fd9\u6837\uff0c\u7a0b\u5e8f\u7684\u6d41\u7a0b\u5c31\u987a\u7406\u6210\u7ae0\u5730\u8d70\u5230\u4e86\u6253\u5370\u6570\u5b57\u7684\u5730\u65b9 \u3002 \u53ea\u662f\u6709\u4e00\u4e2a\u95ee\u9898\u8fd8\u6ca1\u6709\u89e3\u51b3\u2014\u2014\u4ece\u54ea\u91cc\u8bfb\u53d6\u4e0b\u8f7d\u7684\u6587\u4ef6\u5462\uff1f \u597d\u50cf\u6709\u70b9\u5c34\u5c2c\u3002 get_async \u521b\u5efa\u4e86\u4e0b\u8f7d\u4efb\u52a1\u4e4b\u540e\uff0c\u5c31\u628a\u5b83\u4e22\u5230\u4e00\u8fb9\u4e0d\u7ba1\u4e86\uff0c\u4e0b\u8f7d\u5b8c\u7684\u4e1c\u897f\u4e5f\u6ca1\u6709\u529e\u6cd5\u62ff\u5230\u3002\u6211\u4eec\u5f53\u7136\u4e0d\u5141\u8bb8\u8fd9\u79cd\u4e70\u691f\u8fd8\u73e0\u7684\u884c\u4e3a\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u4e00\u70b9\u70b9\u7684\u5904\u7406\uff0c\u8ba9\u6211\u4eec\u80fd\u591f\u4ee5\u67d0\u79cd\u65b9\u5f0f\uff0c\u62ff\u5230\u4e0b\u8f7d\u7684\u6587\u4ef6\u3002 \u8fd9\u5c31\u6d89\u53ca\u5230\u521a\u624d\u63d0\u51fa\u7684\u7b2c\u4e09\u548c\u7b2c\u56db\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u4e86\u3002\u201c\u7b49\u5f85\u5b8c\u6210\u201d\u81ea\u7136\u662f\u6307\u6587\u4ef6\u4e0b\u8f7d\u5b8c\u6210\uff0c\u800c\u201c\u7ee7\u7eed\u201d\u7684\u65b9\u5f0f\u624d\u662f\u91cd\u5934\u620f\u2014\u2014 \u56de\u8c03 \u3002 \u56de\u8c03\uff08callback\uff09\u662f\u5c06\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\u4ee5\u51fd\u6570\u7684\u5f62\u5f0f\u4f20\u9012\u51fa\u53bb\uff0c\u4f9b\u5916\u90e8\u8c03\u7528\u7684\u4e00\u79cd\u6a21\u5f0f\u3002\u8fd9\u4e48\u8bf4\u6709\u70b9\u62bd\u8c61\uff0c\u6211\u4eec\u7ed3\u5408\u521a\u624d\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u3002 \u5728\u521a\u624d\uff0c\u6211\u4eec\u9047\u5230\u4e86\u6ca1\u529e\u6cd5\u62ff\u5230\u4e0b\u8f7d\u7684\u6587\u4ef6\u7684\u95ee\u9898\u3002\u5176\u5b9e\u6362\u4e2a\u89d2\u5ea6\u6765\u770b\uff0c\u6211\u4eec\u9700\u8981\u7684\uff0c\u662f\u4e00\u4e2a \u80fd\u591f\u5728\u4e0b\u8f7d\u5b8c\u6210\u4e4b\u540e\uff0c\u6267\u884c\u4e00\u6bb5\u5229\u7528\u4e0b\u8f7d\u7684\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u7684\u4ee3\u7801\u7684\u65b9\u6cd5 \u3002 \u5229\u7528\u56de\u8c03\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u5b8c\u6210\u8fd9\u4e00\u70b9\u3002 def get_async (): ... # job 1 get_async ( 'http://example.org/very_large_file.txt' , callback = job1_continuation ) def job1_continuation ( response ): print ( response . text . count ( 'e' )) # job 2 for i in range ( 10 ): print ( i ) \u628a\u7b2c\u4e00\u4e2a\u4efb\u52a1\u7684\u5269\u4f59\u90e8\u5206\u5199\u5230\u56de\u8c03\u51fd\u6570\u91cc\uff0c\u7136\u540e\u4f20\u7ed9 get_async \u3002\u5f53\u6587\u4ef6\u4e0b\u8f7d\u5b8c\u6210\u540e\uff0c\u56de\u8c03\u51fd\u6570\u5c31\u4f1a\u4ee5\u4e0b\u8f7d\u7684\u6587\u4ef6\u7684\u5185\u5bb9\u4f5c\u4e3a\u53c2\u6570\uff0c\u8c03\u7528\u56de\u8c03\u51fd\u6570\u3002\u8fd9\u5c31\u6210\u529f\u5730\u5c06\u4e00\u6bb5\u540c\u6b65\u7684\u4ee3\u7801\u6539\u9020\u6210\u4e86\u5f02\u6b65\u3002\u53ef\u559c\u53ef\u8d3a\uff0c\u53ef\u559c\u53ef\u8d3a\u3002 \u4e0d\u8fc7\uff0c\u597d\u50cf\u5fd8\u4e86\u70b9\u4ec0\u4e48\uff1f \u6211\u4eec\u5e76\u6ca1\u6709\u8bf4\u8fd9\u4e2a\u8981\u600e\u4e48\u5b9e\u73b0\uff0c\u5b9e\u9645\u4e0a\uff0c\u50cf Go Kotlin \u7b49\u8bed\u8a00\u90fd\u4f7f\u7528\u57fa\u4e8e\u7ebf\u7a0b\u7684\u534f\u7a0b\uff0c\u5e76\u6ca1\u6709 JavaScript Python \u5f0f\u7684\u57fa\u4e8e\u56de\u8c03\u4e0eIO\u590d\u7528\u7684\u534f\u7a0b\u3002 \u7b49\u4e0b\uff0c\u6211\u521a\u521a\u662f\u4e0d\u662f\u63d0\u5230\u4e86 I/O \u590d\u7528 \uff1f \u6ca1\u9519\uff0c\u8fd9\u5c31\u662f Python \u4e2d\u7f51\u7edc\u56de\u8c03\u7684\u5e95\u5c42\u5b9e\u73b0 select \u6a21\u5757\u4e0e selectors \u6a21\u5757\uff0c\u5bf9\u5f02\u6b65\u64cd\u4f5c\u63d0\u4f9b\u4e86\u6700\u57fa\u672c\u7684\u652f\u6301\u3002 \u6bd4\u5982\uff0c\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5f02\u6b65\u7f51\u7edc\u670d\u52a1\u5668\uff1a import selectors import socket sel = selectors . DefaultSelector () def accept ( sock , mask ): conn , addr = sock . accept () # Should be ready print ( 'accepted' , conn , 'from' , addr ) conn . setblocking ( False ) sel . register ( conn , selectors . EVENT_READ , read ) def read ( conn , mask ): data = conn . recv ( 1000 ) # Should be ready if data : print ( 'echoing' , repr ( data ), 'to' , conn ) conn . send ( data ) # Hope it won't block else : print ( 'closing' , conn ) sel . unregister ( conn ) conn . close () sock = socket . socket () sock . bind (( 'localhost' , 1234 )) sock . listen ( 100 ) sock . setblocking ( False ) sel . register ( sock , selectors . EVENT_READ , accept ) while True : events = sel . select () for key , mask in events : callback = key . data callback ( key . fileobj , mask ) \u5728 Windows \u4e0b\u57fa\u4e8e I/O Completion Port \u7684\u6a21\u578b\u6bd4\u57fa\u4e8e Selector \u7684\u6a21\u578b\u66f4\u53ef\u62d3\u5c55\uff08\u652f\u6301\u5b50\u8fdb\u7a0b\u7b49\uff09\uff0c\u5f53\u7136\u8fd9\u662f\u9898\u5916\u8bdd\u4e86\u3002","title":"\u4ece\u56de\u8c03\u5230\u534f\u7a0b\uff08\u4e0a\uff09"},{"location":"appendix/asyncio-intro/#_4","text":"\u4e0a\u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u7b80\u5355\u8bf4\u4e86\u57fa\u4e8e\u5e95\u5c42 selector \u7684\u56de\u8c03\u534f\u7a0b\uff0c\u5b83\u90fd\u9700\u8981\u901a\u8fc7 socket \u521b\u5efa\u7684\u539f\u59cb\u5957\u63a5\u5b57\u8fdb\u884c\u64cd\u4f5c\uff0c\u975e\u5e38\u7b28\u62d9\u4e14\u4e0d\u53cb\u597d\u3002 \u56de\u8c03\u7684\u672c\u8d28\uff0c\u662f\u5c06\u4e00\u4e2a\u4efb\u52a1\u5206\u6210\u4e24\u90e8\u5206\uff0c\u5728\u8017\u65f6\u64cd\u4f5c\u4e4b\u524d\u7684\u90e8\u5206\uff0c\u548c\u8017\u65f6\u64cd\u4f5c\u4e4b\u540e\u7684\u90e8\u5206\uff0c\u540e\u8005\u662f\u524d\u8005\u7684\u7ee7\u7eed\uff0c\u6216\u8005\u53eb\u505a\u7eed\u4f53\uff08continuation\uff09\u3002\u56de\u8c03\u5f0f\u5c31\u662f\u628a\u7eed\u4f53\u5199\u6210\u56de\u8c03\u51fd\u6570\u7684\u5f62\u5f0f\uff0c\u4f20\u9012\u5230\u5176\u4ed6\u5730\u65b9\uff0c\u8fd9\u79cd\u64cd\u4f5c\u53c8\u53eb\u505a \u7eed\u4f53\u4f20\u9012\uff08continuation-passing\uff09 \u3002\u4ece\u8fd9\u4e2a\u5c42\u9762\u4e0a\u770b\uff0c\u56de\u8c03\u662f\u7eed\u4f53\u4f20\u9012\u98ce\u683c\uff08Continuation-Passing Style, CPS\uff09\u7684\u4e00\u79cd\u3002 CPS \u5176\u5b9e\u662f\u5f88\u65e9\u5c31\u88ab\u7814\u7a76\u8fc7\u7684\u4e1c\u897f\uff0c\u5b83\u6700\u521d\u7684\u5e94\u7528\u4e0d\u662f\u5728\u5f02\u6b65\uff0c\u800c\u662f\u5728\u51fd\u6570\u5f0f\u7f16\u7a0b\u4e2d\u3002\u7528 CPS \u4e66\u5199\u7684 IR \u53ef\u4ee5\u65b9\u4fbf\u5730\u5b9e\u73b0\u60f0\u6027\u6c42\u503c\uff0c\u800c\u4e14\u56e0\u4e3a\u7eed\u4f53\u5929\u751f\u5c31\u662f Monad\uff0c\u6240\u4ee5\u987a\u4fbf\u53ef\u4ee5\u89e3\u51b3\u6c42\u503c\u987a\u5e8f\u7684\u95ee\u9898\u3002\uff08\u8bdd\u8bf4\uff0c\u4e3a\u4ec0\u4e48\u5230\u5904\u90fd\u662f Monad \u5462\uff1f\uff09\u4e0a\u4e00\u53e5\u8bdd\u5927\u53ef\u4e0d\u5fc5\u7406\u89e3\uff0c\u6bd5\u7adf\u6211\u4eec\u4e0d\u662f\u5728\u8bb2\u51fd\u6570\u5f0f\u7f16\u7a0b\uff0c\u4e0d\u8fc7\u662f\u501f\u7528\u4e00\u4e0b CPS \u7684\u672f\u8bed\uff0c\u63d0\u4f9b\u4e00\u4e2a\u65b0\u7684\u89c6\u89d2\u800c\u5df2\u3002 \u4ece CPS \u7684\u89d2\u5ea6\u770b\uff0c\u7eed\u4f53\u5230\u5e95\u662f\u4ec0\u4e48\u5f62\u5f0f\u5e76\u4e0d\u91cd\u8981\uff0c\u53ea\u8981\u4ed6\u80fd\u5305\u542b\u4efb\u52a1\u4e2d\u5c1a\u672a\u5b8c\u6210\u7684\u90e8\u5206\u5c31\u53ef\u4ee5\u3002\u4e8e\u662f\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u5927\u80c6\u7684\u60f3\u6cd5\uff1a \u7eed\u4f53\u80fd\u4e0d\u80fd\u662f\u8fd9\u4e2a\u4efb\u52a1\u81ea\u8eab\u5462 \uff1f \u8fd9\u662f\u4e00\u4e2a\u56de\u8c03\u5f0f\u7684\u4efb\u52a1\uff0c\u5b83\u88ab\u62c6\u6210\u4e86\u4e24\u534a\uff1a def job1 ( url ): get_async ( url , callback = continuation ) def continuation ( response ): print ( response . text . count ( 'e' )) \u73b0\u5728\u6211\u4eec\u8981\u628a\u5b83\u62fc\u56de\u53bb\uff1a from functools import partial def job1 ( url , cont = False ): if not cont : get_async ( url , callback = partial ( job1 , cont = True )) else : response = url print ( response . text . count ( 'e' )) \u770b\u8d77\u6765\u602a\u602a\u7684\u3002\u8fd9\u91cc\u7528\u4e86\u4e00\u4e2a\u53c2\u6570 cont \u6765\u6307\u793a\u8c03\u7528\u65f6\u8fdb\u5165\u7684\u662f\u4efb\u52a1\u7684\u524d\u534a\u90e8\u5206\uff0c\u8fd8\u662f\u540e\u534a\u90e8\u5206\u3002\u56de\u8c03\u51fd\u6570\u4f20\u5165\u662f\u5c31\u662f\u8fd9\u4e2a\u51fd\u6570\u672c\u8eab\uff0c\u53ea\u662f\u7528 partial \u89c4\u5b9a\u4e86\u4e00\u4e0b\u53c2\u6570\uff0c\u8ba9\u56de\u8c03\u80fd\u8fdb\u5165\u7eed\u4f53\u90e8\u5206\u3002 \u8fd9\u79cd\u5947\u602a\u7684\u5199\u6cd5\u8bf4\u4e0d\u4e0a\u597d\uff0c\u53ef\u8bfb\u6027\u4e5f\u4e0d\u662f\u5f88\u9ad8\u3002\u4ed6\u53ea\u662f\u628a\u56de\u8c03\u548c\u4efb\u52a1\u672c\u8eab\u5f3a\u884c\u62fc\u5728\u4e00\u8d77\u800c\u5df2\u3002 \u53ef\u662f\u6709\u4e00\u70b9\u4f18\u52bf\uff0c\u81f3\u5c11 \u5728\u5199\u4ee3\u7801\u7684\u987a\u5e8f\u4e0a\uff0c\u4ed6\u770b\u8d77\u6765\u548c\u540c\u6b65\u4ee3\u7801\u66f4\u50cf\u4e86 \u3002\u8fd9\u4e2a\u4f18\u70b9\u8bf4\u5927\u4e5f\u5927\uff0c\u8bf4\u5c0f\u4e5f\u5c0f\u3002\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u4e2d\uff0c\u8981\u6709\u5f88\u591a\u6b21\u5f02\u6b65\u8c03\u7528\uff0c\u5982\u679c\u4e00\u4e2a\u4e00\u4e2a\u5168\u90e8\u62c6\u5206\u5230\u56de\u8c03\u51fd\u6570\u91cc\uff0c\u5c31\u4f1a\u663e\u5f97\u7279\u522b\u6742\u4e71\uff08\u5c24\u5176\u662f\u5728 Python \u7684\u533f\u540d\u51fd\u6570\u7279\u522b\u4e11\u964b\u7684\u60c5\u51b5\u4e0b\uff09\u3002\u5982\u679c\u6211\u4eec\u80fd\u627e\u5230\u4e00\u4e2a\u826f\u597d\u7684\u5199\u6cd5\uff0c\u65e2\u80fd\u628a\u7834\u788e\u7684\u56de\u8c03\u51fd\u6570\u62fc\u56de\u53bb\uff0c\u53c8\u80fd\u4fdd\u6301\u5f02\u6b65\u7684\u4f18\u70b9\uff0c\u90a3\u5c31\u518d\u597d\u4e0d\u8fc7\u4e86\u3002 \u95ee\u9898\u7684\u5173\u952e\u5728\u54ea\u91cc\uff1f\u4e0a\u9762\u8fd9\u4e2a\u51fd\u6570\u5199\u7684\u5f88\u5947\u602a\uff0c\u539f\u56e0\u662f\u5b83\u8981 \u5b9e\u73b0\u540c\u4e00\u4e2a\u51fd\u6570\u7684\u4e24\u6b21\u8c03\u7528\u6267\u884c\u4e0d\u540c\u7684\u4ee3\u7801 \u3002 \u2026\u2026\u786e\u5b9e\u662f\u4e2a\u5f88\u5947\u602a\u7684\u9700\u6c42\u3002\u4e0d\u8fc7\u6362\u4e00\u4e2a\u89d2\u5ea6\u662f\u4e0d\u662f\u5c31\u5bb9\u6613\u7406\u89e3\u4e86\u5462\uff1f\u8868\u9762\u770b\u662f\u4e24\u6b21\u8c03\u7528\u6267\u884c\u4e0d\u540c\u7684\u4ee3\u7801\uff0c\u5b9e\u9645\u4e0a\u662f \u7b2c\u4e00\u6b21\u8c03\u7528\u540e\uff0c\u5728\u67d0\u4e00\u5904\u6682\u505c\uff0c\u7136\u540e\u7b2c\u4e8c\u6b21\u8c03\u7528\uff0c\u5c31\u4ece\u8fd9\u4e2a\u5730\u65b9\u7ee7\u7eed \u3002 \u5982\u679c\u6709\u4e24\u4e2a\u795e\u79d8\u7684\u51fd\u6570 pause \u548c resume \uff0c\u80fd\u8ba9\u6211\u4eec\u5b9e\u73b0\u8fd9\u4e00\u529f\u80fd\uff0c\u6211\u4eec\u7acb\u9a6c\u53ef\u4ee5\u628a\u4ee3\u7801\u5199\u5f97\u5341\u5206\u4f18\u96c5\uff1a def job1 ( url ): get_async ( url , callback = resume ) response = pause () print ( response . text . count ( 'e' )) \u6267\u884c\u5230 pause \u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u51fd\u6570\u6682\u505c\uff0c\u7b49\u5230 resume \u88ab\u8c03\u7528\u65f6\uff0c\u624d\u7ee7\u7eed\u6267\u884c\u3002 \u975e\u5e38\u597d\uff0c\u73b0\u5728\u95ee\u9898\u53ea\u6709\u4e00\u4e2a\u4e86\uff1a \u600e\u4e48\u624d\u80fd\u5b9e\u73b0\u6682\u505c\u7684\u529f\u80fd\u5462 \uff1f \u7b54\u6848\u5c31\u662f\uff1a\u534f\u7a0b \u3002","title":"\u4ece\u56de\u8c03\u5230\u534f\u7a0b\uff08\u4e0b\uff09"},{"location":"appendix/asyncio-intro/#async-await","text":"\u6309\u7167\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u6765\u7406\u89e3\uff0c \u534f\u7a0b\u5c31\u662f\u53ef\u4ee5\u6682\u505c\u7684\u51fd\u6570 \u3002 \u5982\u679c\u4f60\u5bf9 Python \u7684\u5176\u4ed6\u90e8\u5206\u6709\u4e00\u5b9a\u4e86\u89e3\uff0c\u4f60\u4e00\u5b9a\u4f1a\u60f3\u5230\u2014\u2014 \u751f\u6210\u5668 \uff08Generator\uff09 \u3002 \u5b9e\u9645\u4e0a\uff0casyncio \u521a\u521a\u88ab\u5f15\u5165\u65f6\uff0c\u534f\u7a0b\u5c31\u662f\u901a\u8fc7 @asyncio.coroutine \u5305\u88c5\u751f\u6210\u5668\u800c\u6210\u7684\u3002 \u5728 yield \u65f6\uff0c\u51fd\u6570\u6682\u505c\u6267\u884c\u4e14\u4fdd\u7559\u672c\u5730\u53d8\u91cf\uff0c\u76f4\u5230\u5728\u5176\u4e0a\u6267\u884c send() \u6216 next() . \u5bf9\u4e8e\u4ee5\u4e0b Python \u4ee3\u7801\uff1a def generator (): yield \"start\" return \"end\" def main (): gen = generator () start = next ( gen ) try : next ( gen ) except StopIteration as e : end = e . value print ( start , end ) main () # \u8f93\u51fa start end \u5b83\u7684\u6267\u884c\u6d41\u7a0b\u5982\u4e0b (\u7bad\u5934\u53cd\u6620\u4e86\u63a7\u5236\u6743\u7684\u4ea4\u6362\uff09\uff1a flowchart TD; subgraph main A[\"gen = generator()\"] --> B[\"start = next(gen)\"] C[\"next(gen)\"] D[\"end = e.value\"] D --> E[\"\u8f93\u51fa start, end\"] end subgraph gen B --> Q[\"gen \u6267\u884c\u5230 yield\uff0c\u8fd4\u56de 'start'\"] Q -->|\"\u8fd4\u56de\u7684 'start' \u8d4b\u503c\u7ed9 start\"| C C --> R[\"gen \u6267\u884c\u5230 return\"] --> S[\"\u629b\u51fa StopIteration\"] Q -->|\"gen \u6302\u8d77\"| R S -->|\"\u8fd4\u56de\u7684 'end' \u8d4b\u503c\u7ed9 end\"| D end Python \u7684\u534f\u7a0b\u5c31\u662f\u4f7f\u7528\u4e86\u8fd9\u4e2a\u601d\u8def\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u6837\u521b\u5efa\u7684\u534f\u7a0b\uff0c\u63a7\u5236\u6743\u4e0d\u4f1a\u76f4\u63a5\u79fb\u4ea4\u7ed9\u8c03\u7528\u8005\uff0c\u800c\u662f \u4e8b\u4ef6\u5faa\u73af \u3002 \u90a3\u534f\u7a0b\u600e\u4e48\u4e92\u76f8\u8c03\u7528\u5462\uff1f\u6ca1\u5173\u7cfb\uff0c\u901a\u8fc7 yield from \u8bed\u6cd5\uff0c\u53ef\u4ee5\u8fdb\u4e00\u6b65\u8f6c\u4ea4\u63a7\u5236\u6743\u7ed9\u4e0b\u5c42\u751f\u6210\u5668\uff0c\u4e5f\u5c31\u662f\u534f\u7a0b\u3002 \u6ca1\u8fc7\u591a\u4e45 (Python 3.5)\uff0c async \u4e0e await \u5c31\u88ab\u52a0\u5165 Python \u4e86\u3002","title":"async \u548c await"},{"location":"appendix/asyncio-intro/#_5","text":"\u901a\u8fc7 async \u5173\u952e\u5b57\u53ef\u4ee5\u5c06\u4e00\u4e2a\u51fd\u6570\u53d8\u4e3a \u5b9a\u4e49\u4e0a \u7684\u5f02\u6b65\u51fd\u6570\uff0c\u901a\u8fc7 await \u5173\u952e\u5b57\u8c03\u7528\u5176\u4ed6\u7684\u5f02\u6b65\u51fd\u6570\u3002 \u8981\u5728\u534f\u7a0b\u5185\u90e8\u5e76\u53d1\u591a\u4e2a\u534f\u7a0b\uff0c\u6211\u4eec\u9700\u8981 \u521b\u5efa\u4efb\u52a1\uff08Task\uff09 \u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 asyncio.create_task() \u51fd\u6570\u6765\u521b\u5efa\u4e00\u4e2a\u4efb\u52a1\u3002 \u6709\u4e00\u4e2a\u51e0\u4e4e\u7b49\u6548\u7684\u51fd\u6570\uff0c\u53eb\u505a asyncio.ensure_future() \u3002 \u7b49\u4e00\u4e0b\uff0c Future \u662f\u4ec0\u4e48\uff1f Future \u662f\u7528\u4e8e\u8868\u793a \u5f02\u6b65\u8fd0\u7b97\u7ed3\u679c \u7684\u5bf9\u8c61\uff0c\u5b83\u7528\u4e8e\u5c06\u56de\u8c03\u5f0f\u5f02\u6b65\u7f16\u7a0b\u4e0e async await \u8054\u7cfb\u5728\u4e00\u8d77\u3002 \u901a\u8fc7 Future.result() \u65b9\u6cd5\u901a\u77e5\u4e8b\u4ef6\u5faa\u73af\u5f02\u6b65\u8fd0\u7b97\u5b8c\u6210\uff08\u65e0\u8bba\u6210\u529f\u8fd8\u662f\u5931\u8d25\uff09\uff0c\u4e8b\u4ef6\u5faa\u73af\u4fbf\u4f1a\u5c06\u7ed3\u679c\u4f20\u9012\u7ed9\u6b63\u5728\u7b49\u5f85\u7684\u534f\u7a0b\u3002 Task \u5bf9\u8c61\u5c06\u534f\u7a0b\u5305\u88f9\u5728 Future \u4e2d\uff0c\u7528\u4e8e\u63a7\u5236\u534f\u7a0b\u6267\u884c\u3002 \u518d\u7b49\u7b49\uff0c Future \u65e2\u7136\u53ef\u4ee5\u8868\u793a\u5f02\u6b65\u8fd0\u7b97\u7ed3\u679c\uff0c\u90a3\u4e48...... \u901a\u8fc7 AbstractEventLoop.run_in_executor() \uff0c\u53ef\u4ee5\u5c06\u540c\u6b65\u51fd\u6570\u5728\u7ebf\u7a0b/\u8fdb\u7a0b\u5185\u6267\u884c\uff0c\u518d\u5305\u88c5\u6210\u53ef\u4ee5\u88ab\u7b49\u5f85\u7684 Future \u5bf9\u8c61\u3002 async for async with \u5219\u662f\u901a\u8fc7\u5b9e\u73b0 __aiter__() __anext__() __aenter__() __aexit__() \u7b49 dunder \u65b9\u6cd5\u5b9e\u73b0\u7684\u3002","title":"\u4f7f\u7528\u534f\u7a0b"},{"location":"appendix/credits/","text":"\u9e23\u8c22 \ud83d\udd17 \u7279\u522b\u611f\u8c22 mamoe \u7ed9\u6211\u4eec\u5e26\u6765\u8fd9\u4e9b\u7cbe\u5f69\u7684\u9879\u76ee: mirai : \u4e00\u4e2a\u9ad8\u6027\u80fd, \u9ad8\u53ef\u6269\u5c55\u6027\u7684 QQ \u534f\u8bae\u5e93 mirai-console : \u4e00\u4e2a\u57fa\u4e8e mirai \u5f00\u53d1\u7684\u63d2\u4ef6\u5f0f\u53ef\u6269\u5c55\u5f00\u53d1\u5e73\u53f0 mirai-api-http : \u4e3a\u672c\u9879\u76ee\u63d0\u4f9b\u4e0e mirai \u4ea4\u4e92\u65b9\u5f0f\u7684 mirai-console \u63d2\u4ef6 GraiaProject \u7684\u5176\u4ed6\u9879\u76ee: \u76f4\u63a5\u4f9d\u8d56: Broadcast Control : \u6269\u5c55\u6027\u5f3a\u5927, \u6a21\u5757\u95f4\u4f4e\u8026\u5408, \u9ad8\u7075\u6d3b\u6027\u7684\u4e8b\u4ef6\u7cfb\u7edf\u652f\u6301, \u662f Ariadne \u7684\u5e95\u5c42. Saya \u7b80\u6d01\u7684\u6a21\u5757\u7ba1\u7406\u7cfb\u7edf. Scheduler : \u7b80\u6d01\u7684\u57fa\u4e8e asyncio \u7684\u5b9a\u65f6\u4efb\u52a1\u5b9e\u73b0. \u53c2\u8003: Application (a.k.a v4): \u672c\u9879\u76ee\u7684\u7ed3\u6784\u57fa\u7840, \u652f\u6301 mirai-api-http v1.x \u7248\u672c . Avilla (a.k.a v5):\u4e0b\u4e00\u4ee3\u5373\u65f6\u901a\u8baf\u6846\u67b6. The Future . \u5176\u4ed6\u9879\u76ee: YiriMirai \u672c\u9879\u76ee\u7684 Adapter \u53ca MessageChain \u5b9e\u73b0\u53c2\u8003. \u4e2a\u4eba: Grey Elaina : Graia Project \u7684 main artist . Bryan\u4e0d\u53ef\u601d\u8bae (ProgramRipper) : Graia Project \u7684 \u534f\u4f5c\u8005. BlueGlassBlock : Ariadne \u7684 \u4e3b\u8981\u7ef4\u62a4\u8005. \u65e9\u671f\u6d4b\u8bd5\u8005 (\u4f9d\u53c2\u4e0e\u65f6\u95f4\u6392\u5e8f): @Redlnn @djkcyl (A60) @ZhaoZuohong @I-love-study @SocialSisterYi \u8d5e\u52a9\u8005: \u4e00\u53ea\u5feb\u4e50\u7684\u5c0f\u6307\u9488 @zzzzz167 One More Light @LyqMrq \u9716\u5ff5 @Little-LinNian \u611f\u8c22\u6240\u6709 Ariadne \u4ed3\u5e93\u7684\u8d21\u732e\u8005\u4eec:","title":"\u9e23\u8c22"},{"location":"appendix/credits/#_1","text":"\u7279\u522b\u611f\u8c22 mamoe \u7ed9\u6211\u4eec\u5e26\u6765\u8fd9\u4e9b\u7cbe\u5f69\u7684\u9879\u76ee: mirai : \u4e00\u4e2a\u9ad8\u6027\u80fd, \u9ad8\u53ef\u6269\u5c55\u6027\u7684 QQ \u534f\u8bae\u5e93 mirai-console : \u4e00\u4e2a\u57fa\u4e8e mirai \u5f00\u53d1\u7684\u63d2\u4ef6\u5f0f\u53ef\u6269\u5c55\u5f00\u53d1\u5e73\u53f0 mirai-api-http : \u4e3a\u672c\u9879\u76ee\u63d0\u4f9b\u4e0e mirai \u4ea4\u4e92\u65b9\u5f0f\u7684 mirai-console \u63d2\u4ef6 GraiaProject \u7684\u5176\u4ed6\u9879\u76ee: \u76f4\u63a5\u4f9d\u8d56: Broadcast Control : \u6269\u5c55\u6027\u5f3a\u5927, \u6a21\u5757\u95f4\u4f4e\u8026\u5408, \u9ad8\u7075\u6d3b\u6027\u7684\u4e8b\u4ef6\u7cfb\u7edf\u652f\u6301, \u662f Ariadne \u7684\u5e95\u5c42. Saya \u7b80\u6d01\u7684\u6a21\u5757\u7ba1\u7406\u7cfb\u7edf. Scheduler : \u7b80\u6d01\u7684\u57fa\u4e8e asyncio \u7684\u5b9a\u65f6\u4efb\u52a1\u5b9e\u73b0. \u53c2\u8003: Application (a.k.a v4): \u672c\u9879\u76ee\u7684\u7ed3\u6784\u57fa\u7840, \u652f\u6301 mirai-api-http v1.x \u7248\u672c . Avilla (a.k.a v5):\u4e0b\u4e00\u4ee3\u5373\u65f6\u901a\u8baf\u6846\u67b6. The Future . \u5176\u4ed6\u9879\u76ee: YiriMirai \u672c\u9879\u76ee\u7684 Adapter \u53ca MessageChain \u5b9e\u73b0\u53c2\u8003. \u4e2a\u4eba: Grey Elaina : Graia Project \u7684 main artist . Bryan\u4e0d\u53ef\u601d\u8bae (ProgramRipper) : Graia Project \u7684 \u534f\u4f5c\u8005. BlueGlassBlock : Ariadne \u7684 \u4e3b\u8981\u7ef4\u62a4\u8005. \u65e9\u671f\u6d4b\u8bd5\u8005 (\u4f9d\u53c2\u4e0e\u65f6\u95f4\u6392\u5e8f): @Redlnn @djkcyl (A60) @ZhaoZuohong @I-love-study @SocialSisterYi \u8d5e\u52a9\u8005: \u4e00\u53ea\u5feb\u4e50\u7684\u5c0f\u6307\u9488 @zzzzz167 One More Light @LyqMrq \u9716\u5ff5 @Little-LinNian \u611f\u8c22\u6240\u6709 Ariadne \u4ed3\u5e93\u7684\u8d21\u732e\u8005\u4eec:","title":"\u9e23\u8c22"},{"location":"appendix/faq/","text":"FAQ - \u5e38\u89c1\u95ee\u7b54 \ud83d\udd17 \u5982\u4f55\u6b63\u786e\u7684\u622a\u53d6\u65e5\u5fd7\uff1f \ud83d\udd17 Ariadne \u8d39\u5c3d\u5fc3\u601d\u7528 loguru \u7684\u5f69\u8272\u65e5\u5fd7\u4e0d\u662f\u6ca1\u6709\u7406\u7531\u7684...... Ariadne \u65e5\u5fd7\u4e2d\u7684\u62a5\u9519\u7b2c\u4e00\u884c\u4e0e\u6700\u540e\u4e00\u884c\u662f\u6700\u91cd\u8981\u7684. \u7b2c\u4e00\u884c\u901a\u5e38\u4e3a \u65e5\u671f + \u65f6\u95f4 + \u7ea2\u8272\u7684 ERROR + \u7ea2\u8272\u7684\u5f02\u5e38\u8bf4\u660e. \u6700\u540e\u4e00\u884c\u901a\u5e38\u4e3a \u7ea2\u8272\u7684 XXXError \u6216 XXXException \u4e4b\u7c7b\u7684, \u518d\u8ddf\u7740\u767d\u8272\u7684\u8bf4\u660e\u6587\u5b57. \u5982\u679c\u80fd\u7528\u957f\u622a\u56fe\u4e4b\u7c7b\u7684\u540c\u65f6\u622a\u5b8c\u5f53\u7136\u6700\u597d, \u5982\u679c\u505a\u4e0d\u5230\u8bf7\u4f18\u5148\u6700\u540e\u4e00\u884c (\u53ca\u5176\u4e4b\u524d\u7684\u5f02\u5e38\u56de\u6eaf). \u4e3a\u4ec0\u4e48\u6536\u4e0d\u5230 xxx \u4e8b\u4ef6? \ud83d\udd17 \u8bf7\u68c0\u67e5 Mirai Console \u7684\u914d\u7f6e, \u4f60\u8d26\u53f7\u7684 PROTOCOL (\u767b\u5f55\u534f\u8bae) \u5f71\u54cd\u63a5\u6536\u4e8b\u4ef6\u7684\u7c7b\u578b. \u8fd9\u4e0d\u662f Ariadne \u7684\u95ee\u9898. NugetEvent \u9700\u8981 Mirai \u7684\u767b\u5f55\u534f\u8bae\u662f ANDROID_PHONE/IPAD/MACOS \u4e2d\u7684\u4e00\u79cd ANDROID_PAD/ANDROID_WATCH \u534f\u8bae\u7531\u4e8e\u817e\u8baf\u670d\u52a1\u5668\u539f\u56e0\u5e76\u4e0d\u80fd\u63a5\u53d7 NugetEvent . \u4e3a\u4ec0\u4e48\u4e0d\u50cf Application \u4e00\u6837\u652f\u6301 Mirai Code? \ud83d\udd17 Ariadne \u53ea\u652f\u6301\u6784\u9020 Mirai Code \u800c\u65e0\u6cd5\u8f6c\u6362, \u662f\u56e0\u4e3a\u6211\u4eec\u4e0d\u60f3\u9f13\u52b1\u7528\u6237\u5148\u8f6c\u6362\u6210 Mirai Code , \u4e4b\u540e\u518d\u5bf9\u6587\u672c\u5316\u5143\u7d20\u8fdb\u884c\u5904\u7406. \u5982\u679c\u4f60\u559c\u6b22\u8fd9\u79cd\u98ce\u683c, OneBot \u7cfb\u5217\u53ef\u80fd\u66f4\u9002\u5408\u4f60. \u6587\u6863\u91cc\u600e\u4e48\u6ca1\u6709 xxx \u7684\u4ecb\u7ecd? \ud83d\udd17 Ariadne \u662f\u4e00\u4e2a\u975e\u5e38\u5e9e\u5927\u7684\u6846\u67b6, \u6709\u8bb8\u8bb8\u591a\u591a\u7684\u65b9\u6cd5\u4e0e\u51fd\u6570, \u81ea\u7136\u65e0\u6cd5\u9762\u9762\u4ff1\u5230. \u76ee\u524d Ariadne \u7684 API \u6587\u6863 \u5df2\u7ecf\u652f\u6301\u641c\u7d22\u529f\u80fd, \u4f60\u53ef\u4ee5\u641c\u7d22\u81ea\u5df1\u60f3\u8981\u7684\u529f\u80fd, \u6216\u8005\u5229\u7528 GitHub \u641c\u7d22\u6e90\u7801. \u5982\u679c\u4f60\u8bf4\u7684\u662f HTTPAdapter \u4e0e WebsocketAdapter \u7684\u8bdd, \u56e0\u4e3a Ariadne \u91cd\u70b9\u76ee\u524d\u4e0d\u5728\u8fd9\u91cc, \u6240\u4ee5\u5e76\u6ca1\u6709\u600e\u4e48\u52a8 (\u800c\u4e14\u53ef\u80fd\u6709\u6f5c\u5728 bug)... \u591a\u5a92\u4f53\u5143\u7d20\u7684 get_bytes \u65b9\u6cd5\u4e3a\u4ec0\u4e48\u4f1a\u5b58\u50a8 base64 \u5c5e\u6027? \ud83d\udd17 \u4f60\u53ef\u80fd\u4f1a\u6709\u8fd9\u4e2a\u8ff7\u60d1: img = Image ( url =... ) await img . get_bytes () assert img . base64 is not None \u8fd9\u662f\u6b63\u5e38\u4e14\u7b26\u5408\u8bbe\u8ba1\u7684, \u56e0\u4e3a: \u8fd9\u4e2a\u8bbe\u8ba1\u52a0\u901f\u4e86\u540e\u7eed\u7684 get_bytes \u64cd\u4f5c. url \u4f18\u5148\u7ea7\u9ad8\u4e8e base64 , \u4e0d\u4f1a\u5bf9\u53d1\u9001\u4ea7\u751f\u4efb\u4f55\u5f71\u54cd. \u53ef\u4ee5\u4fdd\u8bc1 asPersistentString \u5b8c\u6574\u5b58\u50a8\u4e86\u56fe\u7247\u6570\u636e, \u4ee5\u9632\u6b62\u4e0d\u53ef\u9760 url \u5f71\u54cd. \u53ef\u80fd\u540e\u7eed\u4f1a\u6dfb\u52a0\u4e00\u4e2a remove_url \u7684\u4ec5\u5173\u952e\u5b57\u53c2\u6570. TROUBLESHOOT - \u5e38\u89c1\u6545\u969c\u6392\u67e5 \ud83d\udd17 \u672c\u90e8\u5206\u7528\u4e8e\u6392\u67e5\u5e38\u89c1\u7528\u6237\u9519\u8bef. TimeoutError: Unable to connect to mirai-api-http. Configuration Problem? \ud83d\udd17 \u8bf7\u68c0\u67e5\uff1a mirai-console \u662f\u5426\u6210\u529f\u767b\u5f55\u8d26\u53f7 mirai-api-http \u662f\u5426\u6b63\u786e\u914d\u7f6e (\u542f\u7528 HTTP \u4e0e Websocket \u9002\u914d\u5668) Python \u7248\u672c (3.8 \u4ee5\u4e0a) Ariadne \u7248\u672c\u662f\u5426\u4e3a\u6700\u65b0 ( ) \u5176\u4ed6 Graia Project \u76f8\u5173\u7684\u5e93\u662f\u5426\u4e3a\u6700\u65b0 (e.g. graia-saya graia-scheduler ) Ariadne \u914d\u7f6e\u662f\u5426\u4e0e mirai-api-http \u76f8\u540c. (\u5305\u62ec QQ \u53f7\uff0c\u5730\u5740\u548c\u9a8c\u8bc1\u5bc6\u94a5) \u6536\u4e0d\u5230\u6d88\u606f\uff0c\u4e14\u63a7\u5236\u53f0\u663e\u793a Failed to send message, your account may be blocked. \ud83d\udd17 \u4f60\u7684\u8d26\u53f7\u53ef\u80fd\u88ab \u98ce\u63a7 \u4e86. \u8bf7\u7b49\u5f85\u51e0\u5929\u540e\u518d\u8bd5. MCL \u663e\u793a Cannot download package \"net.mamoe:mirai-api-http\" \ud83d\udd17 \u5982\u679c\u4f60\u7684 MCL \u663e\u793a\u4ee5\u4e0b\u9519\u8bef\u8f93\u51fa: [INFO] Verifying \"net.mamoe:mirai-api-http\" v2.5.0 [ERROR] \"net.mamoe:mirai-api-http\" is corrupted. [ERROR] Cannot download package \"net.mamoe:mirai-api-http\" [ERROR] The local file \"net.mamoe:mirai-api-http\" is still corrupted, please check the network. \u8bf7\u624b\u52a8\u4e0b\u8f7d mirai-api-http \u5305, \u5e76\u5c06\u5176\u653e\u7f6e\u4e8e MCL \u7684 plugins \u76ee\u5f55\u4e0b. \u4e4b\u540e\u4fbf\u53ef\u4ee5\u5b89\u5168\u5ffd\u7565\u8fd9\u4e2a\u9519\u8bef. (\u8fd9\u662f\u56e0\u4e3a mirai-api-http \u7684\u7ef4\u62a4\u8005\u5fd8\u8bb0\u53d1\u5e03 mirai-api-http \u5230 maven \u4ed3\u5e93\u6258\u7ba1\u4e86, \u8be6\u89c1 \u8fd9\u91cc )","title":"\u5e38\u89c1\u95ee\u9898"},{"location":"appendix/faq/#faq-","text":"","title":"FAQ - \u5e38\u89c1\u95ee\u7b54"},{"location":"appendix/faq/#_1","text":"Ariadne \u8d39\u5c3d\u5fc3\u601d\u7528 loguru \u7684\u5f69\u8272\u65e5\u5fd7\u4e0d\u662f\u6ca1\u6709\u7406\u7531\u7684...... Ariadne \u65e5\u5fd7\u4e2d\u7684\u62a5\u9519\u7b2c\u4e00\u884c\u4e0e\u6700\u540e\u4e00\u884c\u662f\u6700\u91cd\u8981\u7684. \u7b2c\u4e00\u884c\u901a\u5e38\u4e3a \u65e5\u671f + \u65f6\u95f4 + \u7ea2\u8272\u7684 ERROR + \u7ea2\u8272\u7684\u5f02\u5e38\u8bf4\u660e. \u6700\u540e\u4e00\u884c\u901a\u5e38\u4e3a \u7ea2\u8272\u7684 XXXError \u6216 XXXException \u4e4b\u7c7b\u7684, \u518d\u8ddf\u7740\u767d\u8272\u7684\u8bf4\u660e\u6587\u5b57. \u5982\u679c\u80fd\u7528\u957f\u622a\u56fe\u4e4b\u7c7b\u7684\u540c\u65f6\u622a\u5b8c\u5f53\u7136\u6700\u597d, \u5982\u679c\u505a\u4e0d\u5230\u8bf7\u4f18\u5148\u6700\u540e\u4e00\u884c (\u53ca\u5176\u4e4b\u524d\u7684\u5f02\u5e38\u56de\u6eaf).","title":"\u5982\u4f55\u6b63\u786e\u7684\u622a\u53d6\u65e5\u5fd7\uff1f"},{"location":"appendix/faq/#xxx","text":"\u8bf7\u68c0\u67e5 Mirai Console \u7684\u914d\u7f6e, \u4f60\u8d26\u53f7\u7684 PROTOCOL (\u767b\u5f55\u534f\u8bae) \u5f71\u54cd\u63a5\u6536\u4e8b\u4ef6\u7684\u7c7b\u578b. \u8fd9\u4e0d\u662f Ariadne \u7684\u95ee\u9898. NugetEvent \u9700\u8981 Mirai \u7684\u767b\u5f55\u534f\u8bae\u662f ANDROID_PHONE/IPAD/MACOS \u4e2d\u7684\u4e00\u79cd ANDROID_PAD/ANDROID_WATCH \u534f\u8bae\u7531\u4e8e\u817e\u8baf\u670d\u52a1\u5668\u539f\u56e0\u5e76\u4e0d\u80fd\u63a5\u53d7 NugetEvent .","title":"\u4e3a\u4ec0\u4e48\u6536\u4e0d\u5230 xxx \u4e8b\u4ef6?"},{"location":"appendix/faq/#application-mirai-code","text":"Ariadne \u53ea\u652f\u6301\u6784\u9020 Mirai Code \u800c\u65e0\u6cd5\u8f6c\u6362, \u662f\u56e0\u4e3a\u6211\u4eec\u4e0d\u60f3\u9f13\u52b1\u7528\u6237\u5148\u8f6c\u6362\u6210 Mirai Code , \u4e4b\u540e\u518d\u5bf9\u6587\u672c\u5316\u5143\u7d20\u8fdb\u884c\u5904\u7406. \u5982\u679c\u4f60\u559c\u6b22\u8fd9\u79cd\u98ce\u683c, OneBot \u7cfb\u5217\u53ef\u80fd\u66f4\u9002\u5408\u4f60.","title":"\u4e3a\u4ec0\u4e48\u4e0d\u50cf Application \u4e00\u6837\u652f\u6301 Mirai Code?"},{"location":"appendix/faq/#xxx_1","text":"Ariadne \u662f\u4e00\u4e2a\u975e\u5e38\u5e9e\u5927\u7684\u6846\u67b6, \u6709\u8bb8\u8bb8\u591a\u591a\u7684\u65b9\u6cd5\u4e0e\u51fd\u6570, \u81ea\u7136\u65e0\u6cd5\u9762\u9762\u4ff1\u5230. \u76ee\u524d Ariadne \u7684 API \u6587\u6863 \u5df2\u7ecf\u652f\u6301\u641c\u7d22\u529f\u80fd, \u4f60\u53ef\u4ee5\u641c\u7d22\u81ea\u5df1\u60f3\u8981\u7684\u529f\u80fd, \u6216\u8005\u5229\u7528 GitHub \u641c\u7d22\u6e90\u7801. \u5982\u679c\u4f60\u8bf4\u7684\u662f HTTPAdapter \u4e0e WebsocketAdapter \u7684\u8bdd, \u56e0\u4e3a Ariadne \u91cd\u70b9\u76ee\u524d\u4e0d\u5728\u8fd9\u91cc, \u6240\u4ee5\u5e76\u6ca1\u6709\u600e\u4e48\u52a8 (\u800c\u4e14\u53ef\u80fd\u6709\u6f5c\u5728 bug)...","title":"\u6587\u6863\u91cc\u600e\u4e48\u6ca1\u6709 xxx \u7684\u4ecb\u7ecd?"},{"location":"appendix/faq/#get_bytes-base64","text":"\u4f60\u53ef\u80fd\u4f1a\u6709\u8fd9\u4e2a\u8ff7\u60d1: img = Image ( url =... ) await img . get_bytes () assert img . base64 is not None \u8fd9\u662f\u6b63\u5e38\u4e14\u7b26\u5408\u8bbe\u8ba1\u7684, \u56e0\u4e3a: \u8fd9\u4e2a\u8bbe\u8ba1\u52a0\u901f\u4e86\u540e\u7eed\u7684 get_bytes \u64cd\u4f5c. url \u4f18\u5148\u7ea7\u9ad8\u4e8e base64 , \u4e0d\u4f1a\u5bf9\u53d1\u9001\u4ea7\u751f\u4efb\u4f55\u5f71\u54cd. \u53ef\u4ee5\u4fdd\u8bc1 asPersistentString \u5b8c\u6574\u5b58\u50a8\u4e86\u56fe\u7247\u6570\u636e, \u4ee5\u9632\u6b62\u4e0d\u53ef\u9760 url \u5f71\u54cd. \u53ef\u80fd\u540e\u7eed\u4f1a\u6dfb\u52a0\u4e00\u4e2a remove_url \u7684\u4ec5\u5173\u952e\u5b57\u53c2\u6570.","title":"\u591a\u5a92\u4f53\u5143\u7d20\u7684 get_bytes \u65b9\u6cd5\u4e3a\u4ec0\u4e48\u4f1a\u5b58\u50a8 base64 \u5c5e\u6027?"},{"location":"appendix/faq/#troubleshoot-","text":"\u672c\u90e8\u5206\u7528\u4e8e\u6392\u67e5\u5e38\u89c1\u7528\u6237\u9519\u8bef.","title":"TROUBLESHOOT - \u5e38\u89c1\u6545\u969c\u6392\u67e5"},{"location":"appendix/faq/#timeouterror-unable-to-connect-to-mirai-api-http-configuration-problem","text":"\u8bf7\u68c0\u67e5\uff1a mirai-console \u662f\u5426\u6210\u529f\u767b\u5f55\u8d26\u53f7 mirai-api-http \u662f\u5426\u6b63\u786e\u914d\u7f6e (\u542f\u7528 HTTP \u4e0e Websocket \u9002\u914d\u5668) Python \u7248\u672c (3.8 \u4ee5\u4e0a) Ariadne \u7248\u672c\u662f\u5426\u4e3a\u6700\u65b0 ( ) \u5176\u4ed6 Graia Project \u76f8\u5173\u7684\u5e93\u662f\u5426\u4e3a\u6700\u65b0 (e.g. graia-saya graia-scheduler ) Ariadne \u914d\u7f6e\u662f\u5426\u4e0e mirai-api-http \u76f8\u540c. (\u5305\u62ec QQ \u53f7\uff0c\u5730\u5740\u548c\u9a8c\u8bc1\u5bc6\u94a5)","title":"TimeoutError: Unable to connect to mirai-api-http. Configuration Problem?"},{"location":"appendix/faq/#failed-to-send-message-your-account-may-be-blocked","text":"\u4f60\u7684\u8d26\u53f7\u53ef\u80fd\u88ab \u98ce\u63a7 \u4e86. \u8bf7\u7b49\u5f85\u51e0\u5929\u540e\u518d\u8bd5.","title":"\u6536\u4e0d\u5230\u6d88\u606f\uff0c\u4e14\u63a7\u5236\u53f0\u663e\u793a Failed to send message, your account may be blocked."},{"location":"appendix/faq/#mcl-cannot-download-package-netmamoemirai-api-http","text":"\u5982\u679c\u4f60\u7684 MCL \u663e\u793a\u4ee5\u4e0b\u9519\u8bef\u8f93\u51fa: [INFO] Verifying \"net.mamoe:mirai-api-http\" v2.5.0 [ERROR] \"net.mamoe:mirai-api-http\" is corrupted. [ERROR] Cannot download package \"net.mamoe:mirai-api-http\" [ERROR] The local file \"net.mamoe:mirai-api-http\" is still corrupted, please check the network. \u8bf7\u624b\u52a8\u4e0b\u8f7d mirai-api-http \u5305, \u5e76\u5c06\u5176\u653e\u7f6e\u4e8e MCL \u7684 plugins \u76ee\u5f55\u4e0b. \u4e4b\u540e\u4fbf\u53ef\u4ee5\u5b89\u5168\u5ffd\u7565\u8fd9\u4e2a\u9519\u8bef. (\u8fd9\u662f\u56e0\u4e3a mirai-api-http \u7684\u7ef4\u62a4\u8005\u5fd8\u8bb0\u53d1\u5e03 mirai-api-http \u5230 maven \u4ed3\u5e93\u6258\u7ba1\u4e86, \u8be6\u89c1 \u8fd9\u91cc )","title":"MCL \u663e\u793a Cannot download package \"net.mamoe:mirai-api-http\""},{"location":"appendix/funding/","text":"\u8d5e\u52a9 \ud83d\udd17 \u8bf7\u8003\u8651\u8d5e\u52a9\u6211\u4eec\u6765\u5e2e\u52a9 Graia Project \u4e0e Graia Community \u66f4\u597d\u5730\u53d1\u5c55\uff01 \u5fae\u4fe1\u8d5e\u52a9\u7801\uff08BlueGlassBlock\uff09: \u7231\u53d1\u7535\u94fe\u63a5: BlueGlassBlock : https://afdian.net/@blueg GreyElaina : https://afdian.net/@graia","title":"\u8d5e\u52a9"},{"location":"appendix/funding/#_1","text":"\u8bf7\u8003\u8651\u8d5e\u52a9\u6211\u4eec\u6765\u5e2e\u52a9 Graia Project \u4e0e Graia Community \u66f4\u597d\u5730\u53d1\u5c55\uff01 \u5fae\u4fe1\u8d5e\u52a9\u7801\uff08BlueGlassBlock\uff09: \u7231\u53d1\u7535\u94fe\u63a5: BlueGlassBlock : https://afdian.net/@blueg GreyElaina : https://afdian.net/@graia","title":"\u8d5e\u52a9"},{"location":"appendix/mah-install/","text":"Mirai API HTTP \u5b89\u88c5 \ud83d\udd17 \u6ce8\u610f \u672c\u6559\u7a0b\u9700\u8981\uff1a \u57fa\u7840\u6587\u4ef6\u64cd\u4f5c\u80fd\u529b \u57fa\u7840\u7ec8\u7aef\u4f7f\u7528\u80fd\u529b (\u6309 Tab \u4e0e Enter) \u641c\u7d22\u5f15\u64ce\u4f7f\u7528\u80fd\u529b \u4e00\u4e2a\u8111\u5b50 \u4ec0\u4e48? \u4f60\u6ca1\u6709? \u8bf7\u9000\u51fa\u5427, \u672c\u6559\u7a0b\u4e0d\u9002\u5408\u4f60\u3002 \u63d0\u793a \u4f60\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u5173\u4e8e\u4f7f\u7528 docker \u5b89\u88c5 mirai \u7684\u4fe1\u606f. 1. \u5b89\u88c5 mirai-console-loader \ud83d\udd17 \u63d0\u793a \u82e5\u4f60\u5df2\u7ecf\u5b89\u88c5\u4e86 mirai-console , \u8bf7\u76f4\u63a5\u79fb\u6b65 2. \u5b89\u88c5\u4e0e\u914d\u7f6e mirai-api-http \u4ece mcl-installer release \u4e0b\u8f7d\u9002\u5408 \u4f60\u7535\u8111\u67b6\u6784 \u7684\u7248\u672c. \u5982\u679c\u4f60\u5b9e\u5728\u4e0d\u77e5\u9053\u7528\u54ea\u4e2a\u7248\u672c, \u53ef\u4ee5\u6309\u7167\u4f60\u7528\u7684\u64cd\u4f5c\u7cfb\u7edf\u8bd5\u8fc7\u53bb. \u5728\u4e0b\u8f7d\u5b8c\u6210\u540e\u76f4\u63a5\u79fb\u52a8\u5230\u76ee\u6807\u5b89\u88c5\u4f4d\u7f6e, \u5e76\u521b\u5efa\u6cbf\u9014\u7684\u6587\u4ef6\u5939. \u5b8c\u6210\u540e, \u6253\u5f00\u4f60\u7684\u7ec8\u7aef, \u8f93\u5165: ./mcl-installer # \u4f7f\u7528 Tab \u952e\u8865\u5168\u8def\u5f84, \u4e4b\u540e\u56de\u8f66. \u4f60\u5e94\u8be5\u4f1a\u770b\u5230 \u7c7b\u4f3c \u7684\u4e1c\u897f: iTXTech MCL Installer 1.0.3 [OS: windows] Licensed under GNU AGPLv3. https://github.com/iTXTech/mcl-installer iTXTech MCL and Java will be downloaded to \"F:\\PythonProjects\\mah-pure-inst\" Checking existing Java installation. ... Would you like to install Java? (Y/N, default: Y) \u5982\u679c\u4f60\u4e0d\u4f1a\u82f1\u6587, \u53ef\u4ee5\u4e00\u8def\u56de\u8f66\u4e86. \u4e4b\u540e\u4f60\u5927\u6982\u80fd\u770b\u5230\u8fd9\u6837\u7684\u7ed3\u6784: MCL \u2502 \u251c\u2500\u2500\u2500java \u2502 ... \u2502 \u251c\u2500\u2500\u2500scripts \u2502 ... \u2502 LICENSE \u2502 mcl \u2502 mcl.cmd \u2502 mcl.jar \u2502 README.md \u4e4b\u540e, \u8fd0\u884c ./mcl \u4f60\u4f1a\u770b\u5230\u7c7b\u4f3c\u7684\u8f93\u51fa: [INFO] Verifying \"net.mamoe:mirai-console\" v [ERROR] \"net.mamoe:mirai-console\" is corrupted. Downloading ...... xxxx-xx-xx xx:xx:xx I/main: Starting mirai-console... ...... xxxx-xx-xx xx:xx:xx I/main: mirai-console started successfully. > \u6b64\u65f6\u8f93\u5165 /autoLogin add <\u4f60\u7684QQ\u53f7> <\u4f60\u7684QQ\u5bc6\u7801> \u5e76\u56de\u8f66. \u5e94\u8be5\u4f1a\u663e\u793a \u5df2\u6210\u529f\u6dfb\u52a0 '<\u4f60\u7684QQ\u53f7>'. \u5728\u5411\u4ed6\u4eba\u62a5\u544a\u95ee\u9898\u65f6 \u6c38\u8fdc \u4e0d\u8981\u6cc4\u9732\u4f60\u7684\u654f\u611f\u4fe1\u606f. \u4e4b\u540e\u5148\u8f93\u5165 stop \u5e76\u56de\u8f66, \u9000\u51fa mirai-console . 2. \u5b89\u88c5\u4e0e\u914d\u7f6e mirai-api-http \ud83d\udd17 \u901a\u8fc7 MCL \u7ba1\u7406 \u624b\u52a8\u5b89\u88c5 \u53ea\u9700\u8fd0\u884c ./mcl --update-package net.mamoe:mirai-api-http --channel stable-v2 --type plugin ./mcl -u \u5373\u53ef. \u4ece mirai-api-http release \u9875\u4e0b\u8f7d\u6700\u65b0\u7684 .jar \u6587\u4ef6. \u6587\u4ef6\u540d\u50cf\u8fd9\u6837: mirai-api-http-v2.X.X.mirai.jar \u653e\u5230 mirai-console \u5b89\u88c5\u76ee\u5f55\u4e0b\u7684 plugins \u6587\u4ef6\u5939\u5185, \u4e0d\u8981\u505a\u4efb\u4f55\u5176\u4ed6\u64cd\u4f5c . 3. \u767b\u5f55 QQ \ud83d\udd17 \u6267\u884c ./mcl \u542f\u52a8 mirai-console . \u5982\u679c\u76f4\u63a5\u663e\u793a Event: BotOnlineEvent(bot=Bot(<\u4f60\u7684QQ\u53f7>)) \u90a3\u4e48\u606d\u559c\u4f60, \u4f60\u5df2\u7ecf \u5b8c\u6210 \u4e86. \u4f46\u662f... \u5982\u679c\u50cf\u4e0b\u9762\u90a3\u6837\u5f39\u51fa\u4e00\u4e2a\u5f39\u7a97, \u90a3\u4f60\u8fd8\u8981\u5f80\u4e0b\u770b. Linux NoGUI \u7528\u6237\u8bf7\u5728\u684c\u9762\u73af\u5883\u4e0b\u5148\u914d\u7f6e\u597d, \u4e4b\u540e\u590d\u5236 bots \u6587\u4ef6\u5939. \u70b9\u51fb Open with TxCaptchaHelper , \u4f1a\u5f39\u51fa\u4e00\u4e2a\u65b0\u7a97\u53e3. \u5728\u624b\u673a\u4e0a\u4e0b\u8f7d TxCaptchaHelper \u5e76\u5b89\u88c5. \u6253\u5f00\u540e\u4f1a\u6709\u5982\u4e0b\u754c\u9762: \u6b64\u65f6\u8f93\u5165\u4e0a\u65b9\u7684 4 \u4f4d\u6570 \u8bf7\u6c42\u7801, \u70b9\u51fb \u4e0b\u4e00\u6b65 , \u53ef\u4ee5\u770b\u5230: \u5b8c\u6210\u6ed1\u5757\u9a8c\u8bc1, \u4e4b\u540e\u4f60\u5c31\u53ef\u4ee5\u5728\u7535\u8111\u7a97\u53e3\u4e2d\u70b9\u51fb \u786e\u5b9a \u4e86. \u4e4b\u540e\u8fd8\u4f1a\u6709\u4e00\u4e2a\u8bbe\u5907\u9501, \u5982\u56fe: \u590d\u5236\u91cc\u9762\u7684 url \u81f3 \u6d4f\u89c8\u5668, \u6309\u7167\u63d0\u793a\u5b8c\u6210\u5373\u53ef. 4. \u5b8c\u6210 \ud83d\udd17 \u5728 config/net.mamoe.mirai-api-http \u4e0b, \u4f60\u4f1a\u627e\u5230 setting.yml \u6587\u4ef6. \u6539\u6210\u5982\u4e0b\u5185\u5bb9 (\u6ce8\u610f\u4f9d\u7167\u6ce8\u91ca\u66f4\u6539): # file: \"MCL/config/net.mamoe.mirai-api-http/setting.yml\" ## \u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u503c\uff0c\u5168\u4e3a\u9ed8\u8ba4\u503c ## \u542f\u7528\u7684 adapter, \u5185\u7f6e\u6709 http, ws, reverse-ws, webhook adapters : - http - ws ## \u662f\u5426\u5f00\u542f\u8ba4\u8bc1\u6d41\u7a0b, \u82e5\u4e3a true \u5219\u5efa\u7acb\u8fde\u63a5\u65f6\u9700\u8981\u9a8c\u8bc1 verifyKey enableVerify : true verifyKey : ServiceVerifyKey ## \u5f00\u542f\u4e00\u4e9b\u8c03\u8bd5\u4fe1\u606f debug : false ## \u662f\u5426\u5f00\u542f\u5355 session \u6a21\u5f0f, \u4e0d\u5efa\u8bae\u5f00\u542f singleMode : false ## \u5386\u53f2\u6d88\u606f\u7684\u7f13\u5b58\u5927\u5c0f ## \u540c\u65f6\uff0c\u4e5f\u662f http adapter \u7684\u6d88\u606f\u961f\u5217\u5bb9\u91cf cacheSize : 4096 ## adapter \u7684\u5355\u72ec\u914d\u7f6e\uff0c\u952e\u540d\u4e0e adapters \u9879\u914d\u7f6e\u76f8\u540c adapterSettings : ## \u8be6\u60c5\u770b http adapter \u4f7f\u7528\u8bf4\u660e \u914d\u7f6e http : host : localhost port : 8080 cors : [ \"*\" ] ## \u8be6\u60c5\u770b websocket adapter \u4f7f\u7528\u8bf4\u660e \u914d\u7f6e ws : host : localhost port : 8080 reservedSyncId : -1 # \u5efa\u8bae\u786e\u4fdd\u4e3a\u8d1f\u6570\uff0c\u5426\u5219\u53ef\u80fd\u51fa bug \u81f3\u6b64, \u4f60\u5df2\u7ecf\u5b8c\u6210\u4e86 mirai-api-http \u7684\u5b89\u88c5\u4e0e\u914d\u7f6e. \u4eab\u53d7\u4f7f\u7528 Graia Framework \u5f00\u53d1\u5427!","title":"Mirai API HTTP \u5b89\u88c5"},{"location":"appendix/mah-install/#mirai-api-http","text":"\u6ce8\u610f \u672c\u6559\u7a0b\u9700\u8981\uff1a \u57fa\u7840\u6587\u4ef6\u64cd\u4f5c\u80fd\u529b \u57fa\u7840\u7ec8\u7aef\u4f7f\u7528\u80fd\u529b (\u6309 Tab \u4e0e Enter) \u641c\u7d22\u5f15\u64ce\u4f7f\u7528\u80fd\u529b \u4e00\u4e2a\u8111\u5b50 \u4ec0\u4e48? \u4f60\u6ca1\u6709? \u8bf7\u9000\u51fa\u5427, \u672c\u6559\u7a0b\u4e0d\u9002\u5408\u4f60\u3002 \u63d0\u793a \u4f60\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u5173\u4e8e\u4f7f\u7528 docker \u5b89\u88c5 mirai \u7684\u4fe1\u606f.","title":"Mirai API HTTP \u5b89\u88c5"},{"location":"appendix/mah-install/#1-mirai-console-loader","text":"\u63d0\u793a \u82e5\u4f60\u5df2\u7ecf\u5b89\u88c5\u4e86 mirai-console , \u8bf7\u76f4\u63a5\u79fb\u6b65 2. \u5b89\u88c5\u4e0e\u914d\u7f6e mirai-api-http \u4ece mcl-installer release \u4e0b\u8f7d\u9002\u5408 \u4f60\u7535\u8111\u67b6\u6784 \u7684\u7248\u672c. \u5982\u679c\u4f60\u5b9e\u5728\u4e0d\u77e5\u9053\u7528\u54ea\u4e2a\u7248\u672c, \u53ef\u4ee5\u6309\u7167\u4f60\u7528\u7684\u64cd\u4f5c\u7cfb\u7edf\u8bd5\u8fc7\u53bb. \u5728\u4e0b\u8f7d\u5b8c\u6210\u540e\u76f4\u63a5\u79fb\u52a8\u5230\u76ee\u6807\u5b89\u88c5\u4f4d\u7f6e, \u5e76\u521b\u5efa\u6cbf\u9014\u7684\u6587\u4ef6\u5939. \u5b8c\u6210\u540e, \u6253\u5f00\u4f60\u7684\u7ec8\u7aef, \u8f93\u5165: ./mcl-installer # \u4f7f\u7528 Tab \u952e\u8865\u5168\u8def\u5f84, \u4e4b\u540e\u56de\u8f66. \u4f60\u5e94\u8be5\u4f1a\u770b\u5230 \u7c7b\u4f3c \u7684\u4e1c\u897f: iTXTech MCL Installer 1.0.3 [OS: windows] Licensed under GNU AGPLv3. https://github.com/iTXTech/mcl-installer iTXTech MCL and Java will be downloaded to \"F:\\PythonProjects\\mah-pure-inst\" Checking existing Java installation. ... Would you like to install Java? (Y/N, default: Y) \u5982\u679c\u4f60\u4e0d\u4f1a\u82f1\u6587, \u53ef\u4ee5\u4e00\u8def\u56de\u8f66\u4e86. \u4e4b\u540e\u4f60\u5927\u6982\u80fd\u770b\u5230\u8fd9\u6837\u7684\u7ed3\u6784: MCL \u2502 \u251c\u2500\u2500\u2500java \u2502 ... \u2502 \u251c\u2500\u2500\u2500scripts \u2502 ... \u2502 LICENSE \u2502 mcl \u2502 mcl.cmd \u2502 mcl.jar \u2502 README.md \u4e4b\u540e, \u8fd0\u884c ./mcl \u4f60\u4f1a\u770b\u5230\u7c7b\u4f3c\u7684\u8f93\u51fa: [INFO] Verifying \"net.mamoe:mirai-console\" v [ERROR] \"net.mamoe:mirai-console\" is corrupted. Downloading ...... xxxx-xx-xx xx:xx:xx I/main: Starting mirai-console... ...... xxxx-xx-xx xx:xx:xx I/main: mirai-console started successfully. > \u6b64\u65f6\u8f93\u5165 /autoLogin add <\u4f60\u7684QQ\u53f7> <\u4f60\u7684QQ\u5bc6\u7801> \u5e76\u56de\u8f66. \u5e94\u8be5\u4f1a\u663e\u793a \u5df2\u6210\u529f\u6dfb\u52a0 '<\u4f60\u7684QQ\u53f7>'. \u5728\u5411\u4ed6\u4eba\u62a5\u544a\u95ee\u9898\u65f6 \u6c38\u8fdc \u4e0d\u8981\u6cc4\u9732\u4f60\u7684\u654f\u611f\u4fe1\u606f. \u4e4b\u540e\u5148\u8f93\u5165 stop \u5e76\u56de\u8f66, \u9000\u51fa mirai-console .","title":"1. \u5b89\u88c5 mirai-console-loader"},{"location":"appendix/mah-install/#2-mirai-api-http","text":"\u901a\u8fc7 MCL \u7ba1\u7406 \u624b\u52a8\u5b89\u88c5 \u53ea\u9700\u8fd0\u884c ./mcl --update-package net.mamoe:mirai-api-http --channel stable-v2 --type plugin ./mcl -u \u5373\u53ef. \u4ece mirai-api-http release \u9875\u4e0b\u8f7d\u6700\u65b0\u7684 .jar \u6587\u4ef6. \u6587\u4ef6\u540d\u50cf\u8fd9\u6837: mirai-api-http-v2.X.X.mirai.jar \u653e\u5230 mirai-console \u5b89\u88c5\u76ee\u5f55\u4e0b\u7684 plugins \u6587\u4ef6\u5939\u5185, \u4e0d\u8981\u505a\u4efb\u4f55\u5176\u4ed6\u64cd\u4f5c .","title":"2. \u5b89\u88c5\u4e0e\u914d\u7f6e mirai-api-http"},{"location":"appendix/mah-install/#3-qq","text":"\u6267\u884c ./mcl \u542f\u52a8 mirai-console . \u5982\u679c\u76f4\u63a5\u663e\u793a Event: BotOnlineEvent(bot=Bot(<\u4f60\u7684QQ\u53f7>)) \u90a3\u4e48\u606d\u559c\u4f60, \u4f60\u5df2\u7ecf \u5b8c\u6210 \u4e86. \u4f46\u662f... \u5982\u679c\u50cf\u4e0b\u9762\u90a3\u6837\u5f39\u51fa\u4e00\u4e2a\u5f39\u7a97, \u90a3\u4f60\u8fd8\u8981\u5f80\u4e0b\u770b. Linux NoGUI \u7528\u6237\u8bf7\u5728\u684c\u9762\u73af\u5883\u4e0b\u5148\u914d\u7f6e\u597d, \u4e4b\u540e\u590d\u5236 bots \u6587\u4ef6\u5939. \u70b9\u51fb Open with TxCaptchaHelper , \u4f1a\u5f39\u51fa\u4e00\u4e2a\u65b0\u7a97\u53e3. \u5728\u624b\u673a\u4e0a\u4e0b\u8f7d TxCaptchaHelper \u5e76\u5b89\u88c5. \u6253\u5f00\u540e\u4f1a\u6709\u5982\u4e0b\u754c\u9762: \u6b64\u65f6\u8f93\u5165\u4e0a\u65b9\u7684 4 \u4f4d\u6570 \u8bf7\u6c42\u7801, \u70b9\u51fb \u4e0b\u4e00\u6b65 , \u53ef\u4ee5\u770b\u5230: \u5b8c\u6210\u6ed1\u5757\u9a8c\u8bc1, \u4e4b\u540e\u4f60\u5c31\u53ef\u4ee5\u5728\u7535\u8111\u7a97\u53e3\u4e2d\u70b9\u51fb \u786e\u5b9a \u4e86. \u4e4b\u540e\u8fd8\u4f1a\u6709\u4e00\u4e2a\u8bbe\u5907\u9501, \u5982\u56fe: \u590d\u5236\u91cc\u9762\u7684 url \u81f3 \u6d4f\u89c8\u5668, \u6309\u7167\u63d0\u793a\u5b8c\u6210\u5373\u53ef.","title":"3. \u767b\u5f55 QQ"},{"location":"appendix/mah-install/#4","text":"\u5728 config/net.mamoe.mirai-api-http \u4e0b, \u4f60\u4f1a\u627e\u5230 setting.yml \u6587\u4ef6. \u6539\u6210\u5982\u4e0b\u5185\u5bb9 (\u6ce8\u610f\u4f9d\u7167\u6ce8\u91ca\u66f4\u6539): # file: \"MCL/config/net.mamoe.mirai-api-http/setting.yml\" ## \u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u503c\uff0c\u5168\u4e3a\u9ed8\u8ba4\u503c ## \u542f\u7528\u7684 adapter, \u5185\u7f6e\u6709 http, ws, reverse-ws, webhook adapters : - http - ws ## \u662f\u5426\u5f00\u542f\u8ba4\u8bc1\u6d41\u7a0b, \u82e5\u4e3a true \u5219\u5efa\u7acb\u8fde\u63a5\u65f6\u9700\u8981\u9a8c\u8bc1 verifyKey enableVerify : true verifyKey : ServiceVerifyKey ## \u5f00\u542f\u4e00\u4e9b\u8c03\u8bd5\u4fe1\u606f debug : false ## \u662f\u5426\u5f00\u542f\u5355 session \u6a21\u5f0f, \u4e0d\u5efa\u8bae\u5f00\u542f singleMode : false ## \u5386\u53f2\u6d88\u606f\u7684\u7f13\u5b58\u5927\u5c0f ## \u540c\u65f6\uff0c\u4e5f\u662f http adapter \u7684\u6d88\u606f\u961f\u5217\u5bb9\u91cf cacheSize : 4096 ## adapter \u7684\u5355\u72ec\u914d\u7f6e\uff0c\u952e\u540d\u4e0e adapters \u9879\u914d\u7f6e\u76f8\u540c adapterSettings : ## \u8be6\u60c5\u770b http adapter \u4f7f\u7528\u8bf4\u660e \u914d\u7f6e http : host : localhost port : 8080 cors : [ \"*\" ] ## \u8be6\u60c5\u770b websocket adapter \u4f7f\u7528\u8bf4\u660e \u914d\u7f6e ws : host : localhost port : 8080 reservedSyncId : -1 # \u5efa\u8bae\u786e\u4fdd\u4e3a\u8d1f\u6570\uff0c\u5426\u5219\u53ef\u80fd\u51fa bug \u81f3\u6b64, \u4f60\u5df2\u7ecf\u5b8c\u6210\u4e86 mirai-api-http \u7684\u5b89\u88c5\u4e0e\u914d\u7f6e. \u4eab\u53d7\u4f7f\u7528 Graia Framework \u5f00\u53d1\u5427!","title":"4. \u5b8c\u6210"},{"location":"appendix/terms/","text":"\u672f\u8bed \ud83d\udd17 Java & Python \ud83d\udd17 \u4e24\u95e8\u4e0d\u540c\u7684\u7f16\u7a0b\u8bed\u8a00, \u5e94\u8be5\u4e0d\u9700\u8981\u518d\u591a\u4ecb\u7ecd\u4e86\u5427? MAH \ud83d\udd17 mirai-api-http \u7684\u7f29\u5199, Ariadne \u53ea\u652f\u6301\u5176 2.x \u7248\u672c. Mirai \ud83d\udd17 Mirai \u6846\u67b6. \u4e5f\u53ef\u6307\u4ee3 MCL \u4e0e mirai-console . MCL \ud83d\udd17 mirai-console-loader \u7684\u7f29\u5199, \u76ee\u524d\u8fd0\u7528\u6700\u4e3a\u5e7f\u6cdb\u7684 mirai-console \u542f\u52a8\u5668. mirai-console \ud83d\udd17 Mirai \u7684\u63a7\u5236\u53f0. \u4e00\u822c\u4f7f\u7528 MCL \u8fdb\u884c\u542f\u52a8\u7ba1\u7406. v3 \ud83d\udd17 python-mirai \u7684\u4ee3\u79f0. \u65e9\u5c31\u505c\u6b62\u7ef4\u62a4\u4e86. v4 \ud83d\udd17 Graia Application \u7684\u4ee3\u79f0. \u5df2\u505c\u6b62\u7ef4\u62a4. \u8b66\u544a Graia Application \u7684\u6700\u540e\u4e00\u4e2a\u7a33\u5b9a\u7248\u672c\u5176\u5b9e\u662f 0.19.2 \u800c\u4e0d\u662f 0.20.x . v4+ \ud83d\udd17 Ariadne \u7684\u4ee3\u79f0. \u5373\u4f60\u6240\u89c1\u5230\u7684\u8fd9\u4e2a\u6846\u67b6. v5 \ud83d\udd17 Avilla \u7684\u4ee3\u79f0. Graia Framework \u7684 \u4e0b\u4e00\u4ee3 \u6846\u67b6\u5b9e\u73b0. \u6b63\u5f0f\u53d1\u5e03\u540e, Ariadne \u4f1a\u9010\u6b65\u8fc1\u79fb\u81f3\u4f7f\u7528 Avilla \u7684\u5185\u90e8\u7ed3\u6784.","title":"\u672f\u8bed"},{"location":"appendix/terms/#_1","text":"","title":"\u672f\u8bed"},{"location":"appendix/terms/#java-python","text":"\u4e24\u95e8\u4e0d\u540c\u7684\u7f16\u7a0b\u8bed\u8a00, \u5e94\u8be5\u4e0d\u9700\u8981\u518d\u591a\u4ecb\u7ecd\u4e86\u5427?","title":"Java &amp; Python"},{"location":"appendix/terms/#mah","text":"mirai-api-http \u7684\u7f29\u5199, Ariadne \u53ea\u652f\u6301\u5176 2.x \u7248\u672c.","title":"MAH"},{"location":"appendix/terms/#mirai","text":"Mirai \u6846\u67b6. \u4e5f\u53ef\u6307\u4ee3 MCL \u4e0e mirai-console .","title":"Mirai"},{"location":"appendix/terms/#mcl","text":"mirai-console-loader \u7684\u7f29\u5199, \u76ee\u524d\u8fd0\u7528\u6700\u4e3a\u5e7f\u6cdb\u7684 mirai-console \u542f\u52a8\u5668.","title":"MCL"},{"location":"appendix/terms/#mirai-console","text":"Mirai \u7684\u63a7\u5236\u53f0. \u4e00\u822c\u4f7f\u7528 MCL \u8fdb\u884c\u542f\u52a8\u7ba1\u7406.","title":"mirai-console"},{"location":"appendix/terms/#v3","text":"python-mirai \u7684\u4ee3\u79f0. \u65e9\u5c31\u505c\u6b62\u7ef4\u62a4\u4e86.","title":"v3"},{"location":"appendix/terms/#v4","text":"Graia Application \u7684\u4ee3\u79f0. \u5df2\u505c\u6b62\u7ef4\u62a4. \u8b66\u544a Graia Application \u7684\u6700\u540e\u4e00\u4e2a\u7a33\u5b9a\u7248\u672c\u5176\u5b9e\u662f 0.19.2 \u800c\u4e0d\u662f 0.20.x .","title":"v4"},{"location":"appendix/terms/#v4_1","text":"Ariadne \u7684\u4ee3\u79f0. \u5373\u4f60\u6240\u89c1\u5230\u7684\u8fd9\u4e2a\u6846\u67b6.","title":"v4+"},{"location":"appendix/terms/#v5","text":"Avilla \u7684\u4ee3\u79f0. Graia Framework \u7684 \u4e0b\u4e00\u4ee3 \u6846\u67b6\u5b9e\u73b0. \u6b63\u5f0f\u53d1\u5e03\u540e, Ariadne \u4f1a\u9010\u6b65\u8fc1\u79fb\u81f3\u4f7f\u7528 Avilla \u7684\u5185\u90e8\u7ed3\u6784.","title":"v5"},{"location":"basic/NAV/","text":"\u53c2\u6570\u4f20\u9012 \u6d88\u606f\u94fe \u6d88\u606f\u5904\u7406\u5668 \u914d\u7f6e \u603b\u89c8 \u540e\u53f0\u4efb\u52a1","title":"NAV"},{"location":"basic/background/","text":"\u540e\u53f0\u4efb\u52a1 \ud83d\udd17 Ariadne \u6ca1\u6709\u81ea\u5e26 add_background_task \u4e4b\u7c7b\u7684\u73a9\u610f, \u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1 \u624b\u6413 \u9020\u4e00\u4e2a. \u9996\u5148, \u4ece graia.ariadne.event.lifecycle \u5bfc\u5165 ApplicationLaunched \u4e0e ApplicationShutdowned \u76d1\u542c ApplicationLaunched , \u5229\u7528\u8fd9\u4e2a\u76d1\u542c\u542f\u52a8\u4f60\u7684\u540e\u53f0\u4efb\u52a1. \u76d1\u542c ApplicationShutdowned , \u5229\u7528\u8fd9\u4e2a\u6e05\u7406\u4f60\u7684\u540e\u53f0\u4efb\u52a1. bg_tsk : Optional [ Task ] = None @broadcast . receiver ( ApplicationLaunched ) async def start_background ( loop : AbstractEventLoop ): global bg_tsk if not bg_tsk : bg_tsk = loop . create_task ( whatever_coroutine ( ... )) @broadcast . receiver ( ApplicationShutdowned ) async def stop_background (): global bg_tsk if bg_tsk : # bg_tsk.cancel() # \u53d6\u4e0d\u53d6\u6d88\u968f\u4f60, \u4f46\u4e0d\u8981\u7559\u5230 Ariadne \u751f\u547d\u5468\u671f\u5916 await bg_tsk bg_tsk = None \u5f53\u7136, \u4f60\u53ef\u4ee5\u8fd9\u6837\u5c01\u88c5. def add_background_task ( app : Ariadne , async_func : Callable [[ ... ], Awaitable ], * args , ** kwargs ): bg_tsk : Optional [ Task ] = None @app . broadcast . receiver ( ApplicationLaunched ) async def start_background ( loop : AbstractEventLoop ): if not bg_tsk : bg_tsk = loop . create_task ( async_func ( * args , ** kwargs )) @broadcast . receiver ( ApplicationShutdowned ) async def stop_background (): if bg_tsk : bg_tsk . cancel () # \u53d6\u4e0d\u53d6\u6d88\u968f\u4f60, \u4f46\u4e0d\u8981\u7559\u5230 Ariadne \u751f\u547d\u5468\u671f\u5916 await bg_tsk bg_tsk = None \u5176\u5b9e, \u4f60\u5728\u76d1\u542c ApplicationLaunched \u4e8b\u4ef6\u65f6\u53ef\u4ee5\u76f4\u63a5\u6254\u4e00\u4e2a\u6b7b\u5faa\u73af, \u901a\u8fc7\u5224\u65ad Ariadne.status \u51b3\u5b9a\u4ec0\u4e48\u65f6\u5019\u505c\u6b62\u8fd0\u884c. \u50cf\u8fd9\u6837: from graia.ariadne.model import AriadneStatus @broadcast . receiver ( ApplicationLaunched ) async def background ( app : Ariadne ): while app . status in ( AriadneStatus . LAUNCH , AriadneStatus . RUNNING ): ... await asyncio . sleep ( 0 ) # \u5faa\u73af\u91cc\u81f3\u5c11\u8981\u6709\u4e00\u4e2a async \u64cd\u4f5c \u6ce8\u610f: \u6700\u597d\u968f\u7740 Ariadne \u751f\u547d\u5468\u671f\u4e00\u8d77\u6e05\u7406\u540e\u53f0\u4efb\u52a1, \u5426\u5219\u6211\u4eec\u65e0\u6cd5\u62c5\u4fdd\u4f60\u7684\u4e8b\u4ef6\u5faa\u73af\u4f1a\u4e0d\u4f1a\u70b8 (\u65e0\u6cd5 Ctrl + C \u9000\u51fa\u7b49). \u63d0\u793a \u548c\u5176\u4ed6\u76d1\u542c\u5668\u4e00\u6837, \u4f60\u7684 ApplicationLaunched \u76d1\u542c\u5668\u53ea\u4f1a\u88ab\u8fd0\u884c\u4e00\u6b21, \u6240\u4ee5\u6700\u597d\u5c06\u5176\u4f5c\u4e3a\u4e00\u4e2a\u5faa\u73af\u8fd0\u884c.","title":"\u540e\u53f0\u4efb\u52a1"},{"location":"basic/background/#_1","text":"Ariadne \u6ca1\u6709\u81ea\u5e26 add_background_task \u4e4b\u7c7b\u7684\u73a9\u610f, \u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1 \u624b\u6413 \u9020\u4e00\u4e2a. \u9996\u5148, \u4ece graia.ariadne.event.lifecycle \u5bfc\u5165 ApplicationLaunched \u4e0e ApplicationShutdowned \u76d1\u542c ApplicationLaunched , \u5229\u7528\u8fd9\u4e2a\u76d1\u542c\u542f\u52a8\u4f60\u7684\u540e\u53f0\u4efb\u52a1. \u76d1\u542c ApplicationShutdowned , \u5229\u7528\u8fd9\u4e2a\u6e05\u7406\u4f60\u7684\u540e\u53f0\u4efb\u52a1. bg_tsk : Optional [ Task ] = None @broadcast . receiver ( ApplicationLaunched ) async def start_background ( loop : AbstractEventLoop ): global bg_tsk if not bg_tsk : bg_tsk = loop . create_task ( whatever_coroutine ( ... )) @broadcast . receiver ( ApplicationShutdowned ) async def stop_background (): global bg_tsk if bg_tsk : # bg_tsk.cancel() # \u53d6\u4e0d\u53d6\u6d88\u968f\u4f60, \u4f46\u4e0d\u8981\u7559\u5230 Ariadne \u751f\u547d\u5468\u671f\u5916 await bg_tsk bg_tsk = None \u5f53\u7136, \u4f60\u53ef\u4ee5\u8fd9\u6837\u5c01\u88c5. def add_background_task ( app : Ariadne , async_func : Callable [[ ... ], Awaitable ], * args , ** kwargs ): bg_tsk : Optional [ Task ] = None @app . broadcast . receiver ( ApplicationLaunched ) async def start_background ( loop : AbstractEventLoop ): if not bg_tsk : bg_tsk = loop . create_task ( async_func ( * args , ** kwargs )) @broadcast . receiver ( ApplicationShutdowned ) async def stop_background (): if bg_tsk : bg_tsk . cancel () # \u53d6\u4e0d\u53d6\u6d88\u968f\u4f60, \u4f46\u4e0d\u8981\u7559\u5230 Ariadne \u751f\u547d\u5468\u671f\u5916 await bg_tsk bg_tsk = None \u5176\u5b9e, \u4f60\u5728\u76d1\u542c ApplicationLaunched \u4e8b\u4ef6\u65f6\u53ef\u4ee5\u76f4\u63a5\u6254\u4e00\u4e2a\u6b7b\u5faa\u73af, \u901a\u8fc7\u5224\u65ad Ariadne.status \u51b3\u5b9a\u4ec0\u4e48\u65f6\u5019\u505c\u6b62\u8fd0\u884c. \u50cf\u8fd9\u6837: from graia.ariadne.model import AriadneStatus @broadcast . receiver ( ApplicationLaunched ) async def background ( app : Ariadne ): while app . status in ( AriadneStatus . LAUNCH , AriadneStatus . RUNNING ): ... await asyncio . sleep ( 0 ) # \u5faa\u73af\u91cc\u81f3\u5c11\u8981\u6709\u4e00\u4e2a async \u64cd\u4f5c \u6ce8\u610f: \u6700\u597d\u968f\u7740 Ariadne \u751f\u547d\u5468\u671f\u4e00\u8d77\u6e05\u7406\u540e\u53f0\u4efb\u52a1, \u5426\u5219\u6211\u4eec\u65e0\u6cd5\u62c5\u4fdd\u4f60\u7684\u4e8b\u4ef6\u5faa\u73af\u4f1a\u4e0d\u4f1a\u70b8 (\u65e0\u6cd5 Ctrl + C \u9000\u51fa\u7b49). \u63d0\u793a \u548c\u5176\u4ed6\u76d1\u542c\u5668\u4e00\u6837, \u4f60\u7684 ApplicationLaunched \u76d1\u542c\u5668\u53ea\u4f1a\u88ab\u8fd0\u884c\u4e00\u6b21, \u6240\u4ee5\u6700\u597d\u5c06\u5176\u4f5c\u4e3a\u4e00\u4e2a\u5faa\u73af\u8fd0\u884c.","title":"\u540e\u53f0\u4efb\u52a1"},{"location":"basic/base-parser/","text":"\u57fa\u7840\u6d88\u606f\u94fe\u5904\u7406\u5668 \ud83d\udd17 \u63d0\u793a \u8fd9\u91cc\u4ecb\u7ecd\u7684\u6240\u6709\u5904\u7406\u5668\u90fd\u662f Broadcast Decorator . \u60f3\u77e5\u9053\u66f4\u591a\u5173\u4e8e Decorator \u7684\u4e8b\u53ef\u4ee5\u70b9\u51fb \u8fd9\u91cc . \u672c\u90e8\u5206\u4ee3\u7801\u5728 base.py \u4e0d\u5339\u914d\u65f6\u5b83\u4eec\u90fd\u4f1a\u901a\u8fc7\u5f15\u53d1 ExecutionStop \u505c\u6b62\u6267\u884c. DetectPrefix \ud83d\udd17 \u987e\u540d\u601d\u4e49, \u68c0\u6d4b\u524d\u7f00. \u5b9e\u4f8b\u5316\u65f6\u4f20\u5165\u524d\u7f00 \u5b57\u7b26\u4e32 \u5373\u53ef. \u4f7f\u7528 \ud83d\udd17 \u4f5c\u4e3a Decorator , \u4f60\u5e94\u8be5\u653e\u5230 broadcast.receiver / ListenerSchema \u7684 decorators \u53c2\u6570\u5217\u8868\u91cc. @broadcast . receiver ( ... , decorators = [ DetectPrefix ( '/' )]) def on_message ( chain : MessageChain ): # chain \u5fc5\u5b9a\u4ee5 \"/\" \u6253\u5934 ... \u6216\u8005\u4e5f\u53ef\u4ee5\u8fd9\u6837: async def foo_func ( chain : MessageChain = DetectPrefix ( \".Test\" )): # \u4ee5\u8fd9\u79cd\u5f62\u5f0f\u4f7f\u7528, \u53d1\u9001\u7684\u6d88\u606f\u4ee5 \".Test\" \u6253\u5934, \u4f46\u6536\u5230\u65f6\u4f1a\u88ab\u53bb\u9664 ... # \".TestSomething\" -> \"Something\" \u8fd9\u4f1a\u81ea\u52a8\u53bb\u6389\u524d\u7f00. \u4f46\u662f\u4e0d\u4f1a\u6539\u52a8 Quote \u4e0e Source \u7b49\u5143\u6570\u636e\u5143\u7d20. DetectSuffix \ud83d\udd17 \u987e\u540d\u601d\u4e49, \u68c0\u6d4b\u540e\u7f00. \u5b9e\u4f8b\u5316\u65f6\u4f20\u5165\u540e\u7f00 \u5b57\u7b26\u4e32 \u5373\u53ef. \u4f7f\u7528 \ud83d\udd17 \u4f5c\u4e3a Decorator , \u653e\u5230 broadcast.receiver / ListenerSchema \u7684 decorators . @broadcast . receiver ( ... , decorators = [ DetectSuffix ( '\u542f\u52a8' )]) def on_message ( chain : MessageChain ): # chain \u5fc5\u5b9a\u4ee5 \"\u542f\u52a8\" \u7ed3\u5c3e ... \u6216\u8005\u4e5f\u53ef\u4ee5\u8fd9\u6837: async def foo_func ( chain : MessageChain = DetectSuffix ( \"Suffix\" )): # \u4ee5\u8fd9\u79cd\u5f62\u5f0f\u4f7f\u7528, \u53d1\u9001\u7684\u6d88\u606f\u4ee5 \"suffix\" \u7ed3\u5c3e, \u4f46\u6536\u5230\u65f6\u4f1a\u88ab\u53bb\u9664 ... # \"TestSuffix\" -> \"Test\" \u8fd9\u4f1a\u81ea\u52a8\u53bb\u6389\u540e\u7f00. \u4f46\u662f\u4e0d\u4f1a\u6539\u52a8 Quote \u4e0e Source \u7b49\u5143\u6570\u636e\u5143\u7d20. MentionMe \ud83d\udd17 \u68c0\u6d4b\u5728\u804a\u5929\u4e2d\u63d0\u5230 Bot (At Bot \u6216\u4ee5 Bot \u7fa4\u6635\u79f0/\u81ea\u5df1\u540d\u79f0 \u6253\u5934). \u4f7f\u7528 \ud83d\udd17 Decorator : \u653e\u5230 broadcast.receiver / ListenerSchema \u7684 decorators . @broadcast . receiver ( ... , decorators = [ MentionMe ()]) # \u6ce8\u610f\u8981\u5b9e\u4f8b\u5316 async def on_mention_me ( chain : MessageChain ): # \u4e0d\u4f1a\u6539\u52a8\u6d88\u606f\u94fe ... Mention \ud83d\udd17 \u68c0\u6d4b\u5728\u804a\u5929\u4e2d\u63d0\u5230\u6307\u5b9a\u7684\u4eba (At \u6307\u5b9a\u7684\u4eba \u6216\u4ee5 \u6307\u5b9a\u7684\u4eba \u7fa4\u6635\u79f0/\u540d\u79f0\u6253\u5934). \u4f7f\u7528 \ud83d\udd17 Decorator : \u653e\u5230 broadcast.receiver / ListenerSchema \u7684 decorators . \u540c\u65f6\u4f60\u9700\u8981\u4e3a\u5176\u63d0\u4f9b target \u53c2\u6570. @broadcast . receiver ( ... , decorators = [ Mention ( target =... )]) # target: int | str # int: \u7528\u6237 QQ \u53f7, str: \u7528\u6237\u7684\u540d\u5b57 async def on_mention ( chain : MessageChain ): # \u4e0d\u4f1a\u6539\u52a8\u6d88\u606f\u94fe ... ContainKeyword \ud83d\udd17 \u68c0\u6d4b\u6d88\u606f\u94fe\u662f\u5426\u5305\u542b\u6307\u5b9a\u5173\u952e\u5b57. \u4f7f\u7528 \ud83d\udd17 Decorator : \u653e\u5165 broadcast.receiver / ListenerSchema \u7684 decorators . \u540c\u65f6\u4f60\u9700\u8981\u4e3a\u5176\u63d0\u4f9b keyword \u53c2\u6570. @broadcast . receiver ( ... , decorators = [ ContainKeyword ( keyword =... )]) # keyword: str async def on_contain_keyword ( chain : MessageChain ): # \u4e0d\u4f1a\u6539\u52a8\u6d88\u606f\u94fe ... MatchContent \ud83d\udd17 \u68c0\u6d4b\u6d88\u606f\u94fe\u662f\u5426\u4e0e\u5bf9\u5e94\u6d88\u606f\u94fe\u76f8\u7b49. \u6ce8\u610f Image \u7b49\u5143\u7d20\u7684\u7279\u6b8a\u5bf9\u6bd4\u89c4\u5219 \u4f7f\u7528 \ud83d\udd17 Decorator : \u653e\u5165 broadcast.receiver / ListenerSchema \u7684 decorators . @broadcast . receiver ( ... , decorators = [ MatchContent ( content =... )]) # content: str | MessageChain # \u5f53 content \u4e3a str \u65f6, \u5c06\u4f1a\u4e0eMessageChain.asDisplay()\u8fdb\u884c\u6bd4\u8f83, \u5f53 content \u4e3a MessageChain \u65f6, \u5c06\u4f1a\u4e0e MessageChain \u8fdb\u884c\u6bd4\u8f83 async def on_match_content ( chain : MessageChain ): # \u4e0d\u4f1a\u6539\u52a8\u6d88\u606f\u94fe ... MatchRegex \ud83d\udd17 \u68c0\u6d4b\u6d88\u606f\u94fe\u662f\u5426\u5339\u914d\u6307\u5b9a\u6b63\u5219\u8868\u8fbe\u5f0f. \u6ce8\u610f [] \u7b49\u7279\u6b8a\u5b57\u7b26, \u56e0\u4e3a\u662f\u4f7f\u7528 MessageChain.asDisplay \u7ed3\u679c\u4f5c\u4e3a\u5339\u914d\u6e90\u7684. \u4f7f\u7528 \ud83d\udd17 Decorator : \u653e\u5165 broadcast.receiver / ListenerSchema \u7684 decorators . @broadcast . receiver ( ... , decorators = [ MatchRegex ( regex = r \"\\d+\" )]) # regex \u53c2\u6570\u4e3a regex \u8868\u8fbe\u5f0f async def on_match_regex ( chain : MessageChain ): # \u4e0d\u4f1a\u6539\u52a8\u6d88\u606f\u94fe ... MatchTemplate \ud83d\udd17 \u68c0\u6d4b\u6d88\u606f\u94fe\u662f\u5426\u5339\u914d\u6307\u5b9a\u6a21\u677f. \u9047\u5230\u5143\u7d20\u5b9e\u4f8b\u5219\u68c0\u6d4b\u662f\u5426\u76f8\u7b49\uff0c\u9047\u5230\u5143\u7d20\u7c7b\u578b\u5219\u68c0\u6d4b\u7c7b\u578b\u662f\u5426\u5339\u914d. Plain \u5b9e\u4f8b\u4e0e\u7c7b\u578b\u4f1a\u88ab\u81ea\u52a8\u62fc\u63a5\u8d77\u6765. \u4f7f\u7528 \ud83d\udd17 Decorator : \u653e\u5165 broadcast.receiver / ListenerSchema \u7684 decorators . @broadcast . receiver ( ... , decorators = [ MatchTemplate ([ Plain , Plain ( \"\u641c\u56fe\" ), Image ])]) # \u9700\u8981 \"*\u641c\u56fe [\u56fe\u7247]\" \u624d\u80fd\u5339\u914d (*\u4e3a\u4efb\u610f\u591a\u5b57\u7b26) async def on_match ( chain : MessageChain ): # \u4e0d\u4f1a\u6539\u52a8\u6d88\u606f\u94fe ... FuzzyMatch \ud83d\udd17 \u6a21\u7cca\u5339\u914d\u5b57\u7b26\u4e32. \u4f7f\u7528 \ud83d\udd17 Decorator : \u653e\u5165 broadcast.receiver / ListenerSchema \u7684 decorators . @broadcast . receiver ( ... , decorators = [ FuzzyMatch ( \"github\" ))]) # \u9ed8\u8ba4\u9608\u503c\u4e3a 60% \u76f8\u4f3c async def on_match ( chain : MessageChain ): # \u4e0d\u4f1a\u6539\u52a8\u6d88\u606f\u94fe ... \u6211\u4eec\u66f4\u63a8\u8350 FuzzyDispatcher, \u56e0\u4e3a\u5b83\u53ea\u5728\u591a\u4e2a\u5339\u914d\u4e2d\u9009\u62e9\u6700\u76f8\u8fd1\u7684\u4e00\u4e2a. FuzzyDispatcher \ud83d\udd17 \u6a21\u7cca\u5339\u914d\u5b57\u7b26\u4e32. \u4f7f\u7528 \ud83d\udd17 \u4f5c\u4e3a Dispatcher \u4f7f\u7528. \u5728\u76f8\u540c scope \u4e2d\u53ea\u6709\u6700\u76f8\u8fd1\u7684\u5339\u914d\u4f1a\u88ab\u6fc0\u6d3b. @broadcast . receiver ( ... , dispatchers = [ FuzzyDispatcher ( \"github\" ))]) # \u9ed8\u8ba4\u9608\u503c\u4e3a 60% \u76f8\u4f3c async def on_match ( chain : MessageChain , rate : float ): # \u82e5\u8981\u83b7\u53d6\u76f8\u4f3c\u5ea6\u5fc5\u987b\u5305\u542b \"rate\" \u5355\u8bcd ... @broadcast . receiver ( ... , dispatchers = [ FuzzyDispatcher ( \"gitlab\" ))]) # \u4e0e\u4e0a\u9762\u7684\u9ed8\u8ba4\u4e0d\u80fd\u540c\u65f6\u89e6\u53d1 async def on_match ( chain : MessageChain ): ... \u793e\u533a\u6587\u6863\u76f8\u5173\u7ae0\u8282: \u94fe\u63a5","title":"\u6d88\u606f\u5904\u7406\u5668"},{"location":"basic/base-parser/#_1","text":"\u63d0\u793a \u8fd9\u91cc\u4ecb\u7ecd\u7684\u6240\u6709\u5904\u7406\u5668\u90fd\u662f Broadcast Decorator . \u60f3\u77e5\u9053\u66f4\u591a\u5173\u4e8e Decorator \u7684\u4e8b\u53ef\u4ee5\u70b9\u51fb \u8fd9\u91cc . \u672c\u90e8\u5206\u4ee3\u7801\u5728 base.py \u4e0d\u5339\u914d\u65f6\u5b83\u4eec\u90fd\u4f1a\u901a\u8fc7\u5f15\u53d1 ExecutionStop \u505c\u6b62\u6267\u884c.","title":"\u57fa\u7840\u6d88\u606f\u94fe\u5904\u7406\u5668"},{"location":"basic/base-parser/#detectprefix","text":"\u987e\u540d\u601d\u4e49, \u68c0\u6d4b\u524d\u7f00. \u5b9e\u4f8b\u5316\u65f6\u4f20\u5165\u524d\u7f00 \u5b57\u7b26\u4e32 \u5373\u53ef.","title":"DetectPrefix"},{"location":"basic/base-parser/#_2","text":"\u4f5c\u4e3a Decorator , \u4f60\u5e94\u8be5\u653e\u5230 broadcast.receiver / ListenerSchema \u7684 decorators \u53c2\u6570\u5217\u8868\u91cc. @broadcast . receiver ( ... , decorators = [ DetectPrefix ( '/' )]) def on_message ( chain : MessageChain ): # chain \u5fc5\u5b9a\u4ee5 \"/\" \u6253\u5934 ... \u6216\u8005\u4e5f\u53ef\u4ee5\u8fd9\u6837: async def foo_func ( chain : MessageChain = DetectPrefix ( \".Test\" )): # \u4ee5\u8fd9\u79cd\u5f62\u5f0f\u4f7f\u7528, \u53d1\u9001\u7684\u6d88\u606f\u4ee5 \".Test\" \u6253\u5934, \u4f46\u6536\u5230\u65f6\u4f1a\u88ab\u53bb\u9664 ... # \".TestSomething\" -> \"Something\" \u8fd9\u4f1a\u81ea\u52a8\u53bb\u6389\u524d\u7f00. \u4f46\u662f\u4e0d\u4f1a\u6539\u52a8 Quote \u4e0e Source \u7b49\u5143\u6570\u636e\u5143\u7d20.","title":"\u4f7f\u7528"},{"location":"basic/base-parser/#detectsuffix","text":"\u987e\u540d\u601d\u4e49, \u68c0\u6d4b\u540e\u7f00. \u5b9e\u4f8b\u5316\u65f6\u4f20\u5165\u540e\u7f00 \u5b57\u7b26\u4e32 \u5373\u53ef.","title":"DetectSuffix"},{"location":"basic/base-parser/#_3","text":"\u4f5c\u4e3a Decorator , \u653e\u5230 broadcast.receiver / ListenerSchema \u7684 decorators . @broadcast . receiver ( ... , decorators = [ DetectSuffix ( '\u542f\u52a8' )]) def on_message ( chain : MessageChain ): # chain \u5fc5\u5b9a\u4ee5 \"\u542f\u52a8\" \u7ed3\u5c3e ... \u6216\u8005\u4e5f\u53ef\u4ee5\u8fd9\u6837: async def foo_func ( chain : MessageChain = DetectSuffix ( \"Suffix\" )): # \u4ee5\u8fd9\u79cd\u5f62\u5f0f\u4f7f\u7528, \u53d1\u9001\u7684\u6d88\u606f\u4ee5 \"suffix\" \u7ed3\u5c3e, \u4f46\u6536\u5230\u65f6\u4f1a\u88ab\u53bb\u9664 ... # \"TestSuffix\" -> \"Test\" \u8fd9\u4f1a\u81ea\u52a8\u53bb\u6389\u540e\u7f00. \u4f46\u662f\u4e0d\u4f1a\u6539\u52a8 Quote \u4e0e Source \u7b49\u5143\u6570\u636e\u5143\u7d20.","title":"\u4f7f\u7528"},{"location":"basic/base-parser/#mentionme","text":"\u68c0\u6d4b\u5728\u804a\u5929\u4e2d\u63d0\u5230 Bot (At Bot \u6216\u4ee5 Bot \u7fa4\u6635\u79f0/\u81ea\u5df1\u540d\u79f0 \u6253\u5934).","title":"MentionMe"},{"location":"basic/base-parser/#_4","text":"Decorator : \u653e\u5230 broadcast.receiver / ListenerSchema \u7684 decorators . @broadcast . receiver ( ... , decorators = [ MentionMe ()]) # \u6ce8\u610f\u8981\u5b9e\u4f8b\u5316 async def on_mention_me ( chain : MessageChain ): # \u4e0d\u4f1a\u6539\u52a8\u6d88\u606f\u94fe ...","title":"\u4f7f\u7528"},{"location":"basic/base-parser/#mention","text":"\u68c0\u6d4b\u5728\u804a\u5929\u4e2d\u63d0\u5230\u6307\u5b9a\u7684\u4eba (At \u6307\u5b9a\u7684\u4eba \u6216\u4ee5 \u6307\u5b9a\u7684\u4eba \u7fa4\u6635\u79f0/\u540d\u79f0\u6253\u5934).","title":"Mention"},{"location":"basic/base-parser/#_5","text":"Decorator : \u653e\u5230 broadcast.receiver / ListenerSchema \u7684 decorators . \u540c\u65f6\u4f60\u9700\u8981\u4e3a\u5176\u63d0\u4f9b target \u53c2\u6570. @broadcast . receiver ( ... , decorators = [ Mention ( target =... )]) # target: int | str # int: \u7528\u6237 QQ \u53f7, str: \u7528\u6237\u7684\u540d\u5b57 async def on_mention ( chain : MessageChain ): # \u4e0d\u4f1a\u6539\u52a8\u6d88\u606f\u94fe ...","title":"\u4f7f\u7528"},{"location":"basic/base-parser/#containkeyword","text":"\u68c0\u6d4b\u6d88\u606f\u94fe\u662f\u5426\u5305\u542b\u6307\u5b9a\u5173\u952e\u5b57.","title":"ContainKeyword"},{"location":"basic/base-parser/#_6","text":"Decorator : \u653e\u5165 broadcast.receiver / ListenerSchema \u7684 decorators . \u540c\u65f6\u4f60\u9700\u8981\u4e3a\u5176\u63d0\u4f9b keyword \u53c2\u6570. @broadcast . receiver ( ... , decorators = [ ContainKeyword ( keyword =... )]) # keyword: str async def on_contain_keyword ( chain : MessageChain ): # \u4e0d\u4f1a\u6539\u52a8\u6d88\u606f\u94fe ...","title":"\u4f7f\u7528"},{"location":"basic/base-parser/#matchcontent","text":"\u68c0\u6d4b\u6d88\u606f\u94fe\u662f\u5426\u4e0e\u5bf9\u5e94\u6d88\u606f\u94fe\u76f8\u7b49. \u6ce8\u610f Image \u7b49\u5143\u7d20\u7684\u7279\u6b8a\u5bf9\u6bd4\u89c4\u5219","title":"MatchContent"},{"location":"basic/base-parser/#_7","text":"Decorator : \u653e\u5165 broadcast.receiver / ListenerSchema \u7684 decorators . @broadcast . receiver ( ... , decorators = [ MatchContent ( content =... )]) # content: str | MessageChain # \u5f53 content \u4e3a str \u65f6, \u5c06\u4f1a\u4e0eMessageChain.asDisplay()\u8fdb\u884c\u6bd4\u8f83, \u5f53 content \u4e3a MessageChain \u65f6, \u5c06\u4f1a\u4e0e MessageChain \u8fdb\u884c\u6bd4\u8f83 async def on_match_content ( chain : MessageChain ): # \u4e0d\u4f1a\u6539\u52a8\u6d88\u606f\u94fe ...","title":"\u4f7f\u7528"},{"location":"basic/base-parser/#matchregex","text":"\u68c0\u6d4b\u6d88\u606f\u94fe\u662f\u5426\u5339\u914d\u6307\u5b9a\u6b63\u5219\u8868\u8fbe\u5f0f. \u6ce8\u610f [] \u7b49\u7279\u6b8a\u5b57\u7b26, \u56e0\u4e3a\u662f\u4f7f\u7528 MessageChain.asDisplay \u7ed3\u679c\u4f5c\u4e3a\u5339\u914d\u6e90\u7684.","title":"MatchRegex"},{"location":"basic/base-parser/#_8","text":"Decorator : \u653e\u5165 broadcast.receiver / ListenerSchema \u7684 decorators . @broadcast . receiver ( ... , decorators = [ MatchRegex ( regex = r \"\\d+\" )]) # regex \u53c2\u6570\u4e3a regex \u8868\u8fbe\u5f0f async def on_match_regex ( chain : MessageChain ): # \u4e0d\u4f1a\u6539\u52a8\u6d88\u606f\u94fe ...","title":"\u4f7f\u7528"},{"location":"basic/base-parser/#matchtemplate","text":"\u68c0\u6d4b\u6d88\u606f\u94fe\u662f\u5426\u5339\u914d\u6307\u5b9a\u6a21\u677f. \u9047\u5230\u5143\u7d20\u5b9e\u4f8b\u5219\u68c0\u6d4b\u662f\u5426\u76f8\u7b49\uff0c\u9047\u5230\u5143\u7d20\u7c7b\u578b\u5219\u68c0\u6d4b\u7c7b\u578b\u662f\u5426\u5339\u914d. Plain \u5b9e\u4f8b\u4e0e\u7c7b\u578b\u4f1a\u88ab\u81ea\u52a8\u62fc\u63a5\u8d77\u6765.","title":"MatchTemplate"},{"location":"basic/base-parser/#_9","text":"Decorator : \u653e\u5165 broadcast.receiver / ListenerSchema \u7684 decorators . @broadcast . receiver ( ... , decorators = [ MatchTemplate ([ Plain , Plain ( \"\u641c\u56fe\" ), Image ])]) # \u9700\u8981 \"*\u641c\u56fe [\u56fe\u7247]\" \u624d\u80fd\u5339\u914d (*\u4e3a\u4efb\u610f\u591a\u5b57\u7b26) async def on_match ( chain : MessageChain ): # \u4e0d\u4f1a\u6539\u52a8\u6d88\u606f\u94fe ...","title":"\u4f7f\u7528"},{"location":"basic/base-parser/#fuzzymatch","text":"\u6a21\u7cca\u5339\u914d\u5b57\u7b26\u4e32.","title":"FuzzyMatch"},{"location":"basic/base-parser/#_10","text":"Decorator : \u653e\u5165 broadcast.receiver / ListenerSchema \u7684 decorators . @broadcast . receiver ( ... , decorators = [ FuzzyMatch ( \"github\" ))]) # \u9ed8\u8ba4\u9608\u503c\u4e3a 60% \u76f8\u4f3c async def on_match ( chain : MessageChain ): # \u4e0d\u4f1a\u6539\u52a8\u6d88\u606f\u94fe ... \u6211\u4eec\u66f4\u63a8\u8350 FuzzyDispatcher, \u56e0\u4e3a\u5b83\u53ea\u5728\u591a\u4e2a\u5339\u914d\u4e2d\u9009\u62e9\u6700\u76f8\u8fd1\u7684\u4e00\u4e2a.","title":"\u4f7f\u7528"},{"location":"basic/base-parser/#fuzzydispatcher","text":"\u6a21\u7cca\u5339\u914d\u5b57\u7b26\u4e32.","title":"FuzzyDispatcher"},{"location":"basic/base-parser/#_11","text":"\u4f5c\u4e3a Dispatcher \u4f7f\u7528. \u5728\u76f8\u540c scope \u4e2d\u53ea\u6709\u6700\u76f8\u8fd1\u7684\u5339\u914d\u4f1a\u88ab\u6fc0\u6d3b. @broadcast . receiver ( ... , dispatchers = [ FuzzyDispatcher ( \"github\" ))]) # \u9ed8\u8ba4\u9608\u503c\u4e3a 60% \u76f8\u4f3c async def on_match ( chain : MessageChain , rate : float ): # \u82e5\u8981\u83b7\u53d6\u76f8\u4f3c\u5ea6\u5fc5\u987b\u5305\u542b \"rate\" \u5355\u8bcd ... @broadcast . receiver ( ... , dispatchers = [ FuzzyDispatcher ( \"gitlab\" ))]) # \u4e0e\u4e0a\u9762\u7684\u9ed8\u8ba4\u4e0d\u80fd\u540c\u65f6\u89e6\u53d1 async def on_match ( chain : MessageChain ): ... \u793e\u533a\u6587\u6863\u76f8\u5173\u7ae0\u8282: \u94fe\u63a5","title":"\u4f7f\u7528"},{"location":"basic/configuration/","text":"\u914d\u7f6e\u76f8\u5173 \ud83d\udd17 \u8fd9\u91cc\u662f Ariadne \u7684 __init__() \u7b7e\u540d: def __init__ ( self , connect_info : Union [ Adapter , MiraiSession ], * , loop : Optional [ AbstractEventLoop ] = None , broadcast : Optional [ Broadcast ] = None , max_retry : int = - 1 , chat_log_config : Optional [ Union [ ChatLogConfig , Literal [ False ]]] = None , use_loguru_traceback : Optional [ bool ] = True , use_bypass_listener : Optional [ bool ] = False , await_task : bool = False , disable_telemetry : bool = False , disable_logo : bool = False , ): chat_log_config \ud83d\udd17 \u8fd9\u4e2a\u90e8\u5206\u662f\u7528\u4e8e\u63a7\u5236 Ariadne \u7684 \u804a\u5929\u65e5\u5fd7\u7684. \u8bbe\u7f6e\u4e3a False \u5373\u53ef\u7981\u7528\u804a\u5929\u65e5\u5fd7\u8f93\u51fa. \u4f60\u53ef\u4ee5\u4ece graia.ariadne.model \u5bfc\u5165 ChatLogConfig , \u8fdb\u884c\u66f4\u7ec6\u81f4\u7684\u63a7\u5236. \u901a\u8fc7\u5bf9 ChatLogConfig \u4f20\u5165 log_level *_message_log_format \u53ef\u4ee5\u63a7\u5236\u804a\u5929\u65e5\u5fd7\u7684\u8bb0\u5f55\u7ea7\u522b\u4e0e\u65e5\u5fd7\u7684\u683c\u5f0f. \u5982\u679c\u4f60\u60f3\u63a7\u5236\u603b\u4f53\u65e5\u5fd7\u8f93\u51fa, \u8bf7\u770b \u8fd9\u91cc use_loguru_traceback \ud83d\udd17 Graia Framework \u9ed8\u8ba4\u4f7f\u7528 traceback \u4e2d\u7684 traceback.print_exc() \u51fd\u6570\u8f93\u51fa\u6267\u884c\u4e2d\u7684\u5f02\u5e38\u8ffd\u8e2a. \u4f46\u662f\u5176\u65e0\u6cd5\u76f4\u63a5\u8bb0\u5f55\u5f02\u5e38\u81f3\u65e5\u5fd7\u4e2d, \u4e14\u5f02\u5e38\u56de\u6eaf\u6709\u65f6\u5019\u5e76\u4e0d\u76f4\u89c2, \u5bfc\u81f4\u96be\u4ee5\u8c03\u8bd5. \u8bbe\u7f6e use_loguru_traceback \u540e, Ariadne \u4f1a\u8c03\u7528 util.inject_loguru_traceback() \u66ff\u6362 traceback.print_exception() \u4e0e sys.excepthook() \u4ece\u800c\u83b7\u5f97\u5bf9\u5f02\u5e38\u8f93\u51fa\u7684\u5b8c\u5168\u63a7\u5236\u6743. use_bypass_listener \ud83d\udd17 \u4ee5\u4e0b\u4ee3\u7801\u5728 Graia Broadcast \u7684\u6b63\u5e38\u6d41\u7a0b\u4e2d\u4e0d\u80fd\u6b63\u5e38\u8fd0\u4f5c, \u56e0\u4e3a\u5176\u9ed8\u8ba4\u4e8b\u4ef6\u5206\u53d1\u5668\u53ea\u652f\u6301\u539f\u4e8b\u4ef6 ( listening_event is posted_event : @broadcast . receiver ( MessageEvent ) async def reply ( app : Ariadne , event : MessageEvent ): await app . sendMessage ( event , MessageChain . create ( \"Hello!\" )) \u8bbe\u7f6e use_bypass_listener \u540e, Ariadne \u4f1a\u901a\u8fc7 inject_bypass_listener \u652f\u6301\u5b50\u4e8b\u4ef6\u89e3\u6790 (\u4e8b\u4ef6\u900f\u4f20). max_retry \ud83d\udd17 Ariadne \u9ed8\u8ba4\u4f1a\u5c1d\u8bd5\u65e0\u9650\u91cd\u542f Adapter , \u8bbe\u7f6e max_retry \u53ef\u4ee5\u786e\u4fdd\u5728 \u8fde\u7eed\u81f3\u5c11 max_retry \u6b21\u8fde\u63a5\u5931\u8d25\u540e\u81ea\u52a8\u9000\u51fa daemon (\u524d\u63d0\u662f\u4f60\u4f7f\u7528 Ariadne.lifecycle() ) disable_telemetry \ud83d\udd17 \u8bbe\u7f6e\u4e3a True \u540e\u5373\u4f1a\u7981\u7528\u542f\u52a8\u65f6\u7684\u7248\u672c\u68c0\u6d4b. \u9ed8\u8ba4\u4f1a\u68c0\u67e5\u6765\u81ea graia \u4e0e graiax \u7684\u5305. disable_logo \ud83d\udd17 \u8bbe\u7f6e\u4e3a True \u540e\u5373\u4f1a\u7981\u7528\u542f\u52a8\u65f6\u7684 logo \u6253\u5370. Logo _ _ /\\ (_) | | / \\ _ __ _ __ _ __| |_ __ ___ / /\\ \\ | '__| |/ _` |/ _` | '_ \\ / _ \\ / ____ \\| | | | (_| | (_| | | | | __/ /_/ \\_\\_| |_|\\__,_|\\__,_|_| |_|\\___|","title":"\u914d\u7f6e"},{"location":"basic/configuration/#_1","text":"\u8fd9\u91cc\u662f Ariadne \u7684 __init__() \u7b7e\u540d: def __init__ ( self , connect_info : Union [ Adapter , MiraiSession ], * , loop : Optional [ AbstractEventLoop ] = None , broadcast : Optional [ Broadcast ] = None , max_retry : int = - 1 , chat_log_config : Optional [ Union [ ChatLogConfig , Literal [ False ]]] = None , use_loguru_traceback : Optional [ bool ] = True , use_bypass_listener : Optional [ bool ] = False , await_task : bool = False , disable_telemetry : bool = False , disable_logo : bool = False , ):","title":"\u914d\u7f6e\u76f8\u5173"},{"location":"basic/configuration/#chat_log_config","text":"\u8fd9\u4e2a\u90e8\u5206\u662f\u7528\u4e8e\u63a7\u5236 Ariadne \u7684 \u804a\u5929\u65e5\u5fd7\u7684. \u8bbe\u7f6e\u4e3a False \u5373\u53ef\u7981\u7528\u804a\u5929\u65e5\u5fd7\u8f93\u51fa. \u4f60\u53ef\u4ee5\u4ece graia.ariadne.model \u5bfc\u5165 ChatLogConfig , \u8fdb\u884c\u66f4\u7ec6\u81f4\u7684\u63a7\u5236. \u901a\u8fc7\u5bf9 ChatLogConfig \u4f20\u5165 log_level *_message_log_format \u53ef\u4ee5\u63a7\u5236\u804a\u5929\u65e5\u5fd7\u7684\u8bb0\u5f55\u7ea7\u522b\u4e0e\u65e5\u5fd7\u7684\u683c\u5f0f. \u5982\u679c\u4f60\u60f3\u63a7\u5236\u603b\u4f53\u65e5\u5fd7\u8f93\u51fa, \u8bf7\u770b \u8fd9\u91cc","title":"chat_log_config"},{"location":"basic/configuration/#use_loguru_traceback","text":"Graia Framework \u9ed8\u8ba4\u4f7f\u7528 traceback \u4e2d\u7684 traceback.print_exc() \u51fd\u6570\u8f93\u51fa\u6267\u884c\u4e2d\u7684\u5f02\u5e38\u8ffd\u8e2a. \u4f46\u662f\u5176\u65e0\u6cd5\u76f4\u63a5\u8bb0\u5f55\u5f02\u5e38\u81f3\u65e5\u5fd7\u4e2d, \u4e14\u5f02\u5e38\u56de\u6eaf\u6709\u65f6\u5019\u5e76\u4e0d\u76f4\u89c2, \u5bfc\u81f4\u96be\u4ee5\u8c03\u8bd5. \u8bbe\u7f6e use_loguru_traceback \u540e, Ariadne \u4f1a\u8c03\u7528 util.inject_loguru_traceback() \u66ff\u6362 traceback.print_exception() \u4e0e sys.excepthook() \u4ece\u800c\u83b7\u5f97\u5bf9\u5f02\u5e38\u8f93\u51fa\u7684\u5b8c\u5168\u63a7\u5236\u6743.","title":"use_loguru_traceback"},{"location":"basic/configuration/#use_bypass_listener","text":"\u4ee5\u4e0b\u4ee3\u7801\u5728 Graia Broadcast \u7684\u6b63\u5e38\u6d41\u7a0b\u4e2d\u4e0d\u80fd\u6b63\u5e38\u8fd0\u4f5c, \u56e0\u4e3a\u5176\u9ed8\u8ba4\u4e8b\u4ef6\u5206\u53d1\u5668\u53ea\u652f\u6301\u539f\u4e8b\u4ef6 ( listening_event is posted_event : @broadcast . receiver ( MessageEvent ) async def reply ( app : Ariadne , event : MessageEvent ): await app . sendMessage ( event , MessageChain . create ( \"Hello!\" )) \u8bbe\u7f6e use_bypass_listener \u540e, Ariadne \u4f1a\u901a\u8fc7 inject_bypass_listener \u652f\u6301\u5b50\u4e8b\u4ef6\u89e3\u6790 (\u4e8b\u4ef6\u900f\u4f20).","title":"use_bypass_listener"},{"location":"basic/configuration/#max_retry","text":"Ariadne \u9ed8\u8ba4\u4f1a\u5c1d\u8bd5\u65e0\u9650\u91cd\u542f Adapter , \u8bbe\u7f6e max_retry \u53ef\u4ee5\u786e\u4fdd\u5728 \u8fde\u7eed\u81f3\u5c11 max_retry \u6b21\u8fde\u63a5\u5931\u8d25\u540e\u81ea\u52a8\u9000\u51fa daemon (\u524d\u63d0\u662f\u4f60\u4f7f\u7528 Ariadne.lifecycle() )","title":"max_retry"},{"location":"basic/configuration/#disable_telemetry","text":"\u8bbe\u7f6e\u4e3a True \u540e\u5373\u4f1a\u7981\u7528\u542f\u52a8\u65f6\u7684\u7248\u672c\u68c0\u6d4b. \u9ed8\u8ba4\u4f1a\u68c0\u67e5\u6765\u81ea graia \u4e0e graiax \u7684\u5305.","title":"disable_telemetry"},{"location":"basic/configuration/#disable_logo","text":"\u8bbe\u7f6e\u4e3a True \u540e\u5373\u4f1a\u7981\u7528\u542f\u52a8\u65f6\u7684 logo \u6253\u5370. Logo _ _ /\\ (_) | | / \\ _ __ _ __ _ __| |_ __ ___ / /\\ \\ | '__| |/ _` |/ _` | '_ \\ / _ \\ / ____ \\| | | | (_| | (_| | | | | __/ /_/ \\_\\_| |_|\\__,_|\\__,_|_| |_|\\___|","title":"disable_logo"},{"location":"basic/msg-chain/","text":"\u6d88\u606f\u94fe: \u57fa\u7840 \ud83d\udd17 \u4e3a\u4ec0\u4e48\u662f\u6d88\u606f\u94fe? \ud83d\udd17 QQ \u6d88\u606f\u5e76\u4e0d\u53ea\u662f\u7eaf\u6587\u672c, \u4e5f\u4e0d\u53ea\u662f\u5355\u4e00\u7c7b\u578b\u7684\u6d88\u606f. \u6587\u672c\u4e2d\u53ef\u4ee5\u5939\u6742\u7740\u56fe\u7247, At \u67d0\u4eba\u7b49\u591a\u79cd\u7c7b\u578b\u7684\u6d88\u606f. mirai \u4e3a\u4e86\u5904\u7406\u5bcc\u6587\u672c\u6d88\u606f, \u91c7\u7528\u4e86\u6d88\u606f\u94fe (Message Chain)\u8fd9\u4e00\u65b9\u5f0f. \u6d88\u606f\u94fe\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u7cfb\u5217\u5143\u7d20 (Element) \u6784\u6210\u7684\u5217\u8868. \u6d88\u606f\u7ec4\u4ef6\u8868\u793a\u6d88\u606f\u4e2d\u7684\u4e00\u90e8\u5206, \u6bd4\u5982\u7eaf\u6587\u672c Plain , At \u67d0\u4eba At \u7b49\u7b49. \u5173\u4e8e\u53ef\u7528\u7684\u5143\u7d20, \u53c2\u770b API \u6587\u6863 . \u6d88\u606f\u94fe\u7528\u6cd5 \ud83d\udd17 \u6784\u9020\u6d88\u606f\u94fe \ud83d\udd17 \u6784\u9020\u6d88\u606f\u94fe\u65f6, \u5efa\u8bae\u91c7\u7528 MessageChain.create() . \u652f\u6301\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u6784\u9020. \u57fa\u7840 \u4f7f\u7528 str \u4ee3\u66ff Plain \u7701\u7565 [ ] message_chain = MessageChain . create ([ AtAll (), Plain ( \"Hello World!\" )]) message_chain = MessageChain . create ([ AtAll (), \"Hello World!\" ]) message_chain = MessageChain . create ( AtAll (), \"Hello World!\" ) \u6d88\u606f\u94fe\u7684\u5b57\u7b26\u4e32\u8868\u793a \ud83d\udd17 \u4f7f\u7528 message_chain.asDisplay() \u83b7\u53d6\u6d88\u606f\u94fe\u7684\u5b57\u7b26\u4e32\u8868\u793a.\u5b57\u7b26\u4e32\u8868\u793a\u7684\u683c\u5f0f\u7c7b\u4f3c\u4e8e\u624b\u673a QQ \u5728\u901a\u77e5\u680f\u6d88\u606f\u4e2d\u7684\u683c\u5f0f, \u4f8b\u5982\u56fe\u7247\u4f1a\u88ab\u8f6c\u5316\u4e3a [\u56fe\u7247] , \u7b49\u7b49. \u6d88\u606f\u94fe\u6301\u4e45\u5316 \ud83d\udd17 \u4f7f\u7528 message_chain.asPersistentString() \u548c MessageChain.fromPersistentString() \u53ef\u4ee5\u5c3d\u91cf\u65e0\u635f\u5730\u6301\u4e45\u5316\u4e0e\u6062\u590d\u6d88\u606f\u94fe, \u4f7f\u7528 binary=True \u53ef\u4ee5\u4fdd\u5b58\u56fe\u7247\u7b49\u591a\u5a92\u4f53\u5143\u7d20\u7684\u4e8c\u8fdb\u5236\u6570\u636e. \u63d0\u793a \u5982\u679c\u8981\u6301\u4e45\u5316\u4e8c\u8fdb\u5236\u6570\u636e, \u53ef\u4ee5\u5148\u8c03\u7528 message_chain.download_binary() . \u904d\u5386 \ud83d\udd17 \u53ef\u4ee5\u4f7f\u7528 for \u5faa\u73af\u904d\u5386\u6d88\u606f\u94fe\u4e2d\u7684\u6d88\u606f\u7ec4\u4ef6. for element in message_chain : ... \u6bd4\u8f83 \ud83d\udd17 \u53ef\u4ee5\u4f7f\u7528 == \u8fd0\u7b97\u7b26\u6bd4\u8f83\u4e24\u4e2a\u6d88\u606f\u94fe\u662f\u5426\u76f8\u540c. another_msg_chain = MessageChain ([ AtAll (), Plain ( \"Hello World!\" )]) assert message_chain == another_msg_chain \u68c0\u67e5\u5b50\u94fe \ud83d\udd17 \u53ef\u4ee5\u4f7f\u7528 in \u8fd0\u7b97\u68c0\u67e5\u6d88\u606f\u94fe\u4e2d\uff1a \u662f\u5426\u6709\u67d0\u4e2a\u6d88\u606f\u7ec4\u4ef6. \u662f\u5426\u6709\u67d0\u4e2a\u7c7b\u578b\u7684\u6d88\u606f\u7ec4\u4ef6. \u662f\u5426\u6709\u67d0\u5b50\u5b57\u7b26\u4e32. \u662f\u5426\u6709\u67d0\u4e2a\u6d88\u606f\u94fe. (From 0.4.2 ) AtAll in message_chain At ( app . account ) in message_chain 'Hello' in message_chain MessageChain ([ AtAll (), \"Hello World!\" ]) in message_chain \u6d88\u606f\u94fe\u7684 has \u65b9\u6cd5\u548c in \u7b49\u4ef7. \u4f60\u53ef\u4ee5\u4f7f\u7528 onlyContains \u65b9\u6cd5\u68c0\u67e5\u6d88\u606f\u94fe\u662f\u5426\u53ea\u6709\u67d0\u4e9b\u5143\u7d20\u7c7b\u578b. \u8fd8\u53ef\u4ee5\u4f7f\u7528 find_subchain \u65b9\u6cd5\u5bfb\u627e\u53ef\u80fd\u7684\u6d88\u606f\u94fe\u5b50\u94fe\u8d77\u59cb\u70b9. assert message_chain . findSubChain ( MessageChain ([ \"Hello\" ])) == [ 0 ] \u7d22\u5f15\u4e0e\u5207\u7247 \ud83d\udd17 \u6d88\u606f\u94fe\u5bf9\u7d22\u5f15\u64cd\u4f5c\u8fdb\u884c\u4e86\u589e\u5f3a.\u4ee5\u5143\u7d20\u7c7b\u578b\u4e3a\u7d22\u5f15, \u83b7\u53d6\u6d88\u606f\u94fe\u4e2d\u7684\u5168\u90e8\u8be5\u7c7b\u578b\u7684\u6d88\u606f\u7ec4\u4ef6. assert message_chain [ Plain ] == [ Plain ( \"Hello World!\" )] \u4ee5 \u7c7b\u578b, \u6570\u91cf \u4e3a\u7d22\u5f15, \u83b7\u53d6\u524d \u81f3\u591a \u591a\u5c11\u4e2a\u8be5\u7c7b\u578b\u7684\u5143\u7d20. assert message_chain [ Plain , 1 ] == [ Plain ( \"Hello World!\" )] \u4ee5 \u4e0b\u6807 \u4e3a\u7d22\u5f15, \u83b7\u53d6\u5bf9\u5e94\u4e0b\u6807\u7684\u5143\u7d20. assert message_chain [ 0 ] == Plain ( \"Hello World!\" ) \u4ee5 \u5207\u7247\u5bf9\u8c61 \u4e3a\u7d22\u5f15, \u76f8\u5f53\u4e8e\u8c03\u7528 message_chain.subchain() . \u6ce8\u610f \u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u5728 \u8fdb\u9636 \u7bc7\u4e2d\u7ec6\u8bb2. \u6d88\u606f\u94fe\u7684 get \u65b9\u6cd5\u548c\u7d22\u5f15\u64cd\u4f5c\u7b49\u4ef7. assert message_chain . get ( Plain ) == [ Plain ( \"Hello World!\" )] \u6d88\u606f\u94fe\u7684 get \u65b9\u6cd5\u53ef\u6307\u5b9a\u7b2c\u4e8c\u4e2a\u53c2\u6570 count , \u76f8\u5f53\u4e8e\u4ee5 \u7c7b\u578b, \u6570\u91cf \u4e3a\u7d22\u5f15. assert message_chain . get ( Plain , 1 ) == message_chain [ Plain , 1 ] \u83b7\u53d6\u5143\u7d20 \ud83d\udd17 \u5728 MessageChain \u5bf9\u8c61\u4e0a, \u6709\u4ee5\u4e0b\u51e0\u79cd\u83b7\u53d6\u5143\u7d20\u7684\u65b9\u5f0f: getFirst(T_Element) \u83b7\u53d6\u7b2c\u4e00\u4e2a\u7c7b\u578b\u4e3a T_Element \u7684\u5143\u7d20. get(T_Element) \u83b7\u53d6\u6240\u6709\u7c7b\u578b\u4e3a T_Element \u7684\u5143\u7d20, \u805a\u5408\u4e3a\u5217\u8868. getOne(T_Element, index) \u83b7\u53d6\u7b2c index \u4e2a\u7c7b\u578b\u4e3a T_Element \u7684\u5143\u7d20\u3002 get(T_Element, count) \u83b7\u53d6\u524d count \u4e2a\u7c7b\u578b\u4e3a T_element \u7684\u5143\u7d20, \u805a\u5408\u4e3a\u5217\u8868. \u8fde\u63a5\u4e0e\u590d\u5236 \ud83d\udd17 \u53ef\u4ee5\u7528 + \u8fde\u63a5\u4e24\u4e2a\u6d88\u606f\u94fe, \u7528 * \u590d\u5236\u6d88\u606f\u94fe. assert MessageChain ([ 'Hello World!' ]) + MessageChain ([ 'Goodbye World!' ]) == MessageChain ([ Plain ( \"Hello World!\" ), Plain ( \"Goodbye World!\" )]) assert MessageChain ([ 'Hello World!' ]) * 2 == MessageChain ([ Plain ( \"Hello World!\" ), Plain ( \"Hello World!\" )]) \u5176\u4ed6 \ud83d\udd17 \u9664\u6b64\u4e4b\u5916, \u6d88\u606f\u94fe\u8fd8\u652f\u6301\u5f88\u591a list \u62e5\u6709\u7684\u64cd\u4f5c, \u6bd4\u5982 index \u548c count . message_chain = MessageChain ([ AtAll (), \"Hello World!\" ]) assert message_chain . index ( Plain ) == 0 assert message_chain . count ( Plain ) == 1 \u8fd8\u6709\u7ee7\u627f\u4e8e str \u7684 startswith , endswith , removeprefix , removesuffix , replace \u65b9\u6cd5, \u5c06\u5728 \u8fdb\u9636\u7bc7 \u4e2d\u8bb2\u5230. \u591a\u5a92\u4f53\u5143\u7d20 \ud83d\udd17 \u76f8\u4fe1\u4f60\u5728 docstring \u4e0e\u51fd\u6570\u7b7e\u540d\u7684\u8f85\u52a9\u4e0b, \u80fd\u591f\u5f88\u5feb\u638c\u63e1 Plain At AtAll \u4e09\u79cd\u5143\u7d20\u7c7b\u578b. \u63a5\u4e0b\u6765\u5c06\u4ecb\u7ecd\u7ee7\u627f\u81ea MultimediaElement \u7684\u591a\u5a92\u4f53\u5143\u7d20: Image FlashImage Voice . \u5b9e\u4f8b\u5316 \ud83d\udd17 \u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u81ea\u884c\u5b9e\u4f8b\u5316\u591a\u5a92\u4f53\u5143\u7d20: \u4ece Mirai API HTTP \u7f13\u5b58\u7684\u56fe\u7247\u6784\u9020: \u4f20\u5165\u5b8c\u6574 id (\u4e0d\u662f uuid) \u4ece\u7f51\u7edc\u56fe\u7247\u6784\u9020: \u4f20\u5165 url \u4ece bytes \u5b57\u8282\u5bf9\u8c61\u6784\u9020: \u901a\u8fc7 data_bytes \u4f20\u5165 bytes \u5305\u88c5\u7684\u4e8c\u8fdb\u5236\u6570\u636e. \u4ece base64 \u5b57\u7b26\u4e32\u6784\u9020: \u4f20\u5165 base64 \u4f5c\u4e3a\u4e8c\u8fdb\u5236\u5b58\u50a8. \u4ece\u672c\u5730\u6587\u4ef6\u6784\u9020: \u4f20\u5165 path \u5e76\u4ee5 \u5f53\u524d\u5de5\u4f5c\u76ee\u5f55 \u8bfb\u5165\u4e8c\u8fdb\u5236\u6570\u636e. \u63d0\u793a: \u4f20\u5165\u7684 path \u4f1a\u81ea\u52a8\u88ab\u7acb\u5373\u63d0\u53d6\u51fa\u4e8c\u8fdb\u5236\u6570\u636e. \u6240\u4ee5\u4e0d\u8981\u60f3\u7740\u5148\u4f20 path \u518d\u5199\u6587\u4ef6. \u83b7\u53d6\u4e8c\u8fdb\u5236 \ud83d\udd17 \u4f60\u53ef\u4ee5\u901a\u8fc7 get_bytes() \u5f02\u6b65\u65b9\u6cd5\u83b7\u53d6\u591a\u5a92\u4f53\u5143\u7d20\u7684\u4e8c\u8fdb\u5236\u6570\u636e. \u63d0\u793a \u901a\u8fc7 base64 \u5b58\u50a8\u7684\u591a\u5a92\u4f53\u5143\u7d20\u4e5f\u53ef\u901a\u8fc7\u672c\u65b9\u6cd5\u53d6\u51fa\u4e8c\u8fdb\u5236\u6570\u636e. \u7f51\u7edc\u56fe\u7247\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u4f1a\u5728\u4e0b\u8f7d\u540e\u88ab\u5b58\u50a8\u4e8e base64 \u5c5e\u6027\u5185\u4f5c\u4e3a\u7f13\u5b58. \u56fe\u7247\u7c7b\u578b\u8f6c\u6362 \ud83d\udd17 \u53ef\u4ee5\u901a\u8fc7\u5bf9 FlashImage \u4e0e Image \u5b9e\u4f8b \u4f7f\u7528 toImage fromImage toFlashImage fromFlashImage \u65b9\u6cd5\u8fdb\u884c\u4e24\u79cd\u56fe\u7247\u7c7b\u578b\u8f6c\u6362. \u7b49\u4ef7\u6027\u6bd4\u8f83 \ud83d\udd17 \u591a\u5a92\u4f53\u5143\u7d20\u4e4b\u95f4\u7684\u76f8\u7b49\u6bd4\u8f83\u9700\u8981\u4ee5\u4e0b\u6761\u4ef6: \u7c7b\u578b\u76f8\u540c (\u4e5f\u5c31\u662f\u8bf4 Image \u4e0e FlashImage \u5fc5\u5b9a\u4e0d\u7b49 ) \u4ee5\u4e0b\u5c5e\u6027\u4e2d\u4efb\u610f\u4e00\u4e2a\u76f8\u7b49 base64 (data_bytes) uuid (\u5254\u9664\u4e86 \"/\" \"{}\" \u7b49\u7528\u4e8e\u533a\u5206\u56fe\u7247\u7c7b\u578b\u7684\u7b26\u53f7\u540e\u5f97\u5230) url \u793e\u533a\u6587\u6863\u76f8\u5173\u7ae0\u8282 \u603b\u89c8 \u591a\u5a92\u4f53\u5143\u7d20 \u6587\u4ef6\u53d1\u9001 \u5408\u5e76\u8f6c\u53d1 \u5982\u679c\u4f60\u53ea\u662f\u60f3\u5bf9 Ariadne \u6709\u4e2a\u7c97\u7565\u7684\u4e86\u89e3, \u5e76\u7740\u624b\u5f00\u59cb\u7f16\u5199\u81ea\u5df1\u7684 QQ bot, \u76f8\u4fe1\u8fd9\u4e9b\u77e5\u8bc6\u5df2\u7ecf\u8db3\u591f. \u5982\u679c\u4f60\u60f3\u8fdb\u4e00\u6b65\u6316\u6398 Ariadne \u7684 MessageChain \u7279\u6027, \u8bf7\u770b \u8fdb\u9636\u7bc7 .","title":"\u6d88\u606f\u94fe"},{"location":"basic/msg-chain/#_1","text":"","title":"\u6d88\u606f\u94fe: \u57fa\u7840"},{"location":"basic/msg-chain/#_2","text":"QQ \u6d88\u606f\u5e76\u4e0d\u53ea\u662f\u7eaf\u6587\u672c, \u4e5f\u4e0d\u53ea\u662f\u5355\u4e00\u7c7b\u578b\u7684\u6d88\u606f. \u6587\u672c\u4e2d\u53ef\u4ee5\u5939\u6742\u7740\u56fe\u7247, At \u67d0\u4eba\u7b49\u591a\u79cd\u7c7b\u578b\u7684\u6d88\u606f. mirai \u4e3a\u4e86\u5904\u7406\u5bcc\u6587\u672c\u6d88\u606f, \u91c7\u7528\u4e86\u6d88\u606f\u94fe (Message Chain)\u8fd9\u4e00\u65b9\u5f0f. \u6d88\u606f\u94fe\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u7cfb\u5217\u5143\u7d20 (Element) \u6784\u6210\u7684\u5217\u8868. \u6d88\u606f\u7ec4\u4ef6\u8868\u793a\u6d88\u606f\u4e2d\u7684\u4e00\u90e8\u5206, \u6bd4\u5982\u7eaf\u6587\u672c Plain , At \u67d0\u4eba At \u7b49\u7b49. \u5173\u4e8e\u53ef\u7528\u7684\u5143\u7d20, \u53c2\u770b API \u6587\u6863 .","title":"\u4e3a\u4ec0\u4e48\u662f\u6d88\u606f\u94fe?"},{"location":"basic/msg-chain/#_3","text":"","title":"\u6d88\u606f\u94fe\u7528\u6cd5"},{"location":"basic/msg-chain/#_4","text":"\u6784\u9020\u6d88\u606f\u94fe\u65f6, \u5efa\u8bae\u91c7\u7528 MessageChain.create() . \u652f\u6301\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u6784\u9020. \u57fa\u7840 \u4f7f\u7528 str \u4ee3\u66ff Plain \u7701\u7565 [ ] message_chain = MessageChain . create ([ AtAll (), Plain ( \"Hello World!\" )]) message_chain = MessageChain . create ([ AtAll (), \"Hello World!\" ]) message_chain = MessageChain . create ( AtAll (), \"Hello World!\" )","title":"\u6784\u9020\u6d88\u606f\u94fe"},{"location":"basic/msg-chain/#_5","text":"\u4f7f\u7528 message_chain.asDisplay() \u83b7\u53d6\u6d88\u606f\u94fe\u7684\u5b57\u7b26\u4e32\u8868\u793a.\u5b57\u7b26\u4e32\u8868\u793a\u7684\u683c\u5f0f\u7c7b\u4f3c\u4e8e\u624b\u673a QQ \u5728\u901a\u77e5\u680f\u6d88\u606f\u4e2d\u7684\u683c\u5f0f, \u4f8b\u5982\u56fe\u7247\u4f1a\u88ab\u8f6c\u5316\u4e3a [\u56fe\u7247] , \u7b49\u7b49.","title":"\u6d88\u606f\u94fe\u7684\u5b57\u7b26\u4e32\u8868\u793a"},{"location":"basic/msg-chain/#_6","text":"\u4f7f\u7528 message_chain.asPersistentString() \u548c MessageChain.fromPersistentString() \u53ef\u4ee5\u5c3d\u91cf\u65e0\u635f\u5730\u6301\u4e45\u5316\u4e0e\u6062\u590d\u6d88\u606f\u94fe, \u4f7f\u7528 binary=True \u53ef\u4ee5\u4fdd\u5b58\u56fe\u7247\u7b49\u591a\u5a92\u4f53\u5143\u7d20\u7684\u4e8c\u8fdb\u5236\u6570\u636e. \u63d0\u793a \u5982\u679c\u8981\u6301\u4e45\u5316\u4e8c\u8fdb\u5236\u6570\u636e, \u53ef\u4ee5\u5148\u8c03\u7528 message_chain.download_binary() .","title":"\u6d88\u606f\u94fe\u6301\u4e45\u5316"},{"location":"basic/msg-chain/#_7","text":"\u53ef\u4ee5\u4f7f\u7528 for \u5faa\u73af\u904d\u5386\u6d88\u606f\u94fe\u4e2d\u7684\u6d88\u606f\u7ec4\u4ef6. for element in message_chain : ...","title":"\u904d\u5386"},{"location":"basic/msg-chain/#_8","text":"\u53ef\u4ee5\u4f7f\u7528 == \u8fd0\u7b97\u7b26\u6bd4\u8f83\u4e24\u4e2a\u6d88\u606f\u94fe\u662f\u5426\u76f8\u540c. another_msg_chain = MessageChain ([ AtAll (), Plain ( \"Hello World!\" )]) assert message_chain == another_msg_chain","title":"\u6bd4\u8f83"},{"location":"basic/msg-chain/#_9","text":"\u53ef\u4ee5\u4f7f\u7528 in \u8fd0\u7b97\u68c0\u67e5\u6d88\u606f\u94fe\u4e2d\uff1a \u662f\u5426\u6709\u67d0\u4e2a\u6d88\u606f\u7ec4\u4ef6. \u662f\u5426\u6709\u67d0\u4e2a\u7c7b\u578b\u7684\u6d88\u606f\u7ec4\u4ef6. \u662f\u5426\u6709\u67d0\u5b50\u5b57\u7b26\u4e32. \u662f\u5426\u6709\u67d0\u4e2a\u6d88\u606f\u94fe. (From 0.4.2 ) AtAll in message_chain At ( app . account ) in message_chain 'Hello' in message_chain MessageChain ([ AtAll (), \"Hello World!\" ]) in message_chain \u6d88\u606f\u94fe\u7684 has \u65b9\u6cd5\u548c in \u7b49\u4ef7. \u4f60\u53ef\u4ee5\u4f7f\u7528 onlyContains \u65b9\u6cd5\u68c0\u67e5\u6d88\u606f\u94fe\u662f\u5426\u53ea\u6709\u67d0\u4e9b\u5143\u7d20\u7c7b\u578b. \u8fd8\u53ef\u4ee5\u4f7f\u7528 find_subchain \u65b9\u6cd5\u5bfb\u627e\u53ef\u80fd\u7684\u6d88\u606f\u94fe\u5b50\u94fe\u8d77\u59cb\u70b9. assert message_chain . findSubChain ( MessageChain ([ \"Hello\" ])) == [ 0 ]","title":"\u68c0\u67e5\u5b50\u94fe"},{"location":"basic/msg-chain/#_10","text":"\u6d88\u606f\u94fe\u5bf9\u7d22\u5f15\u64cd\u4f5c\u8fdb\u884c\u4e86\u589e\u5f3a.\u4ee5\u5143\u7d20\u7c7b\u578b\u4e3a\u7d22\u5f15, \u83b7\u53d6\u6d88\u606f\u94fe\u4e2d\u7684\u5168\u90e8\u8be5\u7c7b\u578b\u7684\u6d88\u606f\u7ec4\u4ef6. assert message_chain [ Plain ] == [ Plain ( \"Hello World!\" )] \u4ee5 \u7c7b\u578b, \u6570\u91cf \u4e3a\u7d22\u5f15, \u83b7\u53d6\u524d \u81f3\u591a \u591a\u5c11\u4e2a\u8be5\u7c7b\u578b\u7684\u5143\u7d20. assert message_chain [ Plain , 1 ] == [ Plain ( \"Hello World!\" )] \u4ee5 \u4e0b\u6807 \u4e3a\u7d22\u5f15, \u83b7\u53d6\u5bf9\u5e94\u4e0b\u6807\u7684\u5143\u7d20. assert message_chain [ 0 ] == Plain ( \"Hello World!\" ) \u4ee5 \u5207\u7247\u5bf9\u8c61 \u4e3a\u7d22\u5f15, \u76f8\u5f53\u4e8e\u8c03\u7528 message_chain.subchain() . \u6ce8\u610f \u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u5728 \u8fdb\u9636 \u7bc7\u4e2d\u7ec6\u8bb2. \u6d88\u606f\u94fe\u7684 get \u65b9\u6cd5\u548c\u7d22\u5f15\u64cd\u4f5c\u7b49\u4ef7. assert message_chain . get ( Plain ) == [ Plain ( \"Hello World!\" )] \u6d88\u606f\u94fe\u7684 get \u65b9\u6cd5\u53ef\u6307\u5b9a\u7b2c\u4e8c\u4e2a\u53c2\u6570 count , \u76f8\u5f53\u4e8e\u4ee5 \u7c7b\u578b, \u6570\u91cf \u4e3a\u7d22\u5f15. assert message_chain . get ( Plain , 1 ) == message_chain [ Plain , 1 ]","title":"\u7d22\u5f15\u4e0e\u5207\u7247"},{"location":"basic/msg-chain/#_11","text":"\u5728 MessageChain \u5bf9\u8c61\u4e0a, \u6709\u4ee5\u4e0b\u51e0\u79cd\u83b7\u53d6\u5143\u7d20\u7684\u65b9\u5f0f: getFirst(T_Element) \u83b7\u53d6\u7b2c\u4e00\u4e2a\u7c7b\u578b\u4e3a T_Element \u7684\u5143\u7d20. get(T_Element) \u83b7\u53d6\u6240\u6709\u7c7b\u578b\u4e3a T_Element \u7684\u5143\u7d20, \u805a\u5408\u4e3a\u5217\u8868. getOne(T_Element, index) \u83b7\u53d6\u7b2c index \u4e2a\u7c7b\u578b\u4e3a T_Element \u7684\u5143\u7d20\u3002 get(T_Element, count) \u83b7\u53d6\u524d count \u4e2a\u7c7b\u578b\u4e3a T_element \u7684\u5143\u7d20, \u805a\u5408\u4e3a\u5217\u8868.","title":"\u83b7\u53d6\u5143\u7d20"},{"location":"basic/msg-chain/#_12","text":"\u53ef\u4ee5\u7528 + \u8fde\u63a5\u4e24\u4e2a\u6d88\u606f\u94fe, \u7528 * \u590d\u5236\u6d88\u606f\u94fe. assert MessageChain ([ 'Hello World!' ]) + MessageChain ([ 'Goodbye World!' ]) == MessageChain ([ Plain ( \"Hello World!\" ), Plain ( \"Goodbye World!\" )]) assert MessageChain ([ 'Hello World!' ]) * 2 == MessageChain ([ Plain ( \"Hello World!\" ), Plain ( \"Hello World!\" )])","title":"\u8fde\u63a5\u4e0e\u590d\u5236"},{"location":"basic/msg-chain/#_13","text":"\u9664\u6b64\u4e4b\u5916, \u6d88\u606f\u94fe\u8fd8\u652f\u6301\u5f88\u591a list \u62e5\u6709\u7684\u64cd\u4f5c, \u6bd4\u5982 index \u548c count . message_chain = MessageChain ([ AtAll (), \"Hello World!\" ]) assert message_chain . index ( Plain ) == 0 assert message_chain . count ( Plain ) == 1 \u8fd8\u6709\u7ee7\u627f\u4e8e str \u7684 startswith , endswith , removeprefix , removesuffix , replace \u65b9\u6cd5, \u5c06\u5728 \u8fdb\u9636\u7bc7 \u4e2d\u8bb2\u5230.","title":"\u5176\u4ed6"},{"location":"basic/msg-chain/#_14","text":"\u76f8\u4fe1\u4f60\u5728 docstring \u4e0e\u51fd\u6570\u7b7e\u540d\u7684\u8f85\u52a9\u4e0b, \u80fd\u591f\u5f88\u5feb\u638c\u63e1 Plain At AtAll \u4e09\u79cd\u5143\u7d20\u7c7b\u578b. \u63a5\u4e0b\u6765\u5c06\u4ecb\u7ecd\u7ee7\u627f\u81ea MultimediaElement \u7684\u591a\u5a92\u4f53\u5143\u7d20: Image FlashImage Voice .","title":"\u591a\u5a92\u4f53\u5143\u7d20"},{"location":"basic/msg-chain/#_15","text":"\u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u81ea\u884c\u5b9e\u4f8b\u5316\u591a\u5a92\u4f53\u5143\u7d20: \u4ece Mirai API HTTP \u7f13\u5b58\u7684\u56fe\u7247\u6784\u9020: \u4f20\u5165\u5b8c\u6574 id (\u4e0d\u662f uuid) \u4ece\u7f51\u7edc\u56fe\u7247\u6784\u9020: \u4f20\u5165 url \u4ece bytes \u5b57\u8282\u5bf9\u8c61\u6784\u9020: \u901a\u8fc7 data_bytes \u4f20\u5165 bytes \u5305\u88c5\u7684\u4e8c\u8fdb\u5236\u6570\u636e. \u4ece base64 \u5b57\u7b26\u4e32\u6784\u9020: \u4f20\u5165 base64 \u4f5c\u4e3a\u4e8c\u8fdb\u5236\u5b58\u50a8. \u4ece\u672c\u5730\u6587\u4ef6\u6784\u9020: \u4f20\u5165 path \u5e76\u4ee5 \u5f53\u524d\u5de5\u4f5c\u76ee\u5f55 \u8bfb\u5165\u4e8c\u8fdb\u5236\u6570\u636e. \u63d0\u793a: \u4f20\u5165\u7684 path \u4f1a\u81ea\u52a8\u88ab\u7acb\u5373\u63d0\u53d6\u51fa\u4e8c\u8fdb\u5236\u6570\u636e. \u6240\u4ee5\u4e0d\u8981\u60f3\u7740\u5148\u4f20 path \u518d\u5199\u6587\u4ef6.","title":"\u5b9e\u4f8b\u5316"},{"location":"basic/msg-chain/#_16","text":"\u4f60\u53ef\u4ee5\u901a\u8fc7 get_bytes() \u5f02\u6b65\u65b9\u6cd5\u83b7\u53d6\u591a\u5a92\u4f53\u5143\u7d20\u7684\u4e8c\u8fdb\u5236\u6570\u636e. \u63d0\u793a \u901a\u8fc7 base64 \u5b58\u50a8\u7684\u591a\u5a92\u4f53\u5143\u7d20\u4e5f\u53ef\u901a\u8fc7\u672c\u65b9\u6cd5\u53d6\u51fa\u4e8c\u8fdb\u5236\u6570\u636e. \u7f51\u7edc\u56fe\u7247\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u4f1a\u5728\u4e0b\u8f7d\u540e\u88ab\u5b58\u50a8\u4e8e base64 \u5c5e\u6027\u5185\u4f5c\u4e3a\u7f13\u5b58.","title":"\u83b7\u53d6\u4e8c\u8fdb\u5236"},{"location":"basic/msg-chain/#_17","text":"\u53ef\u4ee5\u901a\u8fc7\u5bf9 FlashImage \u4e0e Image \u5b9e\u4f8b \u4f7f\u7528 toImage fromImage toFlashImage fromFlashImage \u65b9\u6cd5\u8fdb\u884c\u4e24\u79cd\u56fe\u7247\u7c7b\u578b\u8f6c\u6362.","title":"\u56fe\u7247\u7c7b\u578b\u8f6c\u6362"},{"location":"basic/msg-chain/#_18","text":"\u591a\u5a92\u4f53\u5143\u7d20\u4e4b\u95f4\u7684\u76f8\u7b49\u6bd4\u8f83\u9700\u8981\u4ee5\u4e0b\u6761\u4ef6: \u7c7b\u578b\u76f8\u540c (\u4e5f\u5c31\u662f\u8bf4 Image \u4e0e FlashImage \u5fc5\u5b9a\u4e0d\u7b49 ) \u4ee5\u4e0b\u5c5e\u6027\u4e2d\u4efb\u610f\u4e00\u4e2a\u76f8\u7b49 base64 (data_bytes) uuid (\u5254\u9664\u4e86 \"/\" \"{}\" \u7b49\u7528\u4e8e\u533a\u5206\u56fe\u7247\u7c7b\u578b\u7684\u7b26\u53f7\u540e\u5f97\u5230) url \u793e\u533a\u6587\u6863\u76f8\u5173\u7ae0\u8282 \u603b\u89c8 \u591a\u5a92\u4f53\u5143\u7d20 \u6587\u4ef6\u53d1\u9001 \u5408\u5e76\u8f6c\u53d1 \u5982\u679c\u4f60\u53ea\u662f\u60f3\u5bf9 Ariadne \u6709\u4e2a\u7c97\u7565\u7684\u4e86\u89e3, \u5e76\u7740\u624b\u5f00\u59cb\u7f16\u5199\u81ea\u5df1\u7684 QQ bot, \u76f8\u4fe1\u8fd9\u4e9b\u77e5\u8bc6\u5df2\u7ecf\u8db3\u591f. \u5982\u679c\u4f60\u60f3\u8fdb\u4e00\u6b65\u6316\u6398 Ariadne \u7684 MessageChain \u7279\u6027, \u8bf7\u770b \u8fdb\u9636\u7bc7 .","title":"\u7b49\u4ef7\u6027\u6bd4\u8f83"},{"location":"basic/overview/","text":"Ariadne \u603b\u89c8 \ud83d\udd17 \u5f15\u8a00 Ariadne \u7684\u5b9e\u4f8b\u65b9\u6cd5\u5927\u591a\u7ee7\u627f\u81ea Mixin . \u8fd9\u5141\u8bb8 Ariadne \u65b9\u4fbf\u7684\u62d3\u5c55\u5404\u79cd\u65b9\u6cd5. \u5f53\u4f60\u4e0d\u77e5\u9053 Ariadne \u4e3a\u4ec0\u4e48\u53ef\u4ee5\u505a\u5230\u8fd9\u4e9b\u4e8b\u65f6, \u770b\u770b\u8fd9\u4e9b Mixin \u5427. \u5173\u4e8e\u4f7f\u7528 \"\u6a21\u578b\" \u7684\u63d0\u793a \ud83d\udd17 Group Friend Member Stranger \u56db\u4e2a\u7c7b\u578b\u652f\u6301 __int__ \u534f\u8bae\u83b7\u53d6\u5176 id \u5c5e\u6027. \u4e5f\u5c31\u662f\u8bf4, int(group) \u7b49\u4ef7\u4e8e group.id . Group Friend Member \u4e0a\u8fd8\u6709 getInfo modifyInfo getProfile modifyAdmin getConfig modifyConfig \u7b49\u65b9\u4fbf\u65b9\u6cd5. MemberPerm \u652f\u6301\u5bcc\u6bd4\u8f83\u64cd\u4f5c, \u4e5f\u5c31\u662f\u8bf4\u4f60\u53ef\u4ee5\u901a\u8fc7 Member.permission >= MemberPerm.Administrator \u5224\u65ad\u6210\u5458\u662f\u5426\u6709\u7ba1\u7406\u6743\u9650. \u4f60 \u6c38\u8fdc\u4e0d\u5e94\u8be5 \u81ea\u884c\u5b9e\u4f8b\u5316 Group Friend Member Stranger \u7c7b\u578b. \u67d0\u4e9b\u4e8b\u4ef6\u7684\u989d\u5916\u65b9\u6cd5 \ud83d\udd17 RequestEvent \u5e26\u6709\u4e00\u4e9b\u989d\u5916\u65b9\u6cd5, \u5982 accept reject ignore \u7b49, \u76f4\u63a5\u5728\u5176\u4e0a\u4f7f\u7528 await \u5373\u53ef. \u751f\u547d\u5468\u671f\u7ba1\u7406 \ud83d\udd17 launch() \u7528\u4e8e\u542f\u52a8 Ariadne \u5b9e\u4f8b, stop() \u7528\u4e8e\u505c\u6b62 Ariadne \u5b9e\u4f8b. lifecycle() \u901a\u8fc7 await self.daemon_task , \u5373\u7b49\u5f85 Adapter \u7684\u5b88\u62a4\u4efb\u52a1, \u8fbe\u5230\u5c01\u88c5 launch() \u4e0e wait_for_stop() \u7684\u76ee\u7684. \u5982\u679c\u4f60\u4e0d\u9700\u8981\u989d\u5916\u7684 asyncio \u64cd\u4f5c, \u90a3\u4e48 app.launch_blocking() \u5e94\u8be5\u8db3\u4ee5\u6ee1\u8db3\u4f60\u7684\u9700\u8981, \u56e0\u4e3a\u5b83\u5c01\u88c5\u4e86 launch() , \u5e76\u5728\u6355\u83b7 KeyboardInterrupt \u65f6\u81ea\u52a8 wait_for_stop() . \u63d0\u793a \u5176\u5b9e Ariadne \u4e5f\u53ef\u4ee5\u4f5c\u4e3a async context manager \u4f7f\u7528. \u5728 __aenter__ \u4e2d\u6267\u884c launch() , \u5728 __aexit__ \u4e2d\u6267\u884c wait_for_stop() . \u4ea4\u4e92\u65b9\u6cd5 \ud83d\udd17 Ariadne \u4e0e QQ \u8fdb\u884c\u4ea4\u4e92\u7684\u65b9\u6cd5\u9075\u5faa\u4ee5\u4e0b\u539f\u5219: \u4f7f\u7528 camelCase \u9a7c\u5cf0\u547d\u540d. \u4f7f\u7528 \u8c13\u8bcd + \u540d\u8bcd \u547d\u540d. \u6ce8: \u83b7\u53d6\u6570\u636e\u7684\u65b9\u6cd5\u7edf\u4e00\u4ee5 get \u5f00\u5934. \u4e3a async \u5f02\u6b65\u51fd\u6570. \u5176\u4ed6\u7684\u4fe1\u606f\u4f60\u5e94\u8be5\u53ef\u4ee5\u4ece doc string \u91cc\u5f97\u5230. API \u6587\u6863\u6307\u8def: graia.ariadne \u83b7\u53d6\u5b9e\u4f8b\u6240\u7ba1\u8d26\u53f7 \ud83d\udd17 Ariadne \u901a\u8fc7\u4e00\u4e2a\u53ea\u8bfb\u5c5e\u6027 account \u6765\u5e2e\u52a9\u7528\u6237\u83b7\u53d6\u5f53\u524d\u673a\u5668\u4eba\u5b9e\u4f8b\u7684 QQ \u53f7 account = app . account \u505c\u6b62\u5b9e\u4f8b \ud83d\udd17 \u73b0\u5728\u4f60\u901a\u8fc7\u5728\u76d1\u542c\u5668\u4e2d await app.stop() \u5e76\u5728\u4e3b\u51fd\u6570\u4e2d await app.join() \u5e94\u8be5\u53ef\u4ee5\u5b89\u5168\u7684\u5173\u95ed Ariadne . \u5f53\u7136, \u5728\u4e3b\u51fd\u6570\u4e2d\u4f7f\u7528 await app.lifecycle() \u6216 app.launch_blocking() \u6c38\u8fdc\u662f\u6700\u4f73\u5b9e\u8df5. \u65b9\u4fbf\u7684\u6d88\u606f\u53d1\u9001\u65b9\u6cd5 - sendMessage \ud83d\udd17 sendMessage \u6709\u4e00\u4e2a\u9650\u5236: \u53ea\u80fd\u4ece\u4f20\u5165\u5bf9\u8c61\u63a8\u65ad (\u4e0d\u80fd\u76f4\u63a5\u4f20\u5165 int \u683c\u5f0f\u7684 target ) \u4f46\u662f\u5b83\u53ef\u4ee5\u667a\u80fd\u5730\u4ece\u4f20\u5165\u5bf9\u8c61\u63a8\u65ad: Friend Group Member MessageEvent \u8fd9\u56db\u4e2a\u90fd\u662f\u5408\u9002\u7684\u4f20\u5165\u5bf9\u8c61. Friend \u53d1\u9001\u597d\u53cb\u6d88\u606f, Group \u53d1\u9001\u7fa4\u7ec4\u6d88\u606f, \u800c Member \u53d1\u9001\u4e34\u65f6\u79c1\u804a\u6d88\u606f . MessageEvent \u5219\u4f1a\u63a8\u65ad\u662f GroupMessage , FriendMessage \u8fd8\u662f TempMessage , \u5e76\u81ea\u52a8\u53d1\u7ed9\u5bf9\u5e94\u7684\u5bf9\u8c61. \u540c\u65f6, \u5728\u5411 target \u4f20\u5165\u6d88\u606f\u4e8b\u4ef6\u65f6, quote \u53ef\u4ee5\u7b80\u5355\u5730\u4f20\u5165 True \u4ee5\u8fbe\u5230\u5f15\u7528\u56de\u590d\u7684\u6548\u679c. quote \u4e5f\u63a5\u53d7 Source \u5143\u7d20. sendMessage \u7684 action \ud83d\udd17 sendMessage \u53ef\u4ee5\u643a\u5e26\u4e00\u4e2a action \u53c2\u6570, \u5b83\u662f\u4e00\u4e2a graia.ariadne.typing.SendMessageAction \u5bf9\u8c61, \u9700\u8981\u5b9e\u73b0\u4ee5\u4e0b\u65b9\u6cd5: param : \u5904\u7406\u4f20\u5165\u7684\u6570\u636e\u5e76\u8fdb\u884c\u52a0\u5de5 (\u53ef\u7528\u4e8e\u81ea\u52a8\u643a\u5e26 At \u7b49\u6d88\u606f\u5143\u7d20) result : \u6210\u529f\u53d1\u9001\u65f6\u8c03\u7528, \u4f5c\u4e3a\u6700\u7ec8\u8fd4\u56de\u7528\u6237\u7684\u6570\u636e. exception : \u53d1\u9001\u65f6\u53d1\u751f\u5f02\u5e38\u5219\u4f1a\u8c03\u7528, \u4f5c\u4e3a\u6700\u7ec8\u8fd4\u56de\u7528\u6237\u7684\u6570\u636e. Ariadne \u5728 graia.ariadne.util.send \u5185\u5efa\u4e86\u4ee5\u4e0b SendMessageAction , \u76f4\u63a5\u4f20\u5165\u8fd9\u4e9b\u7c7b\u5373\u53ef. Strict : \u53d1\u751f\u5f02\u5e38\u65f6\u81ea\u52a8\u5f15\u53d1. (\u9ed8\u8ba4) Bypass : \u53d1\u751f\u5f02\u5e38\u65f6\u8fd4\u56de\u5f02\u5e38\u5bf9\u8c61, \u6ce8\u610f\u5f02\u5e38\u91cd\u751f\u7684\u95ee\u9898. Ignore : \u53d1\u751f\u5f02\u5e38\u65f6\u8fd4\u56de None . Safe : \u5728\u7b2c\u4e00\u6b21\u5c1d\u8bd5\u5931\u8d25\u540e\u5148\u79fb\u9664 quote , \u4e4b\u540e\u6bcf\u6b21\u5931\u8d25\u65f6\u6309\u987a\u5e8f\u66ff\u6362\u5143\u7d20\u4e3a\u5176 asDisplay : AtAll , At , Poke , Forward , MultimediaElement \u82e5\u6700\u540e\u8fd8\u662f\u5931\u8d25 ( AccountMuted \u7b49), \u5219\u4f1a\u5f15\u53d1\u539f\u59cb\u5f02\u5e38 (\u901a\u8fc7\u4f20\u5165 ignore \u51b3\u5b9a) \u4e0b\u9762\u662f\u793a\u4f8b: from graia.ariadne.util.send import Strict , Bypass , Ignore , Safe act = Strict or Bypass or Ignore or Safe or Safe ( ignore = False ) or Safe ( ignore = True ) # \u770b\u4f60\u600e\u4e48\u9009\u62e9 await app . sendMessage ( origin , message_chain , action = act ) \u8bbe\u7f6e\u9ed8\u8ba4 action \ud83d\udd17 Ariadne \u5b9e\u4f8b\u7684\u9ed8\u8ba4 action \u662f Strict , \u4f60\u53ef\u4ee5\u901a\u8fc7 Ariadne.default_send_action \u5c5e\u6027\u900f\u660e\u5730\u4fee\u6539.","title":"\u603b\u89c8"},{"location":"basic/overview/#ariadne","text":"\u5f15\u8a00 Ariadne \u7684\u5b9e\u4f8b\u65b9\u6cd5\u5927\u591a\u7ee7\u627f\u81ea Mixin . \u8fd9\u5141\u8bb8 Ariadne \u65b9\u4fbf\u7684\u62d3\u5c55\u5404\u79cd\u65b9\u6cd5. \u5f53\u4f60\u4e0d\u77e5\u9053 Ariadne \u4e3a\u4ec0\u4e48\u53ef\u4ee5\u505a\u5230\u8fd9\u4e9b\u4e8b\u65f6, \u770b\u770b\u8fd9\u4e9b Mixin \u5427.","title":"Ariadne \u603b\u89c8"},{"location":"basic/overview/#_1","text":"Group Friend Member Stranger \u56db\u4e2a\u7c7b\u578b\u652f\u6301 __int__ \u534f\u8bae\u83b7\u53d6\u5176 id \u5c5e\u6027. \u4e5f\u5c31\u662f\u8bf4, int(group) \u7b49\u4ef7\u4e8e group.id . Group Friend Member \u4e0a\u8fd8\u6709 getInfo modifyInfo getProfile modifyAdmin getConfig modifyConfig \u7b49\u65b9\u4fbf\u65b9\u6cd5. MemberPerm \u652f\u6301\u5bcc\u6bd4\u8f83\u64cd\u4f5c, \u4e5f\u5c31\u662f\u8bf4\u4f60\u53ef\u4ee5\u901a\u8fc7 Member.permission >= MemberPerm.Administrator \u5224\u65ad\u6210\u5458\u662f\u5426\u6709\u7ba1\u7406\u6743\u9650. \u4f60 \u6c38\u8fdc\u4e0d\u5e94\u8be5 \u81ea\u884c\u5b9e\u4f8b\u5316 Group Friend Member Stranger \u7c7b\u578b.","title":"\u5173\u4e8e\u4f7f\u7528 \"\u6a21\u578b\" \u7684\u63d0\u793a"},{"location":"basic/overview/#_2","text":"RequestEvent \u5e26\u6709\u4e00\u4e9b\u989d\u5916\u65b9\u6cd5, \u5982 accept reject ignore \u7b49, \u76f4\u63a5\u5728\u5176\u4e0a\u4f7f\u7528 await \u5373\u53ef.","title":"\u67d0\u4e9b\u4e8b\u4ef6\u7684\u989d\u5916\u65b9\u6cd5"},{"location":"basic/overview/#_3","text":"launch() \u7528\u4e8e\u542f\u52a8 Ariadne \u5b9e\u4f8b, stop() \u7528\u4e8e\u505c\u6b62 Ariadne \u5b9e\u4f8b. lifecycle() \u901a\u8fc7 await self.daemon_task , \u5373\u7b49\u5f85 Adapter \u7684\u5b88\u62a4\u4efb\u52a1, \u8fbe\u5230\u5c01\u88c5 launch() \u4e0e wait_for_stop() \u7684\u76ee\u7684. \u5982\u679c\u4f60\u4e0d\u9700\u8981\u989d\u5916\u7684 asyncio \u64cd\u4f5c, \u90a3\u4e48 app.launch_blocking() \u5e94\u8be5\u8db3\u4ee5\u6ee1\u8db3\u4f60\u7684\u9700\u8981, \u56e0\u4e3a\u5b83\u5c01\u88c5\u4e86 launch() , \u5e76\u5728\u6355\u83b7 KeyboardInterrupt \u65f6\u81ea\u52a8 wait_for_stop() . \u63d0\u793a \u5176\u5b9e Ariadne \u4e5f\u53ef\u4ee5\u4f5c\u4e3a async context manager \u4f7f\u7528. \u5728 __aenter__ \u4e2d\u6267\u884c launch() , \u5728 __aexit__ \u4e2d\u6267\u884c wait_for_stop() .","title":"\u751f\u547d\u5468\u671f\u7ba1\u7406"},{"location":"basic/overview/#_4","text":"Ariadne \u4e0e QQ \u8fdb\u884c\u4ea4\u4e92\u7684\u65b9\u6cd5\u9075\u5faa\u4ee5\u4e0b\u539f\u5219: \u4f7f\u7528 camelCase \u9a7c\u5cf0\u547d\u540d. \u4f7f\u7528 \u8c13\u8bcd + \u540d\u8bcd \u547d\u540d. \u6ce8: \u83b7\u53d6\u6570\u636e\u7684\u65b9\u6cd5\u7edf\u4e00\u4ee5 get \u5f00\u5934. \u4e3a async \u5f02\u6b65\u51fd\u6570. \u5176\u4ed6\u7684\u4fe1\u606f\u4f60\u5e94\u8be5\u53ef\u4ee5\u4ece doc string \u91cc\u5f97\u5230. API \u6587\u6863\u6307\u8def: graia.ariadne","title":"\u4ea4\u4e92\u65b9\u6cd5"},{"location":"basic/overview/#_5","text":"Ariadne \u901a\u8fc7\u4e00\u4e2a\u53ea\u8bfb\u5c5e\u6027 account \u6765\u5e2e\u52a9\u7528\u6237\u83b7\u53d6\u5f53\u524d\u673a\u5668\u4eba\u5b9e\u4f8b\u7684 QQ \u53f7 account = app . account","title":"\u83b7\u53d6\u5b9e\u4f8b\u6240\u7ba1\u8d26\u53f7"},{"location":"basic/overview/#_6","text":"\u73b0\u5728\u4f60\u901a\u8fc7\u5728\u76d1\u542c\u5668\u4e2d await app.stop() \u5e76\u5728\u4e3b\u51fd\u6570\u4e2d await app.join() \u5e94\u8be5\u53ef\u4ee5\u5b89\u5168\u7684\u5173\u95ed Ariadne . \u5f53\u7136, \u5728\u4e3b\u51fd\u6570\u4e2d\u4f7f\u7528 await app.lifecycle() \u6216 app.launch_blocking() \u6c38\u8fdc\u662f\u6700\u4f73\u5b9e\u8df5.","title":"\u505c\u6b62\u5b9e\u4f8b"},{"location":"basic/overview/#-sendmessage","text":"sendMessage \u6709\u4e00\u4e2a\u9650\u5236: \u53ea\u80fd\u4ece\u4f20\u5165\u5bf9\u8c61\u63a8\u65ad (\u4e0d\u80fd\u76f4\u63a5\u4f20\u5165 int \u683c\u5f0f\u7684 target ) \u4f46\u662f\u5b83\u53ef\u4ee5\u667a\u80fd\u5730\u4ece\u4f20\u5165\u5bf9\u8c61\u63a8\u65ad: Friend Group Member MessageEvent \u8fd9\u56db\u4e2a\u90fd\u662f\u5408\u9002\u7684\u4f20\u5165\u5bf9\u8c61. Friend \u53d1\u9001\u597d\u53cb\u6d88\u606f, Group \u53d1\u9001\u7fa4\u7ec4\u6d88\u606f, \u800c Member \u53d1\u9001\u4e34\u65f6\u79c1\u804a\u6d88\u606f . MessageEvent \u5219\u4f1a\u63a8\u65ad\u662f GroupMessage , FriendMessage \u8fd8\u662f TempMessage , \u5e76\u81ea\u52a8\u53d1\u7ed9\u5bf9\u5e94\u7684\u5bf9\u8c61. \u540c\u65f6, \u5728\u5411 target \u4f20\u5165\u6d88\u606f\u4e8b\u4ef6\u65f6, quote \u53ef\u4ee5\u7b80\u5355\u5730\u4f20\u5165 True \u4ee5\u8fbe\u5230\u5f15\u7528\u56de\u590d\u7684\u6548\u679c. quote \u4e5f\u63a5\u53d7 Source \u5143\u7d20.","title":"\u65b9\u4fbf\u7684\u6d88\u606f\u53d1\u9001\u65b9\u6cd5 - sendMessage"},{"location":"basic/overview/#sendmessage-action","text":"sendMessage \u53ef\u4ee5\u643a\u5e26\u4e00\u4e2a action \u53c2\u6570, \u5b83\u662f\u4e00\u4e2a graia.ariadne.typing.SendMessageAction \u5bf9\u8c61, \u9700\u8981\u5b9e\u73b0\u4ee5\u4e0b\u65b9\u6cd5: param : \u5904\u7406\u4f20\u5165\u7684\u6570\u636e\u5e76\u8fdb\u884c\u52a0\u5de5 (\u53ef\u7528\u4e8e\u81ea\u52a8\u643a\u5e26 At \u7b49\u6d88\u606f\u5143\u7d20) result : \u6210\u529f\u53d1\u9001\u65f6\u8c03\u7528, \u4f5c\u4e3a\u6700\u7ec8\u8fd4\u56de\u7528\u6237\u7684\u6570\u636e. exception : \u53d1\u9001\u65f6\u53d1\u751f\u5f02\u5e38\u5219\u4f1a\u8c03\u7528, \u4f5c\u4e3a\u6700\u7ec8\u8fd4\u56de\u7528\u6237\u7684\u6570\u636e. Ariadne \u5728 graia.ariadne.util.send \u5185\u5efa\u4e86\u4ee5\u4e0b SendMessageAction , \u76f4\u63a5\u4f20\u5165\u8fd9\u4e9b\u7c7b\u5373\u53ef. Strict : \u53d1\u751f\u5f02\u5e38\u65f6\u81ea\u52a8\u5f15\u53d1. (\u9ed8\u8ba4) Bypass : \u53d1\u751f\u5f02\u5e38\u65f6\u8fd4\u56de\u5f02\u5e38\u5bf9\u8c61, \u6ce8\u610f\u5f02\u5e38\u91cd\u751f\u7684\u95ee\u9898. Ignore : \u53d1\u751f\u5f02\u5e38\u65f6\u8fd4\u56de None . Safe : \u5728\u7b2c\u4e00\u6b21\u5c1d\u8bd5\u5931\u8d25\u540e\u5148\u79fb\u9664 quote , \u4e4b\u540e\u6bcf\u6b21\u5931\u8d25\u65f6\u6309\u987a\u5e8f\u66ff\u6362\u5143\u7d20\u4e3a\u5176 asDisplay : AtAll , At , Poke , Forward , MultimediaElement \u82e5\u6700\u540e\u8fd8\u662f\u5931\u8d25 ( AccountMuted \u7b49), \u5219\u4f1a\u5f15\u53d1\u539f\u59cb\u5f02\u5e38 (\u901a\u8fc7\u4f20\u5165 ignore \u51b3\u5b9a) \u4e0b\u9762\u662f\u793a\u4f8b: from graia.ariadne.util.send import Strict , Bypass , Ignore , Safe act = Strict or Bypass or Ignore or Safe or Safe ( ignore = False ) or Safe ( ignore = True ) # \u770b\u4f60\u600e\u4e48\u9009\u62e9 await app . sendMessage ( origin , message_chain , action = act )","title":"sendMessage \u7684 action"},{"location":"basic/overview/#action","text":"Ariadne \u5b9e\u4f8b\u7684\u9ed8\u8ba4 action \u662f Strict , \u4f60\u53ef\u4ee5\u901a\u8fc7 Ariadne.default_send_action \u5c5e\u6027\u900f\u660e\u5730\u4fee\u6539.","title":"\u8bbe\u7f6e\u9ed8\u8ba4 action"},{"location":"basic/params/","text":"\u53c2\u6570\u4f20\u9012 \ud83d\udd17 \u5728\u4e8b\u4ef6\u89e3\u6790\u51fd\u6570\u4e2d\u4f7f\u7528\u7c7b\u578b\u63d0\u793a\u662f Graia Framework \u76f8\u8f83\u4e8e\u5176\u4ed6 Python QQ SDK \u6700\u5927\u7684\u4eae\u70b9. \u63d0\u793a \u5982\u679c\u4f60\u4e0d\u77e5\u9053\u7c7b\u578b\u63d0\u793a\u662f\u4ec0\u4e48, \u8bf7\u53c2\u770b \u8fd9\u91cc \u5728 \u5feb\u901f\u5f00\u59cb \u4e00\u8282\u4e2d, \u6211\u4eec\u4f7f\u7528\u4e86\u8fd9\u6837\u7684\u5199\u6cd5\u6765\u5904\u7406\u597d\u53cb\u7684\u6d88\u606f: @broadcast . receiver ( \"FriendMessage\" ) async def friend_message_listener ( app : Ariadne , friend : Friend ): ...... \u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u4e3a\u53c2\u6570\u6dfb\u52a0 \u7c7b\u578b\u6ce8\u89e3 , \u624d\u80fd\u83b7\u5f97\u5bf9\u5e94\u7684\u6570\u636e. \u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d, app: Ariadne \u7684 Ariadne \u90e8\u5206, \u4e0e friend: Friend \u7684 Friend \u90e8\u5206\u662f\u4e0d\u53ef\u4ee5\u7701\u7565\u7684. \u7528\u4e0d\u5230\u7684\u53c2\u6570, \u53ef\u4ee5\u7701\u7565. \u6bd4\u5982\u8bf4, \u5982\u679c\u4f60\u5728 friend_message_lister \u4e2d, \u6ca1\u6709\u7528\u5230 friend \u53c2\u6570, \u90a3\u4e48\u5c31\u53ef\u4ee5\u5199\u6210\u8fd9\u6837: @broadcast . receiver ( \"FriendMessage\" ) async def friend_message_listener ( app : Ariadne ): ...... \u4e0b\u9762\u5217\u51fa Ariadne \u4e2d\u6240\u6709\u57fa\u4e8e MessageEvent \u7684\u6d88\u606f\u53ef\u63a5\u53d7\u7684\u53c2\u6570\u7c7b\u578b. \u6240\u6709\u7c7b\u578b: T_EventType : \u4f60\u6240\u76d1\u542c\u7684\u4e8b\u4ef6\u7c7b\u578b, \u5982 FriendMessage , GroupMessage \u7b49. Ariadne : \u901a\u8fc7 app = Ariadne(...) \u521b\u5efa\u7684 Ariadne \u5bf9\u8c61. Broadcast : \u5f53\u524d graia.broadcast.Broadcast \u5b9e\u4f8b. AbstractEventLoop : \u5f53\u524d\u4e8b\u4ef6\u5faa\u73af. Adapter : \u5f53\u524d Adapter \u5b9e\u4f8b. MessageChain : \u6d88\u606f\u94fe\u5bf9\u8c61, \u5c06\u5728 \u4e0b\u4e00\u7ae0 \u4ecb\u7ecd. Source : \u6d88\u606f\u5143\u6570\u636e\u5bf9\u8c61, \u5305\u62ec\u53d1\u9001\u65f6\u95f4\u7b49\u4fe1\u606f. \u6b64\u5916, \u5bf9\u4e8e\u4ee5\u4e0b\u4e8b\u4ef6\u7c7b\u578b\u8fd8\u53ef\u63a5\u53d7\u8fd9\u4e9b\u53c2\u6570: FriendMessage Friend : \u53d1\u9001\u8005. GroupMessage Member : \u53d1\u9001\u8005. Group : \u53d1\u9001\u8005\u6240\u5728\u7684\u7fa4\u7ec4. TempMessage Member : \u53d1\u9001\u8005. Group : \u901a\u8fc7\u54ea\u4e2a\u7fa4\u53d1\u8d77\u7684\u4e34\u65f6\u6d88\u606f. OtherClientMessage Client : \u53d1\u9001\u8005. StrangerMessage Stranger \u53d1\u9001\u8005. \u793e\u533a\u6587\u6863\u76f8\u5173\u7ae0\u8282: \u94fe\u63a5 \u63d0\u793a \u53c2\u6570\u89e3\u6790\u529f\u80fd, \u662f\u7531 Dispatcher \u673a\u5236\u6765\u5b9e\u73b0\u7684, \u53ef\u9605\u8bfb Dispatcher \u6587\u6863 , \u4ee5\u7b80\u8981\u4e86\u89e3\u5176\u539f\u7406. \u5728\u8fdb\u9636\u6559\u7a0b\u4e2d, \u6211\u4eec\u5c06\u8981\u4ecb\u7ecd\u7684 Twilight , \u4e5f\u4f7f\u7528\u4e86 Dispatcher \u673a\u5236.","title":"\u53c2\u6570\u4f20\u9012"},{"location":"basic/params/#_1","text":"\u5728\u4e8b\u4ef6\u89e3\u6790\u51fd\u6570\u4e2d\u4f7f\u7528\u7c7b\u578b\u63d0\u793a\u662f Graia Framework \u76f8\u8f83\u4e8e\u5176\u4ed6 Python QQ SDK \u6700\u5927\u7684\u4eae\u70b9. \u63d0\u793a \u5982\u679c\u4f60\u4e0d\u77e5\u9053\u7c7b\u578b\u63d0\u793a\u662f\u4ec0\u4e48, \u8bf7\u53c2\u770b \u8fd9\u91cc \u5728 \u5feb\u901f\u5f00\u59cb \u4e00\u8282\u4e2d, \u6211\u4eec\u4f7f\u7528\u4e86\u8fd9\u6837\u7684\u5199\u6cd5\u6765\u5904\u7406\u597d\u53cb\u7684\u6d88\u606f: @broadcast . receiver ( \"FriendMessage\" ) async def friend_message_listener ( app : Ariadne , friend : Friend ): ...... \u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u4e3a\u53c2\u6570\u6dfb\u52a0 \u7c7b\u578b\u6ce8\u89e3 , \u624d\u80fd\u83b7\u5f97\u5bf9\u5e94\u7684\u6570\u636e. \u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d, app: Ariadne \u7684 Ariadne \u90e8\u5206, \u4e0e friend: Friend \u7684 Friend \u90e8\u5206\u662f\u4e0d\u53ef\u4ee5\u7701\u7565\u7684. \u7528\u4e0d\u5230\u7684\u53c2\u6570, \u53ef\u4ee5\u7701\u7565. \u6bd4\u5982\u8bf4, \u5982\u679c\u4f60\u5728 friend_message_lister \u4e2d, \u6ca1\u6709\u7528\u5230 friend \u53c2\u6570, \u90a3\u4e48\u5c31\u53ef\u4ee5\u5199\u6210\u8fd9\u6837: @broadcast . receiver ( \"FriendMessage\" ) async def friend_message_listener ( app : Ariadne ): ...... \u4e0b\u9762\u5217\u51fa Ariadne \u4e2d\u6240\u6709\u57fa\u4e8e MessageEvent \u7684\u6d88\u606f\u53ef\u63a5\u53d7\u7684\u53c2\u6570\u7c7b\u578b. \u6240\u6709\u7c7b\u578b: T_EventType : \u4f60\u6240\u76d1\u542c\u7684\u4e8b\u4ef6\u7c7b\u578b, \u5982 FriendMessage , GroupMessage \u7b49. Ariadne : \u901a\u8fc7 app = Ariadne(...) \u521b\u5efa\u7684 Ariadne \u5bf9\u8c61. Broadcast : \u5f53\u524d graia.broadcast.Broadcast \u5b9e\u4f8b. AbstractEventLoop : \u5f53\u524d\u4e8b\u4ef6\u5faa\u73af. Adapter : \u5f53\u524d Adapter \u5b9e\u4f8b. MessageChain : \u6d88\u606f\u94fe\u5bf9\u8c61, \u5c06\u5728 \u4e0b\u4e00\u7ae0 \u4ecb\u7ecd. Source : \u6d88\u606f\u5143\u6570\u636e\u5bf9\u8c61, \u5305\u62ec\u53d1\u9001\u65f6\u95f4\u7b49\u4fe1\u606f. \u6b64\u5916, \u5bf9\u4e8e\u4ee5\u4e0b\u4e8b\u4ef6\u7c7b\u578b\u8fd8\u53ef\u63a5\u53d7\u8fd9\u4e9b\u53c2\u6570: FriendMessage Friend : \u53d1\u9001\u8005. GroupMessage Member : \u53d1\u9001\u8005. Group : \u53d1\u9001\u8005\u6240\u5728\u7684\u7fa4\u7ec4. TempMessage Member : \u53d1\u9001\u8005. Group : \u901a\u8fc7\u54ea\u4e2a\u7fa4\u53d1\u8d77\u7684\u4e34\u65f6\u6d88\u606f. OtherClientMessage Client : \u53d1\u9001\u8005. StrangerMessage Stranger \u53d1\u9001\u8005. \u793e\u533a\u6587\u6863\u76f8\u5173\u7ae0\u8282: \u94fe\u63a5 \u63d0\u793a \u53c2\u6570\u89e3\u6790\u529f\u80fd, \u662f\u7531 Dispatcher \u673a\u5236\u6765\u5b9e\u73b0\u7684, \u53ef\u9605\u8bfb Dispatcher \u6587\u6863 , \u4ee5\u7b80\u8981\u4e86\u89e3\u5176\u539f\u7406. \u5728\u8fdb\u9636\u6559\u7a0b\u4e2d, \u6211\u4eec\u5c06\u8981\u4ecb\u7ecd\u7684 Twilight , \u4e5f\u4f7f\u7528\u4e86 Dispatcher \u673a\u5236.","title":"\u53c2\u6570\u4f20\u9012"},{"location":"blog/","text":"\u7b80\u4ecb \ud83d\udd17 \u8fd9\u91cc\u662f Ariadne \u7684\u5f00\u53d1\u535a\u5ba2, \u6211\u4f1a\u5728\u8fd9\u91cc\u8c08\u4e00\u4e9b\u65e0\u5173\u7d27\u8981\u7684\u5c0f\u4e1c\u897f, \u4e0d\u8fc7\u53ef\u80fd\u5bf9\u4f60\u4e86\u89e3\u8fd9\u4e2a\u9879\u76ee\u6709\u4e9b\u5e2e\u52a9.","title":"\u5f00\u53d1\u535a\u5ba2"},{"location":"blog/#_1","text":"\u8fd9\u91cc\u662f Ariadne \u7684\u5f00\u53d1\u535a\u5ba2, \u6211\u4f1a\u5728\u8fd9\u91cc\u8c08\u4e00\u4e9b\u65e0\u5173\u7d27\u8981\u7684\u5c0f\u4e1c\u897f, \u4e0d\u8fc7\u53ef\u80fd\u5bf9\u4f60\u4e86\u89e3\u8fd9\u4e2a\u9879\u76ee\u6709\u4e9b\u5e2e\u52a9.","title":"\u7b80\u4ecb"},{"location":"blog/history/","text":"\u5386\u53f2 \ud83d\udd17 \u6211\u89c9\u5f97\u53ef\u4ee5\u8bb2\u8bb2\u8fd9\u4e2a\u9879\u76ee\u7684\u5386\u53f2\u4e86. \u7acb\u9879 \ud83d\udd17 \u5f53\u65f6 Mirai API HTTP v2 \u7684 Python \u6846\u67b6\u5df2\u7ecf\u6709\u8bb8\u8bb8\u591a\u591a, \u4f46\u662f\u56e0\u4e3a GreyElaina \u9009\u62e9\u6295\u5165 Avilla \u7684\u5f00\u53d1, \u6240\u4ee5 Graia Framework \u8fdf\u8fdf\u6ca1\u6709\u8ddf\u8fdb ( Application 0.20.x \u5b8c\u5168\u65e0\u6cd5\u4f7f\u7528, \u800c\u4e14 Application \u4e5f\u6709\u5f88\u591a\u5386\u53f2\u5305\u88b1). \u5f53\u65f6\u6211\u5148\u9009\u62e9\u72ec\u7acb\u5f00\u53d1, \u5728\u56fd\u5e86\u5de6\u53f3\u5199\u51fa\u4e86 Argon \u7684\u7b2c\u4e00\u7248, \u4e5f\u5c31\u662f Ariadne \u7684\u524d\u8eab. \u5728 Argon 0.1.2 \u5de6\u53f3, GreyElaina \u95ee\u6211\u8981\u4e0d\u8981\u5e76\u5165 GraiaProject . \u6211\u5f53\u7136\u540c\u610f\u4e86, \u5e76\u4e14\u5c06\u9879\u76ee\u66f4\u540d\u4e3a Ariadne \u4ee5\u7b26\u5408 GraiaProject \u57fa\u4e8e\u300a\u9b54\u5973\u4e4b\u65c5\u300b\u7684\u9879\u76ee\u540d\u98ce\u683c. \u4e4b\u540e, Ariadne \u8fd9\u4e2a\u9879\u76ee\u5c31\u6b63\u5f0f\u5f00\u59cb\u4e86. \u4e0a\u8def \ud83d\udd17 \u4f5c\u4e3a\u4e00\u4e2a\u5168\u65b0\u7684\u6846\u67b6, \u5f53\u65f6\u57fa\u672c\u4e0a\u53ea\u6709 Graia Framework Community \u8fd9\u4e2a\u5c0f\u7fa4\u7684\u4eba\u77e5\u9053\u6709\u8fd9\u4e48\u4e2a\u73a9\u610f ( \u800c\u4e14\u5927\u591a\u6570\u4eba\u9009\u62e9\u7559\u5b88 Application 0.19.2 \u89c2\u671b ) Red_lnn \u7b2c\u4e00\u4e2a\u7ed9 Ariadne \u63d0\u4ea4\u4e86 bug issue #3 , \u8fd9\u8ba9\u6211\u5927\u53d7\u9707\u64bc. A60 \u7b2c\u4e00\u4e2a\u5c06 Ariadne \u4f5c\u4e3a\u81ea\u5df1 bot \u7684\u4f9d\u8d56, \u56e0\u4e3a ABot-Graia \u5df2\u7ecf\u6709\u4e00\u5b9a\u7684\u540d\u58f0, \u8fd9\u5728\u5f53\u65f6\u5bf9\u6211\u662f\u4e2a\u83ab\u5927\u7684\u9f13\u52b1. (\u8981\u77e5\u9053, \u5f53\u65f6 Ariadne \u8fd8\u662f Argon , \u8fde\u4e2a\u50cf\u6837\u7684\u6587\u6863 (\u5c31\u662f\u4f60\u73b0\u5728\u770b\u5230\u7684\u8fd9\u4e2a) \u90fd\u6ca1\u6709, \u662f\u7eaf\u7cb9\u9760\u7740\u5bf9 Graia Framework \u7684\u719f\u6089\u8fc1\u79fb\u7684.) \u53d1\u5c55 \ud83d\udd17 \u5728 0.3.6 \u5de6\u53f3, \u6211\u6dfb\u52a0\u4e86 Twilight \u4ee5\u4e0e v4 \u7684 Kanata \u4e0e Literature \u5bf9\u6807, \u8fd9\u4f7f\u5f97 ABot-Graia \u5b8c\u6574\u8fc1\u79fb\u5230\u4e86 Ariadne \u4e0a. \u73b0\u5728, Ariadne \u9879\u76ee\u6b63\u5728\u4e0d\u65ad\u53d1\u5c55, \u540c\u65f6 Graiax-Community \u4e5f\u5efa\u7acb\u4e86\u8d77\u6765, \u8fd9\u4f7f\u6211\u66f4\u671f\u5f85\u672a\u6765 Ariadne \u7684\u53d1\u5c55\u4e86. \u672a\u6765 \ud83d\udd17 \u5f53\u7136, \u73b0\u5728 Avilla \u8fd9\u4e2a\u6781\u5177\u6709\u62d3\u5c55\u6027\u7684\u6846\u67b6\u4e5f\u5728\u4e00\u5929\u5929\u7684\u6210\u719f, \u6211\u60f3\u5728\u65f6\u673a\u6210\u719f\u65f6, Ariadne \u5c31\u4f1a\u6210\u4e3a Avilla \u7684\u4e00\u4e2a MAH v2 \u5c01\u88c5\u5427...... \u4e0d\u8fc7\u73b0\u5728\u8fd8\u7528\u4e0d\u7740\u62c5\u5fc3\u8fd9\u4e2a...... BlueGlassBlock 2021/12/10","title":"\u5386\u53f2"},{"location":"blog/history/#_1","text":"\u6211\u89c9\u5f97\u53ef\u4ee5\u8bb2\u8bb2\u8fd9\u4e2a\u9879\u76ee\u7684\u5386\u53f2\u4e86.","title":"\u5386\u53f2"},{"location":"blog/history/#_2","text":"\u5f53\u65f6 Mirai API HTTP v2 \u7684 Python \u6846\u67b6\u5df2\u7ecf\u6709\u8bb8\u8bb8\u591a\u591a, \u4f46\u662f\u56e0\u4e3a GreyElaina \u9009\u62e9\u6295\u5165 Avilla \u7684\u5f00\u53d1, \u6240\u4ee5 Graia Framework \u8fdf\u8fdf\u6ca1\u6709\u8ddf\u8fdb ( Application 0.20.x \u5b8c\u5168\u65e0\u6cd5\u4f7f\u7528, \u800c\u4e14 Application \u4e5f\u6709\u5f88\u591a\u5386\u53f2\u5305\u88b1). \u5f53\u65f6\u6211\u5148\u9009\u62e9\u72ec\u7acb\u5f00\u53d1, \u5728\u56fd\u5e86\u5de6\u53f3\u5199\u51fa\u4e86 Argon \u7684\u7b2c\u4e00\u7248, \u4e5f\u5c31\u662f Ariadne \u7684\u524d\u8eab. \u5728 Argon 0.1.2 \u5de6\u53f3, GreyElaina \u95ee\u6211\u8981\u4e0d\u8981\u5e76\u5165 GraiaProject . \u6211\u5f53\u7136\u540c\u610f\u4e86, \u5e76\u4e14\u5c06\u9879\u76ee\u66f4\u540d\u4e3a Ariadne \u4ee5\u7b26\u5408 GraiaProject \u57fa\u4e8e\u300a\u9b54\u5973\u4e4b\u65c5\u300b\u7684\u9879\u76ee\u540d\u98ce\u683c. \u4e4b\u540e, Ariadne \u8fd9\u4e2a\u9879\u76ee\u5c31\u6b63\u5f0f\u5f00\u59cb\u4e86.","title":"\u7acb\u9879"},{"location":"blog/history/#_3","text":"\u4f5c\u4e3a\u4e00\u4e2a\u5168\u65b0\u7684\u6846\u67b6, \u5f53\u65f6\u57fa\u672c\u4e0a\u53ea\u6709 Graia Framework Community \u8fd9\u4e2a\u5c0f\u7fa4\u7684\u4eba\u77e5\u9053\u6709\u8fd9\u4e48\u4e2a\u73a9\u610f ( \u800c\u4e14\u5927\u591a\u6570\u4eba\u9009\u62e9\u7559\u5b88 Application 0.19.2 \u89c2\u671b ) Red_lnn \u7b2c\u4e00\u4e2a\u7ed9 Ariadne \u63d0\u4ea4\u4e86 bug issue #3 , \u8fd9\u8ba9\u6211\u5927\u53d7\u9707\u64bc. A60 \u7b2c\u4e00\u4e2a\u5c06 Ariadne \u4f5c\u4e3a\u81ea\u5df1 bot \u7684\u4f9d\u8d56, \u56e0\u4e3a ABot-Graia \u5df2\u7ecf\u6709\u4e00\u5b9a\u7684\u540d\u58f0, \u8fd9\u5728\u5f53\u65f6\u5bf9\u6211\u662f\u4e2a\u83ab\u5927\u7684\u9f13\u52b1. (\u8981\u77e5\u9053, \u5f53\u65f6 Ariadne \u8fd8\u662f Argon , \u8fde\u4e2a\u50cf\u6837\u7684\u6587\u6863 (\u5c31\u662f\u4f60\u73b0\u5728\u770b\u5230\u7684\u8fd9\u4e2a) \u90fd\u6ca1\u6709, \u662f\u7eaf\u7cb9\u9760\u7740\u5bf9 Graia Framework \u7684\u719f\u6089\u8fc1\u79fb\u7684.)","title":"\u4e0a\u8def"},{"location":"blog/history/#_4","text":"\u5728 0.3.6 \u5de6\u53f3, \u6211\u6dfb\u52a0\u4e86 Twilight \u4ee5\u4e0e v4 \u7684 Kanata \u4e0e Literature \u5bf9\u6807, \u8fd9\u4f7f\u5f97 ABot-Graia \u5b8c\u6574\u8fc1\u79fb\u5230\u4e86 Ariadne \u4e0a. \u73b0\u5728, Ariadne \u9879\u76ee\u6b63\u5728\u4e0d\u65ad\u53d1\u5c55, \u540c\u65f6 Graiax-Community \u4e5f\u5efa\u7acb\u4e86\u8d77\u6765, \u8fd9\u4f7f\u6211\u66f4\u671f\u5f85\u672a\u6765 Ariadne \u7684\u53d1\u5c55\u4e86.","title":"\u53d1\u5c55"},{"location":"blog/history/#_5","text":"\u5f53\u7136, \u73b0\u5728 Avilla \u8fd9\u4e2a\u6781\u5177\u6709\u62d3\u5c55\u6027\u7684\u6846\u67b6\u4e5f\u5728\u4e00\u5929\u5929\u7684\u6210\u719f, \u6211\u60f3\u5728\u65f6\u673a\u6210\u719f\u65f6, Ariadne \u5c31\u4f1a\u6210\u4e3a Avilla \u7684\u4e00\u4e2a MAH v2 \u5c01\u88c5\u5427...... \u4e0d\u8fc7\u73b0\u5728\u8fd8\u7528\u4e0d\u7740\u62c5\u5fc3\u8fd9\u4e2a...... BlueGlassBlock 2021/12/10","title":"\u672a\u6765"},{"location":"blog/twilight/","text":"\u8c08\u8c08 Twilight \ud83d\udd17 \u8bde\u751f \ud83d\udd17 Twilight \u8bde\u751f\u4e8e 2021.11.4 \u7684\u665a\u4e0a. \u4f60\u95ee\u540d\u79f0\u6765\u6e90? \u6587\u6863\u91cc\u5df2\u7ecf\u8bb2\u5f97\u5f88\u6e05\u695a\u4e86\uff08 \u5f53\u65f6\u6211\u5bf9 Twilight \u7684\u5b9a\u4f4d\u662f Literature \u7684\u9752\u6625\u7248, \u4e0d\u8fc7\u73b0\u5728\u5979\u5df2\u7ecf\u6210\u4e3a Kanata \u4e0e Literature \u7684\u7ed3\u5408\u4f53\u4e86 (\u800c\u4e14\u6548\u7387\u66f4\u9ad8)...... \u5173\u4e8e\u4ee3\u7801\u91cf \ud83d\udd17 \u5f53\u65f6\u4e3b\u4ee3\u7801\u53ea\u6709 217 \u884c. \u4e4b\u540e\u5728 a3c17fd \u7684\u91cd\u5199\u4e2d, \u4ee3\u7801\u91cf\u98d9\u5347\u81f3 424 \u884c. \u4e4b\u540e\u56e0\u4e3a\u6574\u5408\u4e86 Match \u7c7b, \u4ee3\u7801\u91cf\u518d\u6b21\u98d9\u5347\u81f3 1K+ \u884c. 0.6.0 \u540e, \u52a0\u4e0a\u6240\u6709\u6742\u4e03\u6742\u516b\u7684\u4e1c\u897f, \u53ea\u5269 664 \u884c. \u5173\u4e8e\u6027\u80fd \ud83d\udd17 \u5176\u5b9e\u6027\u80fd\u5f88\u5927\u7684\u4e00\u4e2a\u74f6\u9888\u5728 deepcopy \u7684\u4f7f\u7528\u4e0a. \u5220\u6389\u4ee5\u540e\u53ef\u4ee5\u8fbe\u5230 22000 msg/s...... \u4e4b\u524d\u53ea\u6709 4000 ~ 6000 msg/s, \u5728 055fb26 \u51cf\u5c11 deepcopy \u4f7f\u7528\u5e76\u66f4\u6539 __getattribute__ \u540e, \u73b0\u5728\u6027\u80fd\u6709 6000 ~ 10000 msg/s \u4e86. \u5176\u5b9e\u6211\u672c\u6765\u4e0d\u60f3\u66b4\u9732 check \u53c2\u6570\u7684\u5339\u914d\u51fa\u6765, \u4f46\u662f A60 \u5df2\u7ecf\u5728\u4ee3\u7801\u91cc\u7528\u4e0a _check_0 \u7b49 private \u53d8\u91cf\u4e86, \u6240\u4ee5\u6700\u540e\u6211\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6298\u4e2d\u65b9\u6848: \u901a\u8fc7 __getitem__ \u8bbf\u95ee. \u73b0\u5728\u6211\u901a\u8fc7 __getattribute__ \u7684\u91cd\u8f7d, \u800c\u975e\u624b\u52a8\u5728\u65b0\u5b9e\u4f8b\u4e0a setattr , \u8ba9\u4ee3\u7801\u903b\u8f91\u6e05\u6670\u4e86\u4e0d\u5c11. 0.6.0 \u540e\u628a\u4e0a\u9762\u90a3\u4e9b\u90fd\u626c\u4e86, \u73b0\u5728\u88f8\u5224\u65ad\u6709 150k+ msg/s , \u8bf7\u6c42\u7684\u53c2\u6570\u540d\u8d8a\u591a, \u6027\u80fd\u8d8a\u4f4e. BlueGlassBlock 2021/12/10","title":"\u8c08\u8c08 Twilight"},{"location":"blog/twilight/#twilight","text":"","title":"\u8c08\u8c08 Twilight"},{"location":"blog/twilight/#_1","text":"Twilight \u8bde\u751f\u4e8e 2021.11.4 \u7684\u665a\u4e0a. \u4f60\u95ee\u540d\u79f0\u6765\u6e90? \u6587\u6863\u91cc\u5df2\u7ecf\u8bb2\u5f97\u5f88\u6e05\u695a\u4e86\uff08 \u5f53\u65f6\u6211\u5bf9 Twilight \u7684\u5b9a\u4f4d\u662f Literature \u7684\u9752\u6625\u7248, \u4e0d\u8fc7\u73b0\u5728\u5979\u5df2\u7ecf\u6210\u4e3a Kanata \u4e0e Literature \u7684\u7ed3\u5408\u4f53\u4e86 (\u800c\u4e14\u6548\u7387\u66f4\u9ad8)......","title":"\u8bde\u751f"},{"location":"blog/twilight/#_2","text":"\u5f53\u65f6\u4e3b\u4ee3\u7801\u53ea\u6709 217 \u884c. \u4e4b\u540e\u5728 a3c17fd \u7684\u91cd\u5199\u4e2d, \u4ee3\u7801\u91cf\u98d9\u5347\u81f3 424 \u884c. \u4e4b\u540e\u56e0\u4e3a\u6574\u5408\u4e86 Match \u7c7b, \u4ee3\u7801\u91cf\u518d\u6b21\u98d9\u5347\u81f3 1K+ \u884c. 0.6.0 \u540e, \u52a0\u4e0a\u6240\u6709\u6742\u4e03\u6742\u516b\u7684\u4e1c\u897f, \u53ea\u5269 664 \u884c.","title":"\u5173\u4e8e\u4ee3\u7801\u91cf"},{"location":"blog/twilight/#_3","text":"\u5176\u5b9e\u6027\u80fd\u5f88\u5927\u7684\u4e00\u4e2a\u74f6\u9888\u5728 deepcopy \u7684\u4f7f\u7528\u4e0a. \u5220\u6389\u4ee5\u540e\u53ef\u4ee5\u8fbe\u5230 22000 msg/s...... \u4e4b\u524d\u53ea\u6709 4000 ~ 6000 msg/s, \u5728 055fb26 \u51cf\u5c11 deepcopy \u4f7f\u7528\u5e76\u66f4\u6539 __getattribute__ \u540e, \u73b0\u5728\u6027\u80fd\u6709 6000 ~ 10000 msg/s \u4e86. \u5176\u5b9e\u6211\u672c\u6765\u4e0d\u60f3\u66b4\u9732 check \u53c2\u6570\u7684\u5339\u914d\u51fa\u6765, \u4f46\u662f A60 \u5df2\u7ecf\u5728\u4ee3\u7801\u91cc\u7528\u4e0a _check_0 \u7b49 private \u53d8\u91cf\u4e86, \u6240\u4ee5\u6700\u540e\u6211\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6298\u4e2d\u65b9\u6848: \u901a\u8fc7 __getitem__ \u8bbf\u95ee. \u73b0\u5728\u6211\u901a\u8fc7 __getattribute__ \u7684\u91cd\u8f7d, \u800c\u975e\u624b\u52a8\u5728\u65b0\u5b9e\u4f8b\u4e0a setattr , \u8ba9\u4ee3\u7801\u903b\u8f91\u6e05\u6670\u4e86\u4e0d\u5c11. 0.6.0 \u540e\u628a\u4e0a\u9762\u90a3\u4e9b\u90fd\u626c\u4e86, \u73b0\u5728\u88f8\u5224\u65ad\u6709 150k+ msg/s , \u8bf7\u6c42\u7684\u53c2\u6570\u540d\u8d8a\u591a, \u6027\u80fd\u8d8a\u4f4e. BlueGlassBlock 2021/12/10","title":"\u5173\u4e8e\u6027\u80fd"},{"location":"elaina/talk/NAV/","text":"importlib.resources \u7b80\u8ff0 \u914d\u7f6e\u6587\u4ef6: Hocon","title":"NAV"},{"location":"elaina/talk/hocon/","text":"\u914d\u7f6e\u6587\u4ef6\u76f8\u5173 \ud83d\udd17 \u5728\u73b0\u6709\u7684, \u6bd4\u5982 A60 \u7684 ABot, \u6216\u662f\u6211\u7684 Stellaium#1 , \u90fd\u6709\u9700\u8981\u914d\u7f6e\u50cf\u662f API \u5bc6\u94a5, \u5404\u79cd\u884c\u4e3a\u7684\u5fc5\u8981... \u90a3\u4e48, \u6211\u4eec\u5148\u8c08\u8c08 HOCON( Human-Optimized Config Object Notation ) \u5427. HOCON \u7b80\u4ecb \ud83d\udd17 HOCON( Human-Optimized Config Object Notation ), \u987e\u540d\u601d\u4e49, \u662f \"\u4e13\u4e3a\u4eba\u7c7b\u7f16\u5199/\u7ef4\u62a4\u7b49\u9700\u6c42\u4f18\u5316( Human-Optimized )\" \u7684\u4e00\u79cd\u914d\u7f6e\u6587\u4ef6\u89c4\u8303. \u867d\u7136\u8fd9\u79cd\u89c4\u8303\u6bd4\u8f83\u5c11\u89c1(\u5927\u90e8\u5206\u90fd\u662f\u4f7f\u7528\u7684 JSON, Yaml \u6216\u662f toml), \u4f46\u5f52\u529f\u4e8e\u524d\u51e0\u5e74 Sponge \u5728\u56fd\u5185\u7684\u63a8\u884c(\u73b0\u5728\u5df2\u7ecf\u5f88\u5c11\u89c1\u4e86...\u771f\u53ef\u60dc), \u4e2d\u6587\u8d44\u6599\u8fd8\u662f\u6bd4\u8f83\u591a\u7684, \u5728\u8fd9\u91cc\u6211\u9644\u4e0a\u51e0\u4efd, \u5e0c\u671b\u8fd9\u4e9b\u8d44\u6599\u4e0d\u8981\u56e0\u4e3a\u6bd4\u7279\u8150\u70c2\u6d88\u5931... (English) Informal but clear spec (Chinese) \u975e\u5b98\u65b9 HOCON \u89c4\u8303\u7ffb\u8bd1 Python \u867d\u7136\u5e76\u6ca1\u6709\u50cf\u662f nodejs \u4e00\u6837\u6050\u6016\u7684\u793e\u533a, \u4f46\u5728\u5173\u952e\u7684\u65f6\u5019\u8fd8\u662f\u9760\u5f97\u4f4f\u7684, \u6bd4\u5982\u63a5\u4e0b\u6765\u8981\u7528\u5230\u7684 HOCON \u89e3\u6790\u5e93. pyhocon \u6211\u4eec\u63a5\u4e0b\u6765\u5c06\u4f7f\u7528 pydantic.BaseSettings \u8fdb\u884c\u914d\u7f6e\u7684\u5b9e\u4f53\u7c7b\u58f0\u660e, \u76f8\u5173\u7684\u6587\u6863: Settings management \u56e0\u4e3a\u8fd9\u662f\u4ece\u6211\u7684\u4e00\u4efd\u53e4\u8001\u7684\u70c2\u5c3e\u9879\u76ee\u91cc\u9762\u62ff\u51fa\u6765\u7684\u9057\u4ea7, \u6240\u4ee5\u4f7f\u7528\u4e86 camelCase (\u5c0f\u9a86\u5cf0) \u540c\u6837, \u56e0\u4e3a\u603b\u4ee3\u7801\u91cf\u624d 30 \u591a\u884c\u4e0a\u4e0b, \u6211\u61d2\u5f97\u53d1\u5305, \u8fd9\u91cc\u6211\u76f4\u63a5\u9644\u4e0a. \u6211\u4e3b\u8981\u5bf9 BaseSettings.Config \u8fdb\u884c\u4e86\u4fee\u6539, \u4f7f\u4e4b\u652f\u6301\u4e86\u4ee5\u4e0b\u7279\u6027: \u81ea\u52a8\u8f6c\u6362\u5b57\u6bb5\u540d\u5230 spinal-case , HOCON \u91cc\u9762\u5199\u8fd9\u79cd\u6bd4\u8f83\u723d. \u8ba9 BaseSettings \u81ea\u52a8\u89e3\u6790\u8fd0\u884c\u76ee\u5f55\u4e0b config.conf . \u672c\u6a21\u5757\u5f15\u7528\u4e86\u4ee5\u4e0b\u7b2c\u4e09\u65b9\u5305, \u6240\u4ee5\u4f60\u9700\u8981\u624b\u52a8 pip install \u6216\u8005 poetry add . stringcase pyhocon pydantic (\u5e9f\u8bdd.) \u4ee5\u4e0b\u4e3a\u6587\u4ef6 hocon_config.py \u7684\u5185\u5bb9: hocon_config.py from typing import Any , Dict from pydantic import BaseSettings , BaseConfig import pyhocon from pathlib import Path import stringcase class HoconModelConfig ( BaseConfig ): extra = \"ignore\" env_file_encoding = 'utf-8' env_file = \"./config.conf\" @classmethod def hocon_config_settings_source ( cls , settings : BaseSettings ) -> Dict [ str , Any ]: encoding = settings . __config__ . env_file_encoding return dict ( pyhocon . ConfigFactory . parse_string ( Path ( cls . env_file ) . read_text ( encoding ))) @classmethod def customise_sources ( cls , init_settings , env_settings , file_secret_settings , ): return ( init_settings , cls . hocon_config_settings_source , env_settings , file_secret_settings , ) alias_generator = stringcase . spinalcase class HoconConfig ( BaseSettings ): class Config ( HoconModelConfig ): pass \u5f15\u7528\u4e0a\u9762\u58f0\u660e\u7684 HoconConfig \u548c HoconModelConfig . from hocon_config import HoconConfig , HoconModelConfig \u9664\u975e\u4f60\u9700\u8981\u4fee\u6539\u8bfb\u53d6\u7684\u6587\u4ef6, HoconModelConfig \u5176\u5b9e\u53ef\u4ee5\u4e0d\u5bfc\u5165. \u968f\u4fbf\u5199\u4e00\u4e2a\u7c7b\u7ee7\u627f HoconConfig , \u6bd4\u5982 BotConfig : \u5176\u5b9e\u4f60\u53ef\u4ee5\u5728\u5404\u4e2a\u6a21\u5757\u91cc\u9762\u58f0\u660e\u5404\u4e2a\u6a21\u5757\u9700\u8981\u7684 Config , \u8fd9\u6837\u5c31\u80fd\u628a\u4e0e\u5355\u4e00\u4e00\u4e2a\u590d\u6742, \u8ba9\u4eba\u5934\u75bc\u7684\u914d\u7f6e\u58f0\u660e\u8f6c\u5316\u4e3a\u4ec5\u4e0e\u6a21\u5757\u6240\u9700\u8981\u7684\u76f8\u5173\u8054\u7684, \u4f18\u96c5\u7684\u914d\u7f6e. class GithubConfig ( HoconConfig ): access_token : str ... # \u5176\u4ed6\u7684\u5b57\u6bb5\u4e5f\u53ef\u4ee5\u4e00\u5e76\u52a0\u4e0a, \u5e76\u4e14\u6211\u63a8\u8350\u5c3d\u53ef\u80fd\u7684\u63d0\u4f9b\u9ed8\u8ba4\u503c. # \u6bd4\u5982\u4f60\u5176\u5b9e\u4e5f\u53ef\u4ee5\u628a access_token \u4e5f\u6362\u6210 optional, \u53ea\u4e0d\u8fc7\u6ca1\u6709 access_token, github \u4f1a\u75af\u72c2\u7ed9\u4f60\u8fd4\u56de 429 \u5c31\u662f\u4e86. \u8fd9\u91cc\u7684\u547d\u540d\u65b9\u5f0f\u4e3a snake_case \u7684\u5b57\u6bb5\u4f1a\u88ab\u8f6c\u6362\u4e3a camelCase . \u5176\u5bf9\u5e94\u7684\u914d\u7f6e\u6587\u4ef6\u683c\u5f0f\u662f\u8fd9\u6837\u7684: access-token: balabala \u5728\u7528\u7684\u65f6\u5019\u76f4\u63a5\u5b9e\u4f8b\u5316 GithubConfig \u5373\u53ef, \u5f53\u7136\u4f60\u7684\u9759\u6001\u7c7b\u578b\u68c0\u67e5\u5668\u53ef\u80fd\u4f1a\u53d1\u75af, \u52a0\u4e0a # type: ignore \u6216\u662f # noqa \u53ef\u4ee5\u4f7f\u5176\u95ed\u5634, \u6216\u8005\u4f60\u4e5f\u53ef\u4ee5\u7ed9\u90a3\u4e9b\u7a7a\u7740\u7684\u5b57\u6bb5\u52a0\u4e0a Optional \u548c\u9ed8\u8ba4\u503c. \u8fd9\u91cc\u63a8\u8350\u5728\u7c7b\u4f3c __init__.py \u5185\u5b9e\u4f8b\u5316, \u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u4f7f\u7528 Saya \u5bfc\u5165\u6a21\u5757\u65f6\u5c31\u8bfb\u53d6\u914d\u7f6e. \u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e0b\u53cd\u590d\u5b9e\u4f8b\u5316, \u5e94\u8be5\u4f1a\u91cd\u65b0\u52a0\u8f7d\u914d\u7f6e, \u4e0d\u8fc7\u4f60\u5f97\u4fdd\u8bc1\u7a0b\u5e8f\u5176\u4ed6\u90e8\u5206\u7684\u5f15\u7528\u4e0d\u51fa\u9519. github_config = GithubConfig () # type: ignore \u7136\u540e\u76f4\u63a5\u7528\u5c31\u597d\u4e86: ... transport = AIOHTTPTransport ( url = \"https://api.github.com/graphql\" , headers = { \"Authorization\" : f \"Bearer { config . access_token } \" , }) ... \u9664\u6b64\u4e4b\u5916, HOCON \u8fd8\u652f\u6301\u5f88\u591a\u9707\u64bc\u4eba\u5fc3\u7684\u7279\u6027, \u6bd4\u5982: yggdrasil { token { availability: 8 minutes outdate: 10 minutes } } \u5176\u4e2d, yggdrasil.token.availability \u548c yggdrasil.token.outdate \u4f1a\u88ab pyhocon \u89e3\u6790\u4e3a timedelta . class YggdrasilTokenConfig ( BaseModel ): availability : timedelta outdate : timedelta class YggdrasilConfig ( HoconConfig ): token : YggdrasilTokenConfig \u4e0d\u8fc7, \u5373\u4f7f\u4f60\u4ece\u6211\u8fd9\u7bc7\u788e\u788e\u5ff5\u91cc\u9762\u5b66\u5230\u4e86\u600e\u4e48\u7528 pydantic + hocon , \u4e5f\u4e0d\u8981\u51b2\u52a8\u5230\u76f4\u63a5\u628a\u4f60\u7684\u73b0\u6709\u65b9\u5f0f\u6362\u6210\u8fd9\u6837, \u867d\u7136 hocon \u662f json \u7684\u8d85\u96c6(like typescript to javascript). \u6216\u8bb8\u5728\u672a\u6765, Avilla Config \u9ed8\u8ba4\u5c31\u662f\u7528\u7684 HOCON \u5462?","title":"\u914d\u7f6e\u6587\u4ef6: Hocon"},{"location":"elaina/talk/hocon/#_1","text":"\u5728\u73b0\u6709\u7684, \u6bd4\u5982 A60 \u7684 ABot, \u6216\u662f\u6211\u7684 Stellaium#1 , \u90fd\u6709\u9700\u8981\u914d\u7f6e\u50cf\u662f API \u5bc6\u94a5, \u5404\u79cd\u884c\u4e3a\u7684\u5fc5\u8981... \u90a3\u4e48, \u6211\u4eec\u5148\u8c08\u8c08 HOCON( Human-Optimized Config Object Notation ) \u5427.","title":"\u914d\u7f6e\u6587\u4ef6\u76f8\u5173"},{"location":"elaina/talk/hocon/#hocon","text":"HOCON( Human-Optimized Config Object Notation ), \u987e\u540d\u601d\u4e49, \u662f \"\u4e13\u4e3a\u4eba\u7c7b\u7f16\u5199/\u7ef4\u62a4\u7b49\u9700\u6c42\u4f18\u5316( Human-Optimized )\" \u7684\u4e00\u79cd\u914d\u7f6e\u6587\u4ef6\u89c4\u8303. \u867d\u7136\u8fd9\u79cd\u89c4\u8303\u6bd4\u8f83\u5c11\u89c1(\u5927\u90e8\u5206\u90fd\u662f\u4f7f\u7528\u7684 JSON, Yaml \u6216\u662f toml), \u4f46\u5f52\u529f\u4e8e\u524d\u51e0\u5e74 Sponge \u5728\u56fd\u5185\u7684\u63a8\u884c(\u73b0\u5728\u5df2\u7ecf\u5f88\u5c11\u89c1\u4e86...\u771f\u53ef\u60dc), \u4e2d\u6587\u8d44\u6599\u8fd8\u662f\u6bd4\u8f83\u591a\u7684, \u5728\u8fd9\u91cc\u6211\u9644\u4e0a\u51e0\u4efd, \u5e0c\u671b\u8fd9\u4e9b\u8d44\u6599\u4e0d\u8981\u56e0\u4e3a\u6bd4\u7279\u8150\u70c2\u6d88\u5931... (English) Informal but clear spec (Chinese) \u975e\u5b98\u65b9 HOCON \u89c4\u8303\u7ffb\u8bd1 Python \u867d\u7136\u5e76\u6ca1\u6709\u50cf\u662f nodejs \u4e00\u6837\u6050\u6016\u7684\u793e\u533a, \u4f46\u5728\u5173\u952e\u7684\u65f6\u5019\u8fd8\u662f\u9760\u5f97\u4f4f\u7684, \u6bd4\u5982\u63a5\u4e0b\u6765\u8981\u7528\u5230\u7684 HOCON \u89e3\u6790\u5e93. pyhocon \u6211\u4eec\u63a5\u4e0b\u6765\u5c06\u4f7f\u7528 pydantic.BaseSettings \u8fdb\u884c\u914d\u7f6e\u7684\u5b9e\u4f53\u7c7b\u58f0\u660e, \u76f8\u5173\u7684\u6587\u6863: Settings management \u56e0\u4e3a\u8fd9\u662f\u4ece\u6211\u7684\u4e00\u4efd\u53e4\u8001\u7684\u70c2\u5c3e\u9879\u76ee\u91cc\u9762\u62ff\u51fa\u6765\u7684\u9057\u4ea7, \u6240\u4ee5\u4f7f\u7528\u4e86 camelCase (\u5c0f\u9a86\u5cf0) \u540c\u6837, \u56e0\u4e3a\u603b\u4ee3\u7801\u91cf\u624d 30 \u591a\u884c\u4e0a\u4e0b, \u6211\u61d2\u5f97\u53d1\u5305, \u8fd9\u91cc\u6211\u76f4\u63a5\u9644\u4e0a. \u6211\u4e3b\u8981\u5bf9 BaseSettings.Config \u8fdb\u884c\u4e86\u4fee\u6539, \u4f7f\u4e4b\u652f\u6301\u4e86\u4ee5\u4e0b\u7279\u6027: \u81ea\u52a8\u8f6c\u6362\u5b57\u6bb5\u540d\u5230 spinal-case , HOCON \u91cc\u9762\u5199\u8fd9\u79cd\u6bd4\u8f83\u723d. \u8ba9 BaseSettings \u81ea\u52a8\u89e3\u6790\u8fd0\u884c\u76ee\u5f55\u4e0b config.conf . \u672c\u6a21\u5757\u5f15\u7528\u4e86\u4ee5\u4e0b\u7b2c\u4e09\u65b9\u5305, \u6240\u4ee5\u4f60\u9700\u8981\u624b\u52a8 pip install \u6216\u8005 poetry add . stringcase pyhocon pydantic (\u5e9f\u8bdd.) \u4ee5\u4e0b\u4e3a\u6587\u4ef6 hocon_config.py \u7684\u5185\u5bb9: hocon_config.py from typing import Any , Dict from pydantic import BaseSettings , BaseConfig import pyhocon from pathlib import Path import stringcase class HoconModelConfig ( BaseConfig ): extra = \"ignore\" env_file_encoding = 'utf-8' env_file = \"./config.conf\" @classmethod def hocon_config_settings_source ( cls , settings : BaseSettings ) -> Dict [ str , Any ]: encoding = settings . __config__ . env_file_encoding return dict ( pyhocon . ConfigFactory . parse_string ( Path ( cls . env_file ) . read_text ( encoding ))) @classmethod def customise_sources ( cls , init_settings , env_settings , file_secret_settings , ): return ( init_settings , cls . hocon_config_settings_source , env_settings , file_secret_settings , ) alias_generator = stringcase . spinalcase class HoconConfig ( BaseSettings ): class Config ( HoconModelConfig ): pass \u5f15\u7528\u4e0a\u9762\u58f0\u660e\u7684 HoconConfig \u548c HoconModelConfig . from hocon_config import HoconConfig , HoconModelConfig \u9664\u975e\u4f60\u9700\u8981\u4fee\u6539\u8bfb\u53d6\u7684\u6587\u4ef6, HoconModelConfig \u5176\u5b9e\u53ef\u4ee5\u4e0d\u5bfc\u5165. \u968f\u4fbf\u5199\u4e00\u4e2a\u7c7b\u7ee7\u627f HoconConfig , \u6bd4\u5982 BotConfig : \u5176\u5b9e\u4f60\u53ef\u4ee5\u5728\u5404\u4e2a\u6a21\u5757\u91cc\u9762\u58f0\u660e\u5404\u4e2a\u6a21\u5757\u9700\u8981\u7684 Config , \u8fd9\u6837\u5c31\u80fd\u628a\u4e0e\u5355\u4e00\u4e00\u4e2a\u590d\u6742, \u8ba9\u4eba\u5934\u75bc\u7684\u914d\u7f6e\u58f0\u660e\u8f6c\u5316\u4e3a\u4ec5\u4e0e\u6a21\u5757\u6240\u9700\u8981\u7684\u76f8\u5173\u8054\u7684, \u4f18\u96c5\u7684\u914d\u7f6e. class GithubConfig ( HoconConfig ): access_token : str ... # \u5176\u4ed6\u7684\u5b57\u6bb5\u4e5f\u53ef\u4ee5\u4e00\u5e76\u52a0\u4e0a, \u5e76\u4e14\u6211\u63a8\u8350\u5c3d\u53ef\u80fd\u7684\u63d0\u4f9b\u9ed8\u8ba4\u503c. # \u6bd4\u5982\u4f60\u5176\u5b9e\u4e5f\u53ef\u4ee5\u628a access_token \u4e5f\u6362\u6210 optional, \u53ea\u4e0d\u8fc7\u6ca1\u6709 access_token, github \u4f1a\u75af\u72c2\u7ed9\u4f60\u8fd4\u56de 429 \u5c31\u662f\u4e86. \u8fd9\u91cc\u7684\u547d\u540d\u65b9\u5f0f\u4e3a snake_case \u7684\u5b57\u6bb5\u4f1a\u88ab\u8f6c\u6362\u4e3a camelCase . \u5176\u5bf9\u5e94\u7684\u914d\u7f6e\u6587\u4ef6\u683c\u5f0f\u662f\u8fd9\u6837\u7684: access-token: balabala \u5728\u7528\u7684\u65f6\u5019\u76f4\u63a5\u5b9e\u4f8b\u5316 GithubConfig \u5373\u53ef, \u5f53\u7136\u4f60\u7684\u9759\u6001\u7c7b\u578b\u68c0\u67e5\u5668\u53ef\u80fd\u4f1a\u53d1\u75af, \u52a0\u4e0a # type: ignore \u6216\u662f # noqa \u53ef\u4ee5\u4f7f\u5176\u95ed\u5634, \u6216\u8005\u4f60\u4e5f\u53ef\u4ee5\u7ed9\u90a3\u4e9b\u7a7a\u7740\u7684\u5b57\u6bb5\u52a0\u4e0a Optional \u548c\u9ed8\u8ba4\u503c. \u8fd9\u91cc\u63a8\u8350\u5728\u7c7b\u4f3c __init__.py \u5185\u5b9e\u4f8b\u5316, \u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u4f7f\u7528 Saya \u5bfc\u5165\u6a21\u5757\u65f6\u5c31\u8bfb\u53d6\u914d\u7f6e. \u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e0b\u53cd\u590d\u5b9e\u4f8b\u5316, \u5e94\u8be5\u4f1a\u91cd\u65b0\u52a0\u8f7d\u914d\u7f6e, \u4e0d\u8fc7\u4f60\u5f97\u4fdd\u8bc1\u7a0b\u5e8f\u5176\u4ed6\u90e8\u5206\u7684\u5f15\u7528\u4e0d\u51fa\u9519. github_config = GithubConfig () # type: ignore \u7136\u540e\u76f4\u63a5\u7528\u5c31\u597d\u4e86: ... transport = AIOHTTPTransport ( url = \"https://api.github.com/graphql\" , headers = { \"Authorization\" : f \"Bearer { config . access_token } \" , }) ... \u9664\u6b64\u4e4b\u5916, HOCON \u8fd8\u652f\u6301\u5f88\u591a\u9707\u64bc\u4eba\u5fc3\u7684\u7279\u6027, \u6bd4\u5982: yggdrasil { token { availability: 8 minutes outdate: 10 minutes } } \u5176\u4e2d, yggdrasil.token.availability \u548c yggdrasil.token.outdate \u4f1a\u88ab pyhocon \u89e3\u6790\u4e3a timedelta . class YggdrasilTokenConfig ( BaseModel ): availability : timedelta outdate : timedelta class YggdrasilConfig ( HoconConfig ): token : YggdrasilTokenConfig \u4e0d\u8fc7, \u5373\u4f7f\u4f60\u4ece\u6211\u8fd9\u7bc7\u788e\u788e\u5ff5\u91cc\u9762\u5b66\u5230\u4e86\u600e\u4e48\u7528 pydantic + hocon , \u4e5f\u4e0d\u8981\u51b2\u52a8\u5230\u76f4\u63a5\u628a\u4f60\u7684\u73b0\u6709\u65b9\u5f0f\u6362\u6210\u8fd9\u6837, \u867d\u7136 hocon \u662f json \u7684\u8d85\u96c6(like typescript to javascript). \u6216\u8bb8\u5728\u672a\u6765, Avilla Config \u9ed8\u8ba4\u5c31\u662f\u7528\u7684 HOCON \u5462?","title":"HOCON \u7b80\u4ecb"},{"location":"elaina/talk/imp_res/","text":"importlib.resources \u7b80\u8981\u6982\u8ff0 \ud83d\udd17 \u5728\u6700\u8fd1\u62ff Ariadne \u5199 Github Bot \u7684\u65f6\u5019, \u6211\u78b0\u5230\u4e86\u9700\u8981\u5f15\u7528\u5916\u90e8 gql \u6587\u4ef6(GraphQL \u7684\u63cf\u8ff0\u6587\u4ef6)\u7684\u9700\u6c42, \u5728\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u65f6, \u6211\u4f7f\u7528\u4e86 importlib.resources \u8fd9\u4e2a\u6807\u51c6\u5e93\u6a21\u5757. \u6211\u5c06\u5728\u8fd9\u4e2a LightTalk \u4e2d\u7b80\u5355\u4ecb\u7ecd\u8fd9\u4e2a\u6a21\u5757\u7684\u4f7f\u7528\u65b9\u6cd5. \u8fd9\u4e2a\u6a21\u5757\u7528\u4e8e\u5728 Python Module / Package \u4e2d\u5f15\u7528\u9759\u6001\u6587\u4ef6, \u5e76\u5141\u8bb8 poetry \u7b49\u6253\u5305\u5de5\u5177\u5c06\u8be5\u9759\u6001\u6587\u4ef6\u653e\u5165\u5305\u4e2d\u5e76\u53d1\u5e03\u5230 pypi . \u5173\u4e8e Saya \u6a21\u5757\u7684\u53d1\u5e03\u65b9\u5f0f \u6211\u5728\u5f88\u591a\u7684, \u50cf\u662f A60, Redlnn \u7b49\u4eba\u7684 Graia \u5e94\u7528\u4e2d\u770b\u5230\u4ed6\u4eec\u4f7f\u7528\u4e86 modules , plugins \u8fd9\u79cd\u7c7b\u4f3c Bukkit \u7684\u76ee\u5f55\u6a21\u5f0f. \u4e8b\u5b9e\u4e0a, \u7531\u4e8e\u6211\u5e76\u6ca1\u6709\u5bf9\u5173\u4e8e Saya \u6a21\u5757\u548c\u4f7f\u7528\u5230 Saya \u7684\u5e94\u7528\u5199\u6587\u6863\u6307\u5bfc, \u8fd9\u79cd\u60c5\u51b5\u53cd\u800c\u662f\u5728\u6211\u610f\u6599\u4e4b\u4e2d... \u5c31\u7b97\u6211\u5f3a\u884c\u63a8\u8fdb\u6211\u60f3\u8c61\u7684\u7406\u60f3\u67b6\u6784, Python \u73b0\u5728\u4e5f\u6ca1\u6709\u7c7b\u4f3c lerna \u8fd9\u6837\u7684\u7528\u4e8e monorepo \u6a21\u5f0f\u5f00\u53d1\u7684\u5305\u7ba1\u7406\u5de5\u5177... \u90a3\u4e48\u6211\u5c31\u5148\u505a\u4e2a\u793a\u8303\u5427. \u76ee\u5f55\u7ed3\u6784\u5c55\u793a \ud83d\udd17 stellaium \u2514\u2500order_1 \u251c\u2500commands \u251c\u2500github \u251c\u2500commands | \u2514\u2500 repo.py \u2514\u2500resources \u2514\u2500 __init__.py \u2514\u2500 simple_repo_info.gql \u6211\u4eec\u5c06 stellaium.order_1.github.resources \u4f5c\u4e3a\u6211\u4eec\u7684 \u8d44\u6e90\u5305 , \u5e76\u5728\u5176\u4ed6\u7684\u5730\u65b9\u5f15\u7528. \u8fd9\u91cc\u4ee5\u5f15\u7528 simple_repo_info.gql \u6587\u4ef6\u4f5c\u4e3a\u793a\u8303. import importlib.resources as pkg_resources import stellaium.order_1.github.resources as resources with pkg_resources . path ( resources , \"simple_repo_info.gql\" ) as file : ... # file \u5728\u8fd9\u91cc\u662f\u4e2a pathlib.Path, \u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5 read_text \u548c read_bytes. \u5982\u679c\u4f60\u7684\u5305\u7ba1\u7406\u5de5\u5177\u914d\u7f6e\u6b63\u786e(\u901a\u5e38\u6765\u8bb2\u4e0d\u9700\u8981\u591a\u505a\u4ec0\u4e48\u4e8b, \u9664\u975e\u4f60\u914d\u7f6e\u4e86 glob), \u9759\u6001\u8d44\u6e90\u6587\u4ef6\u4e5f\u4f1a\u88ab\u6253\u5305. \u8fd9\u79cd\u65b9\u5f0f\u51cf\u5c11\u4e86\u5bf9\u4e8e\u542f\u52a8 Saya \u5e94\u7528\u65f6\u5f3a\u52a0\u7684\u8fd0\u884c\u76ee\u5f55\u8981\u6c42. \u8bf7\u4e0d\u8981\u5c06\u6570\u636e\u5e93\u6587\u4ef6/\u914d\u7f6e\u6587\u4ef6/\u542b\u6709\u7528\u6237\u6570\u636e\u7684\u6587\u4ef6\u4f5c\u4e3a\u9759\u6001\u8d44\u6e90.","title":"importlib.resources \u7b80\u8ff0"},{"location":"elaina/talk/imp_res/#importlibresources","text":"\u5728\u6700\u8fd1\u62ff Ariadne \u5199 Github Bot \u7684\u65f6\u5019, \u6211\u78b0\u5230\u4e86\u9700\u8981\u5f15\u7528\u5916\u90e8 gql \u6587\u4ef6(GraphQL \u7684\u63cf\u8ff0\u6587\u4ef6)\u7684\u9700\u6c42, \u5728\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u65f6, \u6211\u4f7f\u7528\u4e86 importlib.resources \u8fd9\u4e2a\u6807\u51c6\u5e93\u6a21\u5757. \u6211\u5c06\u5728\u8fd9\u4e2a LightTalk \u4e2d\u7b80\u5355\u4ecb\u7ecd\u8fd9\u4e2a\u6a21\u5757\u7684\u4f7f\u7528\u65b9\u6cd5. \u8fd9\u4e2a\u6a21\u5757\u7528\u4e8e\u5728 Python Module / Package \u4e2d\u5f15\u7528\u9759\u6001\u6587\u4ef6, \u5e76\u5141\u8bb8 poetry \u7b49\u6253\u5305\u5de5\u5177\u5c06\u8be5\u9759\u6001\u6587\u4ef6\u653e\u5165\u5305\u4e2d\u5e76\u53d1\u5e03\u5230 pypi . \u5173\u4e8e Saya \u6a21\u5757\u7684\u53d1\u5e03\u65b9\u5f0f \u6211\u5728\u5f88\u591a\u7684, \u50cf\u662f A60, Redlnn \u7b49\u4eba\u7684 Graia \u5e94\u7528\u4e2d\u770b\u5230\u4ed6\u4eec\u4f7f\u7528\u4e86 modules , plugins \u8fd9\u79cd\u7c7b\u4f3c Bukkit \u7684\u76ee\u5f55\u6a21\u5f0f. \u4e8b\u5b9e\u4e0a, \u7531\u4e8e\u6211\u5e76\u6ca1\u6709\u5bf9\u5173\u4e8e Saya \u6a21\u5757\u548c\u4f7f\u7528\u5230 Saya \u7684\u5e94\u7528\u5199\u6587\u6863\u6307\u5bfc, \u8fd9\u79cd\u60c5\u51b5\u53cd\u800c\u662f\u5728\u6211\u610f\u6599\u4e4b\u4e2d... \u5c31\u7b97\u6211\u5f3a\u884c\u63a8\u8fdb\u6211\u60f3\u8c61\u7684\u7406\u60f3\u67b6\u6784, Python \u73b0\u5728\u4e5f\u6ca1\u6709\u7c7b\u4f3c lerna \u8fd9\u6837\u7684\u7528\u4e8e monorepo \u6a21\u5f0f\u5f00\u53d1\u7684\u5305\u7ba1\u7406\u5de5\u5177... \u90a3\u4e48\u6211\u5c31\u5148\u505a\u4e2a\u793a\u8303\u5427.","title":"importlib.resources \u7b80\u8981\u6982\u8ff0"},{"location":"elaina/talk/imp_res/#_1","text":"stellaium \u2514\u2500order_1 \u251c\u2500commands \u251c\u2500github \u251c\u2500commands | \u2514\u2500 repo.py \u2514\u2500resources \u2514\u2500 __init__.py \u2514\u2500 simple_repo_info.gql \u6211\u4eec\u5c06 stellaium.order_1.github.resources \u4f5c\u4e3a\u6211\u4eec\u7684 \u8d44\u6e90\u5305 , \u5e76\u5728\u5176\u4ed6\u7684\u5730\u65b9\u5f15\u7528. \u8fd9\u91cc\u4ee5\u5f15\u7528 simple_repo_info.gql \u6587\u4ef6\u4f5c\u4e3a\u793a\u8303. import importlib.resources as pkg_resources import stellaium.order_1.github.resources as resources with pkg_resources . path ( resources , \"simple_repo_info.gql\" ) as file : ... # file \u5728\u8fd9\u91cc\u662f\u4e2a pathlib.Path, \u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5 read_text \u548c read_bytes. \u5982\u679c\u4f60\u7684\u5305\u7ba1\u7406\u5de5\u5177\u914d\u7f6e\u6b63\u786e(\u901a\u5e38\u6765\u8bb2\u4e0d\u9700\u8981\u591a\u505a\u4ec0\u4e48\u4e8b, \u9664\u975e\u4f60\u914d\u7f6e\u4e86 glob), \u9759\u6001\u8d44\u6e90\u6587\u4ef6\u4e5f\u4f1a\u88ab\u6253\u5305. \u8fd9\u79cd\u65b9\u5f0f\u51cf\u5c11\u4e86\u5bf9\u4e8e\u542f\u52a8 Saya \u5e94\u7528\u65f6\u5f3a\u52a0\u7684\u8fd0\u884c\u76ee\u5f55\u8981\u6c42. \u8bf7\u4e0d\u8981\u5c06\u6570\u636e\u5e93\u6587\u4ef6/\u914d\u7f6e\u6587\u4ef6/\u542b\u6709\u7528\u6237\u6570\u636e\u7684\u6587\u4ef6\u4f5c\u4e3a\u9759\u6001\u8d44\u6e90.","title":"\u76ee\u5f55\u7ed3\u6784\u5c55\u793a"},{"location":"extra/NAV/","text":"Saya \u5f00\u59cb \u4f7f\u7528 Channel \u8de8\u6a21\u5757 \u8ba1\u5212\u4efb\u52a1 \u51b7\u5374 \u65e5\u5fd7\u8bb0\u5f55 \u6d88\u606f\u94fe\u5de5\u5177 \u51fd\u6570\u5f02\u6b65\u5316 \u5b9e\u65f6\u63a7\u5236\u53f0","title":"NAV"},{"location":"extra/async-exec/","text":"\u51fd\u6570\u5f02\u6b65\u5316 \ud83d\udd17 Ariadne \u5728 util.async_exec \u6a21\u5757\u91cc\u63d0\u4f9b\u4e86 io_bound \u4e0e cpu_bound \u4e24\u4e2a\u51fd\u6570, \u53ef\u4ee5\u7528\u4e8e\u65b9\u4fbf\u7684\u5c06\u666e\u901a\u51fd\u6570\u5f02\u6b65\u5316\u4ee5\u9632\u6b62\u963b\u585e. \u7528\u6cd5 \ud83d\udd17 \u9996\u5148\u5bfc\u5165: from graia.ariadne.util.async_exec import io_bound , cpu_bound \u7136\u540e\u5bf9\u51fd\u6570\u5305\u88c5: @cpu_bound def foo ( n : int ) -> int : ans = 0 for i in range ( 1 , n + 1 ): ans += i ** i return ans \u8fd9\u65f6, foo \u7684\u7b7e\u540d\u5c31\u4ece\u539f\u6765\u7684 (n: int) -> int \u53d8\u4e3a\u4e86 (n: int) -> Awaitable[int] . \u5728\u5176\u4ed6\u5730\u65b9, \u4f7f\u7528 await foo(50000) \u6765\u5f02\u6b65\u5730\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570. \u8b66\u544a \u8fd9\u4e24\u4e2a\u88c5\u9970\u5668\u90fd\u4e0d\u80fd\u7528\u4e8e\u52a8\u6001\u521b\u5efa\u7684\u51fd\u6570 (\u5982\u95ed\u5305, lambda \u8868\u8fbe\u5f0f). io_bound \u5305\u88c5\u8fc7\u7684\u51fd\u6570\u662f\u5728\u5355\u72ec \u7ebf\u7a0b \u4e2d\u8fd0\u884c\u7684\uff0c cpu_bound \u5305\u88c5\u8fc7\u7684\u51fd\u6570\u662f\u5728\u5355\u72ec \u8fdb\u7a0b \u4e2d\u8fd0\u884c\u7684\uff0c \u9650\u5236 \u56e0\u4e3a cpu_bound \u7684\u53c2\u6570\u662f\u901a\u8fc7 pickle \u4f20\u5165\u7684, \u6240\u4ee5\u4e0d\u8981\u60f3\u7740\u4f20\u9012\u5947\u5947\u602a\u602a\u7684\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570 (\u6587\u4ef6, \u7a97\u53e3, \u8fdb\u7a0b, \u534f\u7a0b\u7b49). \u4e5f\u56e0\u4e3a\u8fd9\u4e2a, cpu_bound \u5305\u88c5\u7684\u51fd\u6570 \u6240\u5728\u6a21\u5757 \u5728\u5bfc\u5165\u65f6\u4e0d\u80fd\u6267\u884c Saya Channel \u4e4b\u7c7b\u4e0a\u4e0b\u6587\u7684\u83b7\u53d6\u64cd\u4f5c. \u63d0\u793a \u5982\u679c\u4f60\u9700\u8981\u5728 Saya \u6a21\u5757\u4e2d\u5305\u88c5 cpu_bound \u51fd\u6570, \u4e5f\u662f\u53ef\u4ee5\u7684, \u4f46\u662f\u8981\u5c06\u4e0a\u4e0b\u6587\u7684\u503c\u8bbe\u4e3a Dummy \u5bf9\u8c61: # import ... from graia.ariadne.util.async_exec import IS_MAIN_PROCESS from graia.ariadne.util import Dummy if IS_MAIN_PROCESS (): saya = Saya . current () channel = Channel . current () ... else : saya = Dummy () channel = Dummy () ... ... \u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u53ea\u5728\u4e3b\u8fdb\u7a0b\u4e2d\u8fdb\u884c\u4e0a\u4e0b\u6587\u7684\u83b7\u53d6\u4e86. \u5145\u5206\u5229\u7528 ParallelExecutor \ud83d\udd17 \u5728\u4f60\u7684\u4ee3\u7801\u4e2d\u53ef\u4ee5\u901a\u8fc7 ParallelExecutor.get() \u5f97\u5230\u4e00\u4e2a ParallelExecutor \u5b9e\u4f8b, \u53ef\u4ee5\u5728\u5176\u4e0a\u8fd0\u884c to_thread \u4e0e to_process \u5f02\u6b65\u65b9\u6cd5. \u8fd9\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u8fd0\u884c\u88ab\u5305\u88c5\u8fc7\u7684\u548c\u6ca1\u88ab\u5305\u88c5\u8fc7\u7684\u51fd\u6570. \u63d0\u793a \u6ce8\u610f\u5176\u7b7e\u540d\u4e3a (func: Callable[P, R], *args, *kwargs) -> Awaitable[R] . \u4e5f\u5c31\u662f\u8bf4, \u4e0d\u7528\u4f20\u5165\u5143\u7ec4\u4f5c\u4e3a\u6253\u5305\u7684\u53c2\u6570\u4e86. \u8fdb\u4e00\u6b65\u63a7\u5236 \ud83d\udd17 \u8981\u8fdb\u4e00\u6b65\u63a7\u5236, \u53ef\u4ee5\u4ece graia.ariadne.util.async_exec \u5bfc\u5165 ParallelExecutor . \u901a\u8fc7\u63d0\u524d\u6267\u884c ParallelExecutor(loop=app.loop, max_thread=max_t, max_proc=max_p) \u53ef\u4ee5\u63a7\u5236\u5e76\u884c\u6267\u884c\u5668\u7684\u6700\u5927\u7ebf\u7a0b, \u8fdb\u7a0b\u6570. loop \u53ef\u4ee5\u5728\u4e4b\u540e\u901a\u8fc7 bind_loop \u51fd\u6570\u4f20\u5165. \u539f\u7406 \ud83d\udd17 \u56e0\u4e3a\u88ab io_bound cpu_bound \u5305\u88c5\u7684\u51fd\u6570\u5728\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u65e0\u6cd5\u8bbf\u95ee\u5230\u5176\u539f\u6709\u51fd\u6570, \u6211\u4eec\u5728 ParallelExecutor \u7684\u7c7b\u53d8\u91cf func_mapping \u4e2d\u5b58\u50a8\u4e86\u51fd\u6570\u7684 __qualname__ \u81f3\u539f\u51fd\u6570\u672c\u8eab\u7684\u6620\u5c04. \u8fd9\u6837\u6267\u884c\u65f6 io_bound cpu_bound \u53ea\u4f20\u9012 __qualname__ \u4e0e __module__ \u7ed9\u5b9e\u9645\u7684\u6267\u884c\u51fd\u6570, \u5b83\u4f1a\u901a\u8fc7\u5bfc\u5165 __module__ \u5b8c\u6210\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u7684\u51fd\u6570\u6ce8\u518c. \u4e4b\u540e\u901a\u8fc7 ParallelExecutor.func_mapping[func_qualname](*args, **kwargs) \u5b8c\u6210\u8c03\u7528. \u793e\u533a\u6587\u6863\u76f8\u5173\u7ae0\u8282: \u94fe\u63a5","title":"\u51fd\u6570\u5f02\u6b65\u5316"},{"location":"extra/async-exec/#_1","text":"Ariadne \u5728 util.async_exec \u6a21\u5757\u91cc\u63d0\u4f9b\u4e86 io_bound \u4e0e cpu_bound \u4e24\u4e2a\u51fd\u6570, \u53ef\u4ee5\u7528\u4e8e\u65b9\u4fbf\u7684\u5c06\u666e\u901a\u51fd\u6570\u5f02\u6b65\u5316\u4ee5\u9632\u6b62\u963b\u585e.","title":"\u51fd\u6570\u5f02\u6b65\u5316"},{"location":"extra/async-exec/#_2","text":"\u9996\u5148\u5bfc\u5165: from graia.ariadne.util.async_exec import io_bound , cpu_bound \u7136\u540e\u5bf9\u51fd\u6570\u5305\u88c5: @cpu_bound def foo ( n : int ) -> int : ans = 0 for i in range ( 1 , n + 1 ): ans += i ** i return ans \u8fd9\u65f6, foo \u7684\u7b7e\u540d\u5c31\u4ece\u539f\u6765\u7684 (n: int) -> int \u53d8\u4e3a\u4e86 (n: int) -> Awaitable[int] . \u5728\u5176\u4ed6\u5730\u65b9, \u4f7f\u7528 await foo(50000) \u6765\u5f02\u6b65\u5730\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570. \u8b66\u544a \u8fd9\u4e24\u4e2a\u88c5\u9970\u5668\u90fd\u4e0d\u80fd\u7528\u4e8e\u52a8\u6001\u521b\u5efa\u7684\u51fd\u6570 (\u5982\u95ed\u5305, lambda \u8868\u8fbe\u5f0f). io_bound \u5305\u88c5\u8fc7\u7684\u51fd\u6570\u662f\u5728\u5355\u72ec \u7ebf\u7a0b \u4e2d\u8fd0\u884c\u7684\uff0c cpu_bound \u5305\u88c5\u8fc7\u7684\u51fd\u6570\u662f\u5728\u5355\u72ec \u8fdb\u7a0b \u4e2d\u8fd0\u884c\u7684\uff0c \u9650\u5236 \u56e0\u4e3a cpu_bound \u7684\u53c2\u6570\u662f\u901a\u8fc7 pickle \u4f20\u5165\u7684, \u6240\u4ee5\u4e0d\u8981\u60f3\u7740\u4f20\u9012\u5947\u5947\u602a\u602a\u7684\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570 (\u6587\u4ef6, \u7a97\u53e3, \u8fdb\u7a0b, \u534f\u7a0b\u7b49). \u4e5f\u56e0\u4e3a\u8fd9\u4e2a, cpu_bound \u5305\u88c5\u7684\u51fd\u6570 \u6240\u5728\u6a21\u5757 \u5728\u5bfc\u5165\u65f6\u4e0d\u80fd\u6267\u884c Saya Channel \u4e4b\u7c7b\u4e0a\u4e0b\u6587\u7684\u83b7\u53d6\u64cd\u4f5c. \u63d0\u793a \u5982\u679c\u4f60\u9700\u8981\u5728 Saya \u6a21\u5757\u4e2d\u5305\u88c5 cpu_bound \u51fd\u6570, \u4e5f\u662f\u53ef\u4ee5\u7684, \u4f46\u662f\u8981\u5c06\u4e0a\u4e0b\u6587\u7684\u503c\u8bbe\u4e3a Dummy \u5bf9\u8c61: # import ... from graia.ariadne.util.async_exec import IS_MAIN_PROCESS from graia.ariadne.util import Dummy if IS_MAIN_PROCESS (): saya = Saya . current () channel = Channel . current () ... else : saya = Dummy () channel = Dummy () ... ... \u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u53ea\u5728\u4e3b\u8fdb\u7a0b\u4e2d\u8fdb\u884c\u4e0a\u4e0b\u6587\u7684\u83b7\u53d6\u4e86.","title":"\u7528\u6cd5"},{"location":"extra/async-exec/#parallelexecutor","text":"\u5728\u4f60\u7684\u4ee3\u7801\u4e2d\u53ef\u4ee5\u901a\u8fc7 ParallelExecutor.get() \u5f97\u5230\u4e00\u4e2a ParallelExecutor \u5b9e\u4f8b, \u53ef\u4ee5\u5728\u5176\u4e0a\u8fd0\u884c to_thread \u4e0e to_process \u5f02\u6b65\u65b9\u6cd5. \u8fd9\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u8fd0\u884c\u88ab\u5305\u88c5\u8fc7\u7684\u548c\u6ca1\u88ab\u5305\u88c5\u8fc7\u7684\u51fd\u6570. \u63d0\u793a \u6ce8\u610f\u5176\u7b7e\u540d\u4e3a (func: Callable[P, R], *args, *kwargs) -> Awaitable[R] . \u4e5f\u5c31\u662f\u8bf4, \u4e0d\u7528\u4f20\u5165\u5143\u7ec4\u4f5c\u4e3a\u6253\u5305\u7684\u53c2\u6570\u4e86.","title":"\u5145\u5206\u5229\u7528 ParallelExecutor"},{"location":"extra/async-exec/#_3","text":"\u8981\u8fdb\u4e00\u6b65\u63a7\u5236, \u53ef\u4ee5\u4ece graia.ariadne.util.async_exec \u5bfc\u5165 ParallelExecutor . \u901a\u8fc7\u63d0\u524d\u6267\u884c ParallelExecutor(loop=app.loop, max_thread=max_t, max_proc=max_p) \u53ef\u4ee5\u63a7\u5236\u5e76\u884c\u6267\u884c\u5668\u7684\u6700\u5927\u7ebf\u7a0b, \u8fdb\u7a0b\u6570. loop \u53ef\u4ee5\u5728\u4e4b\u540e\u901a\u8fc7 bind_loop \u51fd\u6570\u4f20\u5165.","title":"\u8fdb\u4e00\u6b65\u63a7\u5236"},{"location":"extra/async-exec/#_4","text":"\u56e0\u4e3a\u88ab io_bound cpu_bound \u5305\u88c5\u7684\u51fd\u6570\u5728\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u65e0\u6cd5\u8bbf\u95ee\u5230\u5176\u539f\u6709\u51fd\u6570, \u6211\u4eec\u5728 ParallelExecutor \u7684\u7c7b\u53d8\u91cf func_mapping \u4e2d\u5b58\u50a8\u4e86\u51fd\u6570\u7684 __qualname__ \u81f3\u539f\u51fd\u6570\u672c\u8eab\u7684\u6620\u5c04. \u8fd9\u6837\u6267\u884c\u65f6 io_bound cpu_bound \u53ea\u4f20\u9012 __qualname__ \u4e0e __module__ \u7ed9\u5b9e\u9645\u7684\u6267\u884c\u51fd\u6570, \u5b83\u4f1a\u901a\u8fc7\u5bfc\u5165 __module__ \u5b8c\u6210\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u7684\u51fd\u6570\u6ce8\u518c. \u4e4b\u540e\u901a\u8fc7 ParallelExecutor.func_mapping[func_qualname](*args, **kwargs) \u5b8c\u6210\u8c03\u7528. \u793e\u533a\u6587\u6863\u76f8\u5173\u7ae0\u8282: \u94fe\u63a5","title":"\u539f\u7406"},{"location":"extra/console/","text":"Console - \u5185\u5efa\u5b9e\u65f6\u63a7\u5236\u53f0 \ud83d\udd17 \u63d0\u524d\u8bf4\u660e Console \u7684\u5e95\u5c42 prompt-toolkit \u5e76\u4e0d\u5b8c\u5907...... \u6240\u4ee5\u522b\u62ff\u7740 prompt-toolkit \u7684 bug \u6765\u627e\u6211 Console \u662f\u53ef\u4ee5\u4e0e Ariadne \u5206\u79bb\u7684, \u4e0d\u8fc7\u5b83\u9ed8\u8ba4\u4f1a\u4e0e Ariadne \u4e00\u8d77\u542f\u52a8\u4e0e\u505c\u6b62, \u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u5b9e\u4f8b\u5316\u65f6\u4f20\u5165 listen_launch , listen_shutdown \u6765\u63a7\u5236\u8fd9\u4e2a\u884c\u4e3a. \u5b9e\u4f8b\u5316 \ud83d\udd17 def __init__ ( self , broadcast : Broadcast , prompt : Union [ Callable [[], str ], AnyFormattedText ] = \" {library_name} {graia_ariadne_version} >\" , * , r_prompt : Union [ Callable [[], str ], AnyFormattedText ] = \"\" , style : Optional [ Style ] = None , extra_data_getter : Iterable [ Callable [[], Dict [ str , Any ]]] = (), replace_logger : bool = True , listen_launch : bool = True , listen_shutdown : bool = True , ) -> None : \"\"\"\u521d\u59cb\u5316\u63a7\u5236\u53f0.\"\"\" broadcast ( Broadcast ): \u4e8b\u4ef6\u7cfb\u7edf. prompt ( AnyFormattedText, optional ): \u8f93\u5165\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \u9ed8\u8ba4\u4e3a {library_name} {graia_ariadne_version}> . r_prompt ( AnyFormattedText, optional ): \u53f3\u4fa7\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \u9ed8\u8ba4\u4e3a\u7a7a. style ( Style , optional ): \u8f93\u5165\u63d0\u793a\u7684\u683c\u5f0f, \u8be6\u89c1 prompt_toolkit \u7684\u4ecb\u7ecd. extra_data_getter ( Iterable[() -> Dict[str, Any], optional ): \u989d\u5916\u7684 Callable , \u7528\u4e8e\u751f\u6210 prompt \u7684\u683c\u5f0f\u5316\u6570\u636e. replace_logger ( bool, optional ): \u662f\u5426\u5c1d\u8bd5\u66ff\u6362 loguru \u7684 0 \u53f7 handler ( sys.stderr ) \u4e3a StdoutProxy . \u9ed8\u8ba4\u4e3a True . listen_launch ( bool, optional ): \u662f\u5426\u76d1\u542c Ariadne \u7684 ApplicationLaunched \u4e8b\u4ef6\u5e76\u542f\u52a8\u81ea\u8eab, \u9ed8\u8ba4\u4e3a True . listen_shutdown ( bool, optional ): \u662f\u5426\u76d1\u542c Ariadne \u7684 ApplicationShutdowned \u4e8b\u4ef6\u5e76\u505c\u6b62\u81ea\u8eab, \u9ed8\u8ba4\u4e3a True . \u4f60\u53ef\u4ee5\u770b\u5230\u8fd9\u6837\u914d\u7f6e\u540e, \u968f\u7740\u7ec8\u7aef\u7684\u542f\u52a8, \u4f60\u53ef\u4ee5\u770b\u5230\u7c7b\u4f3c\u8fd9\u6837\u7684\u6548\u679c: Ariadne A.B.C> \u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u81ea\u7531\u8f93\u5165, \u800c\u4e14\u4f60\u53ef\u4ee5\u770b\u5230\u65e5\u5fd7\u8bb0\u5f55\u5e76\u6ca1\u6709\u6df7\u5728\u4e00\u8d77. \u8fd9\u4e2a\u5728\u4f60\u5c1d\u8bd5\u4f7f\u7528\u591a\u7ebf\u7a0b\u5b9e\u73b0 Console \u65f6\u5c31\u4f1a\u53d1\u751f. _ _ /\\ (_) | | / \\ _ __ _ __ _ __| |_ __ ___ / /\\ \\ | '__| |/ _` |/ _` | '_ \\ / _ \\ / ____ \\| | | | (_| | (_| | | | | __/ /_/ \\_\\_| |_|\\__,_|\\__,_|_| |_|\\___| Ariadne version: A.A.A Broadcast version: B.B.B Saya version: C.C.C Scheduler version: D.D.D | INFO | graia.ariadne.app:launch:1356 - Launching app... | DEBUG | graia.ariadne.app:daemon:1264 - Ariadne daemon started. Ariadne A.A.A> \u4f60\u53ef\u4ee5\u770b\u5230, \u5728\u6309\u4e0b Ctrl + C \u540e, Console \u4e5f\u4f1a\u81ea\u52a8\u5c06\u5c1a\u672a\u5b8c\u6210\u7684\u8f93\u5165\u884c\u53d8\u7070\u5e76\u9000\u51fa. \u63a5\u4e0b\u6765, \u8ba9\u6211\u4eec\u6ce8\u518c Console \u547d\u4ee4\u5904\u7406\u5668. \u6ce8\u518c\u547d\u4ee4\u5904\u7406\u5668 \ud83d\udd17 \u6709\u4ee5\u4e0b\u4e24\u79cd\u98ce\u683c\u7684\u6ce8\u518c\u65b9\u5f0f \u7c7b broadcast.receiver Saya con = Console ( ... ) @console . register ([ Dispatcher_1 , ... ], [ Decorator_1 , ... ]) def resp_1 ( command : str ): ... @console . register ([ Dispatcher_1 , ... ]) async def resp_2 ( chain : MessageChain ): ... main.py from graia.ariadne.console import Console from graia.ariadne.console.saya import ConsoleBehaviour saya = ... con = Console ( ... ) saya . install_behaviours ( ConsoleBehaviour ( con )) some_module.py from graia.ariadne.console.saya import ConsoleSchema channel = ... @channel . use ( ConsoleSchema ([ Dispatcher_1 , ... ], [ Decorator_1 , ... ])) def resp_1 ( command : str ): ... @channel . use ( ConsoleSchema ([ Dispatcher_1 , ... ])) async def resp_2 ( chain : MessageChain ): ... register \u65b9\u6cd5\u4e0e ConsoleSchema \u7684\u7b7e\u540d\u5747\u4e3a (dispatchers: List[Dispatcher] = None, decorators: List[Decorator] = None) -> Callable[[T_Callable], T_Callable] \u53ef\u5206\u6d3e\u7684\u53c2\u6570 \ud83d\udd17 \u901a\u8fc7 register \u6216 ConsoleSchema \u6ce8\u518c\u7684 Callable \u53ef\u83b7\u5f97\u4ee5\u4e0b\u53c2\u6570: Broadcast : \u5f53\u524d Broadcast \u5b9e\u4f8b. Console : \u5f53\u524d Console \u5b9e\u4f8b. AbstractEventLoop : \u5f53\u524d\u4e8b\u4ef6\u5faa\u73af command - str : \u5fc5\u987b\u4ee5 command: str \u7684\u5f62\u5f0f\u6807\u6ce8, \u8f93\u5165\u7684\u5b9e\u9645\u5b57\u7b26\u4e32. MessageChain : \u5c06 command \u8f6c\u6362\u4e3a\u7eaf\u6587\u672c MessageChain \u7684\u4ea7\u7269, \u4f7f\u5927\u90e8\u5206 Dispatcher / Decorator \u53ef\u88ab\u4f7f\u7528. ( Ariadne ): \u82e5\u6709 Ariadne \u5b9e\u4f8b\u5728\u8fd0\u884c\u5219\u53ef\u88ab\u5206\u6d3e. \u624b\u52a8 prompt \ud83d\udd17 Console \u4e00\u4e2a\u503c\u5f97\u6ce8\u610f\u7684\u5730\u65b9\u662f\u5b83\u7684\u6bcf\u4e2a\u5904\u7406\u51fd\u6570\u662f\u88ab\u5355\u72ec\u7b49\u5f85\u6267\u884c\u7684. (\u6309\u7167\u6dfb\u52a0\u4ece\u65e9\u5230\u665a\u7684\u987a\u5e8f) \u4e5f\u5c31\u662f\u8bf4, \u4f60\u53ef\u4ee5\u901a\u8fc7 raise PropagationCancelled \u6765\u963b\u65ad\u5269\u4e0b\u7684\u5904\u7406\u51fd\u6570\u6267\u884c. \u540c\u65f6, \u4f60\u53ef\u4ee5\u901a\u8fc7\u83b7\u53d6 Console \u5b9e\u4f8b\u5b8c\u6210\u4ee5\u4e0b\u64cd\u4f5c. @con . register ([ Twilight . from_command ( \"!stop\" )]) async def stop ( app : Ariadne , con : Console ): input = await con . prompt ( \"Are you sure to exit?\" , \"<Y/N>\" , Style . from_dict ({ ... })) if input . lower () . startswith ( \"y\" ): await app . stop () \u6548\u679c\u5927\u81f4\u662f\u8fd9\u6837\u7684: ( \u53ef\u60dc\u6ca1\u6709\u5f69\u8272\u663e\u793a ) Ariadne A.A.A>!stop Are you sure to exit?y <Y/N> | INFO | graia.ariadne.console:stop:199 - Stopping console... | DEBUG | graia.ariadne.app:daemon:1296 - Ariadne daemon stopped. | INFO | graia.ariadne.app:daemon:1300 - Stopping Ariadne... | INFO | graia.ariadne.app:daemon:1315 - Posting Ariadne shutdown event... Console.prompt \u7b7e\u540d\u5982\u4e0b: (\u6ce8\u610f, \u5b9e\u4f8b\u5316\u65f6\u7684 prompt \u53c2\u6570\u4e0e prompt \u65b9\u6cd5\u7684 l_prompt \u53c2\u6570\u540d\u4e0d\u540c, \u4f46\u7528\u9014\u76f8\u540c. \u8fd9\u662f\u6709\u610f\u4e3a\u4e4b\u7684.) async def prompt ( self , l_prompt : Optional [ AnyFormattedText ] = None , r_prompt : Optional [ AnyFormattedText ] = None , style : Optional [ Style ] = None , ) -> str : \"\"\"\u5411\u63a7\u5236\u53f0\u53d1\u9001\u4e00\u4e2a\u8f93\u5165\u8bf7\u6c42, \u5f02\u6b65 Returns: str: \u8f93\u5165\u7ed3\u679c \"\"\" l_prompt ( AnyFormattedText, optional ): \u5de6\u8f93\u5165\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \u9ed8\u8ba4\u4e3a {library_name} {graia_ariadne_version}> . \u6ce8\u610f\u4e3a l_prompt . r_prompt ( AnyFormattedText, optional ): \u53f3\u4fa7\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \u9ed8\u8ba4\u4e3a\u7a7a. style ( Style, optional ): \u8f93\u5165\u63d0\u793a\u7684\u683c\u5f0f, \u8be6\u89c1 prompt_toolkit \u7684\u4ecb\u7ecd. \u793e\u533a\u6587\u6863\u76f8\u5173\u7ae0\u8282: \u94fe\u63a5","title":"\u5b9e\u65f6\u63a7\u5236\u53f0"},{"location":"extra/console/#console-","text":"\u63d0\u524d\u8bf4\u660e Console \u7684\u5e95\u5c42 prompt-toolkit \u5e76\u4e0d\u5b8c\u5907...... \u6240\u4ee5\u522b\u62ff\u7740 prompt-toolkit \u7684 bug \u6765\u627e\u6211 Console \u662f\u53ef\u4ee5\u4e0e Ariadne \u5206\u79bb\u7684, \u4e0d\u8fc7\u5b83\u9ed8\u8ba4\u4f1a\u4e0e Ariadne \u4e00\u8d77\u542f\u52a8\u4e0e\u505c\u6b62, \u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u5b9e\u4f8b\u5316\u65f6\u4f20\u5165 listen_launch , listen_shutdown \u6765\u63a7\u5236\u8fd9\u4e2a\u884c\u4e3a.","title":"Console - \u5185\u5efa\u5b9e\u65f6\u63a7\u5236\u53f0"},{"location":"extra/console/#_1","text":"def __init__ ( self , broadcast : Broadcast , prompt : Union [ Callable [[], str ], AnyFormattedText ] = \" {library_name} {graia_ariadne_version} >\" , * , r_prompt : Union [ Callable [[], str ], AnyFormattedText ] = \"\" , style : Optional [ Style ] = None , extra_data_getter : Iterable [ Callable [[], Dict [ str , Any ]]] = (), replace_logger : bool = True , listen_launch : bool = True , listen_shutdown : bool = True , ) -> None : \"\"\"\u521d\u59cb\u5316\u63a7\u5236\u53f0.\"\"\" broadcast ( Broadcast ): \u4e8b\u4ef6\u7cfb\u7edf. prompt ( AnyFormattedText, optional ): \u8f93\u5165\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \u9ed8\u8ba4\u4e3a {library_name} {graia_ariadne_version}> . r_prompt ( AnyFormattedText, optional ): \u53f3\u4fa7\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \u9ed8\u8ba4\u4e3a\u7a7a. style ( Style , optional ): \u8f93\u5165\u63d0\u793a\u7684\u683c\u5f0f, \u8be6\u89c1 prompt_toolkit \u7684\u4ecb\u7ecd. extra_data_getter ( Iterable[() -> Dict[str, Any], optional ): \u989d\u5916\u7684 Callable , \u7528\u4e8e\u751f\u6210 prompt \u7684\u683c\u5f0f\u5316\u6570\u636e. replace_logger ( bool, optional ): \u662f\u5426\u5c1d\u8bd5\u66ff\u6362 loguru \u7684 0 \u53f7 handler ( sys.stderr ) \u4e3a StdoutProxy . \u9ed8\u8ba4\u4e3a True . listen_launch ( bool, optional ): \u662f\u5426\u76d1\u542c Ariadne \u7684 ApplicationLaunched \u4e8b\u4ef6\u5e76\u542f\u52a8\u81ea\u8eab, \u9ed8\u8ba4\u4e3a True . listen_shutdown ( bool, optional ): \u662f\u5426\u76d1\u542c Ariadne \u7684 ApplicationShutdowned \u4e8b\u4ef6\u5e76\u505c\u6b62\u81ea\u8eab, \u9ed8\u8ba4\u4e3a True . \u4f60\u53ef\u4ee5\u770b\u5230\u8fd9\u6837\u914d\u7f6e\u540e, \u968f\u7740\u7ec8\u7aef\u7684\u542f\u52a8, \u4f60\u53ef\u4ee5\u770b\u5230\u7c7b\u4f3c\u8fd9\u6837\u7684\u6548\u679c: Ariadne A.B.C> \u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u81ea\u7531\u8f93\u5165, \u800c\u4e14\u4f60\u53ef\u4ee5\u770b\u5230\u65e5\u5fd7\u8bb0\u5f55\u5e76\u6ca1\u6709\u6df7\u5728\u4e00\u8d77. \u8fd9\u4e2a\u5728\u4f60\u5c1d\u8bd5\u4f7f\u7528\u591a\u7ebf\u7a0b\u5b9e\u73b0 Console \u65f6\u5c31\u4f1a\u53d1\u751f. _ _ /\\ (_) | | / \\ _ __ _ __ _ __| |_ __ ___ / /\\ \\ | '__| |/ _` |/ _` | '_ \\ / _ \\ / ____ \\| | | | (_| | (_| | | | | __/ /_/ \\_\\_| |_|\\__,_|\\__,_|_| |_|\\___| Ariadne version: A.A.A Broadcast version: B.B.B Saya version: C.C.C Scheduler version: D.D.D | INFO | graia.ariadne.app:launch:1356 - Launching app... | DEBUG | graia.ariadne.app:daemon:1264 - Ariadne daemon started. Ariadne A.A.A> \u4f60\u53ef\u4ee5\u770b\u5230, \u5728\u6309\u4e0b Ctrl + C \u540e, Console \u4e5f\u4f1a\u81ea\u52a8\u5c06\u5c1a\u672a\u5b8c\u6210\u7684\u8f93\u5165\u884c\u53d8\u7070\u5e76\u9000\u51fa. \u63a5\u4e0b\u6765, \u8ba9\u6211\u4eec\u6ce8\u518c Console \u547d\u4ee4\u5904\u7406\u5668.","title":"\u5b9e\u4f8b\u5316"},{"location":"extra/console/#_2","text":"\u6709\u4ee5\u4e0b\u4e24\u79cd\u98ce\u683c\u7684\u6ce8\u518c\u65b9\u5f0f \u7c7b broadcast.receiver Saya con = Console ( ... ) @console . register ([ Dispatcher_1 , ... ], [ Decorator_1 , ... ]) def resp_1 ( command : str ): ... @console . register ([ Dispatcher_1 , ... ]) async def resp_2 ( chain : MessageChain ): ... main.py from graia.ariadne.console import Console from graia.ariadne.console.saya import ConsoleBehaviour saya = ... con = Console ( ... ) saya . install_behaviours ( ConsoleBehaviour ( con )) some_module.py from graia.ariadne.console.saya import ConsoleSchema channel = ... @channel . use ( ConsoleSchema ([ Dispatcher_1 , ... ], [ Decorator_1 , ... ])) def resp_1 ( command : str ): ... @channel . use ( ConsoleSchema ([ Dispatcher_1 , ... ])) async def resp_2 ( chain : MessageChain ): ... register \u65b9\u6cd5\u4e0e ConsoleSchema \u7684\u7b7e\u540d\u5747\u4e3a (dispatchers: List[Dispatcher] = None, decorators: List[Decorator] = None) -> Callable[[T_Callable], T_Callable]","title":"\u6ce8\u518c\u547d\u4ee4\u5904\u7406\u5668"},{"location":"extra/console/#_3","text":"\u901a\u8fc7 register \u6216 ConsoleSchema \u6ce8\u518c\u7684 Callable \u53ef\u83b7\u5f97\u4ee5\u4e0b\u53c2\u6570: Broadcast : \u5f53\u524d Broadcast \u5b9e\u4f8b. Console : \u5f53\u524d Console \u5b9e\u4f8b. AbstractEventLoop : \u5f53\u524d\u4e8b\u4ef6\u5faa\u73af command - str : \u5fc5\u987b\u4ee5 command: str \u7684\u5f62\u5f0f\u6807\u6ce8, \u8f93\u5165\u7684\u5b9e\u9645\u5b57\u7b26\u4e32. MessageChain : \u5c06 command \u8f6c\u6362\u4e3a\u7eaf\u6587\u672c MessageChain \u7684\u4ea7\u7269, \u4f7f\u5927\u90e8\u5206 Dispatcher / Decorator \u53ef\u88ab\u4f7f\u7528. ( Ariadne ): \u82e5\u6709 Ariadne \u5b9e\u4f8b\u5728\u8fd0\u884c\u5219\u53ef\u88ab\u5206\u6d3e.","title":"\u53ef\u5206\u6d3e\u7684\u53c2\u6570"},{"location":"extra/console/#prompt","text":"Console \u4e00\u4e2a\u503c\u5f97\u6ce8\u610f\u7684\u5730\u65b9\u662f\u5b83\u7684\u6bcf\u4e2a\u5904\u7406\u51fd\u6570\u662f\u88ab\u5355\u72ec\u7b49\u5f85\u6267\u884c\u7684. (\u6309\u7167\u6dfb\u52a0\u4ece\u65e9\u5230\u665a\u7684\u987a\u5e8f) \u4e5f\u5c31\u662f\u8bf4, \u4f60\u53ef\u4ee5\u901a\u8fc7 raise PropagationCancelled \u6765\u963b\u65ad\u5269\u4e0b\u7684\u5904\u7406\u51fd\u6570\u6267\u884c. \u540c\u65f6, \u4f60\u53ef\u4ee5\u901a\u8fc7\u83b7\u53d6 Console \u5b9e\u4f8b\u5b8c\u6210\u4ee5\u4e0b\u64cd\u4f5c. @con . register ([ Twilight . from_command ( \"!stop\" )]) async def stop ( app : Ariadne , con : Console ): input = await con . prompt ( \"Are you sure to exit?\" , \"<Y/N>\" , Style . from_dict ({ ... })) if input . lower () . startswith ( \"y\" ): await app . stop () \u6548\u679c\u5927\u81f4\u662f\u8fd9\u6837\u7684: ( \u53ef\u60dc\u6ca1\u6709\u5f69\u8272\u663e\u793a ) Ariadne A.A.A>!stop Are you sure to exit?y <Y/N> | INFO | graia.ariadne.console:stop:199 - Stopping console... | DEBUG | graia.ariadne.app:daemon:1296 - Ariadne daemon stopped. | INFO | graia.ariadne.app:daemon:1300 - Stopping Ariadne... | INFO | graia.ariadne.app:daemon:1315 - Posting Ariadne shutdown event... Console.prompt \u7b7e\u540d\u5982\u4e0b: (\u6ce8\u610f, \u5b9e\u4f8b\u5316\u65f6\u7684 prompt \u53c2\u6570\u4e0e prompt \u65b9\u6cd5\u7684 l_prompt \u53c2\u6570\u540d\u4e0d\u540c, \u4f46\u7528\u9014\u76f8\u540c. \u8fd9\u662f\u6709\u610f\u4e3a\u4e4b\u7684.) async def prompt ( self , l_prompt : Optional [ AnyFormattedText ] = None , r_prompt : Optional [ AnyFormattedText ] = None , style : Optional [ Style ] = None , ) -> str : \"\"\"\u5411\u63a7\u5236\u53f0\u53d1\u9001\u4e00\u4e2a\u8f93\u5165\u8bf7\u6c42, \u5f02\u6b65 Returns: str: \u8f93\u5165\u7ed3\u679c \"\"\" l_prompt ( AnyFormattedText, optional ): \u5de6\u8f93\u5165\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \u9ed8\u8ba4\u4e3a {library_name} {graia_ariadne_version}> . \u6ce8\u610f\u4e3a l_prompt . r_prompt ( AnyFormattedText, optional ): \u53f3\u4fa7\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \u9ed8\u8ba4\u4e3a\u7a7a. style ( Style, optional ): \u8f93\u5165\u63d0\u793a\u7684\u683c\u5f0f, \u8be6\u89c1 prompt_toolkit \u7684\u4ecb\u7ecd. \u793e\u533a\u6587\u6863\u76f8\u5173\u7ae0\u8282: \u94fe\u63a5","title":"\u624b\u52a8 prompt"},{"location":"extra/cooldown/","text":"\u51b7\u5374 \ud83d\udd17 \u4f4d\u7f6e: graia.ariadne.util.cooldown \u8be5\u6a21\u5757\u63d0\u4f9b\u4e86 CoolDown \u7c7b\u7528\u4e8e\u65b9\u4fbf\u7684\u5b9e\u73b0\u51b7\u5374\u529f\u80fd\u3002 CoolDown \u5e94\u8be5\u4f5c\u4e3a\u4e00\u4e2a Dispatcher \u88ab\u4f7f\u7528. \u793a\u4f8b \ud83d\udd17 @bcc . receiver ( GroupMessage , dispatchers = [ CoolDown ( 5 )]) async def handle (): ... \u8fd9\u6837\u5373\u53ef\u8bbe\u7f6e 5 \u79d2\u4e3a\u89e6\u53d1\u95f4\u9694, \u9ed8\u8ba4\u5168\u5c40\u5171\u7528. \u83b7\u53d6\u51b7\u5374\u65f6\u95f4 \ud83d\udd17 \u4e0d\u540c\u7684\u4e0a\u4e0b\u6587 \ud83d\udd17 \u8bbe\u7f6e\u8d8a\u6743\u6761\u4ef6 \ud83d\udd17 \u5f02\u5e38\u5904\u7406 \ud83d\udd17 \u624b\u52a8\u89e6\u53d1 \ud83d\udd17 CoolDown \u7684\u5b9e\u4f8b\u8fd8\u53ef\u4ee5\u4f5c\u4e3a \u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668 \u4f7f\u7528.","title":"\u51b7\u5374"},{"location":"extra/cooldown/#_1","text":"\u4f4d\u7f6e: graia.ariadne.util.cooldown \u8be5\u6a21\u5757\u63d0\u4f9b\u4e86 CoolDown \u7c7b\u7528\u4e8e\u65b9\u4fbf\u7684\u5b9e\u73b0\u51b7\u5374\u529f\u80fd\u3002 CoolDown \u5e94\u8be5\u4f5c\u4e3a\u4e00\u4e2a Dispatcher \u88ab\u4f7f\u7528.","title":"\u51b7\u5374"},{"location":"extra/cooldown/#_2","text":"@bcc . receiver ( GroupMessage , dispatchers = [ CoolDown ( 5 )]) async def handle (): ... \u8fd9\u6837\u5373\u53ef\u8bbe\u7f6e 5 \u79d2\u4e3a\u89e6\u53d1\u95f4\u9694, \u9ed8\u8ba4\u5168\u5c40\u5171\u7528.","title":"\u793a\u4f8b"},{"location":"extra/cooldown/#_3","text":"","title":"\u83b7\u53d6\u51b7\u5374\u65f6\u95f4"},{"location":"extra/cooldown/#_4","text":"","title":"\u4e0d\u540c\u7684\u4e0a\u4e0b\u6587"},{"location":"extra/cooldown/#_5","text":"","title":"\u8bbe\u7f6e\u8d8a\u6743\u6761\u4ef6"},{"location":"extra/cooldown/#_6","text":"","title":"\u5f02\u5e38\u5904\u7406"},{"location":"extra/cooldown/#_7","text":"CoolDown \u7684\u5b9e\u4f8b\u8fd8\u53ef\u4ee5\u4f5c\u4e3a \u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668 \u4f7f\u7528.","title":"\u624b\u52a8\u89e6\u53d1"},{"location":"extra/log/","text":"\u65e5\u5fd7\u8bb0\u5f55 \ud83d\udd17 Ariadne \u6ca1\u6709\u4f7f\u7528\u5185\u7f6e logging \u6a21\u5757, \u800c\u662f\u4f7f\u7528 loguru \u8fdb\u884c\u65e5\u5fd7\u8bb0\u5f55. \u56e0\u4e3a\u8fd9\u5e76\u975e\u91cd\u70b9, \u6240\u4ee5\u53ea\u8bb2\u8bb2\u6700\u91cd\u8981\u7684\u51e0\u4e2a\u65b9\u6cd5. \u63d0\u793a \u4f60\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u6240\u6709\u65b9\u6cd5, \u4e0d\u8fc7\u662f\u82f1\u6587\u7684. logger.remove() \u79fb\u9664\u6240\u6709\u8bb0\u5f55\u5668. ( logger.remove(0) \u79fb\u9664\u9884\u914d\u7f6e\u7684 ( sys.stderr ) \u8bb0\u5f55\u5668.) logger.add(sink, ...) \u6dfb\u52a0\u4e00\u4e2a\u8bb0\u5f55\u5668. sink \u53ef\u4ee5\u4e3a logging.Handler , \u4e5f\u53ef\u4ee5\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32 (\u4ee3\u8868\u6587\u4ef6\u540d). \u5f53\u7136\u66f4\u591a\u53c2\u6570\u53ef\u4ee5\u53c2\u8003 API \u6587\u6863 . \u5982\u679c\u4f60\u60f3\u8981\u6bcf\u65e5\u6eda\u52a8\u65e5\u5fd7, \u5e76\u4e14\u81ea\u52a8\u5e26\u4e0a\u65e5\u671f\u4e4b\u7c7b\u7684\u683c\u5f0f, \u53ef\u8fd9\u6837\u505a: logger . add ( \"{time: YYYY-MM-DD}.log\" , rotation = \"00:00\" , encoding = \"utf-8\" ) \u8fd9\u4e9b\u90fd\u4e0d\u662f\u5f88\u91cd\u8981, \u653e\u5728\u8fd9\u91cc\u53ea\u662f\u987a\u53e3\u4e00\u63d0. Adapter log \u914d\u7f6e \ud83d\udd17 \u5728\u4f20\u5165 connect_info \u65f6, \u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 Adapter , \u5728\u6b64\u5904\u4f7f\u7528 log=False \u53ef\u4ee5\u5173\u95ed Adapter \u7684\u5fc3\u8df3\u8bb0\u5f55.","title":"\u65e5\u5fd7\u8bb0\u5f55"},{"location":"extra/log/#_1","text":"Ariadne \u6ca1\u6709\u4f7f\u7528\u5185\u7f6e logging \u6a21\u5757, \u800c\u662f\u4f7f\u7528 loguru \u8fdb\u884c\u65e5\u5fd7\u8bb0\u5f55. \u56e0\u4e3a\u8fd9\u5e76\u975e\u91cd\u70b9, \u6240\u4ee5\u53ea\u8bb2\u8bb2\u6700\u91cd\u8981\u7684\u51e0\u4e2a\u65b9\u6cd5. \u63d0\u793a \u4f60\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u6240\u6709\u65b9\u6cd5, \u4e0d\u8fc7\u662f\u82f1\u6587\u7684. logger.remove() \u79fb\u9664\u6240\u6709\u8bb0\u5f55\u5668. ( logger.remove(0) \u79fb\u9664\u9884\u914d\u7f6e\u7684 ( sys.stderr ) \u8bb0\u5f55\u5668.) logger.add(sink, ...) \u6dfb\u52a0\u4e00\u4e2a\u8bb0\u5f55\u5668. sink \u53ef\u4ee5\u4e3a logging.Handler , \u4e5f\u53ef\u4ee5\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32 (\u4ee3\u8868\u6587\u4ef6\u540d). \u5f53\u7136\u66f4\u591a\u53c2\u6570\u53ef\u4ee5\u53c2\u8003 API \u6587\u6863 . \u5982\u679c\u4f60\u60f3\u8981\u6bcf\u65e5\u6eda\u52a8\u65e5\u5fd7, \u5e76\u4e14\u81ea\u52a8\u5e26\u4e0a\u65e5\u671f\u4e4b\u7c7b\u7684\u683c\u5f0f, \u53ef\u8fd9\u6837\u505a: logger . add ( \"{time: YYYY-MM-DD}.log\" , rotation = \"00:00\" , encoding = \"utf-8\" ) \u8fd9\u4e9b\u90fd\u4e0d\u662f\u5f88\u91cd\u8981, \u653e\u5728\u8fd9\u91cc\u53ea\u662f\u987a\u53e3\u4e00\u63d0.","title":"\u65e5\u5fd7\u8bb0\u5f55"},{"location":"extra/log/#adapter-log","text":"\u5728\u4f20\u5165 connect_info \u65f6, \u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 Adapter , \u5728\u6b64\u5904\u4f7f\u7528 log=False \u53ef\u4ee5\u5173\u95ed Adapter \u7684\u5fc3\u8df3\u8bb0\u5f55.","title":"Adapter log \u914d\u7f6e"},{"location":"extra/msg-chain-tool/","text":"\u6d88\u606f\u94fe\u5de5\u5177 \ud83d\udd17 Formatter \ud83d\udd17 Formatter \u7684\u7528\u6cd5\u4e0e string.Formatter \u5dee\u4e0d\u591a, \u53ea\u4e0d\u8fc7\u662f\u7ed9 MessageChain \u7528\u7684. \u4ece graia.ariadne.message.formatter \u5bfc\u5165 Formatter . \u4e4b\u540e\u76f4\u63a5 Formatter(template_string).format(...) \u5373\u53ef. \u6ce8\u610f format \u65b9\u6cd5\u53ea\u652f\u6301 Element , MessageChain , str \u4e09\u79cd\u7c7b\u578b\u53c2\u6570. \u793a\u4f8b \u7ed3\u679c Formatter ( \" {name} {type} {version} {0} \" ) . format ( MessageChain . create ( Plain ( \"bars\" ), At ( 111111 )), name = \"pog\" , type = Plain ( \"coroutine\" ), version = MessageChain . create ( Plain ( \"3.2.1\" ), At ( 87654321 )), ) MessageChain ( [ Plain ( text = 'pog coroutine 3.2.1' ,), At ( target = 87654321 ,), Plain ( text = ' bars' ,), At ( target = 111111 ,), ], ) # <MessageChain> len=4 Component \ud83d\udd17 Component \u662f\u4e00\u4e2a Decorator \u7c7b, \u53ef\u4ee5\u65b9\u4fbf\u7684\u4fdd\u7559\u6d88\u606f\u94fe\u4e2d\u7684\u67d0\u4e9b\u90e8\u5206. \u4ece graia.ariadne.message.component \u5bfc\u5165 Component . \u6211\u4eec\u91cd\u8f7d\u4e86\u5b83\u7684 __class_getitem__ \u65b9\u6cd5\u4f7f\u5176\u53ef\u4ee5\u901a\u8fc7 Component[T_Types:T_Time] \u7684\u7279\u6b8a\u5207\u7247\u5f62\u5f0f\u5b9e\u4f8b\u5316. \u50cf\u8fd9\u6837: @broadcast . receiver ( ... ) async def reply ( msg : MessageChain = Component [( Plain , Image ): 2 ], ... ): assert len ( msg ) <= 2 assert msg . onlyContains ( Plain , Image ) ... \u6216\u8005\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u51fd\u6570: def e_filter ( e : Element ) -> bool : if isinstance ( e , Plain ): if not e . text . startswith ( \"test\" ): return False return True @broadcast . receiver ( ... ) async def reply ( msg : MessageChain = Component [ e_filter , 5 ], ... ): assert len ( msg ) <= 5 assert all ( i . text . startswith ( \"test\" ) for i in msg if isinstance ( i , Plain )) ... \u5982\u4f60\u6240\u89c1, Component \u6709\u4ee5\u4e0b\u5b9e\u4f8b\u5316\u5f62\u5f0f: \u76f4\u63a5\u5b9e\u4f8b\u5316 \u5207\u7247\u5b9e\u4f8b\u5316 c = Component ( e_filter , match_time ) c = Component [ e_filter : match_time ] \u63d0\u793a \u8fd9\u91cc match_time \u662f\u53ef\u9009\u7684. \u50cf\u8fd9\u6837: c = Component [ e_filter ] e_filter \u53ef\u4e3a\u4ee5\u4e0b\u5f62\u5f0f: Type[Element] Iterable[Type[Element]] \u7b7e\u540d\u4e3a (Element) -> bool \u7684\u51fd\u6570. match_time \u4e3a\u4e00\u4e2a int , \u4ee3\u8868\u603b\u5339\u914d\u6b21\u6570. \u793e\u533a\u6587\u6863\u76f8\u5173\u7ae0\u8282: \u94fe\u63a5","title":"\u6d88\u606f\u94fe\u5de5\u5177"},{"location":"extra/msg-chain-tool/#_1","text":"","title":"\u6d88\u606f\u94fe\u5de5\u5177"},{"location":"extra/msg-chain-tool/#formatter","text":"Formatter \u7684\u7528\u6cd5\u4e0e string.Formatter \u5dee\u4e0d\u591a, \u53ea\u4e0d\u8fc7\u662f\u7ed9 MessageChain \u7528\u7684. \u4ece graia.ariadne.message.formatter \u5bfc\u5165 Formatter . \u4e4b\u540e\u76f4\u63a5 Formatter(template_string).format(...) \u5373\u53ef. \u6ce8\u610f format \u65b9\u6cd5\u53ea\u652f\u6301 Element , MessageChain , str \u4e09\u79cd\u7c7b\u578b\u53c2\u6570. \u793a\u4f8b \u7ed3\u679c Formatter ( \" {name} {type} {version} {0} \" ) . format ( MessageChain . create ( Plain ( \"bars\" ), At ( 111111 )), name = \"pog\" , type = Plain ( \"coroutine\" ), version = MessageChain . create ( Plain ( \"3.2.1\" ), At ( 87654321 )), ) MessageChain ( [ Plain ( text = 'pog coroutine 3.2.1' ,), At ( target = 87654321 ,), Plain ( text = ' bars' ,), At ( target = 111111 ,), ], ) # <MessageChain> len=4","title":"Formatter"},{"location":"extra/msg-chain-tool/#component","text":"Component \u662f\u4e00\u4e2a Decorator \u7c7b, \u53ef\u4ee5\u65b9\u4fbf\u7684\u4fdd\u7559\u6d88\u606f\u94fe\u4e2d\u7684\u67d0\u4e9b\u90e8\u5206. \u4ece graia.ariadne.message.component \u5bfc\u5165 Component . \u6211\u4eec\u91cd\u8f7d\u4e86\u5b83\u7684 __class_getitem__ \u65b9\u6cd5\u4f7f\u5176\u53ef\u4ee5\u901a\u8fc7 Component[T_Types:T_Time] \u7684\u7279\u6b8a\u5207\u7247\u5f62\u5f0f\u5b9e\u4f8b\u5316. \u50cf\u8fd9\u6837: @broadcast . receiver ( ... ) async def reply ( msg : MessageChain = Component [( Plain , Image ): 2 ], ... ): assert len ( msg ) <= 2 assert msg . onlyContains ( Plain , Image ) ... \u6216\u8005\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u51fd\u6570: def e_filter ( e : Element ) -> bool : if isinstance ( e , Plain ): if not e . text . startswith ( \"test\" ): return False return True @broadcast . receiver ( ... ) async def reply ( msg : MessageChain = Component [ e_filter , 5 ], ... ): assert len ( msg ) <= 5 assert all ( i . text . startswith ( \"test\" ) for i in msg if isinstance ( i , Plain )) ... \u5982\u4f60\u6240\u89c1, Component \u6709\u4ee5\u4e0b\u5b9e\u4f8b\u5316\u5f62\u5f0f: \u76f4\u63a5\u5b9e\u4f8b\u5316 \u5207\u7247\u5b9e\u4f8b\u5316 c = Component ( e_filter , match_time ) c = Component [ e_filter : match_time ] \u63d0\u793a \u8fd9\u91cc match_time \u662f\u53ef\u9009\u7684. \u50cf\u8fd9\u6837: c = Component [ e_filter ] e_filter \u53ef\u4e3a\u4ee5\u4e0b\u5f62\u5f0f: Type[Element] Iterable[Type[Element]] \u7b7e\u540d\u4e3a (Element) -> bool \u7684\u51fd\u6570. match_time \u4e3a\u4e00\u4e2a int , \u4ee3\u8868\u603b\u5339\u914d\u6b21\u6570. \u793e\u533a\u6587\u6863\u76f8\u5173\u7ae0\u8282: \u94fe\u63a5","title":"Component"},{"location":"extra/scheduler/","text":"Scheduler - \u4efb\u52a1\u8ba1\u5212\u5668 \ud83d\udd17 Scheduler \u652f\u6301\u4e86\u8f7b\u91cf\u7684\u5b9a\u65f6\u4efb\u52a1, \u5e76\u4e0e Graia Broadcast \u7d27\u5bc6\u7ed3\u5408. \u5f00\u59cb\u4f7f\u7528 \ud83d\udd17 \u9996\u5148, \u6211\u4eec\u9700\u8981\u5148\u90e8\u7f72\u73af\u5883, \u6267\u884c\u6307\u4ee4: pip install graia-scheduler \u6216\u8005\u4f7f\u7528 poetry : poetry add graia-scheduler \u4e4b\u540e\u5728\u4f60\u7684\u4e3b\u7a0b\u5e8f\u4e2d\u6dfb\u52a0: from graia.scheduler import GraiaScheduler scheduler = GraiaScheduler ( loop = broadcast . loop , broadcast = broadcast ) \u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u59cb\u4e86. \u63d0\u793a \u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7 Ariadne.create \u5feb\u901f\u521b\u5efa GraiaScheduler . app : Ariadne = Ariadne ( ... ) scheduler = Ariadne . create ( GraiaScheduler ) \u76f4\u63a5\u4f7f\u7528 \ud83d\udd17 \u4f7f\u7528 scheduler.schedule(timer) \u5305\u88c5\u51fd\u6570. \u9ed8\u8ba4\u5e76\u4e0d\u4f1a\u4f20\u5165\u4efb\u4f55\u53ef\u7528\u53c2\u6570, \u4f60\u9700\u8981\u5728\u51fd\u6570\u8fd0\u884c\u65f6\u624b\u52a8\u83b7\u53d6, \u6216\u8005\u901a\u8fc7 Dispatcher \u83b7\u53d6\u53c2\u6570. timer \u53ef\u4ee5\u4ece graia.scheduler.timers \u5bfc\u5165, \u6709\u591a\u79cd\u98ce\u683c. timer \u7684\u884c\u4e3a\u53ef\u4ee5\u901a\u8fc7\u5176 \u6587\u6863\u5b57\u7b26\u4e32 \u83b7\u77e5, \u8fd9\u91cc\u5c31\u4e0d\u518d\u8d58\u8ff0. \u4f7f\u7528 Saya \ud83d\udd17 Saya Introduction \u4ece graia.scheduler.saya \u5bfc\u5165 GraiaSchedulerBehaviour \u4e0e SchedulerSchema . \u4e4b\u540e\u8c03\u7528 saya.install_behaviours(GraiaSchedulerBehaviour(scheduler)) . \u5728\u6a21\u5757\u7684 channel.use \u4e2d, \u4f7f\u7528 SchedulerSchema \u5373\u53ef. \u63d0\u793a \u5982\u679c\u4f60\u4e4b\u524d\u4f7f\u7528 Ariadne.create \u521b\u5efa\u4e86 GraiaScheduler , \u4f60\u4e5f\u53ef\u4ee5\u7528 Ariadne.create \u521b\u5efa GraiaSchedulerBehaviour . @channel . use ( SchedulerSchema ( timer = my_timer )) async def scheduled_func (): ... \u793e\u533a\u6587\u6863\u76f8\u5173\u7ae0\u8282: \u94fe\u63a5","title":"\u8ba1\u5212\u4efb\u52a1"},{"location":"extra/scheduler/#scheduler-","text":"Scheduler \u652f\u6301\u4e86\u8f7b\u91cf\u7684\u5b9a\u65f6\u4efb\u52a1, \u5e76\u4e0e Graia Broadcast \u7d27\u5bc6\u7ed3\u5408.","title":"Scheduler - \u4efb\u52a1\u8ba1\u5212\u5668"},{"location":"extra/scheduler/#_1","text":"\u9996\u5148, \u6211\u4eec\u9700\u8981\u5148\u90e8\u7f72\u73af\u5883, \u6267\u884c\u6307\u4ee4: pip install graia-scheduler \u6216\u8005\u4f7f\u7528 poetry : poetry add graia-scheduler \u4e4b\u540e\u5728\u4f60\u7684\u4e3b\u7a0b\u5e8f\u4e2d\u6dfb\u52a0: from graia.scheduler import GraiaScheduler scheduler = GraiaScheduler ( loop = broadcast . loop , broadcast = broadcast ) \u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u59cb\u4e86. \u63d0\u793a \u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7 Ariadne.create \u5feb\u901f\u521b\u5efa GraiaScheduler . app : Ariadne = Ariadne ( ... ) scheduler = Ariadne . create ( GraiaScheduler )","title":"\u5f00\u59cb\u4f7f\u7528"},{"location":"extra/scheduler/#_2","text":"\u4f7f\u7528 scheduler.schedule(timer) \u5305\u88c5\u51fd\u6570. \u9ed8\u8ba4\u5e76\u4e0d\u4f1a\u4f20\u5165\u4efb\u4f55\u53ef\u7528\u53c2\u6570, \u4f60\u9700\u8981\u5728\u51fd\u6570\u8fd0\u884c\u65f6\u624b\u52a8\u83b7\u53d6, \u6216\u8005\u901a\u8fc7 Dispatcher \u83b7\u53d6\u53c2\u6570. timer \u53ef\u4ee5\u4ece graia.scheduler.timers \u5bfc\u5165, \u6709\u591a\u79cd\u98ce\u683c. timer \u7684\u884c\u4e3a\u53ef\u4ee5\u901a\u8fc7\u5176 \u6587\u6863\u5b57\u7b26\u4e32 \u83b7\u77e5, \u8fd9\u91cc\u5c31\u4e0d\u518d\u8d58\u8ff0.","title":"\u76f4\u63a5\u4f7f\u7528"},{"location":"extra/scheduler/#saya","text":"Saya Introduction \u4ece graia.scheduler.saya \u5bfc\u5165 GraiaSchedulerBehaviour \u4e0e SchedulerSchema . \u4e4b\u540e\u8c03\u7528 saya.install_behaviours(GraiaSchedulerBehaviour(scheduler)) . \u5728\u6a21\u5757\u7684 channel.use \u4e2d, \u4f7f\u7528 SchedulerSchema \u5373\u53ef. \u63d0\u793a \u5982\u679c\u4f60\u4e4b\u524d\u4f7f\u7528 Ariadne.create \u521b\u5efa\u4e86 GraiaScheduler , \u4f60\u4e5f\u53ef\u4ee5\u7528 Ariadne.create \u521b\u5efa GraiaSchedulerBehaviour . @channel . use ( SchedulerSchema ( timer = my_timer )) async def scheduled_func (): ... \u793e\u533a\u6587\u6863\u76f8\u5173\u7ae0\u8282: \u94fe\u63a5","title":"\u4f7f\u7528 Saya"},{"location":"extra/saya/channel/","text":"\u4f7f\u7528 Channel \ud83d\udd17 \u63a8\u8350\u5728\u6a21\u5757\u5f00\u5934\u4f7f\u7528 channel = Channel.current() \u540e, \u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5: channel.name(str) : \u5b9a\u4e49\u63d2\u4ef6\u540d\u5b57. channel.author(str) : \u5b9a\u4e49\u63d2\u4ef6\u7684\u4f5c\u8005 (\u4f60\u81ea\u5df1). channel.description(str) : \u5b9a\u4e49\u63d2\u4ef6\u63cf\u8ff0 (\u901a\u5e38\u662f\u4f7f\u7528\u65b9\u6cd5). \u63d0\u793a \u8fd9\u4e9b\u53ef\u4ee5\u901a\u8fc7 Channel \u7684 _name , _author , _description \u5c5e\u6027\u83b7\u53d6. channel.use \ud83d\udd17 \u8fd9\u662f Channel \u7684\u6838\u5fc3\u65b9\u6cd5. \u4e5f\u662f Saya module \u4e0e\u5176\u4ed6\u90e8\u5206\u4ea4\u4e92\u7684\u9996\u9009\u9014\u5f84. \u7528\u6cd5 \ud83d\udd17 \u4f60\u9700\u8981\u4e00\u4e2a Schema \u5bf9\u8c61, \u4e4b\u540e @channel . use ( SchemaObject ) async def fetch ( ... ): ... \u5373\u53ef. \u4e0e\u5176\u4ed6\u51fd\u6570\u5b9a\u4e49\u65b9\u5f0f\u76f8\u540c. \u6709\u4ee5\u4e0b\u51e0\u4e2a Schema . ListenerSchema : \u9700\u8981 BroadcastBehaviour , \u76f8\u5f53\u4e8e\u4f7f\u7528 broadcast.receiver . SchedulerSchema : \u9700\u8981 GraiaSchedulerBehaviour , \u76f8\u5f53\u4e8e\u4f7f\u7528 scheduler.schedule . \u63d0\u793a \u4f60\u53ef\u4ee5\u521b\u5efa\u4e3b\u6587\u4ef6 ( main.py ) \u7684 Saya Channel ! \u53ea\u9700\u8981\u8c03\u7528 Saya.create_main_channel() \u5373\u53ef. \u4e0d\u53ea\u662f Schema \u8c03\u7528 \ud83d\udd17 \u8fd8\u8bb0\u5f97\u6211\u4eec\u5728\u521a\u521a\u7684 \u5feb\u901f\u5f00\u59cb \u4e2d\u6240\u7528\u5230\u7684\u8fd9\u90e8\u5206\u5417? with saya . module_context (): saya . require ( \"modules.module_as_file\" ) saya . require ( \"modules.module_as_dir\" ) Saya.require \u662f\u6709\u8fd4\u56de\u503c\u7684, \u6b63\u5e38\u60c5\u51b5\u4e0b\u8fd4\u56de\u7684\u662f\u5f53\u524d\u7684 Channel \u5bf9\u8c61, \u4e0e Channel.current() \u662f\u4e00\u4e2a\u4e1c\u897f. \u4f46\u662f, \u4f7f\u7528 channel.export \u53ef\u4ee5\u8fd4\u56de\u4e0d\u4e00\u6837\u7684\u4e1c\u897f\u7ed9 require ... module_as_file.py \u7684\u4e00\u90e8\u5206 channel = Channel . current () @channel . export def exported_func ( ... ): ... main.py \u7684\u4e00\u90e8\u5206 func = saya . require ( \"modules.module_as_file\" ) \u73b0\u5728, main.py \u4e0b\u7684 func \u4e0e module_as_file.py \u4e2d\u7684 exported_func \u662f\u4e00\u4e2a\u51fd\u6570. Channel \u7684\u5176\u4ed6\u7528\u6cd5 \ud83d\udd17 Channel \u6709\u5982\u4e0b\u7528\u6cd5: channel.name(str) : \u5b9a\u4e49\u63d2\u4ef6\u540d\u5b57. channel.author(str) : \u5b9a\u4e49\u63d2\u4ef6\u7684\u4f5c\u8005 (\u4f60\u81ea\u5df1). channel.description(str) : \u5b9a\u4e49\u63d2\u4ef6\u63cf\u8ff0 (\u901a\u5e38\u662f\u4f7f\u7528\u65b9\u6cd5). channel.export(obj) : \u5bfc\u51fa\u4e00\u4e2a\u5bf9\u8c61, \u53ef\u4f5c\u4e3a\u88c5\u9970\u5668\u4f7f\u7528. channel.use(Schema) : \u4f7f\u7528\u4e00\u4e2a Schema \u5bf9\u8c61. channel._py_module : \u8bbf\u95ee\u81ea\u8eab\u7684 Python \u6a21\u5757, \u6ce8\u610f\u5bfc\u5165\u5b8c\u6210\u540e\u624d\u53ef\u7528. channel.meta : \u900f\u660e\u7684\u5143\u6570\u636e\u5b57\u5178, description author name \u65b9\u6cd5\u90fd\u662f\u5bf9\u5176\u7684\u900f\u660e\u4ee3\u7406\u8bbf\u95ee.","title":"\u4f7f\u7528 Channel"},{"location":"extra/saya/channel/#channel","text":"\u63a8\u8350\u5728\u6a21\u5757\u5f00\u5934\u4f7f\u7528 channel = Channel.current() \u540e, \u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5: channel.name(str) : \u5b9a\u4e49\u63d2\u4ef6\u540d\u5b57. channel.author(str) : \u5b9a\u4e49\u63d2\u4ef6\u7684\u4f5c\u8005 (\u4f60\u81ea\u5df1). channel.description(str) : \u5b9a\u4e49\u63d2\u4ef6\u63cf\u8ff0 (\u901a\u5e38\u662f\u4f7f\u7528\u65b9\u6cd5). \u63d0\u793a \u8fd9\u4e9b\u53ef\u4ee5\u901a\u8fc7 Channel \u7684 _name , _author , _description \u5c5e\u6027\u83b7\u53d6.","title":"\u4f7f\u7528 Channel"},{"location":"extra/saya/channel/#channeluse","text":"\u8fd9\u662f Channel \u7684\u6838\u5fc3\u65b9\u6cd5. \u4e5f\u662f Saya module \u4e0e\u5176\u4ed6\u90e8\u5206\u4ea4\u4e92\u7684\u9996\u9009\u9014\u5f84.","title":"channel.use"},{"location":"extra/saya/channel/#_1","text":"\u4f60\u9700\u8981\u4e00\u4e2a Schema \u5bf9\u8c61, \u4e4b\u540e @channel . use ( SchemaObject ) async def fetch ( ... ): ... \u5373\u53ef. \u4e0e\u5176\u4ed6\u51fd\u6570\u5b9a\u4e49\u65b9\u5f0f\u76f8\u540c. \u6709\u4ee5\u4e0b\u51e0\u4e2a Schema . ListenerSchema : \u9700\u8981 BroadcastBehaviour , \u76f8\u5f53\u4e8e\u4f7f\u7528 broadcast.receiver . SchedulerSchema : \u9700\u8981 GraiaSchedulerBehaviour , \u76f8\u5f53\u4e8e\u4f7f\u7528 scheduler.schedule . \u63d0\u793a \u4f60\u53ef\u4ee5\u521b\u5efa\u4e3b\u6587\u4ef6 ( main.py ) \u7684 Saya Channel ! \u53ea\u9700\u8981\u8c03\u7528 Saya.create_main_channel() \u5373\u53ef.","title":"\u7528\u6cd5"},{"location":"extra/saya/channel/#schema","text":"\u8fd8\u8bb0\u5f97\u6211\u4eec\u5728\u521a\u521a\u7684 \u5feb\u901f\u5f00\u59cb \u4e2d\u6240\u7528\u5230\u7684\u8fd9\u90e8\u5206\u5417? with saya . module_context (): saya . require ( \"modules.module_as_file\" ) saya . require ( \"modules.module_as_dir\" ) Saya.require \u662f\u6709\u8fd4\u56de\u503c\u7684, \u6b63\u5e38\u60c5\u51b5\u4e0b\u8fd4\u56de\u7684\u662f\u5f53\u524d\u7684 Channel \u5bf9\u8c61, \u4e0e Channel.current() \u662f\u4e00\u4e2a\u4e1c\u897f. \u4f46\u662f, \u4f7f\u7528 channel.export \u53ef\u4ee5\u8fd4\u56de\u4e0d\u4e00\u6837\u7684\u4e1c\u897f\u7ed9 require ... module_as_file.py \u7684\u4e00\u90e8\u5206 channel = Channel . current () @channel . export def exported_func ( ... ): ... main.py \u7684\u4e00\u90e8\u5206 func = saya . require ( \"modules.module_as_file\" ) \u73b0\u5728, main.py \u4e0b\u7684 func \u4e0e module_as_file.py \u4e2d\u7684 exported_func \u662f\u4e00\u4e2a\u51fd\u6570.","title":"\u4e0d\u53ea\u662f Schema \u8c03\u7528"},{"location":"extra/saya/channel/#channel_1","text":"Channel \u6709\u5982\u4e0b\u7528\u6cd5: channel.name(str) : \u5b9a\u4e49\u63d2\u4ef6\u540d\u5b57. channel.author(str) : \u5b9a\u4e49\u63d2\u4ef6\u7684\u4f5c\u8005 (\u4f60\u81ea\u5df1). channel.description(str) : \u5b9a\u4e49\u63d2\u4ef6\u63cf\u8ff0 (\u901a\u5e38\u662f\u4f7f\u7528\u65b9\u6cd5). channel.export(obj) : \u5bfc\u51fa\u4e00\u4e2a\u5bf9\u8c61, \u53ef\u4f5c\u4e3a\u88c5\u9970\u5668\u4f7f\u7528. channel.use(Schema) : \u4f7f\u7528\u4e00\u4e2a Schema \u5bf9\u8c61. channel._py_module : \u8bbf\u95ee\u81ea\u8eab\u7684 Python \u6a21\u5757, \u6ce8\u610f\u5bfc\u5165\u5b8c\u6210\u540e\u624d\u53ef\u7528. channel.meta : \u900f\u660e\u7684\u5143\u6570\u636e\u5b57\u5178, description author name \u65b9\u6cd5\u90fd\u662f\u5bf9\u5176\u7684\u900f\u660e\u4ee3\u7406\u8bbf\u95ee.","title":"Channel \u7684\u5176\u4ed6\u7528\u6cd5"},{"location":"extra/saya/cross-module/","text":"\u8de8\u6a21\u5757\u4f7f\u7528 \ud83d\udd17 Saya \u63d0\u4f9b\u4e86\u5f88\u591a\u5229\u4e8e\u8de8\u6a21\u5757\u8c03\u7528\u7684\u5de5\u5177. \u9996\u5148, \u4f60\u9700\u8981\u4e00\u4e2a Saya \u5bf9\u8c61. \u5728 Saya \u6a21\u5757\u4e2d, \u4f7f\u7528 saya = Saya.current() \u6765\u83b7\u53d6 Saya \u5b9e\u4f8b. mounts \ud83d\udd17 Saya.mounts \u662f\u4e00\u4e2a\u900f\u660e\u5b57\u5178, \u8bb0\u5f55\u4e86\u5916\u90e8 \u6302\u8f7d \u7684\u5bf9\u8c61. \u5229\u7528 mount unmount access \u4e09\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u8bbf\u95ee Saya.mounts \u4e0b\u7684\u5404\u4e2a\u5c5e\u6027. \u6ce8\u610f \u8bf7\u6ce8\u610f, Saya.mounts \u6240\u6302\u8f7d\u7684\u5bf9\u8c61\u4ecd\u7136\u9075\u5b88 Python \u7684\u5bf9\u8c61\u8d4b\u503c\u89c4\u5219. value : bool = False saya . mount ( \"saya.values.value\" , value ) value = True saya . access ( \"saya.values.value\" ) # \u8fd4\u56de False \u8de8\u6a21\u5757\u7684 require \ud83d\udd17 \u5728\u83b7\u53d6 Saya \u5b9e\u4f8b\u540e, \u4f60\u81ea\u7136\u53ef\u4ee5 require \u5176\u4ed6 Saya \u6a21\u5757\u4e86. \u63d0\u793a Saya.require \u65b9\u6cd5\u4f1a\u81ea\u52a8\u89e3\u6790\u91cd\u590d\u7684\u5bfc\u5165, \u4fdd\u8bc1\u4e3b\u6a21\u5757\u4e2d\u7684 Channel \u4e0e\u4f60 require \u83b7\u53d6\u5230\u7684\u4e00\u81f4. \u5982\u679c\u4f60 require \u4e86\u4e00\u4e2a\u6a21\u5757, \u4f46\u662f\u6ca1\u6709\u5728\u4e3b\u6a21\u5757\u4e2d\u5bfc\u5165, \u90a3\u5b83\u4f1a\u88ab\u81ea\u52a8\u521b\u5efa. saya = Saya . current () value = saya . require ( \"saya.other_module\" ) value \u53ef\u4ee5\u662f\u5176 Channel \u6216\u901a\u8fc7 Channel.export \u5bfc\u51fa\u7684\u5bf9\u8c61. \u793e\u533a\u6587\u6863\u76f8\u5173\u7ae0\u8282: \u94fe\u63a5","title":"\u8de8\u6a21\u5757"},{"location":"extra/saya/cross-module/#_1","text":"Saya \u63d0\u4f9b\u4e86\u5f88\u591a\u5229\u4e8e\u8de8\u6a21\u5757\u8c03\u7528\u7684\u5de5\u5177. \u9996\u5148, \u4f60\u9700\u8981\u4e00\u4e2a Saya \u5bf9\u8c61. \u5728 Saya \u6a21\u5757\u4e2d, \u4f7f\u7528 saya = Saya.current() \u6765\u83b7\u53d6 Saya \u5b9e\u4f8b.","title":"\u8de8\u6a21\u5757\u4f7f\u7528"},{"location":"extra/saya/cross-module/#mounts","text":"Saya.mounts \u662f\u4e00\u4e2a\u900f\u660e\u5b57\u5178, \u8bb0\u5f55\u4e86\u5916\u90e8 \u6302\u8f7d \u7684\u5bf9\u8c61. \u5229\u7528 mount unmount access \u4e09\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u8bbf\u95ee Saya.mounts \u4e0b\u7684\u5404\u4e2a\u5c5e\u6027. \u6ce8\u610f \u8bf7\u6ce8\u610f, Saya.mounts \u6240\u6302\u8f7d\u7684\u5bf9\u8c61\u4ecd\u7136\u9075\u5b88 Python \u7684\u5bf9\u8c61\u8d4b\u503c\u89c4\u5219. value : bool = False saya . mount ( \"saya.values.value\" , value ) value = True saya . access ( \"saya.values.value\" ) # \u8fd4\u56de False","title":"mounts"},{"location":"extra/saya/cross-module/#require","text":"\u5728\u83b7\u53d6 Saya \u5b9e\u4f8b\u540e, \u4f60\u81ea\u7136\u53ef\u4ee5 require \u5176\u4ed6 Saya \u6a21\u5757\u4e86. \u63d0\u793a Saya.require \u65b9\u6cd5\u4f1a\u81ea\u52a8\u89e3\u6790\u91cd\u590d\u7684\u5bfc\u5165, \u4fdd\u8bc1\u4e3b\u6a21\u5757\u4e2d\u7684 Channel \u4e0e\u4f60 require \u83b7\u53d6\u5230\u7684\u4e00\u81f4. \u5982\u679c\u4f60 require \u4e86\u4e00\u4e2a\u6a21\u5757, \u4f46\u662f\u6ca1\u6709\u5728\u4e3b\u6a21\u5757\u4e2d\u5bfc\u5165, \u90a3\u5b83\u4f1a\u88ab\u81ea\u52a8\u521b\u5efa. saya = Saya . current () value = saya . require ( \"saya.other_module\" ) value \u53ef\u4ee5\u662f\u5176 Channel \u6216\u901a\u8fc7 Channel.export \u5bfc\u51fa\u7684\u5bf9\u8c61. \u793e\u533a\u6587\u6863\u76f8\u5173\u7ae0\u8282: \u94fe\u63a5","title":"\u8de8\u6a21\u5757\u7684 require"},{"location":"extra/saya/start/","text":"\u5f00\u59cb\u4f7f\u7528 \ud83d\udd17 \u7b80\u4ecb \ud83d\udd17 Saya \u7684\u540d\u79f0\u53d6\u81ea\u4f5c\u54c1 \u9b54\u5973\u4e4b\u65c5 \u4e2d\u7684\u89d2\u8272 \"\u6c99\u8036(Saya)\", \u613f\u6240\u6709\u4eba\u7684\u5fc3\u4e2d\u90fd\u6709\u4e00\u4f4d\u6d3b\u6cfc\u53ef\u7231\u7684\u70ad\u4e4b\u9b54\u5973. Saya \u7684\u67b6\u6784\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206: Saya Controller (\u63a7\u5236\u5668): \u8d1f\u8d23\u63a7\u5236\u5404\u4e2a\u6a21\u5757, \u5206\u914d Channel , \u7ba1\u7406\u6a21\u5757\u542f\u505c, Behaviour \u7684\u6ce8\u518c\u548c\u8c03\u7528. Module Channel (\u6a21\u5757\u5bb9\u5668): \u8d1f\u8d23\u5bf9\u6a21\u5757\u670d\u52a1, \u6536\u96c6\u6a21\u5757\u7684\u5404\u5f0f\u4fe1\u606f, \u50cf \u6a21\u5757\u7684\u540d\u79f0, \u4f5c\u8005, \u957f\u6bb5\u7684\u63cf\u8ff0 \u4e4b\u7c7b, \u5e76\u8d1f\u8d23\u5305\u88c5\u6a21\u5757\u7684\u5185\u5bb9\u4e3a Cube , \u7528\u4ee5 Behaviour \u5bf9\u5e95\u5c42\u63a5\u53e3\u7684\u64cd\u4f5c. Cube (\u5185\u5bb9\u5bb9\u5668): \u5bf9\u6a21\u5757\u63d0\u4f9b\u7684\u5185\u5bb9\u9644\u52a0\u4e00\u4e2a\u7531 Schema \u5b9e\u4f8b\u5316\u6765\u7684 metadata , \u5373 \"\u5143\u4fe1\u606f\", \u7528\u4e8e\u7ed9 Behaviour \u8fdb\u884c\u5904\u7406. Schema (\u5143\u4fe1\u606f\u6a21\u677f): \u7528\u4e8e\u7ed9\u6a21\u5757\u63d0\u4f9b\u7684\u5185\u5bb9\u9644\u52a0\u4e0d\u540c\u7c7b\u578b\u7684\u5143\u4fe1\u606f, \u7ed9 Behaviour isinstance \u5904\u7406\u7528. Behaviour (\u884c\u4e3a): \u6839\u636e Cube \u53ca\u5176\u5143\u4fe1\u606f, \u5bf9\u5e95\u5c42\u63a5\u53e3(\u4f8b\u5982 Broadcast , Scheduler \u7b49)\u8fdb\u884c\u64cd\u4f5c. \u5305\u62ec allocate \u4e0e uninstall \u4e24\u4e2a\u64cd\u4f5c. Saya \u5df2\u7ecf\u5185\u7f6e\u4e86\u5bf9 Broadcast Control \u7684\u6700\u57fa\u672c\u7684\u652f\u6301(\u5373\u76d1\u542c\u5668 Listener ), \u4e0b\u9762\u6211\u4eec\u5c31\u8bd5\u4e0b saya-style \u7684 Broadcast Control \u7684\u4f7f\u7528. \u9996\u5148, \u6211\u4eec\u9700\u8981\u5148\u90e8\u7f72\u73af\u5883, \u6267\u884c\u6307\u4ee4: pip install graia-saya \u6216\u8005\u4f7f\u7528 poetry : poetry add graia-saya \u76ee\u524d, \u6240\u6709\u7684 API \u90fd\u5c5e\u4e8e\u4e0d\u7a33\u5b9a\u72b6\u6001, \u867d\u7136\u57fa\u672c\u7684\u67b6\u6784\u662f\u4e0d\u4f1a\u53d8\u5316, \u4f46\u6709\u4e9b API \u53ef\u80fd\u5728 Saya@0.1.0 \u53d1\u5e03\u524d\u8fdb\u884c\u5267\u70c8\u7684\u53d8\u52a8, \u6240\u4ee5\u8bf7\u968f\u65f6\u5173\u6ce8\u6211\u4eec\u7684\u66f4\u65b0\u72b6\u6001! \u5b89\u88c5\u540e, \u5728\u7f16\u8f91\u5668\u5185\u6253\u5f00\u5de5\u4f5c\u533a, \u521b\u5efa\u5982\u4e0b\u7684\u76ee\u5f55\u7ed3\u6784: Note \u8fd9\u91cc\u6211\u4eec\u5efa\u7acb\u7684\u662f\u4e00\u4e2a \u793a\u4f8b\u6027 \u76ee\u5f55\u7ed3\u6784, \u5373\u6700\u5c0f\u5b9e\u4f8b. \u7406\u8bba\u4e0a\u4f60\u7684\u6a21\u5757\u53ea\u9700\u8981\u7b26\u5408 Python \u7684\u5bfc\u5165\u89c4\u5219, \u5c31\u80fd\u5f15\u5165\u6a21\u5757\u5230\u5b9e\u4f8b\u4e2d. saya-example \u2502 main.py \u2502 pyproject.toml \u2502 \u2514\u2500 modules \u2502 __init__.py \u2502 module_as_file.py # \u4f5c\u4e3a\u6587\u4ef6\u7684\u5408\u6cd5\u6a21\u5757\u53ef\u4ee5\u88ab\u8c03\u7528. \u2502 \u2514\u2500 module_as_dir # \u4f5c\u4e3a\u6587\u4ef6\u5939\u7684\u5408\u6cd5\u6a21\u5757\u53ef\u4ee5\u88ab\u8c03\u7528(\u4ec5\u8c03\u7528 __init__.py \u4e0b\u7684\u5185\u5bb9). __init__.py Saya \u9700\u8981\u4e00\u4e2a\u5165\u53e3( entry ), \u7528\u4e8e\u521b\u5efa Controller , \u5e76\u8ba9 Controller \u5206\u914d Channel \u7ed9\u8fd9\u4e4b\u540e\u88ab Saya.require \u65b9\u6cd5\u5f15\u5165\u7684\u6a21\u5757. main.py \u5c06\u4f5c\u4e3a\u5165\u53e3\u6587\u4ef6, \u88ab Python \u89e3\u91ca\u5668\u9996\u5148\u6267\u884c. \u5165\u53e3\u6587\u4ef6\u7684\u7f16\u5199 \ud83d\udd17 \u9996\u5148, \u6211\u4eec\u9700\u8981\u5f15\u5165 Saya , Broadcast , \u8fd8\u6709\u5176\u5185\u90e8\u96c6\u6210\u7684\u5bf9 Broadcast \u7684\u652f\u6301: from graia.saya import Saya from graia.broadcast import Broadcast from graia.saya.builtins.broadcast import BroadcastBehaviour \u5206\u522b\u521b\u5efa Broadcast , Saya \u7684\u5b9e\u4f8b: import asyncio loop = asyncio . get_event_loop () broadcast = Broadcast ( loop = loop ) saya = Saya ( broadcast ) \u63d0\u793a \u4f60\u53ef\u4ee5\u5229\u7528 Ariadne.create \u65b9\u6cd5, \u65b9\u4fbf\u7684\u521b\u5efa Saya \u5b9e\u4f8b. from graia.saya import Saya app = Ariadne ( ... ) saya = app . create ( Saya ) \u53ea\u8981\u8bb0\u5f97\u5728\u542f\u52a8 Ariadne \u524d\u8fd9\u4e48\u505a\u5c31\u597d. \u521b\u5efa BroadcastBehaviour \u7684\u5b9e\u4f8b, \u5e76\u5c06\u5176\u6ce8\u518c\u5230\u73b0\u6709\u7684 Saya \u5b9e\u4f8b\u4e2d: saya . install_behaviours ( BroadcastBehaviour ( broadcast )) \u63d0\u793a \u4f60\u4e5f\u53ef\u4ee5\u7528 Ariadne.create \u521b\u5efa BroadcastBehaviour . \u4e3a\u4e86\u5bfc\u5165\u5404\u4e2a\u6a21\u5757, Saya Controller \u9700\u8981\u5148\u8fdb\u5165\u4e0a\u4e0b\u6587: with saya . module_context (): ... \u5f15\u5165\u5404\u4e2a\u6a21\u5757, \u8fd9\u91cc\u7684\u6a21\u5757\u76ee\u524d\u90fd\u9700\u8981\u624b\u52a8\u5f15\u5165, \u540e\u671f\u53ef\u80fd\u4f1a\u52a0\u5165\u914d\u7f6e\u7cfb\u7edf: with saya . module_context (): saya . require ( \"modules.module_as_file\" ) saya . require ( \"modules.module_as_dir\" ) \u56e0\u4e3a Saya \u7684 Launch API \u5c1a\u672a\u5b8c\u6210, \u8fd9\u91cc\u4ec5\u8c03\u8bd5 Broadcast , \u6545\u76f4\u63a5\u4f7f\u7528 loop.run_forever \u65b9\u6cd5\u8fd0\u884c\u4e8b\u4ef6\u5faa\u73af. try : loop . run_forever () except KeyboardInterrupt : exit () \u63d0\u793a \u8981\u914d\u5408 Ariadne \u4f7f\u7528, \u53ef\u4ee5\u76f4\u63a5\u8fd9\u6837\u505a: app = Ariadne ( ... ) app . launch_blocking () \u6700\u7ec8\u7684\u7ed3\u679c: main.py import asyncio from graia.saya import Saya from graia.broadcast import Broadcast from graia.saya.builtins.broadcast import BroadcastBehaviour loop = asyncio . get_event_loop () broadcast = Broadcast ( loop = loop ) saya = Saya ( broadcast ) saya . install_behaviours ( BroadcastBehaviour ( broadcast )) with saya . module_context (): saya . require ( \"modules.module_as_file\" ) saya . require ( \"modules.module_as_dir\" ) try : loop . run_forever () except KeyboardInterrupt : exit () \u63d0\u793a \u5b9e\u9645\u4e0a with saya.module_context(): \u662f\u7ed9 require \u5bfc\u5165\u7684\u6a21\u5757\u63d0\u4f9b Saya \u5b9e\u4f8b\u7684\u4e0a\u4e0b\u6587, \u4ece\u800c\u53ef\u4ee5\u4f7f\u7528 Saya.current() \u83b7\u53d6\u5f53\u524d Saya \u5b9e\u4f8b. \u5c31\u8fd9\u6837, \u4e00\u4e2a\u5165\u53e3\u6587\u4ef6\u5c31\u8fd9\u6837\u5b8c\u6210\u4e86, \u73b0\u5728\u4e3b\u8981\u662f\u63d2\u4ef6\u90e8\u5206. \u7b2c\u4e00\u6b21\u8fd0\u884c \ud83d\udd17 \u6765\u5230 module_as_file.py : from graia.saya import Saya , Channel saya = Saya . current () channel = Channel . current () \u4e24\u4e2a current \u65b9\u6cd5\u7684\u8c03\u7528, \u8bbf\u95ee\u4e86 Saya \u5b9e\u4f8b\u548c\u5f53\u524d\u4e0a\u4e0b\u6587\u5206\u914d\u7684 Channel . \u63a5\u4e0b\u6765, \u5bfc\u5165 ListenerSchema : from graia.saya.builtins.broadcast.schema import ListenerSchema ListenerSchema \u4f5c\u4e3a Schema , \u6807\u8bc6\u76f8\u5bf9\u5e94\u7684\u6a21\u5757\u5185\u5bb9\u4e3a\u4e00 Listener , \u5e76\u5728\u6a21\u5757\u88ab\u5bfc\u5165\u540e\u7ecf\u7531 Behaviour \u8fdb\u884c\u64cd\u4f5c. \u4f7f\u7528 Channel.use \u65b9\u6cd5, \u5411 Channel \u63d0\u4f9b\u5185\u5bb9: @channel . use ( ListenerSchema ( listening_events = [ ... ] # \u586b\u5165\u4f60\u9700\u8981\u76d1\u542c\u7684\u4e8b\u4ef6 )) async def module_listener (): print ( \"\u4e8b\u4ef6\u88ab\u89e6\u53d1!!!!\" ) \u7136\u540e, \u5f15\u5165\u7ed3\u675f, module_as_file.py \u6587\u4ef6\u5185\u5bb9\u5982\u4e0b, \u8fd9\u91cc\u6211\u4eec\u76d1\u542c SayaModuleInstalled \u4e8b\u4ef6, \u4f5c\u4e3a Lifecycle API \u7684\u7b80\u5355\u793a\u4f8b: Result of module_as_file.py from graia.saya import Saya , Channel from graia.saya.builtins.broadcast.schema import ListenerSchema from graia.saya.event import SayaModuleInstalled saya = Saya . current () channel = Channel . current () @channel . use ( ListenerSchema ( listening_events = [ SayaModuleInstalled ] )) async def module_listener ( event : SayaModuleInstalled ): print ( f \" { event . module } :: \u6a21\u5757\u52a0\u8f7d\u6210\u529f!!!\" ) \u6211\u4eec\u5bf9 modules/module_as_dir/__init__.py \u4e5f\u5982\u6cd5\u70ae\u5236, copy \u4e0a\u65b9\u7684\u4ee3\u7801, \u8fdb\u5165\u865a\u62df\u73af\u5883, \u7136\u540e\u8fd0\u884c main.py . \u8b66\u544a \u8bf7\u4e0d\u8981\u76f4\u63a5\u8fd0\u884c Saya module , \u800c\u9700\u8981\u901a\u8fc7\u4e3b\u6587\u4ef6\u8fd0\u884c, \u5426\u5219\u4f1a\u56e0\u4e3a\u6ca1\u6709\u5206\u914d Channel \u4ea7\u751f LookupError \u5f02\u5e38. root@localhost: # python main.py 2021-02-16 01:19:56.632 | DEBUG | graia.saya:require:58 - require modules.module_as_file 2021-02-16 01:19:56.639 | DEBUG | graia.saya:require:58 - require modules.module_as_dir modules.module_as_file :: \u6a21\u5757\u52a0\u8f7d\u6210\u529f!!! modules.module_as_file :: \u6a21\u5757\u52a0\u8f7d\u6210\u529f!!! modules.module_as_dir :: \u6a21\u5757\u52a0\u8f7d\u6210\u529f!!! modules.module_as_dir :: \u6a21\u5757\u52a0\u8f7d\u6210\u529f!!! \u606d\u559c\u4f60, \u5b8c\u6210\u4e86\u7b2c\u4e00\u4e2a Saya Application , \u6211\u4eec\u53ef\u4ee5\u524d\u5f80\u4e0b\u4e00\u7ae0\u4e86. \u793e\u533a\u6587\u6863\u76f8\u5173\u7ae0\u8282: \u94fe\u63a5","title":"\u5f00\u59cb"},{"location":"extra/saya/start/#_1","text":"","title":"\u5f00\u59cb\u4f7f\u7528"},{"location":"extra/saya/start/#_2","text":"Saya \u7684\u540d\u79f0\u53d6\u81ea\u4f5c\u54c1 \u9b54\u5973\u4e4b\u65c5 \u4e2d\u7684\u89d2\u8272 \"\u6c99\u8036(Saya)\", \u613f\u6240\u6709\u4eba\u7684\u5fc3\u4e2d\u90fd\u6709\u4e00\u4f4d\u6d3b\u6cfc\u53ef\u7231\u7684\u70ad\u4e4b\u9b54\u5973. Saya \u7684\u67b6\u6784\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206: Saya Controller (\u63a7\u5236\u5668): \u8d1f\u8d23\u63a7\u5236\u5404\u4e2a\u6a21\u5757, \u5206\u914d Channel , \u7ba1\u7406\u6a21\u5757\u542f\u505c, Behaviour \u7684\u6ce8\u518c\u548c\u8c03\u7528. Module Channel (\u6a21\u5757\u5bb9\u5668): \u8d1f\u8d23\u5bf9\u6a21\u5757\u670d\u52a1, \u6536\u96c6\u6a21\u5757\u7684\u5404\u5f0f\u4fe1\u606f, \u50cf \u6a21\u5757\u7684\u540d\u79f0, \u4f5c\u8005, \u957f\u6bb5\u7684\u63cf\u8ff0 \u4e4b\u7c7b, \u5e76\u8d1f\u8d23\u5305\u88c5\u6a21\u5757\u7684\u5185\u5bb9\u4e3a Cube , \u7528\u4ee5 Behaviour \u5bf9\u5e95\u5c42\u63a5\u53e3\u7684\u64cd\u4f5c. Cube (\u5185\u5bb9\u5bb9\u5668): \u5bf9\u6a21\u5757\u63d0\u4f9b\u7684\u5185\u5bb9\u9644\u52a0\u4e00\u4e2a\u7531 Schema \u5b9e\u4f8b\u5316\u6765\u7684 metadata , \u5373 \"\u5143\u4fe1\u606f\", \u7528\u4e8e\u7ed9 Behaviour \u8fdb\u884c\u5904\u7406. Schema (\u5143\u4fe1\u606f\u6a21\u677f): \u7528\u4e8e\u7ed9\u6a21\u5757\u63d0\u4f9b\u7684\u5185\u5bb9\u9644\u52a0\u4e0d\u540c\u7c7b\u578b\u7684\u5143\u4fe1\u606f, \u7ed9 Behaviour isinstance \u5904\u7406\u7528. Behaviour (\u884c\u4e3a): \u6839\u636e Cube \u53ca\u5176\u5143\u4fe1\u606f, \u5bf9\u5e95\u5c42\u63a5\u53e3(\u4f8b\u5982 Broadcast , Scheduler \u7b49)\u8fdb\u884c\u64cd\u4f5c. \u5305\u62ec allocate \u4e0e uninstall \u4e24\u4e2a\u64cd\u4f5c. Saya \u5df2\u7ecf\u5185\u7f6e\u4e86\u5bf9 Broadcast Control \u7684\u6700\u57fa\u672c\u7684\u652f\u6301(\u5373\u76d1\u542c\u5668 Listener ), \u4e0b\u9762\u6211\u4eec\u5c31\u8bd5\u4e0b saya-style \u7684 Broadcast Control \u7684\u4f7f\u7528. \u9996\u5148, \u6211\u4eec\u9700\u8981\u5148\u90e8\u7f72\u73af\u5883, \u6267\u884c\u6307\u4ee4: pip install graia-saya \u6216\u8005\u4f7f\u7528 poetry : poetry add graia-saya \u76ee\u524d, \u6240\u6709\u7684 API \u90fd\u5c5e\u4e8e\u4e0d\u7a33\u5b9a\u72b6\u6001, \u867d\u7136\u57fa\u672c\u7684\u67b6\u6784\u662f\u4e0d\u4f1a\u53d8\u5316, \u4f46\u6709\u4e9b API \u53ef\u80fd\u5728 Saya@0.1.0 \u53d1\u5e03\u524d\u8fdb\u884c\u5267\u70c8\u7684\u53d8\u52a8, \u6240\u4ee5\u8bf7\u968f\u65f6\u5173\u6ce8\u6211\u4eec\u7684\u66f4\u65b0\u72b6\u6001! \u5b89\u88c5\u540e, \u5728\u7f16\u8f91\u5668\u5185\u6253\u5f00\u5de5\u4f5c\u533a, \u521b\u5efa\u5982\u4e0b\u7684\u76ee\u5f55\u7ed3\u6784: Note \u8fd9\u91cc\u6211\u4eec\u5efa\u7acb\u7684\u662f\u4e00\u4e2a \u793a\u4f8b\u6027 \u76ee\u5f55\u7ed3\u6784, \u5373\u6700\u5c0f\u5b9e\u4f8b. \u7406\u8bba\u4e0a\u4f60\u7684\u6a21\u5757\u53ea\u9700\u8981\u7b26\u5408 Python \u7684\u5bfc\u5165\u89c4\u5219, \u5c31\u80fd\u5f15\u5165\u6a21\u5757\u5230\u5b9e\u4f8b\u4e2d. saya-example \u2502 main.py \u2502 pyproject.toml \u2502 \u2514\u2500 modules \u2502 __init__.py \u2502 module_as_file.py # \u4f5c\u4e3a\u6587\u4ef6\u7684\u5408\u6cd5\u6a21\u5757\u53ef\u4ee5\u88ab\u8c03\u7528. \u2502 \u2514\u2500 module_as_dir # \u4f5c\u4e3a\u6587\u4ef6\u5939\u7684\u5408\u6cd5\u6a21\u5757\u53ef\u4ee5\u88ab\u8c03\u7528(\u4ec5\u8c03\u7528 __init__.py \u4e0b\u7684\u5185\u5bb9). __init__.py Saya \u9700\u8981\u4e00\u4e2a\u5165\u53e3( entry ), \u7528\u4e8e\u521b\u5efa Controller , \u5e76\u8ba9 Controller \u5206\u914d Channel \u7ed9\u8fd9\u4e4b\u540e\u88ab Saya.require \u65b9\u6cd5\u5f15\u5165\u7684\u6a21\u5757. main.py \u5c06\u4f5c\u4e3a\u5165\u53e3\u6587\u4ef6, \u88ab Python \u89e3\u91ca\u5668\u9996\u5148\u6267\u884c.","title":"\u7b80\u4ecb"},{"location":"extra/saya/start/#_3","text":"\u9996\u5148, \u6211\u4eec\u9700\u8981\u5f15\u5165 Saya , Broadcast , \u8fd8\u6709\u5176\u5185\u90e8\u96c6\u6210\u7684\u5bf9 Broadcast \u7684\u652f\u6301: from graia.saya import Saya from graia.broadcast import Broadcast from graia.saya.builtins.broadcast import BroadcastBehaviour \u5206\u522b\u521b\u5efa Broadcast , Saya \u7684\u5b9e\u4f8b: import asyncio loop = asyncio . get_event_loop () broadcast = Broadcast ( loop = loop ) saya = Saya ( broadcast ) \u63d0\u793a \u4f60\u53ef\u4ee5\u5229\u7528 Ariadne.create \u65b9\u6cd5, \u65b9\u4fbf\u7684\u521b\u5efa Saya \u5b9e\u4f8b. from graia.saya import Saya app = Ariadne ( ... ) saya = app . create ( Saya ) \u53ea\u8981\u8bb0\u5f97\u5728\u542f\u52a8 Ariadne \u524d\u8fd9\u4e48\u505a\u5c31\u597d. \u521b\u5efa BroadcastBehaviour \u7684\u5b9e\u4f8b, \u5e76\u5c06\u5176\u6ce8\u518c\u5230\u73b0\u6709\u7684 Saya \u5b9e\u4f8b\u4e2d: saya . install_behaviours ( BroadcastBehaviour ( broadcast )) \u63d0\u793a \u4f60\u4e5f\u53ef\u4ee5\u7528 Ariadne.create \u521b\u5efa BroadcastBehaviour . \u4e3a\u4e86\u5bfc\u5165\u5404\u4e2a\u6a21\u5757, Saya Controller \u9700\u8981\u5148\u8fdb\u5165\u4e0a\u4e0b\u6587: with saya . module_context (): ... \u5f15\u5165\u5404\u4e2a\u6a21\u5757, \u8fd9\u91cc\u7684\u6a21\u5757\u76ee\u524d\u90fd\u9700\u8981\u624b\u52a8\u5f15\u5165, \u540e\u671f\u53ef\u80fd\u4f1a\u52a0\u5165\u914d\u7f6e\u7cfb\u7edf: with saya . module_context (): saya . require ( \"modules.module_as_file\" ) saya . require ( \"modules.module_as_dir\" ) \u56e0\u4e3a Saya \u7684 Launch API \u5c1a\u672a\u5b8c\u6210, \u8fd9\u91cc\u4ec5\u8c03\u8bd5 Broadcast , \u6545\u76f4\u63a5\u4f7f\u7528 loop.run_forever \u65b9\u6cd5\u8fd0\u884c\u4e8b\u4ef6\u5faa\u73af. try : loop . run_forever () except KeyboardInterrupt : exit () \u63d0\u793a \u8981\u914d\u5408 Ariadne \u4f7f\u7528, \u53ef\u4ee5\u76f4\u63a5\u8fd9\u6837\u505a: app = Ariadne ( ... ) app . launch_blocking () \u6700\u7ec8\u7684\u7ed3\u679c: main.py import asyncio from graia.saya import Saya from graia.broadcast import Broadcast from graia.saya.builtins.broadcast import BroadcastBehaviour loop = asyncio . get_event_loop () broadcast = Broadcast ( loop = loop ) saya = Saya ( broadcast ) saya . install_behaviours ( BroadcastBehaviour ( broadcast )) with saya . module_context (): saya . require ( \"modules.module_as_file\" ) saya . require ( \"modules.module_as_dir\" ) try : loop . run_forever () except KeyboardInterrupt : exit () \u63d0\u793a \u5b9e\u9645\u4e0a with saya.module_context(): \u662f\u7ed9 require \u5bfc\u5165\u7684\u6a21\u5757\u63d0\u4f9b Saya \u5b9e\u4f8b\u7684\u4e0a\u4e0b\u6587, \u4ece\u800c\u53ef\u4ee5\u4f7f\u7528 Saya.current() \u83b7\u53d6\u5f53\u524d Saya \u5b9e\u4f8b. \u5c31\u8fd9\u6837, \u4e00\u4e2a\u5165\u53e3\u6587\u4ef6\u5c31\u8fd9\u6837\u5b8c\u6210\u4e86, \u73b0\u5728\u4e3b\u8981\u662f\u63d2\u4ef6\u90e8\u5206.","title":"\u5165\u53e3\u6587\u4ef6\u7684\u7f16\u5199"},{"location":"extra/saya/start/#_4","text":"\u6765\u5230 module_as_file.py : from graia.saya import Saya , Channel saya = Saya . current () channel = Channel . current () \u4e24\u4e2a current \u65b9\u6cd5\u7684\u8c03\u7528, \u8bbf\u95ee\u4e86 Saya \u5b9e\u4f8b\u548c\u5f53\u524d\u4e0a\u4e0b\u6587\u5206\u914d\u7684 Channel . \u63a5\u4e0b\u6765, \u5bfc\u5165 ListenerSchema : from graia.saya.builtins.broadcast.schema import ListenerSchema ListenerSchema \u4f5c\u4e3a Schema , \u6807\u8bc6\u76f8\u5bf9\u5e94\u7684\u6a21\u5757\u5185\u5bb9\u4e3a\u4e00 Listener , \u5e76\u5728\u6a21\u5757\u88ab\u5bfc\u5165\u540e\u7ecf\u7531 Behaviour \u8fdb\u884c\u64cd\u4f5c. \u4f7f\u7528 Channel.use \u65b9\u6cd5, \u5411 Channel \u63d0\u4f9b\u5185\u5bb9: @channel . use ( ListenerSchema ( listening_events = [ ... ] # \u586b\u5165\u4f60\u9700\u8981\u76d1\u542c\u7684\u4e8b\u4ef6 )) async def module_listener (): print ( \"\u4e8b\u4ef6\u88ab\u89e6\u53d1!!!!\" ) \u7136\u540e, \u5f15\u5165\u7ed3\u675f, module_as_file.py \u6587\u4ef6\u5185\u5bb9\u5982\u4e0b, \u8fd9\u91cc\u6211\u4eec\u76d1\u542c SayaModuleInstalled \u4e8b\u4ef6, \u4f5c\u4e3a Lifecycle API \u7684\u7b80\u5355\u793a\u4f8b: Result of module_as_file.py from graia.saya import Saya , Channel from graia.saya.builtins.broadcast.schema import ListenerSchema from graia.saya.event import SayaModuleInstalled saya = Saya . current () channel = Channel . current () @channel . use ( ListenerSchema ( listening_events = [ SayaModuleInstalled ] )) async def module_listener ( event : SayaModuleInstalled ): print ( f \" { event . module } :: \u6a21\u5757\u52a0\u8f7d\u6210\u529f!!!\" ) \u6211\u4eec\u5bf9 modules/module_as_dir/__init__.py \u4e5f\u5982\u6cd5\u70ae\u5236, copy \u4e0a\u65b9\u7684\u4ee3\u7801, \u8fdb\u5165\u865a\u62df\u73af\u5883, \u7136\u540e\u8fd0\u884c main.py . \u8b66\u544a \u8bf7\u4e0d\u8981\u76f4\u63a5\u8fd0\u884c Saya module , \u800c\u9700\u8981\u901a\u8fc7\u4e3b\u6587\u4ef6\u8fd0\u884c, \u5426\u5219\u4f1a\u56e0\u4e3a\u6ca1\u6709\u5206\u914d Channel \u4ea7\u751f LookupError \u5f02\u5e38. root@localhost: # python main.py 2021-02-16 01:19:56.632 | DEBUG | graia.saya:require:58 - require modules.module_as_file 2021-02-16 01:19:56.639 | DEBUG | graia.saya:require:58 - require modules.module_as_dir modules.module_as_file :: \u6a21\u5757\u52a0\u8f7d\u6210\u529f!!! modules.module_as_file :: \u6a21\u5757\u52a0\u8f7d\u6210\u529f!!! modules.module_as_dir :: \u6a21\u5757\u52a0\u8f7d\u6210\u529f!!! modules.module_as_dir :: \u6a21\u5757\u52a0\u8f7d\u6210\u529f!!! \u606d\u559c\u4f60, \u5b8c\u6210\u4e86\u7b2c\u4e00\u4e2a Saya Application , \u6211\u4eec\u53ef\u4ee5\u524d\u5f80\u4e0b\u4e00\u7ae0\u4e86. \u793e\u533a\u6587\u6863\u76f8\u5173\u7ae0\u8282: \u94fe\u63a5","title":"\u7b2c\u4e00\u6b21\u8fd0\u884c"},{"location":"migrate/NAV/","text":"\u6982\u89c8 \u53d8\u52a8\u4e00\u89c8","title":"NAV"},{"location":"migrate/cheatsheet/","text":"\u53d8\u52a8\u7684 API \u4e00\u89c8 \ud83d\udd17 Working In Progress \u672c\u90e8\u5206\u6025\u9700\u6539\u8fdb, \u6b22\u8fce Graia Application \u7528\u6237\u8e0a\u8dc3\u53c2\u4e0e! \u6539\u52a8 \ud83d\udd17 \u672c\u90e8\u5206\u9610\u8ff0\u4e86\u53ef\u90e8\u5206\u6216\u5168\u90e8\u4e0e\u539f\u6709 API \u7b49\u4ef7\u7684\u53d8\u52a8. \u6a21\u5757 \ud83d\udd17 graia-template -> graia.ariadne.message.formatter (\u7528\u6cd5\u4e0d\u540c) graia-component -> graia.ariadne.message.component \u65b9\u6cd5 \ud83d\udd17 GraiaMiraiApplication \ud83d\udd17 GraiaMiraiApplication.kick -> Ariadne.kickMember GraiaMiraiApplication.mute -> Ariadne.muteMember GraiaMiraiApplication.unmute -> Ariadne.unmuteMember GraiaMiraiApplication.nudge -> Ariadne.sendNudge MessageChain \ud83d\udd17 MessageChain.create \u66f4\u5f3a\u5927\u4e86. MessageChain.plus -> MessageChain.extend MessageChain.plusWith -> MessageChain.__add__ \u6216 MessageChain.extend(..., copy=True) MessageChain.asSerializationString -> MessageChain.asPersistentString (\u683c\u5f0f\u4e0d\u540c) MessageChain.fromSerializationString -> MessageChain.fromPersistentString (\u683c\u5f0f\u4e0d\u540c) MessageChain.asMerged -> MessageChain.merge(copy=True) MessageChain.onlyHas -> MessageChain.onlyContains MessageChain.hasText -> MessageChain.has (\u63a5\u53d7\u591a\u79cd\u5f62\u5f0f) MessageChain.join -> sum(message_chains) ( MessageChain \u53ef\u76f4\u63a5\u76f8\u52a0) Element \ud83d\udd17 \u591a\u5a92\u4f53\u5143\u7d20 \ud83d\udd17 MultimediaElement.http_to_bytes -> MultimediaElement.get_bytes \u79fb\u9664 \ud83d\udd17 \u672c\u90e8\u5206\u9610\u8ff0\u4e86\u88ab\u5220\u9664\u7684 API. \u6a21\u5757 \ud83d\udd17 graia.application.message.elements.internal graia.application.message.elements.external graia.application.message.parser.kanata : \u8bf7\u7528 graia.ariadne.message.parser.twilight . \u65b9\u6cd5 \ud83d\udd17 MessageChain \ud83d\udd17 MessageChain.isImmutable MessageChain.asImmutable MessageChain.asMutable MessageChain.isSendable MessageChain.asHypertext \u6dfb\u52a0 \ud83d\udd17 \u672c\u90e8\u5206\u9610\u8ff0\u4e86\u65b0\u589e\u7684 API. \u65b9\u6cd5 \ud83d\udd17 MessageChain \ud83d\udd17 MessageChain.download_binary MessageChain.index MessageChain.count MessageChain.removeprefix MessageChain.removesuffix MessageChain.asMappingString \u4e0e MessageChain.fromMappingString MessageChain.hasSubChain MessageChain.merge MessageChain.extend MessageChain.append MessageChain.copy MessageChain.download_binary MessageChain.prepare \u652f\u6301\u4ee5\u4e0b\u9b54\u672f\u65b9\u6cd5: __add__ \u4e0e __iadd__ __mul__ \u4e0e __imul__ __len__ \u589e\u5f3a\u8fc7\u7684 __contains__ \u589e\u5f3a\u8fc7\u7684 __getitem__ Element \ud83d\udd17 \u591a\u5a92\u4f53\u5143\u7d20 \ud83d\udd17 MultimediaElement.uuid","title":"\u53d8\u52a8\u4e00\u89c8"},{"location":"migrate/cheatsheet/#api","text":"Working In Progress \u672c\u90e8\u5206\u6025\u9700\u6539\u8fdb, \u6b22\u8fce Graia Application \u7528\u6237\u8e0a\u8dc3\u53c2\u4e0e!","title":"\u53d8\u52a8\u7684 API \u4e00\u89c8"},{"location":"migrate/cheatsheet/#_1","text":"\u672c\u90e8\u5206\u9610\u8ff0\u4e86\u53ef\u90e8\u5206\u6216\u5168\u90e8\u4e0e\u539f\u6709 API \u7b49\u4ef7\u7684\u53d8\u52a8.","title":"\u6539\u52a8"},{"location":"migrate/cheatsheet/#_2","text":"graia-template -> graia.ariadne.message.formatter (\u7528\u6cd5\u4e0d\u540c) graia-component -> graia.ariadne.message.component","title":"\u6a21\u5757"},{"location":"migrate/cheatsheet/#_3","text":"","title":"\u65b9\u6cd5"},{"location":"migrate/cheatsheet/#graiamiraiapplication","text":"GraiaMiraiApplication.kick -> Ariadne.kickMember GraiaMiraiApplication.mute -> Ariadne.muteMember GraiaMiraiApplication.unmute -> Ariadne.unmuteMember GraiaMiraiApplication.nudge -> Ariadne.sendNudge","title":"GraiaMiraiApplication"},{"location":"migrate/cheatsheet/#messagechain","text":"MessageChain.create \u66f4\u5f3a\u5927\u4e86. MessageChain.plus -> MessageChain.extend MessageChain.plusWith -> MessageChain.__add__ \u6216 MessageChain.extend(..., copy=True) MessageChain.asSerializationString -> MessageChain.asPersistentString (\u683c\u5f0f\u4e0d\u540c) MessageChain.fromSerializationString -> MessageChain.fromPersistentString (\u683c\u5f0f\u4e0d\u540c) MessageChain.asMerged -> MessageChain.merge(copy=True) MessageChain.onlyHas -> MessageChain.onlyContains MessageChain.hasText -> MessageChain.has (\u63a5\u53d7\u591a\u79cd\u5f62\u5f0f) MessageChain.join -> sum(message_chains) ( MessageChain \u53ef\u76f4\u63a5\u76f8\u52a0)","title":"MessageChain"},{"location":"migrate/cheatsheet/#element","text":"","title":"Element"},{"location":"migrate/cheatsheet/#_4","text":"MultimediaElement.http_to_bytes -> MultimediaElement.get_bytes","title":"\u591a\u5a92\u4f53\u5143\u7d20"},{"location":"migrate/cheatsheet/#_5","text":"\u672c\u90e8\u5206\u9610\u8ff0\u4e86\u88ab\u5220\u9664\u7684 API.","title":"\u79fb\u9664"},{"location":"migrate/cheatsheet/#_6","text":"graia.application.message.elements.internal graia.application.message.elements.external graia.application.message.parser.kanata : \u8bf7\u7528 graia.ariadne.message.parser.twilight .","title":"\u6a21\u5757"},{"location":"migrate/cheatsheet/#_7","text":"","title":"\u65b9\u6cd5"},{"location":"migrate/cheatsheet/#messagechain_1","text":"MessageChain.isImmutable MessageChain.asImmutable MessageChain.asMutable MessageChain.isSendable MessageChain.asHypertext","title":"MessageChain"},{"location":"migrate/cheatsheet/#_8","text":"\u672c\u90e8\u5206\u9610\u8ff0\u4e86\u65b0\u589e\u7684 API.","title":"\u6dfb\u52a0"},{"location":"migrate/cheatsheet/#_9","text":"","title":"\u65b9\u6cd5"},{"location":"migrate/cheatsheet/#messagechain_2","text":"MessageChain.download_binary MessageChain.index MessageChain.count MessageChain.removeprefix MessageChain.removesuffix MessageChain.asMappingString \u4e0e MessageChain.fromMappingString MessageChain.hasSubChain MessageChain.merge MessageChain.extend MessageChain.append MessageChain.copy MessageChain.download_binary MessageChain.prepare \u652f\u6301\u4ee5\u4e0b\u9b54\u672f\u65b9\u6cd5: __add__ \u4e0e __iadd__ __mul__ \u4e0e __imul__ __len__ \u589e\u5f3a\u8fc7\u7684 __contains__ \u589e\u5f3a\u8fc7\u7684 __getitem__","title":"MessageChain"},{"location":"migrate/cheatsheet/#element_1","text":"","title":"Element"},{"location":"migrate/cheatsheet/#_10","text":"MultimediaElement.uuid","title":"\u591a\u5a92\u4f53\u5143\u7d20"},{"location":"migrate/guide/","text":"\u6982\u8ff0 \ud83d\udd17 \u6700\u5927\u7684\u66f4\u6539: graia.application -> graia.ariadne \u5bfc\u5165 \ud83d\udd17 \u4f60\u4ecd\u7136\u53ef\u4ee5\u4ece graia.ariadne.entry \u5bfc\u5165\u6240\u6709\u4e1c\u897f, \u4f46\u662f\u6709\u6240\u4e0d\u540c: \u4e0e\u6d88\u606f\u6709\u5173\u7684 (\u6d88\u606f\u94fe, \u5143\u7d20, \u5904\u7406\u5668) \u7b49\u653e\u5728 graia.ariadne.entry.message . \u6240\u6709\u4e8b\u4ef6 (\u5305\u62ec\u6d88\u606f\u4e8b\u4ef6) \u90fd\u653e\u5728 graia.ariadne.entry.event . \u6b64\u5916, Ariadne \u7684\u6a21\u5757\u540d\u90fd\u662f\u5355\u6570\u5f62\u5f0f\u7684 ( utilles -> util , elements -> element ) \u6d88\u606f\u76f8\u5173 \ud83d\udd17 \u6ca1\u6709 InternalElement , ExternalElement , ShadowElement \u4e4b\u5206, \u73b0\u5728\u6240\u6709\u5143\u7d20\u90fd\u7ee7\u627f\u81ea Element . MessageChain \u5747\u4e3a\u53ef\u53d8\u5bf9\u8c61. \u65e0\u6cd5\u5c06\u6d88\u606f\u94fe\u8f6c\u6362\u6210 Mirai Code , \u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u6301\u4e45\u5316\u5b57\u7b26\u4e32 PersistentString . MessageChain \u7684\u65b9\u6cd5\u5f97\u5230\u6781\u5927\u7684\u62d3\u5c55 (\u66f4\u597d\u7684 create , __add__ \u4e0e __mul__ \u652f\u6301\u7b49) \u6b64\u5916, __contains__ ( has ) \u652f\u6301\u5b50\u6d88\u606f\u94fe\u68c0\u6d4b. Kanata \u88ab Twilight \u53d6\u4ee3\u4e86, Template \u88ab\u7528\u6cd5\u7a0d\u6709\u4e0d\u540c\u7684 Formatter \u66ff\u4ee3. \u6d88\u606f\u5143\u7d20 \ud83d\udd17 \u5143\u7d20\u4e0d\u518d\u5206\u4e3a Internal External \u4e0e Shadow \u4e09\u6001. \u5bf9\u5e94\u7684, Image_LocalFile Voice_LocalFile \u7b49 \u7c7b\u578b\u88ab\u5220\u9664\u4e86. \u591a\u5a92\u4f53\u5143\u7d20\u5b9e\u4f8b\u5316\u7b7e\u540d\u66f4\u4e30\u5bcc, \u53ef\u63a5\u53d7 bytes url path id base64 \u7b49. \u6240\u4ee5\u5bf9\u4e8e Image.fromLocalFile \u7b49\u7c7b\u65b9\u6cd5, \u76f4\u63a5\u5b9e\u4f8b\u5316\u5373\u53ef. \u4e0e\u4e3b\u5b9e\u4f8b\u4ea4\u4e92 \ud83d\udd17 \u7edf\u4e00\u6240\u6709\u65b9\u6cd5\u4e3a \u8c13\u8bcd + \u540d\u8bcd \u5f62\u5f0f (\u5982 kick -> kickMember , mute -> muteMember ...) launch_blocking() \u4f1a\u81ea\u52a8\u6355\u83b7\u4e00\u4e2a KeyboardInterrupt \u5e76\u4e3b\u52a8\u505c\u6b62\u5b9e\u4f8b.","title":"\u6982\u89c8"},{"location":"migrate/guide/#_1","text":"\u6700\u5927\u7684\u66f4\u6539: graia.application -> graia.ariadne","title":"\u6982\u8ff0"},{"location":"migrate/guide/#_2","text":"\u4f60\u4ecd\u7136\u53ef\u4ee5\u4ece graia.ariadne.entry \u5bfc\u5165\u6240\u6709\u4e1c\u897f, \u4f46\u662f\u6709\u6240\u4e0d\u540c: \u4e0e\u6d88\u606f\u6709\u5173\u7684 (\u6d88\u606f\u94fe, \u5143\u7d20, \u5904\u7406\u5668) \u7b49\u653e\u5728 graia.ariadne.entry.message . \u6240\u6709\u4e8b\u4ef6 (\u5305\u62ec\u6d88\u606f\u4e8b\u4ef6) \u90fd\u653e\u5728 graia.ariadne.entry.event . \u6b64\u5916, Ariadne \u7684\u6a21\u5757\u540d\u90fd\u662f\u5355\u6570\u5f62\u5f0f\u7684 ( utilles -> util , elements -> element )","title":"\u5bfc\u5165"},{"location":"migrate/guide/#_3","text":"\u6ca1\u6709 InternalElement , ExternalElement , ShadowElement \u4e4b\u5206, \u73b0\u5728\u6240\u6709\u5143\u7d20\u90fd\u7ee7\u627f\u81ea Element . MessageChain \u5747\u4e3a\u53ef\u53d8\u5bf9\u8c61. \u65e0\u6cd5\u5c06\u6d88\u606f\u94fe\u8f6c\u6362\u6210 Mirai Code , \u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u6301\u4e45\u5316\u5b57\u7b26\u4e32 PersistentString . MessageChain \u7684\u65b9\u6cd5\u5f97\u5230\u6781\u5927\u7684\u62d3\u5c55 (\u66f4\u597d\u7684 create , __add__ \u4e0e __mul__ \u652f\u6301\u7b49) \u6b64\u5916, __contains__ ( has ) \u652f\u6301\u5b50\u6d88\u606f\u94fe\u68c0\u6d4b. Kanata \u88ab Twilight \u53d6\u4ee3\u4e86, Template \u88ab\u7528\u6cd5\u7a0d\u6709\u4e0d\u540c\u7684 Formatter \u66ff\u4ee3.","title":"\u6d88\u606f\u76f8\u5173"},{"location":"migrate/guide/#_4","text":"\u5143\u7d20\u4e0d\u518d\u5206\u4e3a Internal External \u4e0e Shadow \u4e09\u6001. \u5bf9\u5e94\u7684, Image_LocalFile Voice_LocalFile \u7b49 \u7c7b\u578b\u88ab\u5220\u9664\u4e86. \u591a\u5a92\u4f53\u5143\u7d20\u5b9e\u4f8b\u5316\u7b7e\u540d\u66f4\u4e30\u5bcc, \u53ef\u63a5\u53d7 bytes url path id base64 \u7b49. \u6240\u4ee5\u5bf9\u4e8e Image.fromLocalFile \u7b49\u7c7b\u65b9\u6cd5, \u76f4\u63a5\u5b9e\u4f8b\u5316\u5373\u53ef.","title":"\u6d88\u606f\u5143\u7d20"},{"location":"migrate/guide/#_5","text":"\u7edf\u4e00\u6240\u6709\u65b9\u6cd5\u4e3a \u8c13\u8bcd + \u540d\u8bcd \u5f62\u5f0f (\u5982 kick -> kickMember , mute -> muteMember ...) launch_blocking() \u4f1a\u81ea\u52a8\u6355\u83b7\u4e00\u4e2a KeyboardInterrupt \u5e76\u4e3b\u52a8\u505c\u6b62\u5b9e\u4f8b.","title":"\u4e0e\u4e3b\u5b9e\u4f8b\u4ea4\u4e92"},{"location":"refs/NAV/","text":"graia ariadne adapter forward reverse util app console saya context dispatcher entry event message event lifecycle message mirai exception message chain commander saya element formatter parser alconna base twilight util model typing util async_exec cooldown interrupt send validator","title":"NAV"},{"location":"refs/graia/ariadne/","text":"Ariadne \u4e00\u4e2a\u4f18\u96c5\u7684 QQ Bot \u6846\u67b6. get_running \ud83d\udd17 get_running ( type : Type [ T ] = Ariadne , fail_err : bool = True ) -> Optional [ T ] \u83b7\u53d6\u6b63\u5728\u8fd0\u884c\u7684\u5b9e\u4f8b Parameters: Name Type Description Default type Type [ T ] \u5b9e\u4f8b\u7c7b\u578b Ariadne fail_err bool \u5982\u679c\u6ca1\u6709\u6b63\u5728\u8fd0\u884c\u7684\u5b9e\u4f8b, \u662f\u5426\u629b\u51fa\u5f02\u5e38 True Returns: Name Type Description T Optional [ T ] \u5bf9\u5e94\u7c7b\u578b\u5b9e\u4f8b Source code in graia/ariadne/__init__.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def get_running ( type : Type [ T ] = Ariadne , fail_err : bool = True ) -> Optional [ T ]: \"\"\"\u83b7\u53d6\u6b63\u5728\u8fd0\u884c\u7684\u5b9e\u4f8b Args: type (Type[T]): \u5b9e\u4f8b\u7c7b\u578b fail_err (bool, optional): \u5982\u679c\u6ca1\u6709\u6b63\u5728\u8fd0\u884c\u7684\u5b9e\u4f8b, \u662f\u5426\u629b\u51fa\u5f02\u5e38 Returns: T: \u5bf9\u5e94\u7c7b\u578b\u5b9e\u4f8b \"\"\" from asyncio import AbstractEventLoop from graia.broadcast import Broadcast from .adapter import Adapter from .context import context_map if type in { Adapter , Ariadne , Broadcast , AbstractEventLoop }: if ctx := context_map . get ( type . __name__ ): if val := ctx . get ( None ): return val for ariadne_inst in Ariadne . running : if type in ariadne_inst . info : return ariadne_inst . info [ type ] # type: ignore if fail_err : raise ValueError ( f \" { type . __name__ } is not running\" ) return None","title":"ariadne"},{"location":"refs/graia/ariadne/#graia.ariadne.get_running","text":"get_running ( type : Type [ T ] = Ariadne , fail_err : bool = True ) -> Optional [ T ] \u83b7\u53d6\u6b63\u5728\u8fd0\u884c\u7684\u5b9e\u4f8b Parameters: Name Type Description Default type Type [ T ] \u5b9e\u4f8b\u7c7b\u578b Ariadne fail_err bool \u5982\u679c\u6ca1\u6709\u6b63\u5728\u8fd0\u884c\u7684\u5b9e\u4f8b, \u662f\u5426\u629b\u51fa\u5f02\u5e38 True Returns: Name Type Description T Optional [ T ] \u5bf9\u5e94\u7c7b\u578b\u5b9e\u4f8b Source code in graia/ariadne/__init__.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def get_running ( type : Type [ T ] = Ariadne , fail_err : bool = True ) -> Optional [ T ]: \"\"\"\u83b7\u53d6\u6b63\u5728\u8fd0\u884c\u7684\u5b9e\u4f8b Args: type (Type[T]): \u5b9e\u4f8b\u7c7b\u578b fail_err (bool, optional): \u5982\u679c\u6ca1\u6709\u6b63\u5728\u8fd0\u884c\u7684\u5b9e\u4f8b, \u662f\u5426\u629b\u51fa\u5f02\u5e38 Returns: T: \u5bf9\u5e94\u7c7b\u578b\u5b9e\u4f8b \"\"\" from asyncio import AbstractEventLoop from graia.broadcast import Broadcast from .adapter import Adapter from .context import context_map if type in { Adapter , Ariadne , Broadcast , AbstractEventLoop }: if ctx := context_map . get ( type . __name__ ): if val := ctx . get ( None ): return val for ariadne_inst in Ariadne . running : if type in ariadne_inst . info : return ariadne_inst . info [ type ] # type: ignore if fail_err : raise ValueError ( f \" { type . __name__ } is not running\" ) return None","title":"get_running()"},{"location":"refs/graia/ariadne/app/","text":"Ariadne \u5b9e\u4f8b AnnouncementMixin \ud83d\udd17 Bases: AriadneMixin \u5bf9\u7fa4\u516c\u544a\u8fdb\u884c\u64cd\u4f5c\u7684 Mixin \u7c7b. Source code in graia/ariadne/app.py 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 class AnnouncementMixin ( AriadneMixin ): \"\"\"\u5bf9\u7fa4\u516c\u544a\u8fdb\u884c\u64cd\u4f5c\u7684 Mixin \u7c7b.\"\"\" async def getAnnouncementIterator ( self , target : Union [ Group , int ], offset : int = 0 , size : int = 10 , ) -> AsyncGenerator [ Announcement , None ]: \"\"\" \u83b7\u53d6\u7fa4\u516c\u544a\u5217\u8868. Args: target (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4. offset (Optional[int], optional): \u8d77\u59cb\u504f\u79fb\u91cf. \u9ed8\u8ba4\u4e3a 0. size (Optional[int], optional): \u5217\u8868\u5927\u5c0f. \u9ed8\u8ba4\u4e3a 10. Returns: AsyncGenerator[Announcement, None]: \u5217\u51fa\u7fa4\u7ec4\u4e0b\u6240\u6709\u7684\u516c\u544a. \"\"\" target = int ( target ) current_offset = offset cache : List [ Announcement ] = [] while True : for announcement in cache : yield announcement cache = await self . getAnnouncementList ( target , current_offset , size ) current_offset += len ( cache ) if not cache : return @app_ctx_manager async def getAnnouncementList ( self , target : Union [ Group , int ], offset : Optional [ int ] = 0 , size : Optional [ int ] = 10 , ) -> List [ Announcement ]: \"\"\" \u5217\u51fa\u7fa4\u7ec4\u4e0b\u6240\u6709\u7684\u516c\u544a. Args: target (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4. offset (Optional[int], optional): \u8d77\u59cb\u504f\u79fb\u91cf. \u9ed8\u8ba4\u4e3a 0. size (Optional[int], optional): \u5217\u8868\u5927\u5c0f. \u9ed8\u8ba4\u4e3a 10. Returns: List[Announcement]: \u5217\u51fa\u7fa4\u7ec4\u4e0b\u6240\u6709\u7684\u516c\u544a. \"\"\" result = await self . adapter . call_api ( \"anno/list\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"target\" : int ( target ), \"offset\" : offset , \"size\" : size , }, ) return [ Announcement . parse_obj ( announcement ) for announcement in result ] @app_ctx_manager async def publishAnnouncement ( self , target : Union [ Group , int ], content : str , * , send_to_new_member : bool = False , pinned : bool = False , show_edit_card : bool = False , show_popup : bool = False , require_confirmation : bool = False , image : Optional [ Union [ str , bytes , os . PathLike , io . IOBase ]] = None , ) -> Announcement : \"\"\" \u53d1\u5e03\u4e00\u4e2a\u516c\u544a. Args: target (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4. content (str): \u516c\u544a\u5185\u5bb9. send_to_new_member (bool, optional): \u662f\u5426\u516c\u5f00. \u9ed8\u8ba4\u4e3a False. pinned (bool, optional): \u662f\u5426\u7f6e\u9876. \u9ed8\u8ba4\u4e3a False. show_edit_card (bool, optional): \u662f\u5426\u81ea\u52a8\u5220\u9664. \u9ed8\u8ba4\u4e3a False. show_popup (bool, optional): \u662f\u5426\u5728\u9605\u8bfb\u540e\u81ea\u52a8\u5220\u9664. \u9ed8\u8ba4\u4e3a False. require_confirmation (bool, optional): \u662f\u5426\u9700\u8981\u786e\u8ba4. \u9ed8\u8ba4\u4e3a False. image (Union[str, bytes, os.PathLike, io.IOBase, Image], optional): \u56fe\u7247. \u9ed8\u8ba4\u4e3a None. \\ \u4e3a str \u65f6\u4ee3\u8868 url, \u4e3a bytes / os.PathLike / io.IOBase \u4ee3\u8868\u539f\u59cb\u6570\u636e Raises: TypeError: \u63d0\u4f9b\u4e86\u9519\u8bef\u7684\u53c2\u6570, \u9605\u8bfb\u6709\u5173\u6587\u6863\u5f97\u5230\u95ee\u9898\u539f\u56e0 Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" data : Dict [ str , Any ] = { \"sessionKey\" : self . session_key , \"target\" : int ( target ), \"content\" : content , \"sendToNewMember\" : send_to_new_member , \"pinned\" : pinned , \"showEditCard\" : show_edit_card , \"showPopup\" : show_popup , \"requireConfirmation\" : require_confirmation , } if image : if isinstance ( image , bytes ): data [ \"imageBase64\" ] = base64 . b64encode ( image ) . decode ( \"ascii\" ) elif isinstance ( image , os . PathLike ): data [ \"imageBase64\" ] = base64 . b64encode ( open ( image , \"rb\" ) . read ()) . decode ( \"ascii\" ) elif isinstance ( image , io . IOBase ): data [ \"imageBase64\" ] = base64 . b64encode ( image . read ()) . decode ( \"ascii\" ) elif isinstance ( image , str ): data [ \"imageUrl\" ] = image result = await self . adapter . call_api ( \"anno/publish\" , CallMethod . POST , data , ) return Announcement . parse_obj ( result ) @app_ctx_manager async def deleteAnnouncement ( self , target : Union [ Group , int ], anno : Union [ Announcement , int ]) -> None : \"\"\"\"\"\" getAnnouncementIterator async \ud83d\udd17 getAnnouncementIterator ( target : Union [ Group , int ], offset : int = 0 , size : int = 10 ) -> AsyncGenerator [ Announcement , None ] \u83b7\u53d6\u7fa4\u516c\u544a\u5217\u8868. Parameters: Name Type Description Default target Union [ Group , int ] \u6307\u5b9a\u7684\u7fa4\u7ec4. required offset Optional [ int ] \u8d77\u59cb\u504f\u79fb\u91cf. \u9ed8\u8ba4\u4e3a 0. 0 size Optional [ int ] \u5217\u8868\u5927\u5c0f. \u9ed8\u8ba4\u4e3a 10. 10 Returns: Type Description AsyncGenerator [ Announcement , None] AsyncGenerator[Announcement, None]: \u5217\u51fa\u7fa4\u7ec4\u4e0b\u6240\u6709\u7684\u516c\u544a. Source code in graia/ariadne/app.py 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 async def getAnnouncementIterator ( self , target : Union [ Group , int ], offset : int = 0 , size : int = 10 , ) -> AsyncGenerator [ Announcement , None ]: \"\"\" \u83b7\u53d6\u7fa4\u516c\u544a\u5217\u8868. Args: target (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4. offset (Optional[int], optional): \u8d77\u59cb\u504f\u79fb\u91cf. \u9ed8\u8ba4\u4e3a 0. size (Optional[int], optional): \u5217\u8868\u5927\u5c0f. \u9ed8\u8ba4\u4e3a 10. Returns: AsyncGenerator[Announcement, None]: \u5217\u51fa\u7fa4\u7ec4\u4e0b\u6240\u6709\u7684\u516c\u544a. \"\"\" target = int ( target ) current_offset = offset cache : List [ Announcement ] = [] while True : for announcement in cache : yield announcement cache = await self . getAnnouncementList ( target , current_offset , size ) current_offset += len ( cache ) if not cache : return getAnnouncementList async \ud83d\udd17 getAnnouncementList ( target : Union [ Group , int ], offset : Optional [ int ] = 0 , size : Optional [ int ] = 10 ) -> List [ Announcement ] \u5217\u51fa\u7fa4\u7ec4\u4e0b\u6240\u6709\u7684\u516c\u544a. Parameters: Name Type Description Default target Union [ Group , int ] \u6307\u5b9a\u7684\u7fa4\u7ec4. required offset Optional [ int ] \u8d77\u59cb\u504f\u79fb\u91cf. \u9ed8\u8ba4\u4e3a 0. 0 size Optional [ int ] \u5217\u8868\u5927\u5c0f. \u9ed8\u8ba4\u4e3a 10. 10 Returns: Type Description List [ Announcement ] List[Announcement]: \u5217\u51fa\u7fa4\u7ec4\u4e0b\u6240\u6709\u7684\u516c\u544a. Source code in graia/ariadne/app.py 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 @app_ctx_manager async def getAnnouncementList ( self , target : Union [ Group , int ], offset : Optional [ int ] = 0 , size : Optional [ int ] = 10 , ) -> List [ Announcement ]: \"\"\" \u5217\u51fa\u7fa4\u7ec4\u4e0b\u6240\u6709\u7684\u516c\u544a. Args: target (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4. offset (Optional[int], optional): \u8d77\u59cb\u504f\u79fb\u91cf. \u9ed8\u8ba4\u4e3a 0. size (Optional[int], optional): \u5217\u8868\u5927\u5c0f. \u9ed8\u8ba4\u4e3a 10. Returns: List[Announcement]: \u5217\u51fa\u7fa4\u7ec4\u4e0b\u6240\u6709\u7684\u516c\u544a. \"\"\" result = await self . adapter . call_api ( \"anno/list\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"target\" : int ( target ), \"offset\" : offset , \"size\" : size , }, ) return [ Announcement . parse_obj ( announcement ) for announcement in result ] publishAnnouncement async \ud83d\udd17 publishAnnouncement ( target : Union [ Group , int ], content : str , * , send_to_new_member : bool = False , pinned : bool = False , show_edit_card : bool = False , show_popup : bool = False , require_confirmation : bool = False , image : Optional [ Union [ str , bytes , os . PathLike , io . IOBase ]] = None ) -> Announcement \u53d1\u5e03\u4e00\u4e2a\u516c\u544a. Parameters: Name Type Description Default target Union [ Group , int ] \u6307\u5b9a\u7684\u7fa4\u7ec4. required content str \u516c\u544a\u5185\u5bb9. required send_to_new_member bool \u662f\u5426\u516c\u5f00. \u9ed8\u8ba4\u4e3a False. False pinned bool \u662f\u5426\u7f6e\u9876. \u9ed8\u8ba4\u4e3a False. False show_edit_card bool \u662f\u5426\u81ea\u52a8\u5220\u9664. \u9ed8\u8ba4\u4e3a False. False show_popup bool \u662f\u5426\u5728\u9605\u8bfb\u540e\u81ea\u52a8\u5220\u9664. \u9ed8\u8ba4\u4e3a False. False require_confirmation bool \u662f\u5426\u9700\u8981\u786e\u8ba4. \u9ed8\u8ba4\u4e3a False. False image Union [ str , bytes , os . PathLike , io . IOBase , Image ] \u56fe\u7247. \u9ed8\u8ba4\u4e3a None. \u4e3a str \u65f6\u4ee3\u8868 url, \u4e3a bytes / os.PathLike / io.IOBase \u4ee3\u8868\u539f\u59cb\u6570\u636e None Raises: Type Description TypeError \u63d0\u4f9b\u4e86\u9519\u8bef\u7684\u53c2\u6570, \u9605\u8bfb\u6709\u5173\u6587\u6863\u5f97\u5230\u95ee\u9898\u539f\u56e0 Returns: Name Type Description None Announcement \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 @app_ctx_manager async def publishAnnouncement ( self , target : Union [ Group , int ], content : str , * , send_to_new_member : bool = False , pinned : bool = False , show_edit_card : bool = False , show_popup : bool = False , require_confirmation : bool = False , image : Optional [ Union [ str , bytes , os . PathLike , io . IOBase ]] = None , ) -> Announcement : \"\"\" \u53d1\u5e03\u4e00\u4e2a\u516c\u544a. Args: target (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4. content (str): \u516c\u544a\u5185\u5bb9. send_to_new_member (bool, optional): \u662f\u5426\u516c\u5f00. \u9ed8\u8ba4\u4e3a False. pinned (bool, optional): \u662f\u5426\u7f6e\u9876. \u9ed8\u8ba4\u4e3a False. show_edit_card (bool, optional): \u662f\u5426\u81ea\u52a8\u5220\u9664. \u9ed8\u8ba4\u4e3a False. show_popup (bool, optional): \u662f\u5426\u5728\u9605\u8bfb\u540e\u81ea\u52a8\u5220\u9664. \u9ed8\u8ba4\u4e3a False. require_confirmation (bool, optional): \u662f\u5426\u9700\u8981\u786e\u8ba4. \u9ed8\u8ba4\u4e3a False. image (Union[str, bytes, os.PathLike, io.IOBase, Image], optional): \u56fe\u7247. \u9ed8\u8ba4\u4e3a None. \\ \u4e3a str \u65f6\u4ee3\u8868 url, \u4e3a bytes / os.PathLike / io.IOBase \u4ee3\u8868\u539f\u59cb\u6570\u636e Raises: TypeError: \u63d0\u4f9b\u4e86\u9519\u8bef\u7684\u53c2\u6570, \u9605\u8bfb\u6709\u5173\u6587\u6863\u5f97\u5230\u95ee\u9898\u539f\u56e0 Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" data : Dict [ str , Any ] = { \"sessionKey\" : self . session_key , \"target\" : int ( target ), \"content\" : content , \"sendToNewMember\" : send_to_new_member , \"pinned\" : pinned , \"showEditCard\" : show_edit_card , \"showPopup\" : show_popup , \"requireConfirmation\" : require_confirmation , } if image : if isinstance ( image , bytes ): data [ \"imageBase64\" ] = base64 . b64encode ( image ) . decode ( \"ascii\" ) elif isinstance ( image , os . PathLike ): data [ \"imageBase64\" ] = base64 . b64encode ( open ( image , \"rb\" ) . read ()) . decode ( \"ascii\" ) elif isinstance ( image , io . IOBase ): data [ \"imageBase64\" ] = base64 . b64encode ( image . read ()) . decode ( \"ascii\" ) elif isinstance ( image , str ): data [ \"imageUrl\" ] = image result = await self . adapter . call_api ( \"anno/publish\" , CallMethod . POST , data , ) return Announcement . parse_obj ( result ) Ariadne \ud83d\udd17 Bases: MessageMixin , RelationshipMixin , OperationMixin , AnnouncementMixin , FileMixin , MultimediaMixin \u827e\u8389\u4e9a\u5fb7\u59ae (Ariadne). \u9762\u5411 mirai-api-http \u63a5\u53e3\u7684\u5b9e\u9645\u529f\u80fd\u5b9e\u73b0. \u4f60\u7684\u5e94\u7528\u5927\u591a\u90fd\u56f4\u7ed5\u7740\u672c\u7c7b\u53ca\u672c\u7c7b\u7684\u5b9e\u4f8b\u5c55\u5f00. Attributes: Name Type Description broadcast Broadcast \u88ab\u6307\u5b9a\u7684, \u5916\u7f6e\u7684\u4e8b\u4ef6\u7cfb\u7edf, \u5373 Broadcast Control , \u901a\u5e38\u4f60\u4e0d\u9700\u8981\u5e72\u6d89\u8be5\u5c5e\u6027; adapter Adapter \u540e\u7aef\u9002\u914d\u5668, \u8d1f\u8d23\u5b9e\u9645\u4e0e mirai-api-http \u8fdb\u884c\u4ea4\u4e92. Source code in graia/ariadne/app.py 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 class Ariadne ( MessageMixin , RelationshipMixin , OperationMixin , AnnouncementMixin , FileMixin , MultimediaMixin ): \"\"\" \u827e\u8389\u4e9a\u5fb7\u59ae (Ariadne). \u9762\u5411 `mirai-api-http` \u63a5\u53e3\u7684\u5b9e\u9645\u529f\u80fd\u5b9e\u73b0. \u4f60\u7684\u5e94\u7528\u5927\u591a\u90fd\u56f4\u7ed5\u7740\u672c\u7c7b\u53ca\u672c\u7c7b\u7684\u5b9e\u4f8b\u5c55\u5f00. Attributes: broadcast (Broadcast): \u88ab\u6307\u5b9a\u7684, \u5916\u7f6e\u7684\u4e8b\u4ef6\u7cfb\u7edf, \u5373 `Broadcast Control`, \u901a\u5e38\u4f60\u4e0d\u9700\u8981\u5e72\u6d89\u8be5\u5c5e\u6027; adapter (Adapter): \u540e\u7aef\u9002\u914d\u5668, \u8d1f\u8d23\u5b9e\u9645\u4e0e `mirai-api-http` \u8fdb\u884c\u4ea4\u4e92. \"\"\" loop : AbstractEventLoop broadcast : Broadcast adapter : Adapter status : AriadneStatus running : ClassVar [ MutableSet [ \"Ariadne\" ]] = set () def __init__ ( self , connect_info : Union [ Adapter , MiraiSession ], * , loop : Optional [ AbstractEventLoop ] = None , broadcast : Optional [ Broadcast ] = None , max_retry : int = - 1 , chat_log_config : Optional [ Union [ ChatLogConfig , Literal [ False ]]] = None , use_loguru_traceback : Optional [ bool ] = True , use_bypass_listener : Optional [ bool ] = False , disable_telemetry : bool = False , disable_logo : bool = False , ): \"\"\" \u521d\u59cb\u5316 Ariadne. Args: connect_info (Union[Adapter, MiraiSession]): \u63d0\u4f9b\u4e0e `mirai-api-http` \u4ea4\u4e92\u7684\u4fe1\u606f. loop (AbstractEventLoop, optional): \u4e8b\u4ef6\u5faa\u73af. broadcast (Broadcast, optional): \u88ab\u6307\u5b9a\u7684, \u5916\u7f6e\u7684\u4e8b\u4ef6\u7cfb\u7edf, \u5373 `Broadcast Control` \u5b9e\u4f8b. chat_log_config (Optional[Union[ChatLogConfig, Literal[False]]]): \u804a\u5929\u65e5\u5fd7\u7684\u914d\u7f6e. \\ \u8bf7\u79fb\u6b65 [ChatLogConfig][graia.ariadne.model.ChatLogConfig] \u67e5\u770b\u4f7f\u7528\u65b9\u6cd5. \\ \u8bbe\u7f6e\u4e3a False \u5219\u4f1a\u5b8c\u5168\u7981\u7528\u804a\u5929\u65e5\u5fd7. use_loguru_traceback (bool): \u662f\u5426\u6ce8\u5165 loguru \u4ee5\u83b7\u5f97\u5bf9 traceback.print_exception() \u4e0e sys.excepthook \u7684\u5b8c\u5168\u63a7\u5236. use_bypass_listener (bool): \u662f\u5426\u6ce8\u5165 BypassListener \u4ee5\u83b7\u5f97\u5b50\u4e8b\u4ef6\u76d1\u542c\u652f\u6301. disable_telemetry (bool): \u662f\u5426\u7981\u7528\u7248\u672c\u8bb0\u5f55. disable_logo (bool): \u662f\u5426\u7981\u7528 logo \u663e\u793a. \"\"\" if broadcast : loop = broadcast . loop elif isinstance ( connect_info , Adapter ): broadcast = connect_info . broadcast loop = broadcast . loop if not loop : try : loop = asyncio . get_running_loop () except RuntimeError : loop = asyncio . new_event_loop () self . loop = loop self . broadcast : Broadcast = broadcast or Broadcast ( loop = self . loop ) self . adapter : Adapter = ( connect_info if isinstance ( connect_info , Adapter ) else DefaultAdapter ( self . broadcast , connect_info ) ) self . mirai_session : MiraiSession = self . adapter . mirai_session self . daemon_task : Optional [ Task ] = None self . status : AriadneStatus = AriadneStatus . STOP self . remote_version : str = \"\" self . max_retry : int = max_retry self . disable_telemetry : bool = disable_telemetry self . disable_logo : bool = disable_logo self . info : Dict [ type , object ] = { Ariadne : self , Broadcast : self . broadcast , AbstractEventLoop : self . loop , Adapter : self . adapter , MiraiSession : self . mirai_session , } chat_log_enabled = chat_log_config is not False self . chat_log_cfg : ChatLogConfig = chat_log_config or ChatLogConfig ( enabled = chat_log_enabled ) from .util.send import Strict self . default_send_action = Strict if use_bypass_listener : inject_bypass_listener ( self . broadcast ) if use_loguru_traceback : inject_loguru_traceback ( self . loop ) if ContextDispatcher not in self . broadcast . finale_dispatchers : self . broadcast . finale_dispatchers . append ( ContextDispatcher ) def create ( self , cls : Type [ \"T\" ], reuse : bool = True ) -> \"T\" : \"\"\"\u5229\u7528 Ariadne \u5df2\u6709\u7684\u4fe1\u606f\u534f\u52a9\u521b\u5efa\u5b9e\u4f8b. Args: cls (Type[T]): \u9700\u8981\u521b\u5efa\u7684\u7c7b. reuse (bool, optional): \u662f\u5426\u5141\u8bb8\u590d\u7528, \u9ed8\u8ba4\u4e3a True. Returns: T: \u521b\u5efa\u7684\u7c7b. \"\"\" if cls in self . info : return self . info [ cls ] # type: ignore call_args : list = [] call_kwargs : Dict [ str , Any ] = {} init_sig = inspect . signature ( cls ) for name , param in init_sig . parameters . items (): if param . annotation in self . info and param . kind not in ( param . VAR_KEYWORD , param . VAR_POSITIONAL , ): param_obj = self . info . get ( param . annotation , param . default ) if param_obj is param . empty : param_obj = self . create ( param . annotation , reuse = True ) if param . kind is param . POSITIONAL_ONLY : call_args . append ( param_obj ) else : call_kwargs [ name ] = param_obj obj : \"T\" = cls ( * call_args , ** call_kwargs ) if reuse : self . info [ cls ] = obj return obj async def daemon ( self , retry_interval : float = 5.0 ): \"\"\"Ariadne \u751f\u547d\u5468\u671f\u7ba1\u7406\u7684\u5177\u4f53\u65b9\u6cd5. Args: retry_interval (float, optional): Adapter \u91cd\u8fde\u95f4\u9694 (s). \u9ed8\u8ba4 5.0. \"\"\" from .event.message import MessageEvent from .event.mirai import FriendEvent , GroupEvent retry_cnt : int = 0 logger . debug ( \"Ariadne daemon started.\" ) while self . status in { AriadneStatus . RUNNING , AriadneStatus . LAUNCH }: try : await asyncio . wait_for ( self . adapter . start (), timeout = retry_interval ) logger . success ( \"daemon: adapter started\" ) self . broadcast . postEvent ( AdapterLaunched ( self )) assert self . adapter . event_queue is not None , \"No event queue found for Adapter\" async for event in yield_with_timeout ( self . adapter . event_queue . get , lambda : ( self . adapter . running and self . status in { AriadneStatus . RUNNING , AriadneStatus . LAUNCH } ), ): with enter_context ( self , event ): sys . audit ( \"AriadnePostRemoteEvent\" , event ) if isinstance ( event , MessageEvent ) and event . messageChain . onlyContains ( Source ): event . messageChain . append ( \"<! \u4e0d\u652f\u6301\u7684\u6d88\u606f\u7c7b\u578b !>\" ) if isinstance ( event , FriendEvent ): with enter_message_send_context ( UploadMethod . Friend ): self . broadcast . postEvent ( event ) elif isinstance ( event , GroupEvent ): with enter_message_send_context ( UploadMethod . Group ): self . broadcast . postEvent ( event ) else : self . broadcast . postEvent ( event ) except asyncio . exceptions . TimeoutError : logger . critical ( \"Timeout connecting to mirai-api-http. Configuration problem?\" ) except Exception as e : logger . exception ( e ) self . broadcast . postEvent ( AdapterShutdowned ( self )) if retry_cnt == self . max_retry : logger . critical ( f \"Max retry exceeded: { self . max_retry } .\" ) break if self . status in { AriadneStatus . RUNNING , AriadneStatus . LAUNCH }: if not self . adapter . connected . value (): retry_cnt += 1 else : retry_cnt = 1 await self . adapter . stop () logger . warning ( f \"Adapter down, restart in { retry_interval } s\" ) await asyncio . sleep ( retry_interval ) logger . warning ( f \"Retry: { retry_cnt } / { self . max_retry } \" ) exceptions : List [ Tuple [ Type [ Exception ], tuple ]] = [] logger . info ( \"Stopping Ariadne...\" ) self . status = AriadneStatus . CLEANUP launch_fut = self . adapter . connected . _special . get ( \"__ariadne_launch__\" , self . loop . create_future ()) if not launch_fut . done (): launch_fut . set_exception ( asyncio . CancelledError ) for t in asyncio . all_tasks ( self . loop ): if t is asyncio . current_task ( self . loop ): continue coro : Coroutine = t . get_coro () # type: ignore try : if coro . __qualname__ == \"Broadcast.Executor\" : t . cancel () logger . debug ( f \"Cancelling { t . get_name () } (Broadcast.Executor)\" ) elif cast ( str , coro . cr_frame . f_globals [ \"__name__\" ]) . startswith ( \"graia.scheduler\" ): t . cancel () logger . debug ( f \"Cancelling { t . get_name () } (Scheduler Task)\" ) except Exception as e : exceptions . append (( e . __class__ , e . args )) logger . info ( \"Posting Ariadne shutdown event...\" ) await self . broadcast . postEvent ( ApplicationShutdowned ( self )) self . running . remove ( self ) logger . info ( \"Stopping adapter...\" ) await self . adapter . stop () logger . success ( f \"Adapter { self . adapter . __class__ . __name__ } stopped.\" ) self . status = AriadneStatus . STOP logger . success ( \"Stopped Ariadne.\" ) return exceptions async def launch ( self ): \"\"\"\u542f\u52a8 Ariadne.\"\"\" if self . status is not AriadneStatus . STOP : return self . status = AriadneStatus . LAUNCH # Logo if not self . disable_logo : logger . opt ( colors = True , raw = True ) . info ( f \"<cyan> { ARIADNE_ASCII_LOGO } </>\" ) # Telemetry if not self . disable_telemetry : official : List [ Tuple [ str , str ]] = [] community : List [ Tuple [ str , str ]] = [] for dist in importlib . metadata . distributions (): name : str = dist . metadata [ \"Name\" ] version : str = dist . version if name . startswith ( \"graia-\" ): official . append (( \" \" . join ( name . split ( \"-\" )[ 1 :]) . title (), version )) elif name . startswith ( \"graiax-\" ): community . append (( \" \" . join ( name . split ( \"-\" )) . title (), version )) for name , version in official : logger . opt ( colors = True , raw = True ) . info ( f \"<magenta> { name } </> version: <yellow> { version } </> \\n \" ) for name , version in community : logger . opt ( colors = True , raw = True ) . info ( f \"<cyan> { name } </> version: <yellow> { version } </> \\n \" ) logger . info ( \"Launching app...\" ) start_time = time . time () if self . chat_log_cfg . enabled : self . chat_log_cfg . initialize ( self ) if ContextDispatcher not in self . broadcast . finale_dispatchers : self . broadcast . finale_dispatchers . append ( ContextDispatcher ) self . daemon_task = self . loop . create_task ( self . daemon (), name = \"ariadne_daemon\" ) self . running . add ( self ) try : await self . adapter . connected . wait ( True , \"__ariadne_launch__\" ) except asyncio . CancelledError : logger . error ( \"Launch abort!\" ) return self . status = AriadneStatus . RUNNING self . remote_version = await self . getVersion () logger . success ( f \"Remote version: { self . remote_version } \" ) if not self . remote_version . startswith ( \"2\" ): raise RuntimeError ( f \"You are using an unsupported version: { self . remote_version } !\" ) logger . success ( f \"Application launched with { time . time () - start_time : .2 } s\" ) await self . broadcast . postEvent ( ApplicationLaunched ( self )) async def stop ( self ): \"\"\"\u8bf7\u6c42\u505c\u6b62 Ariadne.\"\"\" if self . status is AriadneStatus . RUNNING : self . status = AriadneStatus . SHUTDOWN await await_predicate ( lambda : self . status in { AriadneStatus . CLEANUP , AriadneStatus . STOP }) async def join ( self ): \"\"\"\u7b49\u5f85\u76f4\u5230 Ariadne \u771f\u6b63\u505c\u6b62. \u4e0d\u8981\u5728\u4e0e Broadcast \u76f8\u5173\u7684\u4efb\u52a1\u4e2d\u4f7f\u7528. \"\"\" if self . status in { AriadneStatus . RUNNING , AriadneStatus . LAUNCH }: await self . stop () await await_predicate ( lambda : self . status is AriadneStatus . STOP ) if self . daemon_task : await self . daemon_task async def lifecycle ( self ): \"\"\"\u4ee5 async \u963b\u585e\u65b9\u5f0f\u542f\u52a8 Ariadne \u5e76\u7b49\u5f85\u5176\u505c\u6b62.\"\"\" def sig_handler ( * _ ): if self . status in { AriadneStatus . RUNNING , AriadneStatus . LAUNCH }: self . status = AriadneStatus . SHUTDOWN logger . warning ( \"Stop signal received, scheduling stop process.\" ) logger . warning ( \"Press Ctrl-C again to force quit.\" ) signal_handler ( sig_handler ) await self . launch () if self . daemon_task : await self . daemon_task def launch_blocking ( self ): \"\"\"\u4ee5\u963b\u585e\u65b9\u5f0f\u542f\u52a8 Ariadne \u5e76\u7b49\u5f85\u5176\u505c\u6b62.\"\"\" self . loop . run_until_complete ( self . lifecycle ()) self . loop . run_until_complete ( self . join ()) @app_ctx_manager async def getVersion ( self , auto_set : bool = True ) -> str : \"\"\"\u83b7\u53d6\u540e\u7aef Mirai HTTP API \u7248\u672c. Args: auto_set (bool, optional): \u81ea\u52a8\u8bbe\u7f6e\u5230\u5b9e\u4f8b\u7684 MiraiSession.version. \u9ed8\u8ba4\u4e3a True. Returns: str: \u7248\u672c\u4fe1\u606f. \"\"\" if self . mirai_session . version : return self . mirai_session . version result = await self . adapter . call_api ( \"about\" , CallMethod . GET ) version = result [ \"version\" ] if auto_set : self . mirai_session . version = version return version async def __aenter__ ( self ) -> \"Ariadne\" : await self . launch () return self async def __aexit__ ( self , * exc ): await self . join () @property def account ( self ) -> Optional [ int ]: \"\"\"\u83b7\u53d6\u5f53\u524d\u5b9e\u4f8b\u5bf9\u5e94 MiraiSession \u7684\u8d26\u53f7.\"\"\" return self . adapter . mirai_session . account __init__ \ud83d\udd17 __init__ ( connect_info : Union [ Adapter , MiraiSession ], * , loop : Optional [ AbstractEventLoop ] = None , broadcast : Optional [ Broadcast ] = None , max_retry : int = - 1 , chat_log_config : Optional [ Union [ ChatLogConfig , Literal [ False ]]] = None , use_loguru_traceback : Optional [ bool ] = True , use_bypass_listener : Optional [ bool ] = False , disable_telemetry : bool = False , disable_logo : bool = False ) \u521d\u59cb\u5316 Ariadne. Parameters: Name Type Description Default connect_info Union [ Adapter , MiraiSession ] \u63d0\u4f9b\u4e0e mirai-api-http \u4ea4\u4e92\u7684\u4fe1\u606f. required loop AbstractEventLoop \u4e8b\u4ef6\u5faa\u73af. None broadcast Broadcast \u88ab\u6307\u5b9a\u7684, \u5916\u7f6e\u7684\u4e8b\u4ef6\u7cfb\u7edf, \u5373 Broadcast Control \u5b9e\u4f8b. None chat_log_config Optional [ Union [ ChatLogConfig , Literal [False]]] \u804a\u5929\u65e5\u5fd7\u7684\u914d\u7f6e. \u8bf7\u79fb\u6b65 ChatLogConfig \u67e5\u770b\u4f7f\u7528\u65b9\u6cd5. \u8bbe\u7f6e\u4e3a False \u5219\u4f1a\u5b8c\u5168\u7981\u7528\u804a\u5929\u65e5\u5fd7. None use_loguru_traceback bool \u662f\u5426\u6ce8\u5165 loguru \u4ee5\u83b7\u5f97\u5bf9 traceback.print_exception() \u4e0e sys.excepthook \u7684\u5b8c\u5168\u63a7\u5236. True use_bypass_listener bool \u662f\u5426\u6ce8\u5165 BypassListener \u4ee5\u83b7\u5f97\u5b50\u4e8b\u4ef6\u76d1\u542c\u652f\u6301. False disable_telemetry bool \u662f\u5426\u7981\u7528\u7248\u672c\u8bb0\u5f55. False disable_logo bool \u662f\u5426\u7981\u7528 logo \u663e\u793a. False Source code in graia/ariadne/app.py 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 def __init__ ( self , connect_info : Union [ Adapter , MiraiSession ], * , loop : Optional [ AbstractEventLoop ] = None , broadcast : Optional [ Broadcast ] = None , max_retry : int = - 1 , chat_log_config : Optional [ Union [ ChatLogConfig , Literal [ False ]]] = None , use_loguru_traceback : Optional [ bool ] = True , use_bypass_listener : Optional [ bool ] = False , disable_telemetry : bool = False , disable_logo : bool = False , ): \"\"\" \u521d\u59cb\u5316 Ariadne. Args: connect_info (Union[Adapter, MiraiSession]): \u63d0\u4f9b\u4e0e `mirai-api-http` \u4ea4\u4e92\u7684\u4fe1\u606f. loop (AbstractEventLoop, optional): \u4e8b\u4ef6\u5faa\u73af. broadcast (Broadcast, optional): \u88ab\u6307\u5b9a\u7684, \u5916\u7f6e\u7684\u4e8b\u4ef6\u7cfb\u7edf, \u5373 `Broadcast Control` \u5b9e\u4f8b. chat_log_config (Optional[Union[ChatLogConfig, Literal[False]]]): \u804a\u5929\u65e5\u5fd7\u7684\u914d\u7f6e. \\ \u8bf7\u79fb\u6b65 [ChatLogConfig][graia.ariadne.model.ChatLogConfig] \u67e5\u770b\u4f7f\u7528\u65b9\u6cd5. \\ \u8bbe\u7f6e\u4e3a False \u5219\u4f1a\u5b8c\u5168\u7981\u7528\u804a\u5929\u65e5\u5fd7. use_loguru_traceback (bool): \u662f\u5426\u6ce8\u5165 loguru \u4ee5\u83b7\u5f97\u5bf9 traceback.print_exception() \u4e0e sys.excepthook \u7684\u5b8c\u5168\u63a7\u5236. use_bypass_listener (bool): \u662f\u5426\u6ce8\u5165 BypassListener \u4ee5\u83b7\u5f97\u5b50\u4e8b\u4ef6\u76d1\u542c\u652f\u6301. disable_telemetry (bool): \u662f\u5426\u7981\u7528\u7248\u672c\u8bb0\u5f55. disable_logo (bool): \u662f\u5426\u7981\u7528 logo \u663e\u793a. \"\"\" if broadcast : loop = broadcast . loop elif isinstance ( connect_info , Adapter ): broadcast = connect_info . broadcast loop = broadcast . loop if not loop : try : loop = asyncio . get_running_loop () except RuntimeError : loop = asyncio . new_event_loop () self . loop = loop self . broadcast : Broadcast = broadcast or Broadcast ( loop = self . loop ) self . adapter : Adapter = ( connect_info if isinstance ( connect_info , Adapter ) else DefaultAdapter ( self . broadcast , connect_info ) ) self . mirai_session : MiraiSession = self . adapter . mirai_session self . daemon_task : Optional [ Task ] = None self . status : AriadneStatus = AriadneStatus . STOP self . remote_version : str = \"\" self . max_retry : int = max_retry self . disable_telemetry : bool = disable_telemetry self . disable_logo : bool = disable_logo self . info : Dict [ type , object ] = { Ariadne : self , Broadcast : self . broadcast , AbstractEventLoop : self . loop , Adapter : self . adapter , MiraiSession : self . mirai_session , } chat_log_enabled = chat_log_config is not False self . chat_log_cfg : ChatLogConfig = chat_log_config or ChatLogConfig ( enabled = chat_log_enabled ) from .util.send import Strict self . default_send_action = Strict if use_bypass_listener : inject_bypass_listener ( self . broadcast ) if use_loguru_traceback : inject_loguru_traceback ( self . loop ) if ContextDispatcher not in self . broadcast . finale_dispatchers : self . broadcast . finale_dispatchers . append ( ContextDispatcher ) account property \ud83d\udd17 account () -> Optional [ int ] \u83b7\u53d6\u5f53\u524d\u5b9e\u4f8b\u5bf9\u5e94 MiraiSession \u7684\u8d26\u53f7. Source code in graia/ariadne/app.py 1768 1769 1770 1771 @property def account ( self ) -> Optional [ int ]: \"\"\"\u83b7\u53d6\u5f53\u524d\u5b9e\u4f8b\u5bf9\u5e94 MiraiSession \u7684\u8d26\u53f7.\"\"\" return self . adapter . mirai_session . account create \ud83d\udd17 create ( cls : Type [ 'T' ], reuse : bool = True ) -> 'T' \u5229\u7528 Ariadne \u5df2\u6709\u7684\u4fe1\u606f\u534f\u52a9\u521b\u5efa\u5b9e\u4f8b. Parameters: Name Type Description Default cls Type [ T ] \u9700\u8981\u521b\u5efa\u7684\u7c7b. required reuse bool \u662f\u5426\u5141\u8bb8\u590d\u7528, \u9ed8\u8ba4\u4e3a True. True Returns: Name Type Description T 'T' \u521b\u5efa\u7684\u7c7b. Source code in graia/ariadne/app.py 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 def create ( self , cls : Type [ \"T\" ], reuse : bool = True ) -> \"T\" : \"\"\"\u5229\u7528 Ariadne \u5df2\u6709\u7684\u4fe1\u606f\u534f\u52a9\u521b\u5efa\u5b9e\u4f8b. Args: cls (Type[T]): \u9700\u8981\u521b\u5efa\u7684\u7c7b. reuse (bool, optional): \u662f\u5426\u5141\u8bb8\u590d\u7528, \u9ed8\u8ba4\u4e3a True. Returns: T: \u521b\u5efa\u7684\u7c7b. \"\"\" if cls in self . info : return self . info [ cls ] # type: ignore call_args : list = [] call_kwargs : Dict [ str , Any ] = {} init_sig = inspect . signature ( cls ) for name , param in init_sig . parameters . items (): if param . annotation in self . info and param . kind not in ( param . VAR_KEYWORD , param . VAR_POSITIONAL , ): param_obj = self . info . get ( param . annotation , param . default ) if param_obj is param . empty : param_obj = self . create ( param . annotation , reuse = True ) if param . kind is param . POSITIONAL_ONLY : call_args . append ( param_obj ) else : call_kwargs [ name ] = param_obj obj : \"T\" = cls ( * call_args , ** call_kwargs ) if reuse : self . info [ cls ] = obj return obj daemon async \ud83d\udd17 daemon ( retry_interval : float = 5.0 ) Ariadne \u751f\u547d\u5468\u671f\u7ba1\u7406\u7684\u5177\u4f53\u65b9\u6cd5. Parameters: Name Type Description Default retry_interval float Adapter \u91cd\u8fde\u95f4\u9694 (s). \u9ed8\u8ba4 5.0. 5.0 Source code in graia/ariadne/app.py 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 async def daemon ( self , retry_interval : float = 5.0 ): \"\"\"Ariadne \u751f\u547d\u5468\u671f\u7ba1\u7406\u7684\u5177\u4f53\u65b9\u6cd5. Args: retry_interval (float, optional): Adapter \u91cd\u8fde\u95f4\u9694 (s). \u9ed8\u8ba4 5.0. \"\"\" from .event.message import MessageEvent from .event.mirai import FriendEvent , GroupEvent retry_cnt : int = 0 logger . debug ( \"Ariadne daemon started.\" ) while self . status in { AriadneStatus . RUNNING , AriadneStatus . LAUNCH }: try : await asyncio . wait_for ( self . adapter . start (), timeout = retry_interval ) logger . success ( \"daemon: adapter started\" ) self . broadcast . postEvent ( AdapterLaunched ( self )) assert self . adapter . event_queue is not None , \"No event queue found for Adapter\" async for event in yield_with_timeout ( self . adapter . event_queue . get , lambda : ( self . adapter . running and self . status in { AriadneStatus . RUNNING , AriadneStatus . LAUNCH } ), ): with enter_context ( self , event ): sys . audit ( \"AriadnePostRemoteEvent\" , event ) if isinstance ( event , MessageEvent ) and event . messageChain . onlyContains ( Source ): event . messageChain . append ( \"<! \u4e0d\u652f\u6301\u7684\u6d88\u606f\u7c7b\u578b !>\" ) if isinstance ( event , FriendEvent ): with enter_message_send_context ( UploadMethod . Friend ): self . broadcast . postEvent ( event ) elif isinstance ( event , GroupEvent ): with enter_message_send_context ( UploadMethod . Group ): self . broadcast . postEvent ( event ) else : self . broadcast . postEvent ( event ) except asyncio . exceptions . TimeoutError : logger . critical ( \"Timeout connecting to mirai-api-http. Configuration problem?\" ) except Exception as e : logger . exception ( e ) self . broadcast . postEvent ( AdapterShutdowned ( self )) if retry_cnt == self . max_retry : logger . critical ( f \"Max retry exceeded: { self . max_retry } .\" ) break if self . status in { AriadneStatus . RUNNING , AriadneStatus . LAUNCH }: if not self . adapter . connected . value (): retry_cnt += 1 else : retry_cnt = 1 await self . adapter . stop () logger . warning ( f \"Adapter down, restart in { retry_interval } s\" ) await asyncio . sleep ( retry_interval ) logger . warning ( f \"Retry: { retry_cnt } / { self . max_retry } \" ) exceptions : List [ Tuple [ Type [ Exception ], tuple ]] = [] logger . info ( \"Stopping Ariadne...\" ) self . status = AriadneStatus . CLEANUP launch_fut = self . adapter . connected . _special . get ( \"__ariadne_launch__\" , self . loop . create_future ()) if not launch_fut . done (): launch_fut . set_exception ( asyncio . CancelledError ) for t in asyncio . all_tasks ( self . loop ): if t is asyncio . current_task ( self . loop ): continue coro : Coroutine = t . get_coro () # type: ignore try : if coro . __qualname__ == \"Broadcast.Executor\" : t . cancel () logger . debug ( f \"Cancelling { t . get_name () } (Broadcast.Executor)\" ) elif cast ( str , coro . cr_frame . f_globals [ \"__name__\" ]) . startswith ( \"graia.scheduler\" ): t . cancel () logger . debug ( f \"Cancelling { t . get_name () } (Scheduler Task)\" ) except Exception as e : exceptions . append (( e . __class__ , e . args )) logger . info ( \"Posting Ariadne shutdown event...\" ) await self . broadcast . postEvent ( ApplicationShutdowned ( self )) self . running . remove ( self ) logger . info ( \"Stopping adapter...\" ) await self . adapter . stop () logger . success ( f \"Adapter { self . adapter . __class__ . __name__ } stopped.\" ) self . status = AriadneStatus . STOP logger . success ( \"Stopped Ariadne.\" ) return exceptions getVersion async \ud83d\udd17 getVersion ( auto_set : bool = True ) -> str \u83b7\u53d6\u540e\u7aef Mirai HTTP API \u7248\u672c. Parameters: Name Type Description Default auto_set bool \u81ea\u52a8\u8bbe\u7f6e\u5230\u5b9e\u4f8b\u7684 MiraiSession.version. \u9ed8\u8ba4\u4e3a True. True Returns: Name Type Description str str \u7248\u672c\u4fe1\u606f. Source code in graia/ariadne/app.py 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 @app_ctx_manager async def getVersion ( self , auto_set : bool = True ) -> str : \"\"\"\u83b7\u53d6\u540e\u7aef Mirai HTTP API \u7248\u672c. Args: auto_set (bool, optional): \u81ea\u52a8\u8bbe\u7f6e\u5230\u5b9e\u4f8b\u7684 MiraiSession.version. \u9ed8\u8ba4\u4e3a True. Returns: str: \u7248\u672c\u4fe1\u606f. \"\"\" if self . mirai_session . version : return self . mirai_session . version result = await self . adapter . call_api ( \"about\" , CallMethod . GET ) version = result [ \"version\" ] if auto_set : self . mirai_session . version = version return version join async \ud83d\udd17 join () \u7b49\u5f85\u76f4\u5230 Ariadne \u771f\u6b63\u505c\u6b62. \u4e0d\u8981\u5728\u4e0e Broadcast \u76f8\u5173\u7684\u4efb\u52a1\u4e2d\u4f7f\u7528. Source code in graia/ariadne/app.py 1713 1714 1715 1716 1717 1718 1719 1720 1721 async def join ( self ): \"\"\"\u7b49\u5f85\u76f4\u5230 Ariadne \u771f\u6b63\u505c\u6b62. \u4e0d\u8981\u5728\u4e0e Broadcast \u76f8\u5173\u7684\u4efb\u52a1\u4e2d\u4f7f\u7528. \"\"\" if self . status in { AriadneStatus . RUNNING , AriadneStatus . LAUNCH }: await self . stop () await await_predicate ( lambda : self . status is AriadneStatus . STOP ) if self . daemon_task : await self . daemon_task launch async \ud83d\udd17 launch () \u542f\u52a8 Ariadne. Source code in graia/ariadne/app.py 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 async def launch ( self ): \"\"\"\u542f\u52a8 Ariadne.\"\"\" if self . status is not AriadneStatus . STOP : return self . status = AriadneStatus . LAUNCH # Logo if not self . disable_logo : logger . opt ( colors = True , raw = True ) . info ( f \"<cyan> { ARIADNE_ASCII_LOGO } </>\" ) # Telemetry if not self . disable_telemetry : official : List [ Tuple [ str , str ]] = [] community : List [ Tuple [ str , str ]] = [] for dist in importlib . metadata . distributions (): name : str = dist . metadata [ \"Name\" ] version : str = dist . version if name . startswith ( \"graia-\" ): official . append (( \" \" . join ( name . split ( \"-\" )[ 1 :]) . title (), version )) elif name . startswith ( \"graiax-\" ): community . append (( \" \" . join ( name . split ( \"-\" )) . title (), version )) for name , version in official : logger . opt ( colors = True , raw = True ) . info ( f \"<magenta> { name } </> version: <yellow> { version } </> \\n \" ) for name , version in community : logger . opt ( colors = True , raw = True ) . info ( f \"<cyan> { name } </> version: <yellow> { version } </> \\n \" ) logger . info ( \"Launching app...\" ) start_time = time . time () if self . chat_log_cfg . enabled : self . chat_log_cfg . initialize ( self ) if ContextDispatcher not in self . broadcast . finale_dispatchers : self . broadcast . finale_dispatchers . append ( ContextDispatcher ) self . daemon_task = self . loop . create_task ( self . daemon (), name = \"ariadne_daemon\" ) self . running . add ( self ) try : await self . adapter . connected . wait ( True , \"__ariadne_launch__\" ) except asyncio . CancelledError : logger . error ( \"Launch abort!\" ) return self . status = AriadneStatus . RUNNING self . remote_version = await self . getVersion () logger . success ( f \"Remote version: { self . remote_version } \" ) if not self . remote_version . startswith ( \"2\" ): raise RuntimeError ( f \"You are using an unsupported version: { self . remote_version } !\" ) logger . success ( f \"Application launched with { time . time () - start_time : .2 } s\" ) await self . broadcast . postEvent ( ApplicationLaunched ( self )) launch_blocking \ud83d\udd17 launch_blocking () \u4ee5\u963b\u585e\u65b9\u5f0f\u542f\u52a8 Ariadne \u5e76\u7b49\u5f85\u5176\u505c\u6b62. Source code in graia/ariadne/app.py 1737 1738 1739 1740 def launch_blocking ( self ): \"\"\"\u4ee5\u963b\u585e\u65b9\u5f0f\u542f\u52a8 Ariadne \u5e76\u7b49\u5f85\u5176\u505c\u6b62.\"\"\" self . loop . run_until_complete ( self . lifecycle ()) self . loop . run_until_complete ( self . join ()) lifecycle async \ud83d\udd17 lifecycle () \u4ee5 async \u963b\u585e\u65b9\u5f0f\u542f\u52a8 Ariadne \u5e76\u7b49\u5f85\u5176\u505c\u6b62. Source code in graia/ariadne/app.py 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 async def lifecycle ( self ): \"\"\"\u4ee5 async \u963b\u585e\u65b9\u5f0f\u542f\u52a8 Ariadne \u5e76\u7b49\u5f85\u5176\u505c\u6b62.\"\"\" def sig_handler ( * _ ): if self . status in { AriadneStatus . RUNNING , AriadneStatus . LAUNCH }: self . status = AriadneStatus . SHUTDOWN logger . warning ( \"Stop signal received, scheduling stop process.\" ) logger . warning ( \"Press Ctrl-C again to force quit.\" ) signal_handler ( sig_handler ) await self . launch () if self . daemon_task : await self . daemon_task stop async \ud83d\udd17 stop () \u8bf7\u6c42\u505c\u6b62 Ariadne. Source code in graia/ariadne/app.py 1707 1708 1709 1710 1711 async def stop ( self ): \"\"\"\u8bf7\u6c42\u505c\u6b62 Ariadne.\"\"\" if self . status is AriadneStatus . RUNNING : self . status = AriadneStatus . SHUTDOWN await await_predicate ( lambda : self . status in { AriadneStatus . CLEANUP , AriadneStatus . STOP }) AriadneMixin \ud83d\udd17 Ariadne \u7684 Mixin \u57fa\u7c7b. Source code in graia/ariadne/app.py 92 93 94 95 96 97 98 99 100 101 102 103 class AriadneMixin : \"\"\"Ariadne \u7684 Mixin \u57fa\u7c7b.\"\"\" broadcast : Broadcast adapter : Adapter mirai_session : MiraiSession chat_log_cfg : ChatLogConfig @property def session_key ( self ) -> Optional [ str ]: \"\"\"\u8fd4\u56de Ariadne \u7684 Mirai session key.\"\"\" return self . mirai_session . session_key session_key property \ud83d\udd17 session_key () -> Optional [ str ] \u8fd4\u56de Ariadne \u7684 Mirai session key. Source code in graia/ariadne/app.py 100 101 102 103 @property def session_key ( self ) -> Optional [ str ]: \"\"\"\u8fd4\u56de Ariadne \u7684 Mirai session key.\"\"\" return self . mirai_session . session_key FileMixin \ud83d\udd17 Bases: AriadneMixin \u7528\u4e8e\u5bf9\u6587\u4ef6\u8fdb\u884c\u5404\u79cd\u64cd\u4f5c\u7684 Mixin \u7c7b. Source code in graia/ariadne/app.py 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 class FileMixin ( AriadneMixin ): \"\"\"\u7528\u4e8e\u5bf9\u6587\u4ef6\u8fdb\u884c\u5404\u79cd\u64cd\u4f5c\u7684 Mixin \u7c7b.\"\"\" async def getFileIterator ( self , target : Union [ Group , int ], id : str = \"\" , offset : int = 0 , size : int = 1 , with_download_info : bool = False , ) -> AsyncGenerator [ FileInfo , None ]: \"\"\" \u4ee5\u751f\u6210\u5668\u5f62\u5f0f\u5217\u51fa\u6307\u5b9a\u6587\u4ef6\u5939\u4e0b\u7684\u6240\u6709\u6587\u4ef6. Args: target (Union[Group, int]): \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \\ \u4e3a\u7fa4\u7ec4\u6216\u7fa4\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) id (str): \u6587\u4ef6\u5939ID, \u7a7a\u4e32\u4e3a\u6839\u76ee\u5f55 offset (int): \u8d77\u59cb\u5206\u9875\u504f\u79fb size (int): \u5355\u6b21\u5206\u9875\u5927\u5c0f with_download_info (bool): \u662f\u5426\u643a\u5e26\u4e0b\u8f7d\u4fe1\u606f, \u65e0\u5fc5\u8981\u4e0d\u8981\u643a\u5e26 Returns: AsyncGenerator[FileInfo, None]: \u6587\u4ef6\u4fe1\u606f\u751f\u6210\u5668. \"\"\" target = int ( target ) current_offset = offset cache : List [ FileInfo ] = [] while True : for file_info in cache : yield file_info cache = await self . getFileList ( target , id , current_offset , size , with_download_info ) current_offset += len ( cache ) if not cache : return @app_ctx_manager async def getFileList ( self , target : Union [ Group , int ], id : str = \"\" , offset : Optional [ int ] = 0 , size : Optional [ int ] = 1 , with_download_info : bool = False , ) -> List [ FileInfo ]: \"\"\" \u5217\u51fa\u6307\u5b9a\u6587\u4ef6\u5939\u4e0b\u7684\u6240\u6709\u6587\u4ef6. Args: target (Union[Group, int]): \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \\ \u4e3a\u7fa4\u7ec4\u6216\u7fa4\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) id (str): \u6587\u4ef6\u5939ID, \u7a7a\u4e32\u4e3a\u6839\u76ee\u5f55 offset (int): \u5206\u9875\u504f\u79fb size (int): \u5206\u9875\u5927\u5c0f with_download_info (bool): \u662f\u5426\u643a\u5e26\u4e0b\u8f7d\u4fe1\u606f, \u65e0\u5fc5\u8981\u4e0d\u8981\u643a\u5e26 Returns: List[FileInfo]: \u8fd4\u56de\u7684\u6587\u4ef6\u4fe1\u606f\u5217\u8868. \"\"\" target = int ( target ) result = await self . adapter . call_api ( \"file/list\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"id\" : id , \"target\" : target , \"withDownloadInfo\" : str ( with_download_info ), # yarl don't accept boolean \"offset\" : offset , \"size\" : size , }, ) return [ FileInfo . parse_obj ( i ) for i in result ] @app_ctx_manager async def getFileInfo ( self , target : Union [ Friend , Group , int ], id : str = \"\" , with_download_info : bool = False , ) -> FileInfo : \"\"\" \u83b7\u53d6\u6307\u5b9a\u6587\u4ef6\u7684\u4fe1\u606f. Args: target (Union[Friend, Group, int]): \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \\ \u4e3a\u7fa4\u7ec4\u6216\u597d\u53cb\u6216QQ\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) id (str): \u6587\u4ef6ID, \u7a7a\u4e32\u4e3a\u6839\u76ee\u5f55 with_download_info (bool): \u662f\u5426\u643a\u5e26\u4e0b\u8f7d\u4fe1\u606f, \u65e0\u5fc5\u8981\u4e0d\u8981\u643a\u5e26 Returns: FileInfo: \u8fd4\u56de\u7684\u6587\u4ef6\u4fe1\u606f. \"\"\" if isinstance ( target , Friend ): raise NotImplementedError ( \"Not implemented for friend\" ) target = target . id if isinstance ( target , Friend ) else target target = target . id if isinstance ( target , Group ) else target result = await self . adapter . call_api ( \"file/info\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"id\" : id , \"target\" : target , \"withDownloadInfo\" : str ( with_download_info ), # yarl don't accept boolean }, ) return FileInfo . parse_obj ( result ) @app_ctx_manager async def makeDirectory ( self , target : Union [ Friend , Group , int ], name : str , id : str = \"\" , ) -> FileInfo : \"\"\" \u5728\u6307\u5b9a\u4f4d\u7f6e\u521b\u5efa\u65b0\u6587\u4ef6\u5939. Args: target (Union[Friend, Group, int]): \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \\ \u4e3a\u7fa4\u7ec4\u6216\u597d\u53cb\u6216QQ\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) name (str): \u8981\u521b\u5efa\u7684\u6587\u4ef6\u5939\u540d\u79f0. id (str): \u4e0a\u7ea7\u6587\u4ef6\u5939ID, \u7a7a\u4e32\u4e3a\u6839\u76ee\u5f55 Returns: FileInfo: \u65b0\u521b\u5efa\u6587\u4ef6\u5939\u7684\u4fe1\u606f. \"\"\" if isinstance ( target , Friend ): raise NotImplementedError ( \"Not implemented for friend\" ) target = target . id if isinstance ( target , Friend ) else target target = target . id if isinstance ( target , Group ) else target result = await self . adapter . call_api ( \"file/mkdir\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"id\" : id , \"name\" : name , \"target\" : target , }, ) return FileInfo . parse_obj ( result ) @app_ctx_manager async def deleteFile ( self , target : Union [ Friend , Group , int ], id : str = \"\" , ) -> None : \"\"\" \u5220\u9664\u6307\u5b9a\u6587\u4ef6. Args: target (Union[Friend, Group, int]): \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \\ \u4e3a\u7fa4\u7ec4\u6216\u597d\u53cb\u6216QQ\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) id (str): \u6587\u4ef6ID Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" if isinstance ( target , Friend ): raise NotImplementedError ( \"Not implemented for friend\" ) target = target . id if isinstance ( target , Friend ) else target target = target . id if isinstance ( target , Group ) else target await self . adapter . call_api ( \"file/delete\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"id\" : id , \"target\" : target , }, ) @app_ctx_manager async def moveFile ( self , target : Union [ Friend , Group , int ], id : str = \"\" , dest_id : str = \"\" , ) -> None : \"\"\" \u79fb\u52a8\u6307\u5b9a\u6587\u4ef6. Args: target (Union[Friend, Group, int]): \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \\ \u4e3a\u7fa4\u7ec4\u6216\u597d\u53cb\u6216QQ\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) id (str): \u6e90\u6587\u4ef6ID dest_id (str): \u76ee\u6807\u6587\u4ef6\u5939ID Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" if isinstance ( target , Friend ): raise NotImplementedError ( \"Not implemented for friend\" ) target = target . id if isinstance ( target , Friend ) else target target = target . id if isinstance ( target , Group ) else target await self . adapter . call_api ( \"file/move\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"id\" : id , \"target\" : target , \"moveTo\" : dest_id , }, ) @app_ctx_manager async def renameFile ( self , target : Union [ Friend , Group , int ], id : str = \"\" , dest_name : str = \"\" , ) -> None : \"\"\" \u91cd\u547d\u540d\u6307\u5b9a\u6587\u4ef6. Args: target (Union[Friend, Group, int]): \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \\ \u4e3a\u7fa4\u7ec4\u6216\u597d\u53cb\u6216QQ\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) id (str): \u6e90\u6587\u4ef6ID dest_name (str): \u76ee\u6807\u6587\u4ef6\u65b0\u540d\u79f0. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" if isinstance ( target , Friend ): raise NotImplementedError ( \"Not implemented for friend\" ) target = target . id if isinstance ( target , Friend ) else target target = target . id if isinstance ( target , Group ) else target await self . adapter . call_api ( \"file/rename\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"id\" : id , \"target\" : target , \"renameTo\" : dest_name , }, ) @app_ctx_manager async def uploadFile ( self , data : Union [ bytes , io . IOBase , os . PathLike ], method : Union [ str , UploadMethod , None ] = None , target : Union [ Friend , Group , int ] = - 1 , path : str = \"\" , name : str = \"\" , ) -> \"FileInfo\" : \"\"\" \u4e0a\u4f20\u6587\u4ef6\u5230\u6307\u5b9a\u76ee\u6807, \u9700\u8981\u63d0\u4f9b: \u6587\u4ef6\u7684\u539f\u59cb\u6570\u636e(bytes), \u6587\u4ef6\u7684\u4e0a\u4f20\u7c7b\u578b, \u4e0a\u4f20\u76ee\u6807, (\u53ef\u9009)\u4e0a\u4f20\u76ee\u5f55ID. Args: data (Union[bytes, io.IOBase, os.PathLike]): \u6587\u4ef6\u7684\u539f\u59cb\u6570\u636e method (str | UploadMethod, optional): \u6587\u4ef6\u7684\u4e0a\u4f20\u7c7b\u578b target (Union[Friend, Group, int]): \u6587\u4ef6\u4e0a\u4f20\u76ee\u6807, \u5373\u7fa4\u7ec4 path (str): \u76ee\u6807\u8def\u5f84, \u9ed8\u8ba4\u4e3a\u6839\u8def\u5f84. name (str): \u6587\u4ef6\u540d, \u53ef\u9009, \u82e5 path \u5b58\u5728\u659c\u6760\u53ef\u4ece path \u63a8\u65ad. Returns: FileInfo: \u6587\u4ef6\u4fe1\u606f \"\"\" method = str ( method or UploadMethod [ target . __class__ . __name__ ]) . lower () if method != \"group\" : raise NotImplementedError ( f \"Not implemented for { method } \" ) target = target . id if isinstance ( target , ( Friend , Group )) else target if \"/\" in path and not name : path , name = path . rsplit ( \"/\" , 1 ) if isinstance ( data , os . PathLike ): data = open ( data , \"rb\" ) result = await self . adapter . call_api ( \"file/upload\" , CallMethod . MULTIPART , { \"sessionKey\" : self . session_key , \"type\" : method , \"target\" : str ( target ), \"path\" : path , \"file\" : ( data , { \"filename\" : name } if name else {}), }, ) return FileInfo . parse_obj ( result ) deleteFile async \ud83d\udd17 deleteFile ( target : Union [ Friend , Group , int ], id : str = '' ) -> None \u5220\u9664\u6307\u5b9a\u6587\u4ef6. Parameters: Name Type Description Default target Union [ Friend , Group , int ] \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \u4e3a\u7fa4\u7ec4\u6216\u597d\u53cb\u6216QQ\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) required id str \u6587\u4ef6ID '' Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 @app_ctx_manager async def deleteFile ( self , target : Union [ Friend , Group , int ], id : str = \"\" , ) -> None : \"\"\" \u5220\u9664\u6307\u5b9a\u6587\u4ef6. Args: target (Union[Friend, Group, int]): \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \\ \u4e3a\u7fa4\u7ec4\u6216\u597d\u53cb\u6216QQ\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) id (str): \u6587\u4ef6ID Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" if isinstance ( target , Friend ): raise NotImplementedError ( \"Not implemented for friend\" ) target = target . id if isinstance ( target , Friend ) else target target = target . id if isinstance ( target , Group ) else target await self . adapter . call_api ( \"file/delete\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"id\" : id , \"target\" : target , }, ) getFileInfo async \ud83d\udd17 getFileInfo ( target : Union [ Friend , Group , int ], id : str = '' , with_download_info : bool = False ) -> FileInfo \u83b7\u53d6\u6307\u5b9a\u6587\u4ef6\u7684\u4fe1\u606f. Parameters: Name Type Description Default target Union [ Friend , Group , int ] \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \u4e3a\u7fa4\u7ec4\u6216\u597d\u53cb\u6216QQ\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) required id str \u6587\u4ef6ID, \u7a7a\u4e32\u4e3a\u6839\u76ee\u5f55 '' with_download_info bool \u662f\u5426\u643a\u5e26\u4e0b\u8f7d\u4fe1\u606f, \u65e0\u5fc5\u8981\u4e0d\u8981\u643a\u5e26 False Returns: Name Type Description FileInfo FileInfo \u8fd4\u56de\u7684\u6587\u4ef6\u4fe1\u606f. Source code in graia/ariadne/app.py 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 @app_ctx_manager async def getFileInfo ( self , target : Union [ Friend , Group , int ], id : str = \"\" , with_download_info : bool = False , ) -> FileInfo : \"\"\" \u83b7\u53d6\u6307\u5b9a\u6587\u4ef6\u7684\u4fe1\u606f. Args: target (Union[Friend, Group, int]): \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \\ \u4e3a\u7fa4\u7ec4\u6216\u597d\u53cb\u6216QQ\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) id (str): \u6587\u4ef6ID, \u7a7a\u4e32\u4e3a\u6839\u76ee\u5f55 with_download_info (bool): \u662f\u5426\u643a\u5e26\u4e0b\u8f7d\u4fe1\u606f, \u65e0\u5fc5\u8981\u4e0d\u8981\u643a\u5e26 Returns: FileInfo: \u8fd4\u56de\u7684\u6587\u4ef6\u4fe1\u606f. \"\"\" if isinstance ( target , Friend ): raise NotImplementedError ( \"Not implemented for friend\" ) target = target . id if isinstance ( target , Friend ) else target target = target . id if isinstance ( target , Group ) else target result = await self . adapter . call_api ( \"file/info\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"id\" : id , \"target\" : target , \"withDownloadInfo\" : str ( with_download_info ), # yarl don't accept boolean }, ) return FileInfo . parse_obj ( result ) getFileIterator async \ud83d\udd17 getFileIterator ( target : Union [ Group , int ], id : str = '' , offset : int = 0 , size : int = 1 , with_download_info : bool = False ) -> AsyncGenerator [ FileInfo , None ] \u4ee5\u751f\u6210\u5668\u5f62\u5f0f\u5217\u51fa\u6307\u5b9a\u6587\u4ef6\u5939\u4e0b\u7684\u6240\u6709\u6587\u4ef6. Parameters: Name Type Description Default target Union [ Group , int ] \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \u4e3a\u7fa4\u7ec4\u6216\u7fa4\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) required id str \u6587\u4ef6\u5939ID, \u7a7a\u4e32\u4e3a\u6839\u76ee\u5f55 '' offset int \u8d77\u59cb\u5206\u9875\u504f\u79fb 0 size int \u5355\u6b21\u5206\u9875\u5927\u5c0f 1 with_download_info bool \u662f\u5426\u643a\u5e26\u4e0b\u8f7d\u4fe1\u606f, \u65e0\u5fc5\u8981\u4e0d\u8981\u643a\u5e26 False Returns: Type Description AsyncGenerator [ FileInfo , None] AsyncGenerator[FileInfo, None]: \u6587\u4ef6\u4fe1\u606f\u751f\u6210\u5668. Source code in graia/ariadne/app.py 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 async def getFileIterator ( self , target : Union [ Group , int ], id : str = \"\" , offset : int = 0 , size : int = 1 , with_download_info : bool = False , ) -> AsyncGenerator [ FileInfo , None ]: \"\"\" \u4ee5\u751f\u6210\u5668\u5f62\u5f0f\u5217\u51fa\u6307\u5b9a\u6587\u4ef6\u5939\u4e0b\u7684\u6240\u6709\u6587\u4ef6. Args: target (Union[Group, int]): \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \\ \u4e3a\u7fa4\u7ec4\u6216\u7fa4\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) id (str): \u6587\u4ef6\u5939ID, \u7a7a\u4e32\u4e3a\u6839\u76ee\u5f55 offset (int): \u8d77\u59cb\u5206\u9875\u504f\u79fb size (int): \u5355\u6b21\u5206\u9875\u5927\u5c0f with_download_info (bool): \u662f\u5426\u643a\u5e26\u4e0b\u8f7d\u4fe1\u606f, \u65e0\u5fc5\u8981\u4e0d\u8981\u643a\u5e26 Returns: AsyncGenerator[FileInfo, None]: \u6587\u4ef6\u4fe1\u606f\u751f\u6210\u5668. \"\"\" target = int ( target ) current_offset = offset cache : List [ FileInfo ] = [] while True : for file_info in cache : yield file_info cache = await self . getFileList ( target , id , current_offset , size , with_download_info ) current_offset += len ( cache ) if not cache : return getFileList async \ud83d\udd17 getFileList ( target : Union [ Group , int ], id : str = '' , offset : Optional [ int ] = 0 , size : Optional [ int ] = 1 , with_download_info : bool = False ) -> List [ FileInfo ] \u5217\u51fa\u6307\u5b9a\u6587\u4ef6\u5939\u4e0b\u7684\u6240\u6709\u6587\u4ef6. Parameters: Name Type Description Default target Union [ Group , int ] \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \u4e3a\u7fa4\u7ec4\u6216\u7fa4\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) required id str \u6587\u4ef6\u5939ID, \u7a7a\u4e32\u4e3a\u6839\u76ee\u5f55 '' offset int \u5206\u9875\u504f\u79fb 0 size int \u5206\u9875\u5927\u5c0f 1 with_download_info bool \u662f\u5426\u643a\u5e26\u4e0b\u8f7d\u4fe1\u606f, \u65e0\u5fc5\u8981\u4e0d\u8981\u643a\u5e26 False Returns: Type Description List [ FileInfo ] List[FileInfo]: \u8fd4\u56de\u7684\u6587\u4ef6\u4fe1\u606f\u5217\u8868. Source code in graia/ariadne/app.py 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 @app_ctx_manager async def getFileList ( self , target : Union [ Group , int ], id : str = \"\" , offset : Optional [ int ] = 0 , size : Optional [ int ] = 1 , with_download_info : bool = False , ) -> List [ FileInfo ]: \"\"\" \u5217\u51fa\u6307\u5b9a\u6587\u4ef6\u5939\u4e0b\u7684\u6240\u6709\u6587\u4ef6. Args: target (Union[Group, int]): \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \\ \u4e3a\u7fa4\u7ec4\u6216\u7fa4\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) id (str): \u6587\u4ef6\u5939ID, \u7a7a\u4e32\u4e3a\u6839\u76ee\u5f55 offset (int): \u5206\u9875\u504f\u79fb size (int): \u5206\u9875\u5927\u5c0f with_download_info (bool): \u662f\u5426\u643a\u5e26\u4e0b\u8f7d\u4fe1\u606f, \u65e0\u5fc5\u8981\u4e0d\u8981\u643a\u5e26 Returns: List[FileInfo]: \u8fd4\u56de\u7684\u6587\u4ef6\u4fe1\u606f\u5217\u8868. \"\"\" target = int ( target ) result = await self . adapter . call_api ( \"file/list\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"id\" : id , \"target\" : target , \"withDownloadInfo\" : str ( with_download_info ), # yarl don't accept boolean \"offset\" : offset , \"size\" : size , }, ) return [ FileInfo . parse_obj ( i ) for i in result ] makeDirectory async \ud83d\udd17 makeDirectory ( target : Union [ Friend , Group , int ], name : str , id : str = '' ) -> FileInfo \u5728\u6307\u5b9a\u4f4d\u7f6e\u521b\u5efa\u65b0\u6587\u4ef6\u5939. Parameters: Name Type Description Default target Union [ Friend , Group , int ] \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \u4e3a\u7fa4\u7ec4\u6216\u597d\u53cb\u6216QQ\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) required name str \u8981\u521b\u5efa\u7684\u6587\u4ef6\u5939\u540d\u79f0. required id str \u4e0a\u7ea7\u6587\u4ef6\u5939ID, \u7a7a\u4e32\u4e3a\u6839\u76ee\u5f55 '' Returns: Name Type Description FileInfo FileInfo \u65b0\u521b\u5efa\u6587\u4ef6\u5939\u7684\u4fe1\u606f. Source code in graia/ariadne/app.py 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 @app_ctx_manager async def makeDirectory ( self , target : Union [ Friend , Group , int ], name : str , id : str = \"\" , ) -> FileInfo : \"\"\" \u5728\u6307\u5b9a\u4f4d\u7f6e\u521b\u5efa\u65b0\u6587\u4ef6\u5939. Args: target (Union[Friend, Group, int]): \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \\ \u4e3a\u7fa4\u7ec4\u6216\u597d\u53cb\u6216QQ\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) name (str): \u8981\u521b\u5efa\u7684\u6587\u4ef6\u5939\u540d\u79f0. id (str): \u4e0a\u7ea7\u6587\u4ef6\u5939ID, \u7a7a\u4e32\u4e3a\u6839\u76ee\u5f55 Returns: FileInfo: \u65b0\u521b\u5efa\u6587\u4ef6\u5939\u7684\u4fe1\u606f. \"\"\" if isinstance ( target , Friend ): raise NotImplementedError ( \"Not implemented for friend\" ) target = target . id if isinstance ( target , Friend ) else target target = target . id if isinstance ( target , Group ) else target result = await self . adapter . call_api ( \"file/mkdir\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"id\" : id , \"name\" : name , \"target\" : target , }, ) return FileInfo . parse_obj ( result ) moveFile async \ud83d\udd17 moveFile ( target : Union [ Friend , Group , int ], id : str = '' , dest_id : str = '' ) -> None \u79fb\u52a8\u6307\u5b9a\u6587\u4ef6. Parameters: Name Type Description Default target Union [ Friend , Group , int ] \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \u4e3a\u7fa4\u7ec4\u6216\u597d\u53cb\u6216QQ\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) required id str \u6e90\u6587\u4ef6ID '' dest_id str \u76ee\u6807\u6587\u4ef6\u5939ID '' Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 @app_ctx_manager async def moveFile ( self , target : Union [ Friend , Group , int ], id : str = \"\" , dest_id : str = \"\" , ) -> None : \"\"\" \u79fb\u52a8\u6307\u5b9a\u6587\u4ef6. Args: target (Union[Friend, Group, int]): \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \\ \u4e3a\u7fa4\u7ec4\u6216\u597d\u53cb\u6216QQ\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) id (str): \u6e90\u6587\u4ef6ID dest_id (str): \u76ee\u6807\u6587\u4ef6\u5939ID Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" if isinstance ( target , Friend ): raise NotImplementedError ( \"Not implemented for friend\" ) target = target . id if isinstance ( target , Friend ) else target target = target . id if isinstance ( target , Group ) else target await self . adapter . call_api ( \"file/move\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"id\" : id , \"target\" : target , \"moveTo\" : dest_id , }, ) renameFile async \ud83d\udd17 renameFile ( target : Union [ Friend , Group , int ], id : str = '' , dest_name : str = '' ) -> None \u91cd\u547d\u540d\u6307\u5b9a\u6587\u4ef6. Parameters: Name Type Description Default target Union [ Friend , Group , int ] \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \u4e3a\u7fa4\u7ec4\u6216\u597d\u53cb\u6216QQ\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) required id str \u6e90\u6587\u4ef6ID '' dest_name str \u76ee\u6807\u6587\u4ef6\u65b0\u540d\u79f0. '' Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 @app_ctx_manager async def renameFile ( self , target : Union [ Friend , Group , int ], id : str = \"\" , dest_name : str = \"\" , ) -> None : \"\"\" \u91cd\u547d\u540d\u6307\u5b9a\u6587\u4ef6. Args: target (Union[Friend, Group, int]): \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \\ \u4e3a\u7fa4\u7ec4\u6216\u597d\u53cb\u6216QQ\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) id (str): \u6e90\u6587\u4ef6ID dest_name (str): \u76ee\u6807\u6587\u4ef6\u65b0\u540d\u79f0. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" if isinstance ( target , Friend ): raise NotImplementedError ( \"Not implemented for friend\" ) target = target . id if isinstance ( target , Friend ) else target target = target . id if isinstance ( target , Group ) else target await self . adapter . call_api ( \"file/rename\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"id\" : id , \"target\" : target , \"renameTo\" : dest_name , }, ) uploadFile async \ud83d\udd17 uploadFile ( data : Union [ bytes , io . IOBase , os . PathLike ], method : Union [ str , UploadMethod , None ] = None , target : Union [ Friend , Group , int ] = - 1 , path : str = '' , name : str = '' ) -> 'FileInfo' \u4e0a\u4f20\u6587\u4ef6\u5230\u6307\u5b9a\u76ee\u6807, \u9700\u8981\u63d0\u4f9b: \u6587\u4ef6\u7684\u539f\u59cb\u6570\u636e(bytes), \u6587\u4ef6\u7684\u4e0a\u4f20\u7c7b\u578b, \u4e0a\u4f20\u76ee\u6807, (\u53ef\u9009)\u4e0a\u4f20\u76ee\u5f55ID. Parameters: Name Type Description Default data Union [ bytes , io . IOBase , os . PathLike ] \u6587\u4ef6\u7684\u539f\u59cb\u6570\u636e required method str | UploadMethod \u6587\u4ef6\u7684\u4e0a\u4f20\u7c7b\u578b None target Union [ Friend , Group , int ] \u6587\u4ef6\u4e0a\u4f20\u76ee\u6807, \u5373\u7fa4\u7ec4 -1 path str \u76ee\u6807\u8def\u5f84, \u9ed8\u8ba4\u4e3a\u6839\u8def\u5f84. '' name str \u6587\u4ef6\u540d, \u53ef\u9009, \u82e5 path \u5b58\u5728\u659c\u6760\u53ef\u4ece path \u63a8\u65ad. '' Returns: Name Type Description FileInfo 'FileInfo' \u6587\u4ef6\u4fe1\u606f Source code in graia/ariadne/app.py 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 @app_ctx_manager async def uploadFile ( self , data : Union [ bytes , io . IOBase , os . PathLike ], method : Union [ str , UploadMethod , None ] = None , target : Union [ Friend , Group , int ] = - 1 , path : str = \"\" , name : str = \"\" , ) -> \"FileInfo\" : \"\"\" \u4e0a\u4f20\u6587\u4ef6\u5230\u6307\u5b9a\u76ee\u6807, \u9700\u8981\u63d0\u4f9b: \u6587\u4ef6\u7684\u539f\u59cb\u6570\u636e(bytes), \u6587\u4ef6\u7684\u4e0a\u4f20\u7c7b\u578b, \u4e0a\u4f20\u76ee\u6807, (\u53ef\u9009)\u4e0a\u4f20\u76ee\u5f55ID. Args: data (Union[bytes, io.IOBase, os.PathLike]): \u6587\u4ef6\u7684\u539f\u59cb\u6570\u636e method (str | UploadMethod, optional): \u6587\u4ef6\u7684\u4e0a\u4f20\u7c7b\u578b target (Union[Friend, Group, int]): \u6587\u4ef6\u4e0a\u4f20\u76ee\u6807, \u5373\u7fa4\u7ec4 path (str): \u76ee\u6807\u8def\u5f84, \u9ed8\u8ba4\u4e3a\u6839\u8def\u5f84. name (str): \u6587\u4ef6\u540d, \u53ef\u9009, \u82e5 path \u5b58\u5728\u659c\u6760\u53ef\u4ece path \u63a8\u65ad. Returns: FileInfo: \u6587\u4ef6\u4fe1\u606f \"\"\" method = str ( method or UploadMethod [ target . __class__ . __name__ ]) . lower () if method != \"group\" : raise NotImplementedError ( f \"Not implemented for { method } \" ) target = target . id if isinstance ( target , ( Friend , Group )) else target if \"/\" in path and not name : path , name = path . rsplit ( \"/\" , 1 ) if isinstance ( data , os . PathLike ): data = open ( data , \"rb\" ) result = await self . adapter . call_api ( \"file/upload\" , CallMethod . MULTIPART , { \"sessionKey\" : self . session_key , \"type\" : method , \"target\" : str ( target ), \"path\" : path , \"file\" : ( data , { \"filename\" : name } if name else {}), }, ) return FileInfo . parse_obj ( result ) MessageMixin \ud83d\udd17 Bases: AriadneMixin \u7528\u4e8e\u53d1\u9001, \u64a4\u56de, \u83b7\u53d6\u6d88\u606f\u7684 Mixin \u7c7b. Source code in graia/ariadne/app.pyclass MessageMixin ( AriadneMixin ): \"\"\"\u7528\u4e8e\u53d1\u9001, \u64a4\u56de, \u83b7\u53d6\u6d88\u606f\u7684 Mixin \u7c7b.\"\"\" default_send_action : SendMessageActionProtocol @app_ctx_manager async def getMessageFromId ( self , messageId : int ) -> MessageEvent : \"\"\"\u4ece \u6d88\u606f ID \u63d0\u53d6 \u6d88\u606f\u4e8b\u4ef6. Args: messageId (int): \u6d88\u606f ID. Returns: MessageEvent: \u63d0\u53d6\u7684\u4e8b\u4ef6. \"\"\" result = await self . adapter . call_api ( \"messageFromId\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"id\" : messageId }, ) return cast ( MessageEvent , self . adapter . build_event ( result )) @app_ctx_manager async def sendFriendMessage ( self , target : Union [ Friend , int ], message : MessageChain , * , quote : Optional [ Union [ Source , int ]] = None , ) -> BotMessage : \"\"\"\u53d1\u9001\u6d88\u606f\u7ed9\u597d\u53cb, \u53ef\u4ee5\u6307\u5b9a\u56de\u590d\u7684\u6d88\u606f. Args: target (Union[Friend, int]): \u6307\u5b9a\u7684\u597d\u53cb message (MessageChain): \u6709\u6548\u7684, \u53ef\u53d1\u9001\u7684(Sendable)\u6d88\u606f\u94fe. quote (Optional[Union[Source, int]], optional): \u9700\u8981\u56de\u590d\u7684\u6d88\u606f, \u4e0d\u8981\u5ffd\u89c6\u6211\u554a\u5582?!!, \u9ed8\u8ba4\u4e3a None. Returns: BotMessage: \u5373\u5f53\u524d\u4f1a\u8bdd\u8d26\u53f7\u6240\u53d1\u51fa\u6d88\u606f\u7684\u5143\u6570\u636e, \u5185\u5305\u542b\u6709\u4e00 `messageId` \u5c5e\u6027, \u53ef\u7528\u4e8e\u56de\u590d. \"\"\" from .event.message import ActiveFriendMessage with enter_message_send_context ( UploadMethod . Friend ): new_msg = message . copy () new_msg . prepare () result = await self . adapter . call_api ( \"sendFriendMessage\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : int ( target ), \"messageChain\" : new_msg . dict ()[ \"__root__\" ], ** ({ \"quote\" : quote . id if isinstance ( quote , Source ) else quote } if quote else {}), }, ) event : ActiveFriendMessage = ActiveFriendMessage ( messageChain = MessageChain ([ Source ( id = result [ \"messageId\" ], time = datetime . now ())]) + message , subject = ( await RelationshipMixin . getFriend ( self , int ( target ))), # type: ignore ) with enter_context ( self , event ): self . broadcast . postEvent ( event ) if result [ \"messageId\" ] < 0 : logger . warning ( \"Failed to send message, your account may be blocked.\" ) return BotMessage ( messageId = result [ \"messageId\" ], origin = message ) @app_ctx_manager async def sendGroupMessage ( self , target : Union [ Group , Member , int ], message : MessageChain , * , quote : Optional [ Union [ Source , int ]] = None , ) -> BotMessage : \"\"\"\u53d1\u9001\u6d88\u606f\u5230\u7fa4\u7ec4\u5185, \u53ef\u4ee5\u6307\u5b9a\u56de\u590d\u7684\u6d88\u606f. Args: target (Union[Group, Member, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4, \u53ef\u4ee5\u662f\u7fa4\u7ec4\u7684 ID \u4e5f\u53ef\u4ee5\u662f Group \u6216 Member \u5b9e\u4f8b. message (MessageChain): \u6709\u6548\u7684, \u53ef\u53d1\u9001\u7684(Sendable)\u6d88\u606f\u94fe. quote (Optional[Union[Source, int]], optional): \u9700\u8981\u56de\u590d\u7684\u6d88\u606f, \u4e0d\u8981\u5ffd\u89c6\u6211\u554a\u5582?!!, \u9ed8\u8ba4\u4e3a None. Returns: BotMessage: \u5373\u5f53\u524d\u4f1a\u8bdd\u8d26\u53f7\u6240\u53d1\u51fa\u6d88\u606f\u7684\u5143\u6570\u636e, \u5185\u5305\u542b\u6709\u4e00 `messageId` \u5c5e\u6027, \u53ef\u7528\u4e8e\u56de\u590d. \"\"\" from .event.message import ActiveGroupMessage if isinstance ( target , Member ): target = target . group with enter_message_send_context ( UploadMethod . Group ): new_msg = message . copy () new_msg . prepare () result = await self . adapter . call_api ( \"sendGroupMessage\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : int ( target ), \"messageChain\" : new_msg . dict ()[ \"__root__\" ], ** ({ \"quote\" : quote . id if isinstance ( quote , Source ) else quote } if quote else {}), }, ) event : ActiveGroupMessage = ActiveGroupMessage ( messageChain = MessageChain ([ Source ( id = result [ \"messageId\" ], time = datetime . now ())]) + message , subject = ( await RelationshipMixin . getGroup ( self , int ( target ))), # type: ignore ) with enter_context ( self , event ): self . broadcast . postEvent ( event ) if result [ \"messageId\" ] < 0 : logger . warning ( \"Failed to send message, your account may be blocked.\" ) return BotMessage ( messageId = result [ \"messageId\" ], origin = message ) @app_ctx_manager async def sendTempMessage ( self , target : Union [ Member , int ], message : MessageChain , group : Optional [ Union [ Group , int ]] = None , * , quote : Optional [ Union [ Source , int ]] = None , ) -> BotMessage : \"\"\"\u53d1\u9001\u4e34\u65f6\u4f1a\u8bdd\u7ed9\u7fa4\u7ec4\u4e2d\u7684\u7279\u5b9a\u6210\u5458, \u53ef\u6307\u5b9a\u56de\u590d\u7684\u6d88\u606f. Warning: \u672c API \u5927\u6982\u7387\u4f1a\u5bfc\u81f4\u8d26\u53f7\u98ce\u63a7/\u51bb\u7ed3. \u8bf7\u8c28\u614e\u4f7f\u7528. Args: group (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4, \u53ef\u4ee5\u662f\u7fa4\u7ec4\u7684 ID \u4e5f\u53ef\u4ee5\u662f Group \u5b9e\u4f8b. target (Union[Member, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4\u6210\u5458, \u53ef\u4ee5\u662f\u6210\u5458\u7684 ID \u4e5f\u53ef\u4ee5\u662f Member \u5b9e\u4f8b. message (MessageChain): \u6709\u6548\u7684, \u53ef\u53d1\u9001\u7684(Sendable)\u6d88\u606f\u94fe. quote (Optional[Union[Source, int]], optional): \u9700\u8981\u56de\u590d\u7684\u6d88\u606f, \u4e0d\u8981\u5ffd\u89c6\u6211\u554a\u5582?!!, \u9ed8\u8ba4\u4e3a None. Returns: BotMessage: \u5373\u5f53\u524d\u4f1a\u8bdd\u8d26\u53f7\u6240\u53d1\u51fa\u6d88\u606f\u7684\u5143\u6570\u636e, \u5185\u5305\u542b\u6709\u4e00 `messageId` \u5c5e\u6027, \u53ef\u7528\u4e8e\u56de\u590d. \"\"\" from .event.message import ActiveTempMessage new_msg = message . copy () new_msg . prepare () group = target . group if ( isinstance ( target , Member ) and not group ) else group if not group : raise ValueError ( \"Missing necessary argument: group\" ) with enter_message_send_context ( UploadMethod . Temp ): result = await self . adapter . call_api ( \"sendTempMessage\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"group\" : int ( group ), \"qq\" : int ( target ), \"messageChain\" : new_msg . dict ()[ \"__root__\" ], ** ({ \"quote\" : quote . id if isinstance ( quote , Source ) else quote } if quote else {}), }, ) event : ActiveTempMessage = ActiveTempMessage ( messageChain = MessageChain ([ Source ( id = result [ \"messageId\" ], time = datetime . now ())]) + message , subject = ( await RelationshipMixin . getMember ( self , int ( group ), int ( target ))), # type: ignore ) with enter_context ( self , event ): self . broadcast . postEvent ( event ) if result [ \"messageId\" ] < 0 : logger . warning ( \"Failed to send message, your account may be limited.\" ) return BotMessage ( messageId = result [ \"messageId\" ], origin = message ) @app_ctx_manager async def sendMessage ( self , target : Union [ MessageEvent , Group , Friend , Member ], message : MessageChain , * , quote : Union [ bool , int , Source , MessageChain ] = False , action : SendMessageActionProtocol [ \"T\" ] = ... , ) -> \"T\" : \"\"\" \u4f9d\u636e\u4f20\u5165\u7684 `target` \u81ea\u52a8\u53d1\u9001\u6d88\u606f. \u8bf7\u6ce8\u610f\u53d1\u9001\u7ed9\u7fa4\u6210\u5458\u65f6\u4f1a\u81ea\u52a8\u4f5c\u4e3a\u4e34\u65f6\u6d88\u606f\u53d1\u9001. Args: target (Union[MessageEvent, Group, Friend, Member]): \u6d88\u606f\u53d1\u9001\u76ee\u6807. message (MessageChain): \u8981\u53d1\u9001\u7684\u6d88\u606f\u94fe. quote (Union[bool, int, Source]): \u82e5\u4e3a\u5e03\u5c14\u7c7b\u578b, \u5219\u4f1a\u5c1d\u8bd5\u901a\u8fc7\u4f20\u5165\u5bf9\u8c61\u89e3\u6790\u8981\u56de\u590d\u7684\u6d88\u606f, \\ \u5426\u5219\u4f1a\u89c6\u4e3a `messageId` \u5904\u7406. action (SendMessageCaller[T], optional): \u6d88\u606f\u53d1\u9001\u7684\u5904\u7406 action, \\ \u53ef\u4ee5\u5728 graia.ariadne.util.send \u67e5\u770b\u81ea\u5e26\u7684 action, \\ \u672a\u4f20\u5165\u4f7f\u7528\u9ed8\u8ba4 action Returns: Union[T, R]: \u9ed8\u8ba4\u5b9e\u73b0\u4e3a BotMessage \"\"\" action = action if action is not ... else self . default_send_action data : Dict [ Any , Any ] = { \"message\" : message } # quote if isinstance ( quote , bool ) and quote and isinstance ( target , MessageEvent ): data [ \"quote\" ] = target . messageChain . getFirst ( Source ) elif isinstance ( quote , ( int , Source )): data [ \"quote\" ] = quote elif isinstance ( quote , MessageChain ): data [ \"quote\" ] = quote . getFirst ( Source ) # target: MessageEvent if isinstance ( target , GroupMessage ): data [ \"target\" ] = target . sender . group elif isinstance ( target , ( FriendMessage , TempMessage )): data [ \"target\" ] = target . sender else : # target: sender data [ \"target\" ] = target send_data : SendMessageDict = SendMessageDict ( ** data ) # send message data = await action . param ( send_data ) # type: ignore try : if isinstance ( data [ \"target\" ], Friend ): val = await self . sendFriendMessage ( ** data ) elif isinstance ( data [ \"target\" ], Group ): val = await self . sendGroupMessage ( ** data ) elif isinstance ( data [ \"target\" ], Member ): val = await self . sendTempMessage ( ** data ) else : logger . warning ( f \"Unable to send { data [ 'message' ] } to { data [ 'target' ] } of type { type ( data [ 'target' ]) } \" ) return await action . result ( BotMessage ( messageId =- 1 , origin = data [ \"message\" ])) except Exception as e : e . send_data = send_data # type: ignore return await action . exception ( cast ( SendMessageException , e )) else : return await action . result ( val ) @app_ctx_manager async def sendNudge ( self , target : Union [ Friend , Member , int ], group : Optional [ Union [ Group , int ]] = None ) -> None : \"\"\" \u5411\u6307\u5b9a\u7684\u7fa4\u7ec4\u6210\u5458\u6216\u597d\u53cb\u53d1\u9001\u6233\u4e00\u6233\u6d88\u606f. Args: target (Union[Friend, Member]): \u53d1\u9001\u6233\u4e00\u6233\u7684\u76ee\u6807. group (Union[Group, int], optional): \u53d1\u9001\u7684\u7fa4\u7ec4. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" target_id = target if isinstance ( target , int ) else target . id subject_id = ( group . id if isinstance ( group , Group ) else group ) or ( target . group . id if isinstance ( target , Member ) else target_id ) kind = \"Group\" if group or isinstance ( target , Member ) else \"Friend\" await self . adapter . call_api ( \"sendNudge\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : target_id , \"subject\" : subject_id , \"kind\" : kind , }, ) @app_ctx_manager async def recallMessage ( self , target : Union [ MessageChain , Source , BotMessage , int ]) -> None : \"\"\"\u64a4\u56de\u7279\u5b9a\u7684\u6d88\u606f; \u64a4\u56de\u81ea\u5df1\u7684\u6d88\u606f\u9700\u8981\u5728\u53d1\u51fa\u540e 2 \u5206\u949f\u5185\u624d\u80fd\u6210\u529f\u64a4\u56de; \u5982\u679c\u5728\u7fa4\u7ec4\u5185, \u9700\u8981\u64a4\u56de\u4ed6\u4eba\u7684\u6d88\u606f\u5219\u9700\u8981\u7ba1\u7406\u5458/\u7fa4\u4e3b\u6743\u9650. Args: target (Union[Source, BotMessage, int]): \u7279\u5b9a\u4fe1\u606f\u7684 `messageId`, \\ \u53ef\u4ee5\u662f `Source` \u5b9e\u4f8b, `BotMessage` \u5b9e\u4f8b\u6216\u8005\u662f\u5355\u7eaf\u7684 int \u6574\u6570. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" if isinstance ( target , BotMessage ): target = target . messageId elif isinstance ( target , Source ): target = target . id elif isinstance ( target , MessageChain ): target = target . getFirst ( Source ) . id await self . adapter . call_api ( \"recall\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : target }, ) getMessageFromId async \ud83d\udd17 getMessageFromId ( messageId : int ) -> MessageEvent \u4ece \u6d88\u606f ID \u63d0\u53d6 \u6d88\u606f\u4e8b\u4ef6. Parameters: Name Type Description Default messageId int \u6d88\u606f ID. required Returns: Name Type Description MessageEvent MessageEvent \u63d0\u53d6\u7684\u4e8b\u4ef6. Source code in graia/ariadne/app.py 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 @app_ctx_manager async def getMessageFromId ( self , messageId : int ) -> MessageEvent : \"\"\"\u4ece \u6d88\u606f ID \u63d0\u53d6 \u6d88\u606f\u4e8b\u4ef6. Args: messageId (int): \u6d88\u606f ID. Returns: MessageEvent: \u63d0\u53d6\u7684\u4e8b\u4ef6. \"\"\" result = await self . adapter . call_api ( \"messageFromId\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"id\" : messageId }, ) return cast ( MessageEvent , self . adapter . build_event ( result )) recallMessage async \ud83d\udd17 recallMessage ( target : Union [ MessageChain , Source , BotMessage , int ]) -> None \u64a4\u56de\u7279\u5b9a\u7684\u6d88\u606f; \u64a4\u56de\u81ea\u5df1\u7684\u6d88\u606f\u9700\u8981\u5728\u53d1\u51fa\u540e 2 \u5206\u949f\u5185\u624d\u80fd\u6210\u529f\u64a4\u56de; \u5982\u679c\u5728\u7fa4\u7ec4\u5185, \u9700\u8981\u64a4\u56de\u4ed6\u4eba\u7684\u6d88\u606f\u5219\u9700\u8981\u7ba1\u7406\u5458/\u7fa4\u4e3b\u6743\u9650. Parameters: Name Type Description Default target Union [ Source , BotMessage , int ] \u7279\u5b9a\u4fe1\u606f\u7684 messageId , \u53ef\u4ee5\u662f Source \u5b9e\u4f8b, BotMessage \u5b9e\u4f8b\u6216\u8005\u662f\u5355\u7eaf\u7684 int \u6574\u6570. required Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 @app_ctx_manager async def recallMessage ( self , target : Union [ MessageChain , Source , BotMessage , int ]) -> None : \"\"\"\u64a4\u56de\u7279\u5b9a\u7684\u6d88\u606f; \u64a4\u56de\u81ea\u5df1\u7684\u6d88\u606f\u9700\u8981\u5728\u53d1\u51fa\u540e 2 \u5206\u949f\u5185\u624d\u80fd\u6210\u529f\u64a4\u56de; \u5982\u679c\u5728\u7fa4\u7ec4\u5185, \u9700\u8981\u64a4\u56de\u4ed6\u4eba\u7684\u6d88\u606f\u5219\u9700\u8981\u7ba1\u7406\u5458/\u7fa4\u4e3b\u6743\u9650. Args: target (Union[Source, BotMessage, int]): \u7279\u5b9a\u4fe1\u606f\u7684 `messageId`, \\ \u53ef\u4ee5\u662f `Source` \u5b9e\u4f8b, `BotMessage` \u5b9e\u4f8b\u6216\u8005\u662f\u5355\u7eaf\u7684 int \u6574\u6570. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" if isinstance ( target , BotMessage ): target = target . messageId elif isinstance ( target , Source ): target = target . id elif isinstance ( target , MessageChain ): target = target . getFirst ( Source ) . id await self . adapter . call_api ( \"recall\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : target }, ) sendFriendMessage async \ud83d\udd17 sendFriendMessage ( target : Union [ Friend , int ], message : MessageChain , * , quote : Optional [ Union [ Source , int ]] = None ) -> BotMessage \u53d1\u9001\u6d88\u606f\u7ed9\u597d\u53cb, \u53ef\u4ee5\u6307\u5b9a\u56de\u590d\u7684\u6d88\u606f. Parameters: Name Type Description Default target Union [ Friend , int ] \u6307\u5b9a\u7684\u597d\u53cb required message MessageChain \u6709\u6548\u7684, \u53ef\u53d1\u9001\u7684(Sendable)\u6d88\u606f\u94fe. required quote Optional [ Union [ Source , int ]] \u9700\u8981\u56de\u590d\u7684\u6d88\u606f, \u4e0d\u8981\u5ffd\u89c6\u6211\u554a\u5582?!!, \u9ed8\u8ba4\u4e3a None. None Returns: Name Type Description BotMessage BotMessage \u5373\u5f53\u524d\u4f1a\u8bdd\u8d26\u53f7\u6240\u53d1\u51fa\u6d88\u606f\u7684\u5143\u6570\u636e, \u5185\u5305\u542b\u6709\u4e00 messageId \u5c5e\u6027, \u53ef\u7528\u4e8e\u56de\u590d. Source code in graia/ariadne/app.py 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 @app_ctx_manager async def sendFriendMessage ( self , target : Union [ Friend , int ], message : MessageChain , * , quote : Optional [ Union [ Source , int ]] = None , ) -> BotMessage : \"\"\"\u53d1\u9001\u6d88\u606f\u7ed9\u597d\u53cb, \u53ef\u4ee5\u6307\u5b9a\u56de\u590d\u7684\u6d88\u606f. Args: target (Union[Friend, int]): \u6307\u5b9a\u7684\u597d\u53cb message (MessageChain): \u6709\u6548\u7684, \u53ef\u53d1\u9001\u7684(Sendable)\u6d88\u606f\u94fe. quote (Optional[Union[Source, int]], optional): \u9700\u8981\u56de\u590d\u7684\u6d88\u606f, \u4e0d\u8981\u5ffd\u89c6\u6211\u554a\u5582?!!, \u9ed8\u8ba4\u4e3a None. Returns: BotMessage: \u5373\u5f53\u524d\u4f1a\u8bdd\u8d26\u53f7\u6240\u53d1\u51fa\u6d88\u606f\u7684\u5143\u6570\u636e, \u5185\u5305\u542b\u6709\u4e00 `messageId` \u5c5e\u6027, \u53ef\u7528\u4e8e\u56de\u590d. \"\"\" from .event.message import ActiveFriendMessage with enter_message_send_context ( UploadMethod . Friend ): new_msg = message . copy () new_msg . prepare () result = await self . adapter . call_api ( \"sendFriendMessage\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : int ( target ), \"messageChain\" : new_msg . dict ()[ \"__root__\" ], ** ({ \"quote\" : quote . id if isinstance ( quote , Source ) else quote } if quote else {}), }, ) event : ActiveFriendMessage = ActiveFriendMessage ( messageChain = MessageChain ([ Source ( id = result [ \"messageId\" ], time = datetime . now ())]) + message , subject = ( await RelationshipMixin . getFriend ( self , int ( target ))), # type: ignore ) with enter_context ( self , event ): self . broadcast . postEvent ( event ) if result [ \"messageId\" ] < 0 : logger . warning ( \"Failed to send message, your account may be blocked.\" ) return BotMessage ( messageId = result [ \"messageId\" ], origin = message ) sendGroupMessage async \ud83d\udd17 sendGroupMessage ( target : Union [ Group , Member , int ], message : MessageChain , * , quote : Optional [ Union [ Source , int ]] = None ) -> BotMessage \u53d1\u9001\u6d88\u606f\u5230\u7fa4\u7ec4\u5185, \u53ef\u4ee5\u6307\u5b9a\u56de\u590d\u7684\u6d88\u606f. Parameters: Name Type Description Default target Union [ Group , Member , int ] \u6307\u5b9a\u7684\u7fa4\u7ec4, \u53ef\u4ee5\u662f\u7fa4\u7ec4\u7684 ID \u4e5f\u53ef\u4ee5\u662f Group \u6216 Member \u5b9e\u4f8b. required message MessageChain \u6709\u6548\u7684, \u53ef\u53d1\u9001\u7684(Sendable)\u6d88\u606f\u94fe. required quote Optional [ Union [ Source , int ]] \u9700\u8981\u56de\u590d\u7684\u6d88\u606f, \u4e0d\u8981\u5ffd\u89c6\u6211\u554a\u5582?!!, \u9ed8\u8ba4\u4e3a None. None Returns: Name Type Description BotMessage BotMessage \u5373\u5f53\u524d\u4f1a\u8bdd\u8d26\u53f7\u6240\u53d1\u51fa\u6d88\u606f\u7684\u5143\u6570\u636e, \u5185\u5305\u542b\u6709\u4e00 messageId \u5c5e\u6027, \u53ef\u7528\u4e8e\u56de\u590d. Source code in graia/ariadne/app.py 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 @app_ctx_manager async def sendGroupMessage ( self , target : Union [ Group , Member , int ], message : MessageChain , * , quote : Optional [ Union [ Source , int ]] = None , ) -> BotMessage : \"\"\"\u53d1\u9001\u6d88\u606f\u5230\u7fa4\u7ec4\u5185, \u53ef\u4ee5\u6307\u5b9a\u56de\u590d\u7684\u6d88\u606f. Args: target (Union[Group, Member, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4, \u53ef\u4ee5\u662f\u7fa4\u7ec4\u7684 ID \u4e5f\u53ef\u4ee5\u662f Group \u6216 Member \u5b9e\u4f8b. message (MessageChain): \u6709\u6548\u7684, \u53ef\u53d1\u9001\u7684(Sendable)\u6d88\u606f\u94fe. quote (Optional[Union[Source, int]], optional): \u9700\u8981\u56de\u590d\u7684\u6d88\u606f, \u4e0d\u8981\u5ffd\u89c6\u6211\u554a\u5582?!!, \u9ed8\u8ba4\u4e3a None. Returns: BotMessage: \u5373\u5f53\u524d\u4f1a\u8bdd\u8d26\u53f7\u6240\u53d1\u51fa\u6d88\u606f\u7684\u5143\u6570\u636e, \u5185\u5305\u542b\u6709\u4e00 `messageId` \u5c5e\u6027, \u53ef\u7528\u4e8e\u56de\u590d. \"\"\" from .event.message import ActiveGroupMessage if isinstance ( target , Member ): target = target . group with enter_message_send_context ( UploadMethod . Group ): new_msg = message . copy () new_msg . prepare () result = await self . adapter . call_api ( \"sendGroupMessage\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : int ( target ), \"messageChain\" : new_msg . dict ()[ \"__root__\" ], ** ({ \"quote\" : quote . id if isinstance ( quote , Source ) else quote } if quote else {}), }, ) event : ActiveGroupMessage = ActiveGroupMessage ( messageChain = MessageChain ([ Source ( id = result [ \"messageId\" ], time = datetime . now ())]) + message , subject = ( await RelationshipMixin . getGroup ( self , int ( target ))), # type: ignore ) with enter_context ( self , event ): self . broadcast . postEvent ( event ) if result [ \"messageId\" ] < 0 : logger . warning ( \"Failed to send message, your account may be blocked.\" ) return BotMessage ( messageId = result [ \"messageId\" ], origin = message ) sendMessage async \ud83d\udd17 sendMessage ( target : Union [ MessageEvent , Group , Friend , Member ], message : MessageChain , * , quote : Union [ bool , int , Source , MessageChain ] = False , action : SendMessageActionProtocol [ 'T' ] = Ellipsis ) -> 'T' \u4f9d\u636e\u4f20\u5165\u7684 target \u81ea\u52a8\u53d1\u9001\u6d88\u606f. \u8bf7\u6ce8\u610f\u53d1\u9001\u7ed9\u7fa4\u6210\u5458\u65f6\u4f1a\u81ea\u52a8\u4f5c\u4e3a\u4e34\u65f6\u6d88\u606f\u53d1\u9001. Parameters: Name Type Description Default target Union [ MessageEvent , Group , Friend , Member ] \u6d88\u606f\u53d1\u9001\u76ee\u6807. required message MessageChain \u8981\u53d1\u9001\u7684\u6d88\u606f\u94fe. required quote Union [ bool , int , Source ] \u82e5\u4e3a\u5e03\u5c14\u7c7b\u578b, \u5219\u4f1a\u5c1d\u8bd5\u901a\u8fc7\u4f20\u5165\u5bf9\u8c61\u89e3\u6790\u8981\u56de\u590d\u7684\u6d88\u606f, \u5426\u5219\u4f1a\u89c6\u4e3a messageId \u5904\u7406. False action SendMessageCaller [ T ] \u6d88\u606f\u53d1\u9001\u7684\u5904\u7406 action, \u53ef\u4ee5\u5728 graia.ariadne.util.send \u67e5\u770b\u81ea\u5e26\u7684 action, \u672a\u4f20\u5165\u4f7f\u7528\u9ed8\u8ba4 action Ellipsis Returns: Type Description 'T' Union[T, R]: \u9ed8\u8ba4\u5b9e\u73b0\u4e3a BotMessage Source code in graia/ariadne/app.py 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 @app_ctx_manager async def sendMessage ( self , target : Union [ MessageEvent , Group , Friend , Member ], message : MessageChain , * , quote : Union [ bool , int , Source , MessageChain ] = False , action : SendMessageActionProtocol [ \"T\" ] = ... , ) -> \"T\" : \"\"\" \u4f9d\u636e\u4f20\u5165\u7684 `target` \u81ea\u52a8\u53d1\u9001\u6d88\u606f. \u8bf7\u6ce8\u610f\u53d1\u9001\u7ed9\u7fa4\u6210\u5458\u65f6\u4f1a\u81ea\u52a8\u4f5c\u4e3a\u4e34\u65f6\u6d88\u606f\u53d1\u9001. Args: target (Union[MessageEvent, Group, Friend, Member]): \u6d88\u606f\u53d1\u9001\u76ee\u6807. message (MessageChain): \u8981\u53d1\u9001\u7684\u6d88\u606f\u94fe. quote (Union[bool, int, Source]): \u82e5\u4e3a\u5e03\u5c14\u7c7b\u578b, \u5219\u4f1a\u5c1d\u8bd5\u901a\u8fc7\u4f20\u5165\u5bf9\u8c61\u89e3\u6790\u8981\u56de\u590d\u7684\u6d88\u606f, \\ \u5426\u5219\u4f1a\u89c6\u4e3a `messageId` \u5904\u7406. action (SendMessageCaller[T], optional): \u6d88\u606f\u53d1\u9001\u7684\u5904\u7406 action, \\ \u53ef\u4ee5\u5728 graia.ariadne.util.send \u67e5\u770b\u81ea\u5e26\u7684 action, \\ \u672a\u4f20\u5165\u4f7f\u7528\u9ed8\u8ba4 action Returns: Union[T, R]: \u9ed8\u8ba4\u5b9e\u73b0\u4e3a BotMessage \"\"\" action = action if action is not ... else self . default_send_action data : Dict [ Any , Any ] = { \"message\" : message } # quote if isinstance ( quote , bool ) and quote and isinstance ( target , MessageEvent ): data [ \"quote\" ] = target . messageChain . getFirst ( Source ) elif isinstance ( quote , ( int , Source )): data [ \"quote\" ] = quote elif isinstance ( quote , MessageChain ): data [ \"quote\" ] = quote . getFirst ( Source ) # target: MessageEvent if isinstance ( target , GroupMessage ): data [ \"target\" ] = target . sender . group elif isinstance ( target , ( FriendMessage , TempMessage )): data [ \"target\" ] = target . sender else : # target: sender data [ \"target\" ] = target send_data : SendMessageDict = SendMessageDict ( ** data ) # send message data = await action . param ( send_data ) # type: ignore try : if isinstance ( data [ \"target\" ], Friend ): val = await self . sendFriendMessage ( ** data ) elif isinstance ( data [ \"target\" ], Group ): val = await self . sendGroupMessage ( ** data ) elif isinstance ( data [ \"target\" ], Member ): val = await self . sendTempMessage ( ** data ) else : logger . warning ( f \"Unable to send { data [ 'message' ] } to { data [ 'target' ] } of type { type ( data [ 'target' ]) } \" ) return await action . result ( BotMessage ( messageId =- 1 , origin = data [ \"message\" ])) except Exception as e : e . send_data = send_data # type: ignore return await action . exception ( cast ( SendMessageException , e )) else : return await action . result ( val ) sendNudge async \ud83d\udd17 sendNudge ( target : Union [ Friend , Member , int ], group : Optional [ Union [ Group , int ]] = None ) -> None \u5411\u6307\u5b9a\u7684\u7fa4\u7ec4\u6210\u5458\u6216\u597d\u53cb\u53d1\u9001\u6233\u4e00\u6233\u6d88\u606f. Parameters: Name Type Description Default target Union [ Friend , Member ] \u53d1\u9001\u6233\u4e00\u6233\u7684\u76ee\u6807. required group Union [ Group , int ] \u53d1\u9001\u7684\u7fa4\u7ec4. None Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 @app_ctx_manager async def sendNudge ( self , target : Union [ Friend , Member , int ], group : Optional [ Union [ Group , int ]] = None ) -> None : \"\"\" \u5411\u6307\u5b9a\u7684\u7fa4\u7ec4\u6210\u5458\u6216\u597d\u53cb\u53d1\u9001\u6233\u4e00\u6233\u6d88\u606f. Args: target (Union[Friend, Member]): \u53d1\u9001\u6233\u4e00\u6233\u7684\u76ee\u6807. group (Union[Group, int], optional): \u53d1\u9001\u7684\u7fa4\u7ec4. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" target_id = target if isinstance ( target , int ) else target . id subject_id = ( group . id if isinstance ( group , Group ) else group ) or ( target . group . id if isinstance ( target , Member ) else target_id ) kind = \"Group\" if group or isinstance ( target , Member ) else \"Friend\" await self . adapter . call_api ( \"sendNudge\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : target_id , \"subject\" : subject_id , \"kind\" : kind , }, ) sendTempMessage async \ud83d\udd17 sendTempMessage ( target : Union [ Member , int ], message : MessageChain , group : Optional [ Union [ Group , int ]] = None , * , quote : Optional [ Union [ Source , int ]] = None ) -> BotMessage \u53d1\u9001\u4e34\u65f6\u4f1a\u8bdd\u7ed9\u7fa4\u7ec4\u4e2d\u7684\u7279\u5b9a\u6210\u5458, \u53ef\u6307\u5b9a\u56de\u590d\u7684\u6d88\u606f. Warning \u672c API \u5927\u6982\u7387\u4f1a\u5bfc\u81f4\u8d26\u53f7\u98ce\u63a7/\u51bb\u7ed3. \u8bf7\u8c28\u614e\u4f7f\u7528. Parameters: Name Type Description Default group Union [ Group , int ] \u6307\u5b9a\u7684\u7fa4\u7ec4, \u53ef\u4ee5\u662f\u7fa4\u7ec4\u7684 ID \u4e5f\u53ef\u4ee5\u662f Group \u5b9e\u4f8b. None target Union [ Member , int ] \u6307\u5b9a\u7684\u7fa4\u7ec4\u6210\u5458, \u53ef\u4ee5\u662f\u6210\u5458\u7684 ID \u4e5f\u53ef\u4ee5\u662f Member \u5b9e\u4f8b. required message MessageChain \u6709\u6548\u7684, \u53ef\u53d1\u9001\u7684(Sendable)\u6d88\u606f\u94fe. required quote Optional [ Union [ Source , int ]] \u9700\u8981\u56de\u590d\u7684\u6d88\u606f, \u4e0d\u8981\u5ffd\u89c6\u6211\u554a\u5582?!!, \u9ed8\u8ba4\u4e3a None. None Returns: Name Type Description BotMessage BotMessage \u5373\u5f53\u524d\u4f1a\u8bdd\u8d26\u53f7\u6240\u53d1\u51fa\u6d88\u606f\u7684\u5143\u6570\u636e, \u5185\u5305\u542b\u6709\u4e00 messageId \u5c5e\u6027, \u53ef\u7528\u4e8e\u56de\u590d. Source code in graia/ariadne/app.py 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 @app_ctx_manager async def sendTempMessage ( self , target : Union [ Member , int ], message : MessageChain , group : Optional [ Union [ Group , int ]] = None , * , quote : Optional [ Union [ Source , int ]] = None , ) -> BotMessage : \"\"\"\u53d1\u9001\u4e34\u65f6\u4f1a\u8bdd\u7ed9\u7fa4\u7ec4\u4e2d\u7684\u7279\u5b9a\u6210\u5458, \u53ef\u6307\u5b9a\u56de\u590d\u7684\u6d88\u606f. Warning: \u672c API \u5927\u6982\u7387\u4f1a\u5bfc\u81f4\u8d26\u53f7\u98ce\u63a7/\u51bb\u7ed3. \u8bf7\u8c28\u614e\u4f7f\u7528. Args: group (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4, \u53ef\u4ee5\u662f\u7fa4\u7ec4\u7684 ID \u4e5f\u53ef\u4ee5\u662f Group \u5b9e\u4f8b. target (Union[Member, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4\u6210\u5458, \u53ef\u4ee5\u662f\u6210\u5458\u7684 ID \u4e5f\u53ef\u4ee5\u662f Member \u5b9e\u4f8b. message (MessageChain): \u6709\u6548\u7684, \u53ef\u53d1\u9001\u7684(Sendable)\u6d88\u606f\u94fe. quote (Optional[Union[Source, int]], optional): \u9700\u8981\u56de\u590d\u7684\u6d88\u606f, \u4e0d\u8981\u5ffd\u89c6\u6211\u554a\u5582?!!, \u9ed8\u8ba4\u4e3a None. Returns: BotMessage: \u5373\u5f53\u524d\u4f1a\u8bdd\u8d26\u53f7\u6240\u53d1\u51fa\u6d88\u606f\u7684\u5143\u6570\u636e, \u5185\u5305\u542b\u6709\u4e00 `messageId` \u5c5e\u6027, \u53ef\u7528\u4e8e\u56de\u590d. \"\"\" from .event.message import ActiveTempMessage new_msg = message . copy () new_msg . prepare () group = target . group if ( isinstance ( target , Member ) and not group ) else group if not group : raise ValueError ( \"Missing necessary argument: group\" ) with enter_message_send_context ( UploadMethod . Temp ): result = await self . adapter . call_api ( \"sendTempMessage\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"group\" : int ( group ), \"qq\" : int ( target ), \"messageChain\" : new_msg . dict ()[ \"__root__\" ], ** ({ \"quote\" : quote . id if isinstance ( quote , Source ) else quote } if quote else {}), }, ) event : ActiveTempMessage = ActiveTempMessage ( messageChain = MessageChain ([ Source ( id = result [ \"messageId\" ], time = datetime . now ())]) + message , subject = ( await RelationshipMixin . getMember ( self , int ( group ), int ( target ))), # type: ignore ) with enter_context ( self , event ): self . broadcast . postEvent ( event ) if result [ \"messageId\" ] < 0 : logger . warning ( \"Failed to send message, your account may be limited.\" ) return BotMessage ( messageId = result [ \"messageId\" ], origin = message ) MultimediaMixin \ud83d\udd17 Bases: AriadneMixin \u7528\u4e8e\u4e0e\u591a\u5a92\u4f53\u4fe1\u606f\u4ea4\u4e92\u7684 Mixin \u7c7b. Source code in graia/ariadne/app.py 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 class MultimediaMixin ( AriadneMixin ): \"\"\"\u7528\u4e8e\u4e0e\u591a\u5a92\u4f53\u4fe1\u606f\u4ea4\u4e92\u7684 Mixin \u7c7b.\"\"\" @app_ctx_manager async def uploadImage ( self , data : Union [ bytes , io . IOBase , os . PathLike ], method : Union [ None , str , UploadMethod ] = None ) -> \"Image\" : \"\"\"\u4e0a\u4f20\u4e00\u5f20\u56fe\u7247\u5230\u8fdc\u7aef\u670d\u52a1\u5668, \u9700\u8981\u63d0\u4f9b: \u56fe\u7247\u7684\u539f\u59cb\u6570\u636e(bytes), \u56fe\u7247\u7684\u4e0a\u4f20\u7c7b\u578b. Args: data (Union[bytes, io.IOBase, os.PathLike]): \u56fe\u7247\u7684\u539f\u59cb\u6570\u636e method (str | UploadMethod, optional): \u56fe\u7247\u7684\u4e0a\u4f20\u7c7b\u578b, \u53ef\u4ece\u4e0a\u4e0b\u6587\u63a8\u65ad Returns: Image: \u751f\u6210\u7684\u56fe\u7247\u6d88\u606f\u5143\u7d20 \"\"\" from .context import upload_method_ctx from .message.element import Image method = str ( method or upload_method_ctx . get ()) . lower () if isinstance ( data , os . PathLike ): data = open ( data , \"rb\" ) result = await self . adapter . call_api ( \"uploadImage\" , CallMethod . MULTIPART , { \"sessionKey\" : self . session_key , \"type\" : method , \"img\" : data , }, ) return Image . parse_obj ( result ) @app_ctx_manager async def uploadVoice ( self , data : Union [ bytes , io . IOBase , os . PathLike ], method : Union [ None , str , UploadMethod ] = None ) -> \"Voice\" : \"\"\"\u4e0a\u4f20\u8bed\u97f3\u5230\u8fdc\u7aef\u670d\u52a1\u5668, \u9700\u8981\u63d0\u4f9b: \u8bed\u97f3\u7684\u539f\u59cb\u6570\u636e(bytes), \u8bed\u97f3\u7684\u4e0a\u4f20\u7c7b\u578b. Args: data (Union[bytes, io.IOBase, os.PathLike]): \u8bed\u97f3\u7684\u539f\u59cb\u6570\u636e method (str | UploadMethod, optional): \u8bed\u97f3\u7684\u4e0a\u4f20\u7c7b\u578b, \u53ef\u4ece\u4e0a\u4e0b\u6587\u63a8\u65ad Returns: Voice: \u751f\u6210\u7684\u8bed\u97f3\u6d88\u606f\u5143\u7d20 \"\"\" from .context import upload_method_ctx from .message.element import Voice method = str ( method or upload_method_ctx . get ()) . lower () if isinstance ( data , os . PathLike ): data = open ( data , \"rb\" ) result = await self . adapter . call_api ( \"uploadVoice\" , CallMethod . MULTIPART , { \"sessionKey\" : self . session_key , \"type\" : method , \"voice\" : data , }, ) return Voice . parse_obj ( result ) uploadImage async \ud83d\udd17 uploadImage ( data : Union [ bytes , io . IOBase , os . PathLike ], method : Union [ None , str , UploadMethod ] = None ) -> 'Image' \u4e0a\u4f20\u4e00\u5f20\u56fe\u7247\u5230\u8fdc\u7aef\u670d\u52a1\u5668, \u9700\u8981\u63d0\u4f9b: \u56fe\u7247\u7684\u539f\u59cb\u6570\u636e(bytes), \u56fe\u7247\u7684\u4e0a\u4f20\u7c7b\u578b. Parameters: Name Type Description Default data Union [ bytes , io . IOBase , os . PathLike ] \u56fe\u7247\u7684\u539f\u59cb\u6570\u636e required method str | UploadMethod \u56fe\u7247\u7684\u4e0a\u4f20\u7c7b\u578b, \u53ef\u4ece\u4e0a\u4e0b\u6587\u63a8\u65ad None Returns: Name Type Description Image 'Image' \u751f\u6210\u7684\u56fe\u7247\u6d88\u606f\u5143\u7d20 Source code in graia/ariadne/app.py 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 @app_ctx_manager async def uploadImage ( self , data : Union [ bytes , io . IOBase , os . PathLike ], method : Union [ None , str , UploadMethod ] = None ) -> \"Image\" : \"\"\"\u4e0a\u4f20\u4e00\u5f20\u56fe\u7247\u5230\u8fdc\u7aef\u670d\u52a1\u5668, \u9700\u8981\u63d0\u4f9b: \u56fe\u7247\u7684\u539f\u59cb\u6570\u636e(bytes), \u56fe\u7247\u7684\u4e0a\u4f20\u7c7b\u578b. Args: data (Union[bytes, io.IOBase, os.PathLike]): \u56fe\u7247\u7684\u539f\u59cb\u6570\u636e method (str | UploadMethod, optional): \u56fe\u7247\u7684\u4e0a\u4f20\u7c7b\u578b, \u53ef\u4ece\u4e0a\u4e0b\u6587\u63a8\u65ad Returns: Image: \u751f\u6210\u7684\u56fe\u7247\u6d88\u606f\u5143\u7d20 \"\"\" from .context import upload_method_ctx from .message.element import Image method = str ( method or upload_method_ctx . get ()) . lower () if isinstance ( data , os . PathLike ): data = open ( data , \"rb\" ) result = await self . adapter . call_api ( \"uploadImage\" , CallMethod . MULTIPART , { \"sessionKey\" : self . session_key , \"type\" : method , \"img\" : data , }, ) return Image . parse_obj ( result ) uploadVoice async \ud83d\udd17 uploadVoice ( data : Union [ bytes , io . IOBase , os . PathLike ], method : Union [ None , str , UploadMethod ] = None ) -> 'Voice' \u4e0a\u4f20\u8bed\u97f3\u5230\u8fdc\u7aef\u670d\u52a1\u5668, \u9700\u8981\u63d0\u4f9b: \u8bed\u97f3\u7684\u539f\u59cb\u6570\u636e(bytes), \u8bed\u97f3\u7684\u4e0a\u4f20\u7c7b\u578b. Parameters: Name Type Description Default data Union [ bytes , io . IOBase , os . PathLike ] \u8bed\u97f3\u7684\u539f\u59cb\u6570\u636e required method str | UploadMethod \u8bed\u97f3\u7684\u4e0a\u4f20\u7c7b\u578b, \u53ef\u4ece\u4e0a\u4e0b\u6587\u63a8\u65ad None Returns: Name Type Description Voice 'Voice' \u751f\u6210\u7684\u8bed\u97f3\u6d88\u606f\u5143\u7d20 Source code in graia/ariadne/app.py 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 @app_ctx_manager async def uploadVoice ( self , data : Union [ bytes , io . IOBase , os . PathLike ], method : Union [ None , str , UploadMethod ] = None ) -> \"Voice\" : \"\"\"\u4e0a\u4f20\u8bed\u97f3\u5230\u8fdc\u7aef\u670d\u52a1\u5668, \u9700\u8981\u63d0\u4f9b: \u8bed\u97f3\u7684\u539f\u59cb\u6570\u636e(bytes), \u8bed\u97f3\u7684\u4e0a\u4f20\u7c7b\u578b. Args: data (Union[bytes, io.IOBase, os.PathLike]): \u8bed\u97f3\u7684\u539f\u59cb\u6570\u636e method (str | UploadMethod, optional): \u8bed\u97f3\u7684\u4e0a\u4f20\u7c7b\u578b, \u53ef\u4ece\u4e0a\u4e0b\u6587\u63a8\u65ad Returns: Voice: \u751f\u6210\u7684\u8bed\u97f3\u6d88\u606f\u5143\u7d20 \"\"\" from .context import upload_method_ctx from .message.element import Voice method = str ( method or upload_method_ctx . get ()) . lower () if isinstance ( data , os . PathLike ): data = open ( data , \"rb\" ) result = await self . adapter . call_api ( \"uploadVoice\" , CallMethod . MULTIPART , { \"sessionKey\" : self . session_key , \"type\" : method , \"voice\" : data , }, ) return Voice . parse_obj ( result ) OperationMixin \ud83d\udd17 Bases: AriadneMixin \u5728\u5404\u79cd\u5173\u7cfb\u6a21\u578b\u4e2d\u8fdb\u884c\u64cd\u4f5c\u7684 Mixin \u7c7b. Source code in graia/ariadne/app.pyclass OperationMixin ( AriadneMixin ): \"\"\"\u5728\u5404\u79cd\u5173\u7cfb\u6a21\u578b\u4e2d\u8fdb\u884c\u64cd\u4f5c\u7684 Mixin \u7c7b.\"\"\" @app_ctx_manager async def deleteFriend ( self , target : Union [ Friend , int ]) -> None : \"\"\" \u5220\u9664\u6307\u5b9a\u597d\u53cb. Args: target (Union[Friend, int]): \u597d\u53cb\u5bf9\u8c61\u6216QQ\u53f7. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" friend_id = target . id if isinstance ( target , Friend ) else target await self . adapter . call_api ( \"deleteFriend\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : friend_id , }, ) @app_ctx_manager async def muteMember ( self , group : Union [ Group , int ], member : Union [ Member , int ], time : int ) -> None : \"\"\" \u5728\u6307\u5b9a\u7fa4\u7ec4\u7981\u8a00\u6307\u5b9a\u7fa4\u6210\u5458; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b); `time` \u4e0d\u5f97\u5927\u4e8e `30*24*60*60=2592000` \u6216\u5c0f\u4e8e `0`, \u5426\u5219\u4f1a\u81ea\u52a8\u4fee\u6b63; \u5f53 `time` \u5c0f\u4e8e\u7b49\u4e8e `0` \u65f6, \u4e0d\u4f1a\u89e6\u53d1\u7981\u8a00\u64cd\u4f5c; \u7981\u8a00\u5bf9\u8c61\u6781\u6709\u53ef\u80fd\u89e6\u53d1 `PermissionError`, \u5728\u8fd9\u4e4b\u524d\u8bf7\u5bf9\u5176\u8fdb\u884c\u5224\u65ad! Args: group (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4 member (Union[Member, int]): \u6307\u5b9a\u7684\u7fa4\u6210\u5458(\u53ea\u80fd\u662f\u666e\u901a\u7fa4\u5458\u6216\u8005\u662f\u7ba1\u7406\u5458, \u540e\u8005\u5219\u8981\u6c42\u7fa4\u4e3b\u6743\u9650) time (int): \u7981\u8a00\u4e8b\u4ef6, \u5355\u4f4d\u79d2, \u4fee\u6b63\u89c4\u5219: `0 < time <= 2592000` Raises: PermissionError: \u6ca1\u6709\u76f8\u5e94\u64cd\u4f5c\u6743\u9650. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" time = max ( 0 , min ( time , 2592000 )) # Fix time parameter if not time : return await self . adapter . call_api ( \"mute\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , \"memberId\" : member . id if isinstance ( member , Member ) else member , \"time\" : time , }, ) @app_ctx_manager async def unmuteMember ( self , group : Union [ Group , int ], member : Union [ Member , int ]) -> None : \"\"\" \u5728\u6307\u5b9a\u7fa4\u7ec4\u89e3\u9664\u5bf9\u6307\u5b9a\u7fa4\u6210\u5458\u7684\u7981\u8a00; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b); \u5bf9\u8c61\u6781\u6709\u53ef\u80fd\u89e6\u53d1 `PermissionError`, \u5728\u8fd9\u4e4b\u524d\u8bf7\u5bf9\u5176\u8fdb\u884c\u5224\u65ad! Args: group (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4 member (Union[Member, int]): \u6307\u5b9a\u7684\u7fa4\u6210\u5458(\u53ea\u80fd\u662f\u666e\u901a\u7fa4\u5458\u6216\u8005\u662f\u7ba1\u7406\u5458, \u540e\u8005\u5219\u8981\u6c42\u7fa4\u4e3b\u6743\u9650) Raises: PermissionError: \u6ca1\u6709\u76f8\u5e94\u64cd\u4f5c\u6743\u9650. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . adapter . call_api ( \"unmute\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , \"memberId\" : member . id if isinstance ( member , Member ) else member , }, ) @app_ctx_manager async def muteAll ( self , group : Union [ Group , int ]) -> None : \"\"\"\u5728\u6307\u5b9a\u7fa4\u7ec4\u5f00\u542f\u5168\u4f53\u7981\u8a00, \u9700\u8981\u5f53\u524d\u4f1a\u8bdd\u8d26\u53f7\u5728\u6307\u5b9a\u7fa4\u4e3b\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458\u6216\u8005\u7fa4\u4e3b\u6743\u9650) Args: group (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . adapter . call_api ( \"muteAll\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , }, ) @app_ctx_manager async def unmuteAll ( self , group : Union [ Group , int ]) -> None : \"\"\"\u5728\u6307\u5b9a\u7fa4\u7ec4\u5173\u95ed\u5168\u4f53\u7981\u8a00, \u9700\u8981\u5f53\u524d\u4f1a\u8bdd\u8d26\u53f7\u5728\u6307\u5b9a\u7fa4\u4e3b\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458\u6216\u8005\u7fa4\u4e3b\u6743\u9650) Args: group (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . adapter . call_api ( \"unmuteAll\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , }, ) @app_ctx_manager async def kickMember ( self , group : Union [ Group , int ], member : Union [ Member , int ], message : str = \"\" ) -> None : \"\"\" \u5c06\u76ee\u6807\u7fa4\u7ec4\u6210\u5458\u4ece\u6307\u5b9a\u7fa4\u7ec4\u8e22\u51fa; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b) Args: group (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4 member (Union[Member, int]): \u6307\u5b9a\u7684\u7fa4\u6210\u5458(\u53ea\u80fd\u662f\u666e\u901a\u7fa4\u5458\u6216\u8005\u662f\u7ba1\u7406\u5458, \u540e\u8005\u5219\u8981\u6c42\u7fa4\u4e3b\u6743\u9650) message (str, optional): \u5bf9\u8e22\u51fa\u5bf9\u8c61\u8981\u5c55\u793a\u7684\u6d88\u606f Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . adapter . call_api ( \"kick\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , \"memberId\" : member . id if isinstance ( member , Member ) else member , \"msg\" : message , }, ) @app_ctx_manager async def quitGroup ( self , group : Union [ Group , int ]) -> None : \"\"\" \u4e3b\u52a8\u4ece\u6307\u5b9a\u7fa4\u7ec4\u9000\u51fa Args: group (Union[Group, int]): \u9700\u8981\u9000\u51fa\u7684\u6307\u5b9a\u7fa4\u7ec4 Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . adapter . call_api ( \"quit\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , }, ) @app_ctx_manager async def setEssence ( self , target : Union [ Source , BotMessage , int ]) -> None : \"\"\" \u6dfb\u52a0\u6307\u5b9a\u6d88\u606f\u4e3a\u7fa4\u7cbe\u534e\u6d88\u606f; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b). \u8bf7\u81ea\u884c\u5224\u65ad\u6d88\u606f\u6765\u6e90\u662f\u5426\u4e3a\u7fa4\u7ec4. Args: target (Union[Source, BotMessage, int]): \u7279\u5b9a\u4fe1\u606f\u7684 `messageId`, \\ \u53ef\u4ee5\u662f `Source` \u5b9e\u4f8b, `BotMessage` \u5b9e\u4f8b\u6216\u8005\u662f\u5355\u7eaf\u7684 int \u6574\u6570. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" if isinstance ( target , BotMessage ): target = target . messageId elif isinstance ( target , Source ): target = target . id await self . adapter . call_api ( \"setEssence\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : target }, ) @app_ctx_manager async def getGroupConfig ( self , group : Union [ Group , int ]) -> GroupConfig : \"\"\" \u83b7\u53d6\u6307\u5b9a\u7fa4\u7ec4\u7684\u7fa4\u8bbe\u7f6e Args: group (Union[Group, int]): \u9700\u8981\u83b7\u53d6\u7fa4\u8bbe\u7f6e\u7684\u6307\u5b9a\u7fa4\u7ec4 Returns: GroupConfig: \u6307\u5b9a\u7fa4\u7ec4\u7684\u7fa4\u8bbe\u7f6e \"\"\" result = await self . adapter . call_api ( \"groupConfig\" , CallMethod . RESTGET , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , }, ) return GroupConfig . parse_obj ( result ) @app_ctx_manager async def modifyGroupConfig ( self , group : Union [ Group , int ], config : GroupConfig ) -> None : \"\"\"\u4fee\u6539\u6307\u5b9a\u7fa4\u7ec4\u7684\u7fa4\u8bbe\u7f6e; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b). Args: group (Union[Group, int]): \u9700\u8981\u4fee\u6539\u7fa4\u8bbe\u7f6e\u7684\u6307\u5b9a\u7fa4\u7ec4 config (GroupConfig): \u7ecf\u8fc7\u4fee\u6539\u540e\u7684\u7fa4\u8bbe\u7f6e Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . adapter . call_api ( \"groupConfig\" , CallMethod . RESTPOST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , \"config\" : config . dict ( exclude_unset = True , exclude_none = True ), }, ) @app_ctx_manager async def modifyMemberInfo ( self , member : Union [ Member , int ], info : MemberInfo , group : Optional [ Union [ Group , int ]] = None , ) -> None : \"\"\" \u4fee\u6539\u6307\u5b9a\u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b). Args: member (Union[Member, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4\u6210\u5458, \u53ef\u4e3a Member \u5b9e\u4f8b, \u82e5\u524d\u8bbe\u6210\u7acb, \u5219\u4e0d\u9700\u8981\u63d0\u4f9b group. info (MemberInfo): \u5df2\u4fee\u6539\u7684\u6307\u5b9a\u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001 group (Optional[Union[Group, int]], optional): \u5982\u679c member \u4e3a Member \u5b9e\u4f8b, \u5219\u4e0d\u9700\u8981\u63d0\u4f9b\u672c\u9879, \u5426\u5219\u9700\u8981. \u9ed8\u8ba4\u4e3a None. Raises: TypeError: \u63d0\u4f9b\u4e86\u9519\u8bef\u7684\u53c2\u6570, \u9605\u8bfb\u6709\u5173\u6587\u6863\u5f97\u5230\u95ee\u9898\u539f\u56e0 Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" if group is None : if isinstance ( member , Member ): group = member . group else : raise TypeError ( \"you should give a Member instance if you cannot give a Group instance to me.\" ) await self . adapter . call_api ( \"memberInfo\" , CallMethod . RESTPOST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , \"memberId\" : member . id if isinstance ( member , Member ) else member , \"info\" : info . dict ( exclude_none = True , exclude_unset = True , by_alias = True ), }, ) @app_ctx_manager async def modifyMemberAdmin ( self , assign : bool , member : Union [ Member , int ], group : Optional [ Union [ Group , int ]] = None , ) -> None : \"\"\" \u4fee\u6539\u4e00\u4f4d\u7fa4\u7ec4\u6210\u5458\u7ba1\u7406\u5458\u6743\u9650; \u9700\u8981\u6709\u76f8\u5e94\u6743\u9650(\u7fa4\u4e3b) Args: member (Union[Member, int]): \u6307\u5b9a\u7fa4\u6210\u5458, \u53ef\u4e3a Member \u5b9e\u4f8b, \u82e5\u524d\u8bbe\u6210\u7acb, \u5219\u4e0d\u9700\u8981\u63d0\u4f9b group. assign (bool): \u662f\u5426\u8bbe\u7f6e\u7fa4\u6210\u5458\u4e3a\u7ba1\u7406\u5458. group (Optional[Union[Group, int]], optional): \u5982\u679c member \u4e3a Member \u5b9e\u4f8b, \u5219\u4e0d\u9700\u8981\u63d0\u4f9b\u672c\u9879, \u5426\u5219\u9700\u8981. \u9ed8\u8ba4\u4e3a None. Raises: TypeError: \u63d0\u4f9b\u4e86\u9519\u8bef\u7684\u53c2\u6570, \u9605\u8bfb\u6709\u5173\u6587\u6863\u5f97\u5230\u95ee\u9898\u539f\u56e0 PermissionError: \u6ca1\u6709\u76f8\u5e94\u64cd\u4f5c\u6743\u9650. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" if group is None : if isinstance ( member , Member ): group = member . group else : raise TypeError ( \"you should give a Member instance if you cannot give a Group instance to me.\" ) await self . adapter . call_api ( \"memberAdmin\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , \"memberId\" : member . id if isinstance ( member , Member ) else member , \"assign\" : assign , }, ) @app_ctx_manager async def registerCommand ( self , name : str , alias : Iterable [ str ] = (), usage : str = \"\" , description : str = \"\" ) -> None : \"\"\"\u6ce8\u518c\u4e00\u4e2a\u6307\u4ee4 Args: name (str): \u6307\u4ee4\u540d alias (Iterable[str], optional): \u6307\u4ee4\u522b\u540d. Defaults to (). usage (str, optional): \u4f7f\u7528\u65b9\u6cd5\u5b57\u7b26\u4e32. Defaults to \"\". description (str, optional): \u63cf\u8ff0\u5b57\u7b26\u4e32. Defaults to \"\". \"\"\" await self . adapter . call_api ( \"cmd/register\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"name\" : name , \"alias\" : alias , \"usage\" : usage , \"description\" : description , }, ) @app_ctx_manager async def executeCommand ( self , command : Union [ str , Iterable [ str ]]) -> None : \"\"\"\u6267\u884c\u4e00\u6761\u6307\u4ee4 Args: command (Union[str, Iterable[str]]): \u6307\u4ee4\u5b57\u7b26\u4e32. \"\"\" if isinstance ( command , str ): command = command . split ( \" \" ) await self . adapter . call_api ( \"cmd/execute\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"command\" : command } ) deleteFriend async \ud83d\udd17 deleteFriend ( target : Union [ Friend , int ]) -> None \u5220\u9664\u6307\u5b9a\u597d\u53cb. Parameters: Name Type Description Default target Union [ Friend , int ] \u597d\u53cb\u5bf9\u8c61\u6216QQ\u53f7. required Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 @app_ctx_manager async def deleteFriend ( self , target : Union [ Friend , int ]) -> None : \"\"\" \u5220\u9664\u6307\u5b9a\u597d\u53cb. Args: target (Union[Friend, int]): \u597d\u53cb\u5bf9\u8c61\u6216QQ\u53f7. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" friend_id = target . id if isinstance ( target , Friend ) else target await self . adapter . call_api ( \"deleteFriend\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : friend_id , }, ) executeCommand async \ud83d\udd17 executeCommand ( command : Union [ str , Iterable [ str ]]) -> None \u6267\u884c\u4e00\u6761\u6307\u4ee4 Parameters: Name Type Description Default command Union [ str , Iterable [ str ]] \u6307\u4ee4\u5b57\u7b26\u4e32. required Source code in graia/ariadne/app.py 914 915 916 917 918 919 920 921 922 923 924 925 926 @app_ctx_manager async def executeCommand ( self , command : Union [ str , Iterable [ str ]]) -> None : \"\"\"\u6267\u884c\u4e00\u6761\u6307\u4ee4 Args: command (Union[str, Iterable[str]]): \u6307\u4ee4\u5b57\u7b26\u4e32. \"\"\" if isinstance ( command , str ): command = command . split ( \" \" ) await self . adapter . call_api ( \"cmd/execute\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"command\" : command } ) getGroupConfig async \ud83d\udd17 getGroupConfig ( group : Union [ Group , int ]) -> GroupConfig \u83b7\u53d6\u6307\u5b9a\u7fa4\u7ec4\u7684\u7fa4\u8bbe\u7f6e Parameters: Name Type Description Default group Union [ Group , int ] \u9700\u8981\u83b7\u53d6\u7fa4\u8bbe\u7f6e\u7684\u6307\u5b9a\u7fa4\u7ec4 required Returns: Name Type Description GroupConfig GroupConfig \u6307\u5b9a\u7fa4\u7ec4\u7684\u7fa4\u8bbe\u7f6e Source code in graia/ariadne/app.py 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 @app_ctx_manager async def getGroupConfig ( self , group : Union [ Group , int ]) -> GroupConfig : \"\"\" \u83b7\u53d6\u6307\u5b9a\u7fa4\u7ec4\u7684\u7fa4\u8bbe\u7f6e Args: group (Union[Group, int]): \u9700\u8981\u83b7\u53d6\u7fa4\u8bbe\u7f6e\u7684\u6307\u5b9a\u7fa4\u7ec4 Returns: GroupConfig: \u6307\u5b9a\u7fa4\u7ec4\u7684\u7fa4\u8bbe\u7f6e \"\"\" result = await self . adapter . call_api ( \"groupConfig\" , CallMethod . RESTGET , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , }, ) return GroupConfig . parse_obj ( result ) kickMember async \ud83d\udd17 kickMember ( group : Union [ Group , int ], member : Union [ Member , int ], message : str = '' ) -> None \u5c06\u76ee\u6807\u7fa4\u7ec4\u6210\u5458\u4ece\u6307\u5b9a\u7fa4\u7ec4\u8e22\u51fa; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b) Parameters: Name Type Description Default group Union [ Group , int ] \u6307\u5b9a\u7684\u7fa4\u7ec4 required member Union [ Member , int ] \u6307\u5b9a\u7684\u7fa4\u6210\u5458(\u53ea\u80fd\u662f\u666e\u901a\u7fa4\u5458\u6216\u8005\u662f\u7ba1\u7406\u5458, \u540e\u8005\u5219\u8981\u6c42\u7fa4\u4e3b\u6743\u9650) required message str \u5bf9\u8e22\u51fa\u5bf9\u8c61\u8981\u5c55\u793a\u7684\u6d88\u606f '' Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 @app_ctx_manager async def kickMember ( self , group : Union [ Group , int ], member : Union [ Member , int ], message : str = \"\" ) -> None : \"\"\" \u5c06\u76ee\u6807\u7fa4\u7ec4\u6210\u5458\u4ece\u6307\u5b9a\u7fa4\u7ec4\u8e22\u51fa; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b) Args: group (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4 member (Union[Member, int]): \u6307\u5b9a\u7684\u7fa4\u6210\u5458(\u53ea\u80fd\u662f\u666e\u901a\u7fa4\u5458\u6216\u8005\u662f\u7ba1\u7406\u5458, \u540e\u8005\u5219\u8981\u6c42\u7fa4\u4e3b\u6743\u9650) message (str, optional): \u5bf9\u8e22\u51fa\u5bf9\u8c61\u8981\u5c55\u793a\u7684\u6d88\u606f Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . adapter . call_api ( \"kick\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , \"memberId\" : member . id if isinstance ( member , Member ) else member , \"msg\" : message , }, ) modifyGroupConfig async \ud83d\udd17 modifyGroupConfig ( group : Union [ Group , int ], config : GroupConfig ) -> None \u4fee\u6539\u6307\u5b9a\u7fa4\u7ec4\u7684\u7fa4\u8bbe\u7f6e; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b). Parameters: Name Type Description Default group Union [ Group , int ] \u9700\u8981\u4fee\u6539\u7fa4\u8bbe\u7f6e\u7684\u6307\u5b9a\u7fa4\u7ec4 required config GroupConfig \u7ecf\u8fc7\u4fee\u6539\u540e\u7684\u7fa4\u8bbe\u7f6e required Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 @app_ctx_manager async def modifyGroupConfig ( self , group : Union [ Group , int ], config : GroupConfig ) -> None : \"\"\"\u4fee\u6539\u6307\u5b9a\u7fa4\u7ec4\u7684\u7fa4\u8bbe\u7f6e; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b). Args: group (Union[Group, int]): \u9700\u8981\u4fee\u6539\u7fa4\u8bbe\u7f6e\u7684\u6307\u5b9a\u7fa4\u7ec4 config (GroupConfig): \u7ecf\u8fc7\u4fee\u6539\u540e\u7684\u7fa4\u8bbe\u7f6e Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . adapter . call_api ( \"groupConfig\" , CallMethod . RESTPOST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , \"config\" : config . dict ( exclude_unset = True , exclude_none = True ), }, ) modifyMemberAdmin async \ud83d\udd17 modifyMemberAdmin ( assign : bool , member : Union [ Member , int ], group : Optional [ Union [ Group , int ]] = None ) -> None \u4fee\u6539\u4e00\u4f4d\u7fa4\u7ec4\u6210\u5458\u7ba1\u7406\u5458\u6743\u9650; \u9700\u8981\u6709\u76f8\u5e94\u6743\u9650(\u7fa4\u4e3b) Parameters: Name Type Description Default member Union [ Member , int ] \u6307\u5b9a\u7fa4\u6210\u5458, \u53ef\u4e3a Member \u5b9e\u4f8b, \u82e5\u524d\u8bbe\u6210\u7acb, \u5219\u4e0d\u9700\u8981\u63d0\u4f9b group. required assign bool \u662f\u5426\u8bbe\u7f6e\u7fa4\u6210\u5458\u4e3a\u7ba1\u7406\u5458. required group Optional [ Union [ Group , int ]] \u5982\u679c member \u4e3a Member \u5b9e\u4f8b, \u5219\u4e0d\u9700\u8981\u63d0\u4f9b\u672c\u9879, \u5426\u5219\u9700\u8981. \u9ed8\u8ba4\u4e3a None. None Raises: Type Description TypeError \u63d0\u4f9b\u4e86\u9519\u8bef\u7684\u53c2\u6570, \u9605\u8bfb\u6709\u5173\u6587\u6863\u5f97\u5230\u95ee\u9898\u539f\u56e0 PermissionError \u6ca1\u6709\u76f8\u5e94\u64cd\u4f5c\u6743\u9650. Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 @app_ctx_manager async def modifyMemberAdmin ( self , assign : bool , member : Union [ Member , int ], group : Optional [ Union [ Group , int ]] = None , ) -> None : \"\"\" \u4fee\u6539\u4e00\u4f4d\u7fa4\u7ec4\u6210\u5458\u7ba1\u7406\u5458\u6743\u9650; \u9700\u8981\u6709\u76f8\u5e94\u6743\u9650(\u7fa4\u4e3b) Args: member (Union[Member, int]): \u6307\u5b9a\u7fa4\u6210\u5458, \u53ef\u4e3a Member \u5b9e\u4f8b, \u82e5\u524d\u8bbe\u6210\u7acb, \u5219\u4e0d\u9700\u8981\u63d0\u4f9b group. assign (bool): \u662f\u5426\u8bbe\u7f6e\u7fa4\u6210\u5458\u4e3a\u7ba1\u7406\u5458. group (Optional[Union[Group, int]], optional): \u5982\u679c member \u4e3a Member \u5b9e\u4f8b, \u5219\u4e0d\u9700\u8981\u63d0\u4f9b\u672c\u9879, \u5426\u5219\u9700\u8981. \u9ed8\u8ba4\u4e3a None. Raises: TypeError: \u63d0\u4f9b\u4e86\u9519\u8bef\u7684\u53c2\u6570, \u9605\u8bfb\u6709\u5173\u6587\u6863\u5f97\u5230\u95ee\u9898\u539f\u56e0 PermissionError: \u6ca1\u6709\u76f8\u5e94\u64cd\u4f5c\u6743\u9650. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" if group is None : if isinstance ( member , Member ): group = member . group else : raise TypeError ( \"you should give a Member instance if you cannot give a Group instance to me.\" ) await self . adapter . call_api ( \"memberAdmin\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , \"memberId\" : member . id if isinstance ( member , Member ) else member , \"assign\" : assign , }, ) modifyMemberInfo async \ud83d\udd17 modifyMemberInfo ( member : Union [ Member , int ], info : MemberInfo , group : Optional [ Union [ Group , int ]] = None ) -> None \u4fee\u6539\u6307\u5b9a\u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b). Parameters: Name Type Description Default member Union [ Member , int ] \u6307\u5b9a\u7684\u7fa4\u7ec4\u6210\u5458, \u53ef\u4e3a Member \u5b9e\u4f8b, \u82e5\u524d\u8bbe\u6210\u7acb, \u5219\u4e0d\u9700\u8981\u63d0\u4f9b group. required info MemberInfo \u5df2\u4fee\u6539\u7684\u6307\u5b9a\u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001 required group Optional [ Union [ Group , int ]] \u5982\u679c member \u4e3a Member \u5b9e\u4f8b, \u5219\u4e0d\u9700\u8981\u63d0\u4f9b\u672c\u9879, \u5426\u5219\u9700\u8981. \u9ed8\u8ba4\u4e3a None. None Raises: Type Description TypeError \u63d0\u4f9b\u4e86\u9519\u8bef\u7684\u53c2\u6570, \u9605\u8bfb\u6709\u5173\u6587\u6863\u5f97\u5230\u95ee\u9898\u539f\u56e0 Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 @app_ctx_manager async def modifyMemberInfo ( self , member : Union [ Member , int ], info : MemberInfo , group : Optional [ Union [ Group , int ]] = None , ) -> None : \"\"\" \u4fee\u6539\u6307\u5b9a\u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b). Args: member (Union[Member, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4\u6210\u5458, \u53ef\u4e3a Member \u5b9e\u4f8b, \u82e5\u524d\u8bbe\u6210\u7acb, \u5219\u4e0d\u9700\u8981\u63d0\u4f9b group. info (MemberInfo): \u5df2\u4fee\u6539\u7684\u6307\u5b9a\u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001 group (Optional[Union[Group, int]], optional): \u5982\u679c member \u4e3a Member \u5b9e\u4f8b, \u5219\u4e0d\u9700\u8981\u63d0\u4f9b\u672c\u9879, \u5426\u5219\u9700\u8981. \u9ed8\u8ba4\u4e3a None. Raises: TypeError: \u63d0\u4f9b\u4e86\u9519\u8bef\u7684\u53c2\u6570, \u9605\u8bfb\u6709\u5173\u6587\u6863\u5f97\u5230\u95ee\u9898\u539f\u56e0 Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" if group is None : if isinstance ( member , Member ): group = member . group else : raise TypeError ( \"you should give a Member instance if you cannot give a Group instance to me.\" ) await self . adapter . call_api ( \"memberInfo\" , CallMethod . RESTPOST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , \"memberId\" : member . id if isinstance ( member , Member ) else member , \"info\" : info . dict ( exclude_none = True , exclude_unset = True , by_alias = True ), }, ) muteAll async \ud83d\udd17 muteAll ( group : Union [ Group , int ]) -> None \u5728\u6307\u5b9a\u7fa4\u7ec4\u5f00\u542f\u5168\u4f53\u7981\u8a00, \u9700\u8981\u5f53\u524d\u4f1a\u8bdd\u8d26\u53f7\u5728\u6307\u5b9a\u7fa4\u4e3b\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458\u6216\u8005\u7fa4\u4e3b\u6743\u9650) Parameters: Name Type Description Default group Union [ Group , int ] \u6307\u5b9a\u7684\u7fa4\u7ec4. required Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 @app_ctx_manager async def muteAll ( self , group : Union [ Group , int ]) -> None : \"\"\"\u5728\u6307\u5b9a\u7fa4\u7ec4\u5f00\u542f\u5168\u4f53\u7981\u8a00, \u9700\u8981\u5f53\u524d\u4f1a\u8bdd\u8d26\u53f7\u5728\u6307\u5b9a\u7fa4\u4e3b\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458\u6216\u8005\u7fa4\u4e3b\u6743\u9650) Args: group (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . adapter . call_api ( \"muteAll\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , }, ) muteMember async \ud83d\udd17 muteMember ( group : Union [ Group , int ], member : Union [ Member , int ], time : int ) -> None \u5728\u6307\u5b9a\u7fa4\u7ec4\u7981\u8a00\u6307\u5b9a\u7fa4\u6210\u5458; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b); time \u4e0d\u5f97\u5927\u4e8e 30*24*60*60=2592000 \u6216\u5c0f\u4e8e 0 , \u5426\u5219\u4f1a\u81ea\u52a8\u4fee\u6b63; \u5f53 time \u5c0f\u4e8e\u7b49\u4e8e 0 \u65f6, \u4e0d\u4f1a\u89e6\u53d1\u7981\u8a00\u64cd\u4f5c; \u7981\u8a00\u5bf9\u8c61\u6781\u6709\u53ef\u80fd\u89e6\u53d1 PermissionError , \u5728\u8fd9\u4e4b\u524d\u8bf7\u5bf9\u5176\u8fdb\u884c\u5224\u65ad! Parameters: Name Type Description Default group Union [ Group , int ] \u6307\u5b9a\u7684\u7fa4\u7ec4 required member Union [ Member , int ] \u6307\u5b9a\u7684\u7fa4\u6210\u5458(\u53ea\u80fd\u662f\u666e\u901a\u7fa4\u5458\u6216\u8005\u662f\u7ba1\u7406\u5458, \u540e\u8005\u5219\u8981\u6c42\u7fa4\u4e3b\u6743\u9650) required time int \u7981\u8a00\u4e8b\u4ef6, \u5355\u4f4d\u79d2, \u4fee\u6b63\u89c4\u5219: 0 < time <= 2592000 required Raises: Type Description PermissionError \u6ca1\u6709\u76f8\u5e94\u64cd\u4f5c\u6743\u9650. Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 @app_ctx_manager async def muteMember ( self , group : Union [ Group , int ], member : Union [ Member , int ], time : int ) -> None : \"\"\" \u5728\u6307\u5b9a\u7fa4\u7ec4\u7981\u8a00\u6307\u5b9a\u7fa4\u6210\u5458; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b); `time` \u4e0d\u5f97\u5927\u4e8e `30*24*60*60=2592000` \u6216\u5c0f\u4e8e `0`, \u5426\u5219\u4f1a\u81ea\u52a8\u4fee\u6b63; \u5f53 `time` \u5c0f\u4e8e\u7b49\u4e8e `0` \u65f6, \u4e0d\u4f1a\u89e6\u53d1\u7981\u8a00\u64cd\u4f5c; \u7981\u8a00\u5bf9\u8c61\u6781\u6709\u53ef\u80fd\u89e6\u53d1 `PermissionError`, \u5728\u8fd9\u4e4b\u524d\u8bf7\u5bf9\u5176\u8fdb\u884c\u5224\u65ad! Args: group (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4 member (Union[Member, int]): \u6307\u5b9a\u7684\u7fa4\u6210\u5458(\u53ea\u80fd\u662f\u666e\u901a\u7fa4\u5458\u6216\u8005\u662f\u7ba1\u7406\u5458, \u540e\u8005\u5219\u8981\u6c42\u7fa4\u4e3b\u6743\u9650) time (int): \u7981\u8a00\u4e8b\u4ef6, \u5355\u4f4d\u79d2, \u4fee\u6b63\u89c4\u5219: `0 < time <= 2592000` Raises: PermissionError: \u6ca1\u6709\u76f8\u5e94\u64cd\u4f5c\u6743\u9650. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" time = max ( 0 , min ( time , 2592000 )) # Fix time parameter if not time : return await self . adapter . call_api ( \"mute\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , \"memberId\" : member . id if isinstance ( member , Member ) else member , \"time\" : time , }, ) quitGroup async \ud83d\udd17 quitGroup ( group : Union [ Group , int ]) -> None \u4e3b\u52a8\u4ece\u6307\u5b9a\u7fa4\u7ec4\u9000\u51fa Parameters: Name Type Description Default group Union [ Group , int ] \u9700\u8981\u9000\u51fa\u7684\u6307\u5b9a\u7fa4\u7ec4 required Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 @app_ctx_manager async def quitGroup ( self , group : Union [ Group , int ]) -> None : \"\"\" \u4e3b\u52a8\u4ece\u6307\u5b9a\u7fa4\u7ec4\u9000\u51fa Args: group (Union[Group, int]): \u9700\u8981\u9000\u51fa\u7684\u6307\u5b9a\u7fa4\u7ec4 Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . adapter . call_api ( \"quit\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , }, ) registerCommand async \ud83d\udd17 registerCommand ( name : str , alias : Iterable [ str ] = (), usage : str = '' , description : str = '' ) -> None \u6ce8\u518c\u4e00\u4e2a\u6307\u4ee4 Parameters: Name Type Description Default name str \u6307\u4ee4\u540d required alias Iterable [ str ] \u6307\u4ee4\u522b\u540d. Defaults to (). () usage str \u4f7f\u7528\u65b9\u6cd5\u5b57\u7b26\u4e32. Defaults to \"\". '' description str \u63cf\u8ff0\u5b57\u7b26\u4e32. Defaults to \"\". '' Source code in graia/ariadne/app.py 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 @app_ctx_manager async def registerCommand ( self , name : str , alias : Iterable [ str ] = (), usage : str = \"\" , description : str = \"\" ) -> None : \"\"\"\u6ce8\u518c\u4e00\u4e2a\u6307\u4ee4 Args: name (str): \u6307\u4ee4\u540d alias (Iterable[str], optional): \u6307\u4ee4\u522b\u540d. Defaults to (). usage (str, optional): \u4f7f\u7528\u65b9\u6cd5\u5b57\u7b26\u4e32. Defaults to \"\". description (str, optional): \u63cf\u8ff0\u5b57\u7b26\u4e32. Defaults to \"\". \"\"\" await self . adapter . call_api ( \"cmd/register\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"name\" : name , \"alias\" : alias , \"usage\" : usage , \"description\" : description , }, ) setEssence async \ud83d\udd17 setEssence ( target : Union [ Source , BotMessage , int ]) -> None \u6dfb\u52a0\u6307\u5b9a\u6d88\u606f\u4e3a\u7fa4\u7cbe\u534e\u6d88\u606f; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b). \u8bf7\u81ea\u884c\u5224\u65ad\u6d88\u606f\u6765\u6e90\u662f\u5426\u4e3a\u7fa4\u7ec4. Parameters: Name Type Description Default target Union [ Source , BotMessage , int ] \u7279\u5b9a\u4fe1\u606f\u7684 messageId , \u53ef\u4ee5\u662f Source \u5b9e\u4f8b, BotMessage \u5b9e\u4f8b\u6216\u8005\u662f\u5355\u7eaf\u7684 int \u6574\u6570. required Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 @app_ctx_manager async def setEssence ( self , target : Union [ Source , BotMessage , int ]) -> None : \"\"\" \u6dfb\u52a0\u6307\u5b9a\u6d88\u606f\u4e3a\u7fa4\u7cbe\u534e\u6d88\u606f; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b). \u8bf7\u81ea\u884c\u5224\u65ad\u6d88\u606f\u6765\u6e90\u662f\u5426\u4e3a\u7fa4\u7ec4. Args: target (Union[Source, BotMessage, int]): \u7279\u5b9a\u4fe1\u606f\u7684 `messageId`, \\ \u53ef\u4ee5\u662f `Source` \u5b9e\u4f8b, `BotMessage` \u5b9e\u4f8b\u6216\u8005\u662f\u5355\u7eaf\u7684 int \u6574\u6570. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" if isinstance ( target , BotMessage ): target = target . messageId elif isinstance ( target , Source ): target = target . id await self . adapter . call_api ( \"setEssence\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : target }, ) unmuteAll async \ud83d\udd17 unmuteAll ( group : Union [ Group , int ]) -> None \u5728\u6307\u5b9a\u7fa4\u7ec4\u5173\u95ed\u5168\u4f53\u7981\u8a00, \u9700\u8981\u5f53\u524d\u4f1a\u8bdd\u8d26\u53f7\u5728\u6307\u5b9a\u7fa4\u4e3b\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458\u6216\u8005\u7fa4\u4e3b\u6743\u9650) Parameters: Name Type Description Default group Union [ Group , int ] \u6307\u5b9a\u7684\u7fa4\u7ec4. required Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 @app_ctx_manager async def unmuteAll ( self , group : Union [ Group , int ]) -> None : \"\"\"\u5728\u6307\u5b9a\u7fa4\u7ec4\u5173\u95ed\u5168\u4f53\u7981\u8a00, \u9700\u8981\u5f53\u524d\u4f1a\u8bdd\u8d26\u53f7\u5728\u6307\u5b9a\u7fa4\u4e3b\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458\u6216\u8005\u7fa4\u4e3b\u6743\u9650) Args: group (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . adapter . call_api ( \"unmuteAll\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , }, ) unmuteMember async \ud83d\udd17 unmuteMember ( group : Union [ Group , int ], member : Union [ Member , int ]) -> None \u5728\u6307\u5b9a\u7fa4\u7ec4\u89e3\u9664\u5bf9\u6307\u5b9a\u7fa4\u6210\u5458\u7684\u7981\u8a00; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b); \u5bf9\u8c61\u6781\u6709\u53ef\u80fd\u89e6\u53d1 PermissionError , \u5728\u8fd9\u4e4b\u524d\u8bf7\u5bf9\u5176\u8fdb\u884c\u5224\u65ad! Parameters: Name Type Description Default group Union [ Group , int ] \u6307\u5b9a\u7684\u7fa4\u7ec4 required member Union [ Member , int ] \u6307\u5b9a\u7684\u7fa4\u6210\u5458(\u53ea\u80fd\u662f\u666e\u901a\u7fa4\u5458\u6216\u8005\u662f\u7ba1\u7406\u5458, \u540e\u8005\u5219\u8981\u6c42\u7fa4\u4e3b\u6743\u9650) required Raises: Type Description PermissionError \u6ca1\u6709\u76f8\u5e94\u64cd\u4f5c\u6743\u9650. Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 @app_ctx_manager async def unmuteMember ( self , group : Union [ Group , int ], member : Union [ Member , int ]) -> None : \"\"\" \u5728\u6307\u5b9a\u7fa4\u7ec4\u89e3\u9664\u5bf9\u6307\u5b9a\u7fa4\u6210\u5458\u7684\u7981\u8a00; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b); \u5bf9\u8c61\u6781\u6709\u53ef\u80fd\u89e6\u53d1 `PermissionError`, \u5728\u8fd9\u4e4b\u524d\u8bf7\u5bf9\u5176\u8fdb\u884c\u5224\u65ad! Args: group (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4 member (Union[Member, int]): \u6307\u5b9a\u7684\u7fa4\u6210\u5458(\u53ea\u80fd\u662f\u666e\u901a\u7fa4\u5458\u6216\u8005\u662f\u7ba1\u7406\u5458, \u540e\u8005\u5219\u8981\u6c42\u7fa4\u4e3b\u6743\u9650) Raises: PermissionError: \u6ca1\u6709\u76f8\u5e94\u64cd\u4f5c\u6743\u9650. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . adapter . call_api ( \"unmute\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , \"memberId\" : member . id if isinstance ( member , Member ) else member , }, ) RelationshipMixin \ud83d\udd17 Bases: AriadneMixin \u83b7\u53d6\u5404\u79cd\u5173\u7cfb\u6a21\u578b\u7684 Mixin \u7c7b. Source code in graia/ariadne/app.pyclass RelationshipMixin ( AriadneMixin ): \"\"\"\u83b7\u53d6\u5404\u79cd\u5173\u7cfb\u6a21\u578b\u7684 Mixin \u7c7b.\"\"\" @app_ctx_manager async def getFriendList ( self ) -> List [ Friend ]: \"\"\"\u83b7\u53d6\u672c\u5b9e\u4f8b\u8d26\u53f7\u6dfb\u52a0\u7684\u597d\u53cb\u5217\u8868. Returns: List[Friend]: \u6dfb\u52a0\u7684\u597d\u53cb. \"\"\" result = await self . adapter . call_api ( \"friendList\" , CallMethod . GET , { \"sessionKey\" : self . session_key }, ) return [ Friend . parse_obj ( i ) for i in result ] @app_ctx_manager async def getFriend ( self , friend_id : int ) -> Optional [ Friend ]: \"\"\"\u4ece\u5df2\u77e5\u7684\u53ef\u80fd\u7684\u597d\u53cb ID, \u83b7\u53d6 Friend \u5b9e\u4f8b. Args: friend_id (int): \u5df2\u77e5\u7684\u53ef\u80fd\u7684\u597d\u53cb ID. Returns: Friend: \u64cd\u4f5c\u6210\u529f, \u4f60\u5f97\u5230\u4e86\u4f60\u5e94\u5f97\u7684. None: \u672a\u80fd\u83b7\u53d6\u5230. \"\"\" data = await self . getFriendList () for i in data : if i . id == friend_id : return i @app_ctx_manager async def getGroupList ( self ) -> List [ Group ]: \"\"\"\u83b7\u53d6\u672c\u5b9e\u4f8b\u8d26\u53f7\u52a0\u5165\u7684\u7fa4\u7ec4\u5217\u8868. Returns: List[Group]: \u52a0\u5165\u7684\u7fa4\u7ec4. \"\"\" result = await self . adapter . call_api ( \"groupList\" , CallMethod . GET , { \"sessionKey\" : self . session_key }, ) return [ Group . parse_obj ( i ) for i in result ] @app_ctx_manager async def getGroup ( self , group_id : int ) -> Optional [ Group ]: \"\"\"\u5c1d\u8bd5\u4ece\u5df2\u77e5\u7684\u7fa4\u7ec4\u552f\u4e00ID, \u83b7\u53d6\u5bf9\u5e94\u7fa4\u7ec4\u7684\u4fe1\u606f; \u53ef\u80fd\u8fd4\u56de None. Args: group_id (int): \u5c1d\u8bd5\u83b7\u53d6\u7684\u7fa4\u7ec4\u7684\u552f\u4e00 ID. Returns: Group: \u64cd\u4f5c\u6210\u529f, \u4f60\u5f97\u5230\u4e86\u4f60\u5e94\u5f97\u7684. None: \u672a\u80fd\u83b7\u53d6\u5230. \"\"\" data = await self . getGroupList () for i in data : if i . id == group_id : return i @app_ctx_manager async def getMemberList ( self , group : Union [ Group , int ]) -> List [ Member ]: \"\"\"\u5c1d\u8bd5\u4ece\u5df2\u77e5\u7684\u7fa4\u7ec4\u83b7\u53d6\u5bf9\u5e94\u6210\u5458\u7684\u5217\u8868. Args: group (Union[Group, int]): \u5df2\u77e5\u7684\u7fa4\u7ec4 Returns: List[Member]: \u7fa4\u5185\u6210\u5458\u7684 Member \u5bf9\u8c61. \"\"\" result = await self . adapter . call_api ( \"memberList\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , }, ) return [ Member . parse_obj ( i ) for i in result ] @app_ctx_manager async def getMember ( self , group : Union [ Group , int ], member_id : int ) -> Member : \"\"\"\u5c1d\u8bd5\u4ece\u5df2\u77e5\u7684\u7fa4\u7ec4\u552f\u4e00 ID \u548c\u5df2\u77e5\u7684\u7fa4\u7ec4\u6210\u5458\u7684 ID, \u83b7\u53d6\u5bf9\u5e94\u6210\u5458\u7684\u4fe1\u606f. Args: group (Union[Group, int]): \u5df2\u77e5\u7684\u7fa4\u7ec4\u552f\u4e00 ID member_id (int): \u5df2\u77e5\u7684\u7fa4\u7ec4\u6210\u5458\u7684 ID Returns: Member: \u5bf9\u5e94\u7fa4\u6210\u5458\u5bf9\u8c61 \"\"\" result = await self . adapter . call_api ( \"memberInfo\" , CallMethod . RESTGET , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , \"memberId\" : member_id , }, ) return Member . parse_obj ( result ) @app_ctx_manager async def getBotProfile ( self ) -> Profile : \"\"\"\u83b7\u53d6\u672c\u5b9e\u4f8b\u7ed1\u5b9a\u8d26\u53f7\u7684 Profile. Returns: Profile: \u627e\u5230\u7684 Profile. \"\"\" result = await self . adapter . call_api ( \"botProfile\" , CallMethod . GET , { \"sessionKey\" : self . session_key }, ) return Profile . parse_obj ( result ) @app_ctx_manager async def getUserProfile ( self , target : Union [ int , Friend , Member , Stranger ]) -> Profile : \"\"\"\u83b7\u53d6\u4efb\u610f QQ \u7528\u6237\u7684 Profile. Args: target (Union[int, Friend, Member, Stranger]): \u4efb\u610f QQ \u7528\u6237. Returns: Profile: \u627e\u5230\u7684 Profile. \"\"\" result = await self . adapter . call_api ( \"userProfile\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"target\" : int ( target ), }, ) return Profile . parse_obj ( result ) @app_ctx_manager async def getFriendProfile ( self , friend : Union [ Friend , int ]) -> Profile : \"\"\"\u83b7\u53d6\u597d\u53cb\u7684 Profile. Args: friend (Union[Friend, int]): \u67e5\u627e\u7684\u597d\u53cb. Returns: Profile: \u627e\u5230\u7684 Profile. \"\"\" result = await self . adapter . call_api ( \"friendProfile\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"target\" : int ( friend ), }, ) return Profile . parse_obj ( result ) @app_ctx_manager async def getMemberProfile ( self , member : Union [ Member , int ], group : Optional [ Union [ Group , int ]] = None ) -> Profile : \"\"\"\u83b7\u53d6\u7fa4\u5458\u7684 Profile. Args: member (Union[Member, int]): \u7fa4\u5458\u5bf9\u8c61. group (Optional[Union[Group, int]], optional): \u68c0\u7d22\u7684\u7fa4. \u63d0\u4f9b Member \u5f62\u5f0f\u7684 member \u53c2\u6570\u540e\u53ef\u4ee5\u4e0d\u63d0\u4f9b. Raises: ValueError: \u6ca1\u6709\u63d0\u4f9b\u53ef\u68c0\u7d22\u7684\u7fa4 ID. Returns: Profile: \u627e\u5230\u7684 Profile \u5bf9\u8c61. \"\"\" member_id = member . id if isinstance ( member , Member ) else member group = group or ( member . group if isinstance ( member , Member ) else None ) group_id = group . id if isinstance ( group , Group ) else group if not group_id : raise ValueError ( \"Missing necessary argument: group\" ) result = await self . adapter . call_api ( \"memberProfile\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"target\" : group_id , \"memberId\" : member_id }, ) return Profile . parse_obj ( result ) getBotProfile async \ud83d\udd17 getBotProfile () -> Profile \u83b7\u53d6\u672c\u5b9e\u4f8b\u7ed1\u5b9a\u8d26\u53f7\u7684 Profile. Returns: Name Type Description Profile Profile \u627e\u5230\u7684 Profile. Source code in graia/ariadne/app.py 494 495 496 497 498 499 500 501 502 503 504 505 506 @app_ctx_manager async def getBotProfile ( self ) -> Profile : \"\"\"\u83b7\u53d6\u672c\u5b9e\u4f8b\u7ed1\u5b9a\u8d26\u53f7\u7684 Profile. Returns: Profile: \u627e\u5230\u7684 Profile. \"\"\" result = await self . adapter . call_api ( \"botProfile\" , CallMethod . GET , { \"sessionKey\" : self . session_key }, ) return Profile . parse_obj ( result ) getFriend async \ud83d\udd17 getFriend ( friend_id : int ) -> Optional [ Friend ] \u4ece\u5df2\u77e5\u7684\u53ef\u80fd\u7684\u597d\u53cb ID, \u83b7\u53d6 Friend \u5b9e\u4f8b. Parameters: Name Type Description Default friend_id int \u5df2\u77e5\u7684\u53ef\u80fd\u7684\u597d\u53cb ID. required Returns: Name Type Description Friend Optional [ Friend ] \u64cd\u4f5c\u6210\u529f, \u4f60\u5f97\u5230\u4e86\u4f60\u5e94\u5f97\u7684. None Optional [ Friend ] \u672a\u80fd\u83b7\u53d6\u5230. Source code in graia/ariadne/app.py 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 @app_ctx_manager async def getFriend ( self , friend_id : int ) -> Optional [ Friend ]: \"\"\"\u4ece\u5df2\u77e5\u7684\u53ef\u80fd\u7684\u597d\u53cb ID, \u83b7\u53d6 Friend \u5b9e\u4f8b. Args: friend_id (int): \u5df2\u77e5\u7684\u53ef\u80fd\u7684\u597d\u53cb ID. Returns: Friend: \u64cd\u4f5c\u6210\u529f, \u4f60\u5f97\u5230\u4e86\u4f60\u5e94\u5f97\u7684. None: \u672a\u80fd\u83b7\u53d6\u5230. \"\"\" data = await self . getFriendList () for i in data : if i . id == friend_id : return i getFriendList async \ud83d\udd17 getFriendList () -> List [ Friend ] \u83b7\u53d6\u672c\u5b9e\u4f8b\u8d26\u53f7\u6dfb\u52a0\u7684\u597d\u53cb\u5217\u8868. Returns: Type Description List [ Friend ] List[Friend]: \u6dfb\u52a0\u7684\u597d\u53cb. Source code in graia/ariadne/app.py 391 392 393 394 395 396 397 398 399 400 401 402 403 @app_ctx_manager async def getFriendList ( self ) -> List [ Friend ]: \"\"\"\u83b7\u53d6\u672c\u5b9e\u4f8b\u8d26\u53f7\u6dfb\u52a0\u7684\u597d\u53cb\u5217\u8868. Returns: List[Friend]: \u6dfb\u52a0\u7684\u597d\u53cb. \"\"\" result = await self . adapter . call_api ( \"friendList\" , CallMethod . GET , { \"sessionKey\" : self . session_key }, ) return [ Friend . parse_obj ( i ) for i in result ] getFriendProfile async \ud83d\udd17 getFriendProfile ( friend : Union [ Friend , int ]) -> Profile \u83b7\u53d6\u597d\u53cb\u7684 Profile. Parameters: Name Type Description Default friend Union [ Friend , int ] \u67e5\u627e\u7684\u597d\u53cb. required Returns: Name Type Description Profile Profile \u627e\u5230\u7684 Profile. Source code in graia/ariadne/app.py 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 @app_ctx_manager async def getFriendProfile ( self , friend : Union [ Friend , int ]) -> Profile : \"\"\"\u83b7\u53d6\u597d\u53cb\u7684 Profile. Args: friend (Union[Friend, int]): \u67e5\u627e\u7684\u597d\u53cb. Returns: Profile: \u627e\u5230\u7684 Profile. \"\"\" result = await self . adapter . call_api ( \"friendProfile\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"target\" : int ( friend ), }, ) return Profile . parse_obj ( result ) getGroup async \ud83d\udd17 getGroup ( group_id : int ) -> Optional [ Group ] \u5c1d\u8bd5\u4ece\u5df2\u77e5\u7684\u7fa4\u7ec4\u552f\u4e00ID, \u83b7\u53d6\u5bf9\u5e94\u7fa4\u7ec4\u7684\u4fe1\u606f; \u53ef\u80fd\u8fd4\u56de None. Parameters: Name Type Description Default group_id int \u5c1d\u8bd5\u83b7\u53d6\u7684\u7fa4\u7ec4\u7684\u552f\u4e00 ID. required Returns: Name Type Description Group Optional [ Group ] \u64cd\u4f5c\u6210\u529f, \u4f60\u5f97\u5230\u4e86\u4f60\u5e94\u5f97\u7684. None Optional [ Group ] \u672a\u80fd\u83b7\u53d6\u5230. Source code in graia/ariadne/app.py 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 @app_ctx_manager async def getGroup ( self , group_id : int ) -> Optional [ Group ]: \"\"\"\u5c1d\u8bd5\u4ece\u5df2\u77e5\u7684\u7fa4\u7ec4\u552f\u4e00ID, \u83b7\u53d6\u5bf9\u5e94\u7fa4\u7ec4\u7684\u4fe1\u606f; \u53ef\u80fd\u8fd4\u56de None. Args: group_id (int): \u5c1d\u8bd5\u83b7\u53d6\u7684\u7fa4\u7ec4\u7684\u552f\u4e00 ID. Returns: Group: \u64cd\u4f5c\u6210\u529f, \u4f60\u5f97\u5230\u4e86\u4f60\u5e94\u5f97\u7684. None: \u672a\u80fd\u83b7\u53d6\u5230. \"\"\" data = await self . getGroupList () for i in data : if i . id == group_id : return i getGroupList async \ud83d\udd17 getGroupList () -> List [ Group ] \u83b7\u53d6\u672c\u5b9e\u4f8b\u8d26\u53f7\u52a0\u5165\u7684\u7fa4\u7ec4\u5217\u8868. Returns: Type Description List [ Group ] List[Group]: \u52a0\u5165\u7684\u7fa4\u7ec4. Source code in graia/ariadne/app.py 421 422 423 424 425 426 427 428 429 430 431 432 433 @app_ctx_manager async def getGroupList ( self ) -> List [ Group ]: \"\"\"\u83b7\u53d6\u672c\u5b9e\u4f8b\u8d26\u53f7\u52a0\u5165\u7684\u7fa4\u7ec4\u5217\u8868. Returns: List[Group]: \u52a0\u5165\u7684\u7fa4\u7ec4. \"\"\" result = await self . adapter . call_api ( \"groupList\" , CallMethod . GET , { \"sessionKey\" : self . session_key }, ) return [ Group . parse_obj ( i ) for i in result ] getMember async \ud83d\udd17 getMember ( group : Union [ Group , int ], member_id : int ) -> Member \u5c1d\u8bd5\u4ece\u5df2\u77e5\u7684\u7fa4\u7ec4\u552f\u4e00 ID \u548c\u5df2\u77e5\u7684\u7fa4\u7ec4\u6210\u5458\u7684 ID, \u83b7\u53d6\u5bf9\u5e94\u6210\u5458\u7684\u4fe1\u606f. Parameters: Name Type Description Default group Union [ Group , int ] \u5df2\u77e5\u7684\u7fa4\u7ec4\u552f\u4e00 ID required member_id int \u5df2\u77e5\u7684\u7fa4\u7ec4\u6210\u5458\u7684 ID required Returns: Name Type Description Member Member \u5bf9\u5e94\u7fa4\u6210\u5458\u5bf9\u8c61 Source code in graia/ariadne/app.py 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 @app_ctx_manager async def getMember ( self , group : Union [ Group , int ], member_id : int ) -> Member : \"\"\"\u5c1d\u8bd5\u4ece\u5df2\u77e5\u7684\u7fa4\u7ec4\u552f\u4e00 ID \u548c\u5df2\u77e5\u7684\u7fa4\u7ec4\u6210\u5458\u7684 ID, \u83b7\u53d6\u5bf9\u5e94\u6210\u5458\u7684\u4fe1\u606f. Args: group (Union[Group, int]): \u5df2\u77e5\u7684\u7fa4\u7ec4\u552f\u4e00 ID member_id (int): \u5df2\u77e5\u7684\u7fa4\u7ec4\u6210\u5458\u7684 ID Returns: Member: \u5bf9\u5e94\u7fa4\u6210\u5458\u5bf9\u8c61 \"\"\" result = await self . adapter . call_api ( \"memberInfo\" , CallMethod . RESTGET , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , \"memberId\" : member_id , }, ) return Member . parse_obj ( result ) getMemberList async \ud83d\udd17 getMemberList ( group : Union [ Group , int ]) -> List [ Member ] \u5c1d\u8bd5\u4ece\u5df2\u77e5\u7684\u7fa4\u7ec4\u83b7\u53d6\u5bf9\u5e94\u6210\u5458\u7684\u5217\u8868. Parameters: Name Type Description Default group Union [ Group , int ] \u5df2\u77e5\u7684\u7fa4\u7ec4 required Returns: Type Description List [ Member ] List[Member]: \u7fa4\u5185\u6210\u5458\u7684 Member \u5bf9\u8c61. Source code in graia/ariadne/app.py 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 @app_ctx_manager async def getMemberList ( self , group : Union [ Group , int ]) -> List [ Member ]: \"\"\"\u5c1d\u8bd5\u4ece\u5df2\u77e5\u7684\u7fa4\u7ec4\u83b7\u53d6\u5bf9\u5e94\u6210\u5458\u7684\u5217\u8868. Args: group (Union[Group, int]): \u5df2\u77e5\u7684\u7fa4\u7ec4 Returns: List[Member]: \u7fa4\u5185\u6210\u5458\u7684 Member \u5bf9\u8c61. \"\"\" result = await self . adapter . call_api ( \"memberList\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , }, ) return [ Member . parse_obj ( i ) for i in result ] getMemberProfile async \ud83d\udd17 getMemberProfile ( member : Union [ Member , int ], group : Optional [ Union [ Group , int ]] = None ) -> Profile \u83b7\u53d6\u7fa4\u5458\u7684 Profile. Parameters: Name Type Description Default member Union [ Member , int ] \u7fa4\u5458\u5bf9\u8c61. required group Optional [ Union [ Group , int ]] \u68c0\u7d22\u7684\u7fa4. \u63d0\u4f9b Member \u5f62\u5f0f\u7684 member \u53c2\u6570\u540e\u53ef\u4ee5\u4e0d\u63d0\u4f9b. None Raises: Type Description ValueError \u6ca1\u6709\u63d0\u4f9b\u53ef\u68c0\u7d22\u7684\u7fa4 ID. Returns: Name Type Description Profile Profile \u627e\u5230\u7684 Profile \u5bf9\u8c61. Source code in graia/ariadne/app.py 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 @app_ctx_manager async def getMemberProfile ( self , member : Union [ Member , int ], group : Optional [ Union [ Group , int ]] = None ) -> Profile : \"\"\"\u83b7\u53d6\u7fa4\u5458\u7684 Profile. Args: member (Union[Member, int]): \u7fa4\u5458\u5bf9\u8c61. group (Optional[Union[Group, int]], optional): \u68c0\u7d22\u7684\u7fa4. \u63d0\u4f9b Member \u5f62\u5f0f\u7684 member \u53c2\u6570\u540e\u53ef\u4ee5\u4e0d\u63d0\u4f9b. Raises: ValueError: \u6ca1\u6709\u63d0\u4f9b\u53ef\u68c0\u7d22\u7684\u7fa4 ID. Returns: Profile: \u627e\u5230\u7684 Profile \u5bf9\u8c61. \"\"\" member_id = member . id if isinstance ( member , Member ) else member group = group or ( member . group if isinstance ( member , Member ) else None ) group_id = group . id if isinstance ( group , Group ) else group if not group_id : raise ValueError ( \"Missing necessary argument: group\" ) result = await self . adapter . call_api ( \"memberProfile\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"target\" : group_id , \"memberId\" : member_id }, ) return Profile . parse_obj ( result ) getUserProfile async \ud83d\udd17 getUserProfile ( target : Union [ int , Friend , Member , Stranger ]) -> Profile \u83b7\u53d6\u4efb\u610f QQ \u7528\u6237\u7684 Profile. Parameters: Name Type Description Default target Union [ int , Friend , Member , Stranger ] \u4efb\u610f QQ \u7528\u6237. required Returns: Name Type Description Profile Profile \u627e\u5230\u7684 Profile. Source code in graia/ariadne/app.py 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 @app_ctx_manager async def getUserProfile ( self , target : Union [ int , Friend , Member , Stranger ]) -> Profile : \"\"\"\u83b7\u53d6\u4efb\u610f QQ \u7528\u6237\u7684 Profile. Args: target (Union[int, Friend, Member, Stranger]): \u4efb\u610f QQ \u7528\u6237. Returns: Profile: \u627e\u5230\u7684 Profile. \"\"\" result = await self . adapter . call_api ( \"userProfile\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"target\" : int ( target ), }, ) return Profile . parse_obj ( result )","title":"app"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.AnnouncementMixin","text":"Bases: AriadneMixin \u5bf9\u7fa4\u516c\u544a\u8fdb\u884c\u64cd\u4f5c\u7684 Mixin \u7c7b. Source code in graia/ariadne/app.py 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 class AnnouncementMixin ( AriadneMixin ): \"\"\"\u5bf9\u7fa4\u516c\u544a\u8fdb\u884c\u64cd\u4f5c\u7684 Mixin \u7c7b.\"\"\" async def getAnnouncementIterator ( self , target : Union [ Group , int ], offset : int = 0 , size : int = 10 , ) -> AsyncGenerator [ Announcement , None ]: \"\"\" \u83b7\u53d6\u7fa4\u516c\u544a\u5217\u8868. Args: target (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4. offset (Optional[int], optional): \u8d77\u59cb\u504f\u79fb\u91cf. \u9ed8\u8ba4\u4e3a 0. size (Optional[int], optional): \u5217\u8868\u5927\u5c0f. \u9ed8\u8ba4\u4e3a 10. Returns: AsyncGenerator[Announcement, None]: \u5217\u51fa\u7fa4\u7ec4\u4e0b\u6240\u6709\u7684\u516c\u544a. \"\"\" target = int ( target ) current_offset = offset cache : List [ Announcement ] = [] while True : for announcement in cache : yield announcement cache = await self . getAnnouncementList ( target , current_offset , size ) current_offset += len ( cache ) if not cache : return @app_ctx_manager async def getAnnouncementList ( self , target : Union [ Group , int ], offset : Optional [ int ] = 0 , size : Optional [ int ] = 10 , ) -> List [ Announcement ]: \"\"\" \u5217\u51fa\u7fa4\u7ec4\u4e0b\u6240\u6709\u7684\u516c\u544a. Args: target (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4. offset (Optional[int], optional): \u8d77\u59cb\u504f\u79fb\u91cf. \u9ed8\u8ba4\u4e3a 0. size (Optional[int], optional): \u5217\u8868\u5927\u5c0f. \u9ed8\u8ba4\u4e3a 10. Returns: List[Announcement]: \u5217\u51fa\u7fa4\u7ec4\u4e0b\u6240\u6709\u7684\u516c\u544a. \"\"\" result = await self . adapter . call_api ( \"anno/list\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"target\" : int ( target ), \"offset\" : offset , \"size\" : size , }, ) return [ Announcement . parse_obj ( announcement ) for announcement in result ] @app_ctx_manager async def publishAnnouncement ( self , target : Union [ Group , int ], content : str , * , send_to_new_member : bool = False , pinned : bool = False , show_edit_card : bool = False , show_popup : bool = False , require_confirmation : bool = False , image : Optional [ Union [ str , bytes , os . PathLike , io . IOBase ]] = None , ) -> Announcement : \"\"\" \u53d1\u5e03\u4e00\u4e2a\u516c\u544a. Args: target (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4. content (str): \u516c\u544a\u5185\u5bb9. send_to_new_member (bool, optional): \u662f\u5426\u516c\u5f00. \u9ed8\u8ba4\u4e3a False. pinned (bool, optional): \u662f\u5426\u7f6e\u9876. \u9ed8\u8ba4\u4e3a False. show_edit_card (bool, optional): \u662f\u5426\u81ea\u52a8\u5220\u9664. \u9ed8\u8ba4\u4e3a False. show_popup (bool, optional): \u662f\u5426\u5728\u9605\u8bfb\u540e\u81ea\u52a8\u5220\u9664. \u9ed8\u8ba4\u4e3a False. require_confirmation (bool, optional): \u662f\u5426\u9700\u8981\u786e\u8ba4. \u9ed8\u8ba4\u4e3a False. image (Union[str, bytes, os.PathLike, io.IOBase, Image], optional): \u56fe\u7247. \u9ed8\u8ba4\u4e3a None. \\ \u4e3a str \u65f6\u4ee3\u8868 url, \u4e3a bytes / os.PathLike / io.IOBase \u4ee3\u8868\u539f\u59cb\u6570\u636e Raises: TypeError: \u63d0\u4f9b\u4e86\u9519\u8bef\u7684\u53c2\u6570, \u9605\u8bfb\u6709\u5173\u6587\u6863\u5f97\u5230\u95ee\u9898\u539f\u56e0 Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" data : Dict [ str , Any ] = { \"sessionKey\" : self . session_key , \"target\" : int ( target ), \"content\" : content , \"sendToNewMember\" : send_to_new_member , \"pinned\" : pinned , \"showEditCard\" : show_edit_card , \"showPopup\" : show_popup , \"requireConfirmation\" : require_confirmation , } if image : if isinstance ( image , bytes ): data [ \"imageBase64\" ] = base64 . b64encode ( image ) . decode ( \"ascii\" ) elif isinstance ( image , os . PathLike ): data [ \"imageBase64\" ] = base64 . b64encode ( open ( image , \"rb\" ) . read ()) . decode ( \"ascii\" ) elif isinstance ( image , io . IOBase ): data [ \"imageBase64\" ] = base64 . b64encode ( image . read ()) . decode ( \"ascii\" ) elif isinstance ( image , str ): data [ \"imageUrl\" ] = image result = await self . adapter . call_api ( \"anno/publish\" , CallMethod . POST , data , ) return Announcement . parse_obj ( result ) @app_ctx_manager async def deleteAnnouncement ( self , target : Union [ Group , int ], anno : Union [ Announcement , int ]) -> None : \"\"\"\"\"\"","title":"AnnouncementMixin"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.AnnouncementMixin.getAnnouncementIterator","text":"getAnnouncementIterator ( target : Union [ Group , int ], offset : int = 0 , size : int = 10 ) -> AsyncGenerator [ Announcement , None ] \u83b7\u53d6\u7fa4\u516c\u544a\u5217\u8868. Parameters: Name Type Description Default target Union [ Group , int ] \u6307\u5b9a\u7684\u7fa4\u7ec4. required offset Optional [ int ] \u8d77\u59cb\u504f\u79fb\u91cf. \u9ed8\u8ba4\u4e3a 0. 0 size Optional [ int ] \u5217\u8868\u5927\u5c0f. \u9ed8\u8ba4\u4e3a 10. 10 Returns: Type Description AsyncGenerator [ Announcement , None] AsyncGenerator[Announcement, None]: \u5217\u51fa\u7fa4\u7ec4\u4e0b\u6240\u6709\u7684\u516c\u544a. Source code in graia/ariadne/app.py 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 async def getAnnouncementIterator ( self , target : Union [ Group , int ], offset : int = 0 , size : int = 10 , ) -> AsyncGenerator [ Announcement , None ]: \"\"\" \u83b7\u53d6\u7fa4\u516c\u544a\u5217\u8868. Args: target (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4. offset (Optional[int], optional): \u8d77\u59cb\u504f\u79fb\u91cf. \u9ed8\u8ba4\u4e3a 0. size (Optional[int], optional): \u5217\u8868\u5927\u5c0f. \u9ed8\u8ba4\u4e3a 10. Returns: AsyncGenerator[Announcement, None]: \u5217\u51fa\u7fa4\u7ec4\u4e0b\u6240\u6709\u7684\u516c\u544a. \"\"\" target = int ( target ) current_offset = offset cache : List [ Announcement ] = [] while True : for announcement in cache : yield announcement cache = await self . getAnnouncementList ( target , current_offset , size ) current_offset += len ( cache ) if not cache : return","title":"getAnnouncementIterator()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.AnnouncementMixin.getAnnouncementList","text":"getAnnouncementList ( target : Union [ Group , int ], offset : Optional [ int ] = 0 , size : Optional [ int ] = 10 ) -> List [ Announcement ] \u5217\u51fa\u7fa4\u7ec4\u4e0b\u6240\u6709\u7684\u516c\u544a. Parameters: Name Type Description Default target Union [ Group , int ] \u6307\u5b9a\u7684\u7fa4\u7ec4. required offset Optional [ int ] \u8d77\u59cb\u504f\u79fb\u91cf. \u9ed8\u8ba4\u4e3a 0. 0 size Optional [ int ] \u5217\u8868\u5927\u5c0f. \u9ed8\u8ba4\u4e3a 10. 10 Returns: Type Description List [ Announcement ] List[Announcement]: \u5217\u51fa\u7fa4\u7ec4\u4e0b\u6240\u6709\u7684\u516c\u544a. Source code in graia/ariadne/app.py 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 @app_ctx_manager async def getAnnouncementList ( self , target : Union [ Group , int ], offset : Optional [ int ] = 0 , size : Optional [ int ] = 10 , ) -> List [ Announcement ]: \"\"\" \u5217\u51fa\u7fa4\u7ec4\u4e0b\u6240\u6709\u7684\u516c\u544a. Args: target (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4. offset (Optional[int], optional): \u8d77\u59cb\u504f\u79fb\u91cf. \u9ed8\u8ba4\u4e3a 0. size (Optional[int], optional): \u5217\u8868\u5927\u5c0f. \u9ed8\u8ba4\u4e3a 10. Returns: List[Announcement]: \u5217\u51fa\u7fa4\u7ec4\u4e0b\u6240\u6709\u7684\u516c\u544a. \"\"\" result = await self . adapter . call_api ( \"anno/list\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"target\" : int ( target ), \"offset\" : offset , \"size\" : size , }, ) return [ Announcement . parse_obj ( announcement ) for announcement in result ]","title":"getAnnouncementList()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.AnnouncementMixin.publishAnnouncement","text":"publishAnnouncement ( target : Union [ Group , int ], content : str , * , send_to_new_member : bool = False , pinned : bool = False , show_edit_card : bool = False , show_popup : bool = False , require_confirmation : bool = False , image : Optional [ Union [ str , bytes , os . PathLike , io . IOBase ]] = None ) -> Announcement \u53d1\u5e03\u4e00\u4e2a\u516c\u544a. Parameters: Name Type Description Default target Union [ Group , int ] \u6307\u5b9a\u7684\u7fa4\u7ec4. required content str \u516c\u544a\u5185\u5bb9. required send_to_new_member bool \u662f\u5426\u516c\u5f00. \u9ed8\u8ba4\u4e3a False. False pinned bool \u662f\u5426\u7f6e\u9876. \u9ed8\u8ba4\u4e3a False. False show_edit_card bool \u662f\u5426\u81ea\u52a8\u5220\u9664. \u9ed8\u8ba4\u4e3a False. False show_popup bool \u662f\u5426\u5728\u9605\u8bfb\u540e\u81ea\u52a8\u5220\u9664. \u9ed8\u8ba4\u4e3a False. False require_confirmation bool \u662f\u5426\u9700\u8981\u786e\u8ba4. \u9ed8\u8ba4\u4e3a False. False image Union [ str , bytes , os . PathLike , io . IOBase , Image ] \u56fe\u7247. \u9ed8\u8ba4\u4e3a None. \u4e3a str \u65f6\u4ee3\u8868 url, \u4e3a bytes / os.PathLike / io.IOBase \u4ee3\u8868\u539f\u59cb\u6570\u636e None Raises: Type Description TypeError \u63d0\u4f9b\u4e86\u9519\u8bef\u7684\u53c2\u6570, \u9605\u8bfb\u6709\u5173\u6587\u6863\u5f97\u5230\u95ee\u9898\u539f\u56e0 Returns: Name Type Description None Announcement \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 @app_ctx_manager async def publishAnnouncement ( self , target : Union [ Group , int ], content : str , * , send_to_new_member : bool = False , pinned : bool = False , show_edit_card : bool = False , show_popup : bool = False , require_confirmation : bool = False , image : Optional [ Union [ str , bytes , os . PathLike , io . IOBase ]] = None , ) -> Announcement : \"\"\" \u53d1\u5e03\u4e00\u4e2a\u516c\u544a. Args: target (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4. content (str): \u516c\u544a\u5185\u5bb9. send_to_new_member (bool, optional): \u662f\u5426\u516c\u5f00. \u9ed8\u8ba4\u4e3a False. pinned (bool, optional): \u662f\u5426\u7f6e\u9876. \u9ed8\u8ba4\u4e3a False. show_edit_card (bool, optional): \u662f\u5426\u81ea\u52a8\u5220\u9664. \u9ed8\u8ba4\u4e3a False. show_popup (bool, optional): \u662f\u5426\u5728\u9605\u8bfb\u540e\u81ea\u52a8\u5220\u9664. \u9ed8\u8ba4\u4e3a False. require_confirmation (bool, optional): \u662f\u5426\u9700\u8981\u786e\u8ba4. \u9ed8\u8ba4\u4e3a False. image (Union[str, bytes, os.PathLike, io.IOBase, Image], optional): \u56fe\u7247. \u9ed8\u8ba4\u4e3a None. \\ \u4e3a str \u65f6\u4ee3\u8868 url, \u4e3a bytes / os.PathLike / io.IOBase \u4ee3\u8868\u539f\u59cb\u6570\u636e Raises: TypeError: \u63d0\u4f9b\u4e86\u9519\u8bef\u7684\u53c2\u6570, \u9605\u8bfb\u6709\u5173\u6587\u6863\u5f97\u5230\u95ee\u9898\u539f\u56e0 Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" data : Dict [ str , Any ] = { \"sessionKey\" : self . session_key , \"target\" : int ( target ), \"content\" : content , \"sendToNewMember\" : send_to_new_member , \"pinned\" : pinned , \"showEditCard\" : show_edit_card , \"showPopup\" : show_popup , \"requireConfirmation\" : require_confirmation , } if image : if isinstance ( image , bytes ): data [ \"imageBase64\" ] = base64 . b64encode ( image ) . decode ( \"ascii\" ) elif isinstance ( image , os . PathLike ): data [ \"imageBase64\" ] = base64 . b64encode ( open ( image , \"rb\" ) . read ()) . decode ( \"ascii\" ) elif isinstance ( image , io . IOBase ): data [ \"imageBase64\" ] = base64 . b64encode ( image . read ()) . decode ( \"ascii\" ) elif isinstance ( image , str ): data [ \"imageUrl\" ] = image result = await self . adapter . call_api ( \"anno/publish\" , CallMethod . POST , data , ) return Announcement . parse_obj ( result )","title":"publishAnnouncement()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.Ariadne","text":"Bases: MessageMixin , RelationshipMixin , OperationMixin , AnnouncementMixin , FileMixin , MultimediaMixin \u827e\u8389\u4e9a\u5fb7\u59ae (Ariadne). \u9762\u5411 mirai-api-http \u63a5\u53e3\u7684\u5b9e\u9645\u529f\u80fd\u5b9e\u73b0. \u4f60\u7684\u5e94\u7528\u5927\u591a\u90fd\u56f4\u7ed5\u7740\u672c\u7c7b\u53ca\u672c\u7c7b\u7684\u5b9e\u4f8b\u5c55\u5f00. Attributes: Name Type Description broadcast Broadcast \u88ab\u6307\u5b9a\u7684, \u5916\u7f6e\u7684\u4e8b\u4ef6\u7cfb\u7edf, \u5373 Broadcast Control , \u901a\u5e38\u4f60\u4e0d\u9700\u8981\u5e72\u6d89\u8be5\u5c5e\u6027; adapter Adapter \u540e\u7aef\u9002\u914d\u5668, \u8d1f\u8d23\u5b9e\u9645\u4e0e mirai-api-http \u8fdb\u884c\u4ea4\u4e92. Source code in graia/ariadne/app.py 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 class Ariadne ( MessageMixin , RelationshipMixin , OperationMixin , AnnouncementMixin , FileMixin , MultimediaMixin ): \"\"\" \u827e\u8389\u4e9a\u5fb7\u59ae (Ariadne). \u9762\u5411 `mirai-api-http` \u63a5\u53e3\u7684\u5b9e\u9645\u529f\u80fd\u5b9e\u73b0. \u4f60\u7684\u5e94\u7528\u5927\u591a\u90fd\u56f4\u7ed5\u7740\u672c\u7c7b\u53ca\u672c\u7c7b\u7684\u5b9e\u4f8b\u5c55\u5f00. Attributes: broadcast (Broadcast): \u88ab\u6307\u5b9a\u7684, \u5916\u7f6e\u7684\u4e8b\u4ef6\u7cfb\u7edf, \u5373 `Broadcast Control`, \u901a\u5e38\u4f60\u4e0d\u9700\u8981\u5e72\u6d89\u8be5\u5c5e\u6027; adapter (Adapter): \u540e\u7aef\u9002\u914d\u5668, \u8d1f\u8d23\u5b9e\u9645\u4e0e `mirai-api-http` \u8fdb\u884c\u4ea4\u4e92. \"\"\" loop : AbstractEventLoop broadcast : Broadcast adapter : Adapter status : AriadneStatus running : ClassVar [ MutableSet [ \"Ariadne\" ]] = set () def __init__ ( self , connect_info : Union [ Adapter , MiraiSession ], * , loop : Optional [ AbstractEventLoop ] = None , broadcast : Optional [ Broadcast ] = None , max_retry : int = - 1 , chat_log_config : Optional [ Union [ ChatLogConfig , Literal [ False ]]] = None , use_loguru_traceback : Optional [ bool ] = True , use_bypass_listener : Optional [ bool ] = False , disable_telemetry : bool = False , disable_logo : bool = False , ): \"\"\" \u521d\u59cb\u5316 Ariadne. Args: connect_info (Union[Adapter, MiraiSession]): \u63d0\u4f9b\u4e0e `mirai-api-http` \u4ea4\u4e92\u7684\u4fe1\u606f. loop (AbstractEventLoop, optional): \u4e8b\u4ef6\u5faa\u73af. broadcast (Broadcast, optional): \u88ab\u6307\u5b9a\u7684, \u5916\u7f6e\u7684\u4e8b\u4ef6\u7cfb\u7edf, \u5373 `Broadcast Control` \u5b9e\u4f8b. chat_log_config (Optional[Union[ChatLogConfig, Literal[False]]]): \u804a\u5929\u65e5\u5fd7\u7684\u914d\u7f6e. \\ \u8bf7\u79fb\u6b65 [ChatLogConfig][graia.ariadne.model.ChatLogConfig] \u67e5\u770b\u4f7f\u7528\u65b9\u6cd5. \\ \u8bbe\u7f6e\u4e3a False \u5219\u4f1a\u5b8c\u5168\u7981\u7528\u804a\u5929\u65e5\u5fd7. use_loguru_traceback (bool): \u662f\u5426\u6ce8\u5165 loguru \u4ee5\u83b7\u5f97\u5bf9 traceback.print_exception() \u4e0e sys.excepthook \u7684\u5b8c\u5168\u63a7\u5236. use_bypass_listener (bool): \u662f\u5426\u6ce8\u5165 BypassListener \u4ee5\u83b7\u5f97\u5b50\u4e8b\u4ef6\u76d1\u542c\u652f\u6301. disable_telemetry (bool): \u662f\u5426\u7981\u7528\u7248\u672c\u8bb0\u5f55. disable_logo (bool): \u662f\u5426\u7981\u7528 logo \u663e\u793a. \"\"\" if broadcast : loop = broadcast . loop elif isinstance ( connect_info , Adapter ): broadcast = connect_info . broadcast loop = broadcast . loop if not loop : try : loop = asyncio . get_running_loop () except RuntimeError : loop = asyncio . new_event_loop () self . loop = loop self . broadcast : Broadcast = broadcast or Broadcast ( loop = self . loop ) self . adapter : Adapter = ( connect_info if isinstance ( connect_info , Adapter ) else DefaultAdapter ( self . broadcast , connect_info ) ) self . mirai_session : MiraiSession = self . adapter . mirai_session self . daemon_task : Optional [ Task ] = None self . status : AriadneStatus = AriadneStatus . STOP self . remote_version : str = \"\" self . max_retry : int = max_retry self . disable_telemetry : bool = disable_telemetry self . disable_logo : bool = disable_logo self . info : Dict [ type , object ] = { Ariadne : self , Broadcast : self . broadcast , AbstractEventLoop : self . loop , Adapter : self . adapter , MiraiSession : self . mirai_session , } chat_log_enabled = chat_log_config is not False self . chat_log_cfg : ChatLogConfig = chat_log_config or ChatLogConfig ( enabled = chat_log_enabled ) from .util.send import Strict self . default_send_action = Strict if use_bypass_listener : inject_bypass_listener ( self . broadcast ) if use_loguru_traceback : inject_loguru_traceback ( self . loop ) if ContextDispatcher not in self . broadcast . finale_dispatchers : self . broadcast . finale_dispatchers . append ( ContextDispatcher ) def create ( self , cls : Type [ \"T\" ], reuse : bool = True ) -> \"T\" : \"\"\"\u5229\u7528 Ariadne \u5df2\u6709\u7684\u4fe1\u606f\u534f\u52a9\u521b\u5efa\u5b9e\u4f8b. Args: cls (Type[T]): \u9700\u8981\u521b\u5efa\u7684\u7c7b. reuse (bool, optional): \u662f\u5426\u5141\u8bb8\u590d\u7528, \u9ed8\u8ba4\u4e3a True. Returns: T: \u521b\u5efa\u7684\u7c7b. \"\"\" if cls in self . info : return self . info [ cls ] # type: ignore call_args : list = [] call_kwargs : Dict [ str , Any ] = {} init_sig = inspect . signature ( cls ) for name , param in init_sig . parameters . items (): if param . annotation in self . info and param . kind not in ( param . VAR_KEYWORD , param . VAR_POSITIONAL , ): param_obj = self . info . get ( param . annotation , param . default ) if param_obj is param . empty : param_obj = self . create ( param . annotation , reuse = True ) if param . kind is param . POSITIONAL_ONLY : call_args . append ( param_obj ) else : call_kwargs [ name ] = param_obj obj : \"T\" = cls ( * call_args , ** call_kwargs ) if reuse : self . info [ cls ] = obj return obj async def daemon ( self , retry_interval : float = 5.0 ): \"\"\"Ariadne \u751f\u547d\u5468\u671f\u7ba1\u7406\u7684\u5177\u4f53\u65b9\u6cd5. Args: retry_interval (float, optional): Adapter \u91cd\u8fde\u95f4\u9694 (s). \u9ed8\u8ba4 5.0. \"\"\" from .event.message import MessageEvent from .event.mirai import FriendEvent , GroupEvent retry_cnt : int = 0 logger . debug ( \"Ariadne daemon started.\" ) while self . status in { AriadneStatus . RUNNING , AriadneStatus . LAUNCH }: try : await asyncio . wait_for ( self . adapter . start (), timeout = retry_interval ) logger . success ( \"daemon: adapter started\" ) self . broadcast . postEvent ( AdapterLaunched ( self )) assert self . adapter . event_queue is not None , \"No event queue found for Adapter\" async for event in yield_with_timeout ( self . adapter . event_queue . get , lambda : ( self . adapter . running and self . status in { AriadneStatus . RUNNING , AriadneStatus . LAUNCH } ), ): with enter_context ( self , event ): sys . audit ( \"AriadnePostRemoteEvent\" , event ) if isinstance ( event , MessageEvent ) and event . messageChain . onlyContains ( Source ): event . messageChain . append ( \"<! \u4e0d\u652f\u6301\u7684\u6d88\u606f\u7c7b\u578b !>\" ) if isinstance ( event , FriendEvent ): with enter_message_send_context ( UploadMethod . Friend ): self . broadcast . postEvent ( event ) elif isinstance ( event , GroupEvent ): with enter_message_send_context ( UploadMethod . Group ): self . broadcast . postEvent ( event ) else : self . broadcast . postEvent ( event ) except asyncio . exceptions . TimeoutError : logger . critical ( \"Timeout connecting to mirai-api-http. Configuration problem?\" ) except Exception as e : logger . exception ( e ) self . broadcast . postEvent ( AdapterShutdowned ( self )) if retry_cnt == self . max_retry : logger . critical ( f \"Max retry exceeded: { self . max_retry } .\" ) break if self . status in { AriadneStatus . RUNNING , AriadneStatus . LAUNCH }: if not self . adapter . connected . value (): retry_cnt += 1 else : retry_cnt = 1 await self . adapter . stop () logger . warning ( f \"Adapter down, restart in { retry_interval } s\" ) await asyncio . sleep ( retry_interval ) logger . warning ( f \"Retry: { retry_cnt } / { self . max_retry } \" ) exceptions : List [ Tuple [ Type [ Exception ], tuple ]] = [] logger . info ( \"Stopping Ariadne...\" ) self . status = AriadneStatus . CLEANUP launch_fut = self . adapter . connected . _special . get ( \"__ariadne_launch__\" , self . loop . create_future ()) if not launch_fut . done (): launch_fut . set_exception ( asyncio . CancelledError ) for t in asyncio . all_tasks ( self . loop ): if t is asyncio . current_task ( self . loop ): continue coro : Coroutine = t . get_coro () # type: ignore try : if coro . __qualname__ == \"Broadcast.Executor\" : t . cancel () logger . debug ( f \"Cancelling { t . get_name () } (Broadcast.Executor)\" ) elif cast ( str , coro . cr_frame . f_globals [ \"__name__\" ]) . startswith ( \"graia.scheduler\" ): t . cancel () logger . debug ( f \"Cancelling { t . get_name () } (Scheduler Task)\" ) except Exception as e : exceptions . append (( e . __class__ , e . args )) logger . info ( \"Posting Ariadne shutdown event...\" ) await self . broadcast . postEvent ( ApplicationShutdowned ( self )) self . running . remove ( self ) logger . info ( \"Stopping adapter...\" ) await self . adapter . stop () logger . success ( f \"Adapter { self . adapter . __class__ . __name__ } stopped.\" ) self . status = AriadneStatus . STOP logger . success ( \"Stopped Ariadne.\" ) return exceptions async def launch ( self ): \"\"\"\u542f\u52a8 Ariadne.\"\"\" if self . status is not AriadneStatus . STOP : return self . status = AriadneStatus . LAUNCH # Logo if not self . disable_logo : logger . opt ( colors = True , raw = True ) . info ( f \"<cyan> { ARIADNE_ASCII_LOGO } </>\" ) # Telemetry if not self . disable_telemetry : official : List [ Tuple [ str , str ]] = [] community : List [ Tuple [ str , str ]] = [] for dist in importlib . metadata . distributions (): name : str = dist . metadata [ \"Name\" ] version : str = dist . version if name . startswith ( \"graia-\" ): official . append (( \" \" . join ( name . split ( \"-\" )[ 1 :]) . title (), version )) elif name . startswith ( \"graiax-\" ): community . append (( \" \" . join ( name . split ( \"-\" )) . title (), version )) for name , version in official : logger . opt ( colors = True , raw = True ) . info ( f \"<magenta> { name } </> version: <yellow> { version } </> \\n \" ) for name , version in community : logger . opt ( colors = True , raw = True ) . info ( f \"<cyan> { name } </> version: <yellow> { version } </> \\n \" ) logger . info ( \"Launching app...\" ) start_time = time . time () if self . chat_log_cfg . enabled : self . chat_log_cfg . initialize ( self ) if ContextDispatcher not in self . broadcast . finale_dispatchers : self . broadcast . finale_dispatchers . append ( ContextDispatcher ) self . daemon_task = self . loop . create_task ( self . daemon (), name = \"ariadne_daemon\" ) self . running . add ( self ) try : await self . adapter . connected . wait ( True , \"__ariadne_launch__\" ) except asyncio . CancelledError : logger . error ( \"Launch abort!\" ) return self . status = AriadneStatus . RUNNING self . remote_version = await self . getVersion () logger . success ( f \"Remote version: { self . remote_version } \" ) if not self . remote_version . startswith ( \"2\" ): raise RuntimeError ( f \"You are using an unsupported version: { self . remote_version } !\" ) logger . success ( f \"Application launched with { time . time () - start_time : .2 } s\" ) await self . broadcast . postEvent ( ApplicationLaunched ( self )) async def stop ( self ): \"\"\"\u8bf7\u6c42\u505c\u6b62 Ariadne.\"\"\" if self . status is AriadneStatus . RUNNING : self . status = AriadneStatus . SHUTDOWN await await_predicate ( lambda : self . status in { AriadneStatus . CLEANUP , AriadneStatus . STOP }) async def join ( self ): \"\"\"\u7b49\u5f85\u76f4\u5230 Ariadne \u771f\u6b63\u505c\u6b62. \u4e0d\u8981\u5728\u4e0e Broadcast \u76f8\u5173\u7684\u4efb\u52a1\u4e2d\u4f7f\u7528. \"\"\" if self . status in { AriadneStatus . RUNNING , AriadneStatus . LAUNCH }: await self . stop () await await_predicate ( lambda : self . status is AriadneStatus . STOP ) if self . daemon_task : await self . daemon_task async def lifecycle ( self ): \"\"\"\u4ee5 async \u963b\u585e\u65b9\u5f0f\u542f\u52a8 Ariadne \u5e76\u7b49\u5f85\u5176\u505c\u6b62.\"\"\" def sig_handler ( * _ ): if self . status in { AriadneStatus . RUNNING , AriadneStatus . LAUNCH }: self . status = AriadneStatus . SHUTDOWN logger . warning ( \"Stop signal received, scheduling stop process.\" ) logger . warning ( \"Press Ctrl-C again to force quit.\" ) signal_handler ( sig_handler ) await self . launch () if self . daemon_task : await self . daemon_task def launch_blocking ( self ): \"\"\"\u4ee5\u963b\u585e\u65b9\u5f0f\u542f\u52a8 Ariadne \u5e76\u7b49\u5f85\u5176\u505c\u6b62.\"\"\" self . loop . run_until_complete ( self . lifecycle ()) self . loop . run_until_complete ( self . join ()) @app_ctx_manager async def getVersion ( self , auto_set : bool = True ) -> str : \"\"\"\u83b7\u53d6\u540e\u7aef Mirai HTTP API \u7248\u672c. Args: auto_set (bool, optional): \u81ea\u52a8\u8bbe\u7f6e\u5230\u5b9e\u4f8b\u7684 MiraiSession.version. \u9ed8\u8ba4\u4e3a True. Returns: str: \u7248\u672c\u4fe1\u606f. \"\"\" if self . mirai_session . version : return self . mirai_session . version result = await self . adapter . call_api ( \"about\" , CallMethod . GET ) version = result [ \"version\" ] if auto_set : self . mirai_session . version = version return version async def __aenter__ ( self ) -> \"Ariadne\" : await self . launch () return self async def __aexit__ ( self , * exc ): await self . join () @property def account ( self ) -> Optional [ int ]: \"\"\"\u83b7\u53d6\u5f53\u524d\u5b9e\u4f8b\u5bf9\u5e94 MiraiSession \u7684\u8d26\u53f7.\"\"\" return self . adapter . mirai_session . account","title":"Ariadne"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.Ariadne.__init__","text":"__init__ ( connect_info : Union [ Adapter , MiraiSession ], * , loop : Optional [ AbstractEventLoop ] = None , broadcast : Optional [ Broadcast ] = None , max_retry : int = - 1 , chat_log_config : Optional [ Union [ ChatLogConfig , Literal [ False ]]] = None , use_loguru_traceback : Optional [ bool ] = True , use_bypass_listener : Optional [ bool ] = False , disable_telemetry : bool = False , disable_logo : bool = False ) \u521d\u59cb\u5316 Ariadne. Parameters: Name Type Description Default connect_info Union [ Adapter , MiraiSession ] \u63d0\u4f9b\u4e0e mirai-api-http \u4ea4\u4e92\u7684\u4fe1\u606f. required loop AbstractEventLoop \u4e8b\u4ef6\u5faa\u73af. None broadcast Broadcast \u88ab\u6307\u5b9a\u7684, \u5916\u7f6e\u7684\u4e8b\u4ef6\u7cfb\u7edf, \u5373 Broadcast Control \u5b9e\u4f8b. None chat_log_config Optional [ Union [ ChatLogConfig , Literal [False]]] \u804a\u5929\u65e5\u5fd7\u7684\u914d\u7f6e. \u8bf7\u79fb\u6b65 ChatLogConfig \u67e5\u770b\u4f7f\u7528\u65b9\u6cd5. \u8bbe\u7f6e\u4e3a False \u5219\u4f1a\u5b8c\u5168\u7981\u7528\u804a\u5929\u65e5\u5fd7. None use_loguru_traceback bool \u662f\u5426\u6ce8\u5165 loguru \u4ee5\u83b7\u5f97\u5bf9 traceback.print_exception() \u4e0e sys.excepthook \u7684\u5b8c\u5168\u63a7\u5236. True use_bypass_listener bool \u662f\u5426\u6ce8\u5165 BypassListener \u4ee5\u83b7\u5f97\u5b50\u4e8b\u4ef6\u76d1\u542c\u652f\u6301. False disable_telemetry bool \u662f\u5426\u7981\u7528\u7248\u672c\u8bb0\u5f55. False disable_logo bool \u662f\u5426\u7981\u7528 logo \u663e\u793a. False Source code in graia/ariadne/app.py 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 def __init__ ( self , connect_info : Union [ Adapter , MiraiSession ], * , loop : Optional [ AbstractEventLoop ] = None , broadcast : Optional [ Broadcast ] = None , max_retry : int = - 1 , chat_log_config : Optional [ Union [ ChatLogConfig , Literal [ False ]]] = None , use_loguru_traceback : Optional [ bool ] = True , use_bypass_listener : Optional [ bool ] = False , disable_telemetry : bool = False , disable_logo : bool = False , ): \"\"\" \u521d\u59cb\u5316 Ariadne. Args: connect_info (Union[Adapter, MiraiSession]): \u63d0\u4f9b\u4e0e `mirai-api-http` \u4ea4\u4e92\u7684\u4fe1\u606f. loop (AbstractEventLoop, optional): \u4e8b\u4ef6\u5faa\u73af. broadcast (Broadcast, optional): \u88ab\u6307\u5b9a\u7684, \u5916\u7f6e\u7684\u4e8b\u4ef6\u7cfb\u7edf, \u5373 `Broadcast Control` \u5b9e\u4f8b. chat_log_config (Optional[Union[ChatLogConfig, Literal[False]]]): \u804a\u5929\u65e5\u5fd7\u7684\u914d\u7f6e. \\ \u8bf7\u79fb\u6b65 [ChatLogConfig][graia.ariadne.model.ChatLogConfig] \u67e5\u770b\u4f7f\u7528\u65b9\u6cd5. \\ \u8bbe\u7f6e\u4e3a False \u5219\u4f1a\u5b8c\u5168\u7981\u7528\u804a\u5929\u65e5\u5fd7. use_loguru_traceback (bool): \u662f\u5426\u6ce8\u5165 loguru \u4ee5\u83b7\u5f97\u5bf9 traceback.print_exception() \u4e0e sys.excepthook \u7684\u5b8c\u5168\u63a7\u5236. use_bypass_listener (bool): \u662f\u5426\u6ce8\u5165 BypassListener \u4ee5\u83b7\u5f97\u5b50\u4e8b\u4ef6\u76d1\u542c\u652f\u6301. disable_telemetry (bool): \u662f\u5426\u7981\u7528\u7248\u672c\u8bb0\u5f55. disable_logo (bool): \u662f\u5426\u7981\u7528 logo \u663e\u793a. \"\"\" if broadcast : loop = broadcast . loop elif isinstance ( connect_info , Adapter ): broadcast = connect_info . broadcast loop = broadcast . loop if not loop : try : loop = asyncio . get_running_loop () except RuntimeError : loop = asyncio . new_event_loop () self . loop = loop self . broadcast : Broadcast = broadcast or Broadcast ( loop = self . loop ) self . adapter : Adapter = ( connect_info if isinstance ( connect_info , Adapter ) else DefaultAdapter ( self . broadcast , connect_info ) ) self . mirai_session : MiraiSession = self . adapter . mirai_session self . daemon_task : Optional [ Task ] = None self . status : AriadneStatus = AriadneStatus . STOP self . remote_version : str = \"\" self . max_retry : int = max_retry self . disable_telemetry : bool = disable_telemetry self . disable_logo : bool = disable_logo self . info : Dict [ type , object ] = { Ariadne : self , Broadcast : self . broadcast , AbstractEventLoop : self . loop , Adapter : self . adapter , MiraiSession : self . mirai_session , } chat_log_enabled = chat_log_config is not False self . chat_log_cfg : ChatLogConfig = chat_log_config or ChatLogConfig ( enabled = chat_log_enabled ) from .util.send import Strict self . default_send_action = Strict if use_bypass_listener : inject_bypass_listener ( self . broadcast ) if use_loguru_traceback : inject_loguru_traceback ( self . loop ) if ContextDispatcher not in self . broadcast . finale_dispatchers : self . broadcast . finale_dispatchers . append ( ContextDispatcher )","title":"__init__()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.Ariadne.account","text":"account () -> Optional [ int ] \u83b7\u53d6\u5f53\u524d\u5b9e\u4f8b\u5bf9\u5e94 MiraiSession \u7684\u8d26\u53f7. Source code in graia/ariadne/app.py 1768 1769 1770 1771 @property def account ( self ) -> Optional [ int ]: \"\"\"\u83b7\u53d6\u5f53\u524d\u5b9e\u4f8b\u5bf9\u5e94 MiraiSession \u7684\u8d26\u53f7.\"\"\" return self . adapter . mirai_session . account","title":"account()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.Ariadne.create","text":"create ( cls : Type [ 'T' ], reuse : bool = True ) -> 'T' \u5229\u7528 Ariadne \u5df2\u6709\u7684\u4fe1\u606f\u534f\u52a9\u521b\u5efa\u5b9e\u4f8b. Parameters: Name Type Description Default cls Type [ T ] \u9700\u8981\u521b\u5efa\u7684\u7c7b. required reuse bool \u662f\u5426\u5141\u8bb8\u590d\u7528, \u9ed8\u8ba4\u4e3a True. True Returns: Name Type Description T 'T' \u521b\u5efa\u7684\u7c7b. Source code in graia/ariadne/app.py 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 def create ( self , cls : Type [ \"T\" ], reuse : bool = True ) -> \"T\" : \"\"\"\u5229\u7528 Ariadne \u5df2\u6709\u7684\u4fe1\u606f\u534f\u52a9\u521b\u5efa\u5b9e\u4f8b. Args: cls (Type[T]): \u9700\u8981\u521b\u5efa\u7684\u7c7b. reuse (bool, optional): \u662f\u5426\u5141\u8bb8\u590d\u7528, \u9ed8\u8ba4\u4e3a True. Returns: T: \u521b\u5efa\u7684\u7c7b. \"\"\" if cls in self . info : return self . info [ cls ] # type: ignore call_args : list = [] call_kwargs : Dict [ str , Any ] = {} init_sig = inspect . signature ( cls ) for name , param in init_sig . parameters . items (): if param . annotation in self . info and param . kind not in ( param . VAR_KEYWORD , param . VAR_POSITIONAL , ): param_obj = self . info . get ( param . annotation , param . default ) if param_obj is param . empty : param_obj = self . create ( param . annotation , reuse = True ) if param . kind is param . POSITIONAL_ONLY : call_args . append ( param_obj ) else : call_kwargs [ name ] = param_obj obj : \"T\" = cls ( * call_args , ** call_kwargs ) if reuse : self . info [ cls ] = obj return obj","title":"create()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.Ariadne.daemon","text":"daemon ( retry_interval : float = 5.0 ) Ariadne \u751f\u547d\u5468\u671f\u7ba1\u7406\u7684\u5177\u4f53\u65b9\u6cd5. Parameters: Name Type Description Default retry_interval float Adapter \u91cd\u8fde\u95f4\u9694 (s). \u9ed8\u8ba4 5.0. 5.0 Source code in graia/ariadne/app.py 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 async def daemon ( self , retry_interval : float = 5.0 ): \"\"\"Ariadne \u751f\u547d\u5468\u671f\u7ba1\u7406\u7684\u5177\u4f53\u65b9\u6cd5. Args: retry_interval (float, optional): Adapter \u91cd\u8fde\u95f4\u9694 (s). \u9ed8\u8ba4 5.0. \"\"\" from .event.message import MessageEvent from .event.mirai import FriendEvent , GroupEvent retry_cnt : int = 0 logger . debug ( \"Ariadne daemon started.\" ) while self . status in { AriadneStatus . RUNNING , AriadneStatus . LAUNCH }: try : await asyncio . wait_for ( self . adapter . start (), timeout = retry_interval ) logger . success ( \"daemon: adapter started\" ) self . broadcast . postEvent ( AdapterLaunched ( self )) assert self . adapter . event_queue is not None , \"No event queue found for Adapter\" async for event in yield_with_timeout ( self . adapter . event_queue . get , lambda : ( self . adapter . running and self . status in { AriadneStatus . RUNNING , AriadneStatus . LAUNCH } ), ): with enter_context ( self , event ): sys . audit ( \"AriadnePostRemoteEvent\" , event ) if isinstance ( event , MessageEvent ) and event . messageChain . onlyContains ( Source ): event . messageChain . append ( \"<! \u4e0d\u652f\u6301\u7684\u6d88\u606f\u7c7b\u578b !>\" ) if isinstance ( event , FriendEvent ): with enter_message_send_context ( UploadMethod . Friend ): self . broadcast . postEvent ( event ) elif isinstance ( event , GroupEvent ): with enter_message_send_context ( UploadMethod . Group ): self . broadcast . postEvent ( event ) else : self . broadcast . postEvent ( event ) except asyncio . exceptions . TimeoutError : logger . critical ( \"Timeout connecting to mirai-api-http. Configuration problem?\" ) except Exception as e : logger . exception ( e ) self . broadcast . postEvent ( AdapterShutdowned ( self )) if retry_cnt == self . max_retry : logger . critical ( f \"Max retry exceeded: { self . max_retry } .\" ) break if self . status in { AriadneStatus . RUNNING , AriadneStatus . LAUNCH }: if not self . adapter . connected . value (): retry_cnt += 1 else : retry_cnt = 1 await self . adapter . stop () logger . warning ( f \"Adapter down, restart in { retry_interval } s\" ) await asyncio . sleep ( retry_interval ) logger . warning ( f \"Retry: { retry_cnt } / { self . max_retry } \" ) exceptions : List [ Tuple [ Type [ Exception ], tuple ]] = [] logger . info ( \"Stopping Ariadne...\" ) self . status = AriadneStatus . CLEANUP launch_fut = self . adapter . connected . _special . get ( \"__ariadne_launch__\" , self . loop . create_future ()) if not launch_fut . done (): launch_fut . set_exception ( asyncio . CancelledError ) for t in asyncio . all_tasks ( self . loop ): if t is asyncio . current_task ( self . loop ): continue coro : Coroutine = t . get_coro () # type: ignore try : if coro . __qualname__ == \"Broadcast.Executor\" : t . cancel () logger . debug ( f \"Cancelling { t . get_name () } (Broadcast.Executor)\" ) elif cast ( str , coro . cr_frame . f_globals [ \"__name__\" ]) . startswith ( \"graia.scheduler\" ): t . cancel () logger . debug ( f \"Cancelling { t . get_name () } (Scheduler Task)\" ) except Exception as e : exceptions . append (( e . __class__ , e . args )) logger . info ( \"Posting Ariadne shutdown event...\" ) await self . broadcast . postEvent ( ApplicationShutdowned ( self )) self . running . remove ( self ) logger . info ( \"Stopping adapter...\" ) await self . adapter . stop () logger . success ( f \"Adapter { self . adapter . __class__ . __name__ } stopped.\" ) self . status = AriadneStatus . STOP logger . success ( \"Stopped Ariadne.\" ) return exceptions","title":"daemon()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.Ariadne.getVersion","text":"getVersion ( auto_set : bool = True ) -> str \u83b7\u53d6\u540e\u7aef Mirai HTTP API \u7248\u672c. Parameters: Name Type Description Default auto_set bool \u81ea\u52a8\u8bbe\u7f6e\u5230\u5b9e\u4f8b\u7684 MiraiSession.version. \u9ed8\u8ba4\u4e3a True. True Returns: Name Type Description str str \u7248\u672c\u4fe1\u606f. Source code in graia/ariadne/app.py 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 @app_ctx_manager async def getVersion ( self , auto_set : bool = True ) -> str : \"\"\"\u83b7\u53d6\u540e\u7aef Mirai HTTP API \u7248\u672c. Args: auto_set (bool, optional): \u81ea\u52a8\u8bbe\u7f6e\u5230\u5b9e\u4f8b\u7684 MiraiSession.version. \u9ed8\u8ba4\u4e3a True. Returns: str: \u7248\u672c\u4fe1\u606f. \"\"\" if self . mirai_session . version : return self . mirai_session . version result = await self . adapter . call_api ( \"about\" , CallMethod . GET ) version = result [ \"version\" ] if auto_set : self . mirai_session . version = version return version","title":"getVersion()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.Ariadne.join","text":"join () \u7b49\u5f85\u76f4\u5230 Ariadne \u771f\u6b63\u505c\u6b62. \u4e0d\u8981\u5728\u4e0e Broadcast \u76f8\u5173\u7684\u4efb\u52a1\u4e2d\u4f7f\u7528. Source code in graia/ariadne/app.py 1713 1714 1715 1716 1717 1718 1719 1720 1721 async def join ( self ): \"\"\"\u7b49\u5f85\u76f4\u5230 Ariadne \u771f\u6b63\u505c\u6b62. \u4e0d\u8981\u5728\u4e0e Broadcast \u76f8\u5173\u7684\u4efb\u52a1\u4e2d\u4f7f\u7528. \"\"\" if self . status in { AriadneStatus . RUNNING , AriadneStatus . LAUNCH }: await self . stop () await await_predicate ( lambda : self . status is AriadneStatus . STOP ) if self . daemon_task : await self . daemon_task","title":"join()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.Ariadne.launch","text":"launch () \u542f\u52a8 Ariadne. Source code in graia/ariadne/app.py 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 async def launch ( self ): \"\"\"\u542f\u52a8 Ariadne.\"\"\" if self . status is not AriadneStatus . STOP : return self . status = AriadneStatus . LAUNCH # Logo if not self . disable_logo : logger . opt ( colors = True , raw = True ) . info ( f \"<cyan> { ARIADNE_ASCII_LOGO } </>\" ) # Telemetry if not self . disable_telemetry : official : List [ Tuple [ str , str ]] = [] community : List [ Tuple [ str , str ]] = [] for dist in importlib . metadata . distributions (): name : str = dist . metadata [ \"Name\" ] version : str = dist . version if name . startswith ( \"graia-\" ): official . append (( \" \" . join ( name . split ( \"-\" )[ 1 :]) . title (), version )) elif name . startswith ( \"graiax-\" ): community . append (( \" \" . join ( name . split ( \"-\" )) . title (), version )) for name , version in official : logger . opt ( colors = True , raw = True ) . info ( f \"<magenta> { name } </> version: <yellow> { version } </> \\n \" ) for name , version in community : logger . opt ( colors = True , raw = True ) . info ( f \"<cyan> { name } </> version: <yellow> { version } </> \\n \" ) logger . info ( \"Launching app...\" ) start_time = time . time () if self . chat_log_cfg . enabled : self . chat_log_cfg . initialize ( self ) if ContextDispatcher not in self . broadcast . finale_dispatchers : self . broadcast . finale_dispatchers . append ( ContextDispatcher ) self . daemon_task = self . loop . create_task ( self . daemon (), name = \"ariadne_daemon\" ) self . running . add ( self ) try : await self . adapter . connected . wait ( True , \"__ariadne_launch__\" ) except asyncio . CancelledError : logger . error ( \"Launch abort!\" ) return self . status = AriadneStatus . RUNNING self . remote_version = await self . getVersion () logger . success ( f \"Remote version: { self . remote_version } \" ) if not self . remote_version . startswith ( \"2\" ): raise RuntimeError ( f \"You are using an unsupported version: { self . remote_version } !\" ) logger . success ( f \"Application launched with { time . time () - start_time : .2 } s\" ) await self . broadcast . postEvent ( ApplicationLaunched ( self ))","title":"launch()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.Ariadne.launch_blocking","text":"launch_blocking () \u4ee5\u963b\u585e\u65b9\u5f0f\u542f\u52a8 Ariadne \u5e76\u7b49\u5f85\u5176\u505c\u6b62. Source code in graia/ariadne/app.py 1737 1738 1739 1740 def launch_blocking ( self ): \"\"\"\u4ee5\u963b\u585e\u65b9\u5f0f\u542f\u52a8 Ariadne \u5e76\u7b49\u5f85\u5176\u505c\u6b62.\"\"\" self . loop . run_until_complete ( self . lifecycle ()) self . loop . run_until_complete ( self . join ())","title":"launch_blocking()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.Ariadne.lifecycle","text":"lifecycle () \u4ee5 async \u963b\u585e\u65b9\u5f0f\u542f\u52a8 Ariadne \u5e76\u7b49\u5f85\u5176\u505c\u6b62. Source code in graia/ariadne/app.py 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 async def lifecycle ( self ): \"\"\"\u4ee5 async \u963b\u585e\u65b9\u5f0f\u542f\u52a8 Ariadne \u5e76\u7b49\u5f85\u5176\u505c\u6b62.\"\"\" def sig_handler ( * _ ): if self . status in { AriadneStatus . RUNNING , AriadneStatus . LAUNCH }: self . status = AriadneStatus . SHUTDOWN logger . warning ( \"Stop signal received, scheduling stop process.\" ) logger . warning ( \"Press Ctrl-C again to force quit.\" ) signal_handler ( sig_handler ) await self . launch () if self . daemon_task : await self . daemon_task","title":"lifecycle()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.Ariadne.stop","text":"stop () \u8bf7\u6c42\u505c\u6b62 Ariadne. Source code in graia/ariadne/app.py 1707 1708 1709 1710 1711 async def stop ( self ): \"\"\"\u8bf7\u6c42\u505c\u6b62 Ariadne.\"\"\" if self . status is AriadneStatus . RUNNING : self . status = AriadneStatus . SHUTDOWN await await_predicate ( lambda : self . status in { AriadneStatus . CLEANUP , AriadneStatus . STOP })","title":"stop()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.AriadneMixin","text":"Ariadne \u7684 Mixin \u57fa\u7c7b. Source code in graia/ariadne/app.py 92 93 94 95 96 97 98 99 100 101 102 103 class AriadneMixin : \"\"\"Ariadne \u7684 Mixin \u57fa\u7c7b.\"\"\" broadcast : Broadcast adapter : Adapter mirai_session : MiraiSession chat_log_cfg : ChatLogConfig @property def session_key ( self ) -> Optional [ str ]: \"\"\"\u8fd4\u56de Ariadne \u7684 Mirai session key.\"\"\" return self . mirai_session . session_key","title":"AriadneMixin"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.AriadneMixin.session_key","text":"session_key () -> Optional [ str ] \u8fd4\u56de Ariadne \u7684 Mirai session key. Source code in graia/ariadne/app.py 100 101 102 103 @property def session_key ( self ) -> Optional [ str ]: \"\"\"\u8fd4\u56de Ariadne \u7684 Mirai session key.\"\"\" return self . mirai_session . session_key","title":"session_key()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.FileMixin","text":"Bases: AriadneMixin \u7528\u4e8e\u5bf9\u6587\u4ef6\u8fdb\u884c\u5404\u79cd\u64cd\u4f5c\u7684 Mixin \u7c7b. Source code in graia/ariadne/app.py 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 class FileMixin ( AriadneMixin ): \"\"\"\u7528\u4e8e\u5bf9\u6587\u4ef6\u8fdb\u884c\u5404\u79cd\u64cd\u4f5c\u7684 Mixin \u7c7b.\"\"\" async def getFileIterator ( self , target : Union [ Group , int ], id : str = \"\" , offset : int = 0 , size : int = 1 , with_download_info : bool = False , ) -> AsyncGenerator [ FileInfo , None ]: \"\"\" \u4ee5\u751f\u6210\u5668\u5f62\u5f0f\u5217\u51fa\u6307\u5b9a\u6587\u4ef6\u5939\u4e0b\u7684\u6240\u6709\u6587\u4ef6. Args: target (Union[Group, int]): \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \\ \u4e3a\u7fa4\u7ec4\u6216\u7fa4\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) id (str): \u6587\u4ef6\u5939ID, \u7a7a\u4e32\u4e3a\u6839\u76ee\u5f55 offset (int): \u8d77\u59cb\u5206\u9875\u504f\u79fb size (int): \u5355\u6b21\u5206\u9875\u5927\u5c0f with_download_info (bool): \u662f\u5426\u643a\u5e26\u4e0b\u8f7d\u4fe1\u606f, \u65e0\u5fc5\u8981\u4e0d\u8981\u643a\u5e26 Returns: AsyncGenerator[FileInfo, None]: \u6587\u4ef6\u4fe1\u606f\u751f\u6210\u5668. \"\"\" target = int ( target ) current_offset = offset cache : List [ FileInfo ] = [] while True : for file_info in cache : yield file_info cache = await self . getFileList ( target , id , current_offset , size , with_download_info ) current_offset += len ( cache ) if not cache : return @app_ctx_manager async def getFileList ( self , target : Union [ Group , int ], id : str = \"\" , offset : Optional [ int ] = 0 , size : Optional [ int ] = 1 , with_download_info : bool = False , ) -> List [ FileInfo ]: \"\"\" \u5217\u51fa\u6307\u5b9a\u6587\u4ef6\u5939\u4e0b\u7684\u6240\u6709\u6587\u4ef6. Args: target (Union[Group, int]): \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \\ \u4e3a\u7fa4\u7ec4\u6216\u7fa4\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) id (str): \u6587\u4ef6\u5939ID, \u7a7a\u4e32\u4e3a\u6839\u76ee\u5f55 offset (int): \u5206\u9875\u504f\u79fb size (int): \u5206\u9875\u5927\u5c0f with_download_info (bool): \u662f\u5426\u643a\u5e26\u4e0b\u8f7d\u4fe1\u606f, \u65e0\u5fc5\u8981\u4e0d\u8981\u643a\u5e26 Returns: List[FileInfo]: \u8fd4\u56de\u7684\u6587\u4ef6\u4fe1\u606f\u5217\u8868. \"\"\" target = int ( target ) result = await self . adapter . call_api ( \"file/list\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"id\" : id , \"target\" : target , \"withDownloadInfo\" : str ( with_download_info ), # yarl don't accept boolean \"offset\" : offset , \"size\" : size , }, ) return [ FileInfo . parse_obj ( i ) for i in result ] @app_ctx_manager async def getFileInfo ( self , target : Union [ Friend , Group , int ], id : str = \"\" , with_download_info : bool = False , ) -> FileInfo : \"\"\" \u83b7\u53d6\u6307\u5b9a\u6587\u4ef6\u7684\u4fe1\u606f. Args: target (Union[Friend, Group, int]): \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \\ \u4e3a\u7fa4\u7ec4\u6216\u597d\u53cb\u6216QQ\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) id (str): \u6587\u4ef6ID, \u7a7a\u4e32\u4e3a\u6839\u76ee\u5f55 with_download_info (bool): \u662f\u5426\u643a\u5e26\u4e0b\u8f7d\u4fe1\u606f, \u65e0\u5fc5\u8981\u4e0d\u8981\u643a\u5e26 Returns: FileInfo: \u8fd4\u56de\u7684\u6587\u4ef6\u4fe1\u606f. \"\"\" if isinstance ( target , Friend ): raise NotImplementedError ( \"Not implemented for friend\" ) target = target . id if isinstance ( target , Friend ) else target target = target . id if isinstance ( target , Group ) else target result = await self . adapter . call_api ( \"file/info\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"id\" : id , \"target\" : target , \"withDownloadInfo\" : str ( with_download_info ), # yarl don't accept boolean }, ) return FileInfo . parse_obj ( result ) @app_ctx_manager async def makeDirectory ( self , target : Union [ Friend , Group , int ], name : str , id : str = \"\" , ) -> FileInfo : \"\"\" \u5728\u6307\u5b9a\u4f4d\u7f6e\u521b\u5efa\u65b0\u6587\u4ef6\u5939. Args: target (Union[Friend, Group, int]): \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \\ \u4e3a\u7fa4\u7ec4\u6216\u597d\u53cb\u6216QQ\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) name (str): \u8981\u521b\u5efa\u7684\u6587\u4ef6\u5939\u540d\u79f0. id (str): \u4e0a\u7ea7\u6587\u4ef6\u5939ID, \u7a7a\u4e32\u4e3a\u6839\u76ee\u5f55 Returns: FileInfo: \u65b0\u521b\u5efa\u6587\u4ef6\u5939\u7684\u4fe1\u606f. \"\"\" if isinstance ( target , Friend ): raise NotImplementedError ( \"Not implemented for friend\" ) target = target . id if isinstance ( target , Friend ) else target target = target . id if isinstance ( target , Group ) else target result = await self . adapter . call_api ( \"file/mkdir\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"id\" : id , \"name\" : name , \"target\" : target , }, ) return FileInfo . parse_obj ( result ) @app_ctx_manager async def deleteFile ( self , target : Union [ Friend , Group , int ], id : str = \"\" , ) -> None : \"\"\" \u5220\u9664\u6307\u5b9a\u6587\u4ef6. Args: target (Union[Friend, Group, int]): \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \\ \u4e3a\u7fa4\u7ec4\u6216\u597d\u53cb\u6216QQ\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) id (str): \u6587\u4ef6ID Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" if isinstance ( target , Friend ): raise NotImplementedError ( \"Not implemented for friend\" ) target = target . id if isinstance ( target , Friend ) else target target = target . id if isinstance ( target , Group ) else target await self . adapter . call_api ( \"file/delete\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"id\" : id , \"target\" : target , }, ) @app_ctx_manager async def moveFile ( self , target : Union [ Friend , Group , int ], id : str = \"\" , dest_id : str = \"\" , ) -> None : \"\"\" \u79fb\u52a8\u6307\u5b9a\u6587\u4ef6. Args: target (Union[Friend, Group, int]): \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \\ \u4e3a\u7fa4\u7ec4\u6216\u597d\u53cb\u6216QQ\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) id (str): \u6e90\u6587\u4ef6ID dest_id (str): \u76ee\u6807\u6587\u4ef6\u5939ID Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" if isinstance ( target , Friend ): raise NotImplementedError ( \"Not implemented for friend\" ) target = target . id if isinstance ( target , Friend ) else target target = target . id if isinstance ( target , Group ) else target await self . adapter . call_api ( \"file/move\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"id\" : id , \"target\" : target , \"moveTo\" : dest_id , }, ) @app_ctx_manager async def renameFile ( self , target : Union [ Friend , Group , int ], id : str = \"\" , dest_name : str = \"\" , ) -> None : \"\"\" \u91cd\u547d\u540d\u6307\u5b9a\u6587\u4ef6. Args: target (Union[Friend, Group, int]): \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \\ \u4e3a\u7fa4\u7ec4\u6216\u597d\u53cb\u6216QQ\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) id (str): \u6e90\u6587\u4ef6ID dest_name (str): \u76ee\u6807\u6587\u4ef6\u65b0\u540d\u79f0. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" if isinstance ( target , Friend ): raise NotImplementedError ( \"Not implemented for friend\" ) target = target . id if isinstance ( target , Friend ) else target target = target . id if isinstance ( target , Group ) else target await self . adapter . call_api ( \"file/rename\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"id\" : id , \"target\" : target , \"renameTo\" : dest_name , }, ) @app_ctx_manager async def uploadFile ( self , data : Union [ bytes , io . IOBase , os . PathLike ], method : Union [ str , UploadMethod , None ] = None , target : Union [ Friend , Group , int ] = - 1 , path : str = \"\" , name : str = \"\" , ) -> \"FileInfo\" : \"\"\" \u4e0a\u4f20\u6587\u4ef6\u5230\u6307\u5b9a\u76ee\u6807, \u9700\u8981\u63d0\u4f9b: \u6587\u4ef6\u7684\u539f\u59cb\u6570\u636e(bytes), \u6587\u4ef6\u7684\u4e0a\u4f20\u7c7b\u578b, \u4e0a\u4f20\u76ee\u6807, (\u53ef\u9009)\u4e0a\u4f20\u76ee\u5f55ID. Args: data (Union[bytes, io.IOBase, os.PathLike]): \u6587\u4ef6\u7684\u539f\u59cb\u6570\u636e method (str | UploadMethod, optional): \u6587\u4ef6\u7684\u4e0a\u4f20\u7c7b\u578b target (Union[Friend, Group, int]): \u6587\u4ef6\u4e0a\u4f20\u76ee\u6807, \u5373\u7fa4\u7ec4 path (str): \u76ee\u6807\u8def\u5f84, \u9ed8\u8ba4\u4e3a\u6839\u8def\u5f84. name (str): \u6587\u4ef6\u540d, \u53ef\u9009, \u82e5 path \u5b58\u5728\u659c\u6760\u53ef\u4ece path \u63a8\u65ad. Returns: FileInfo: \u6587\u4ef6\u4fe1\u606f \"\"\" method = str ( method or UploadMethod [ target . __class__ . __name__ ]) . lower () if method != \"group\" : raise NotImplementedError ( f \"Not implemented for { method } \" ) target = target . id if isinstance ( target , ( Friend , Group )) else target if \"/\" in path and not name : path , name = path . rsplit ( \"/\" , 1 ) if isinstance ( data , os . PathLike ): data = open ( data , \"rb\" ) result = await self . adapter . call_api ( \"file/upload\" , CallMethod . MULTIPART , { \"sessionKey\" : self . session_key , \"type\" : method , \"target\" : str ( target ), \"path\" : path , \"file\" : ( data , { \"filename\" : name } if name else {}), }, ) return FileInfo . parse_obj ( result )","title":"FileMixin"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.FileMixin.deleteFile","text":"deleteFile ( target : Union [ Friend , Group , int ], id : str = '' ) -> None \u5220\u9664\u6307\u5b9a\u6587\u4ef6. Parameters: Name Type Description Default target Union [ Friend , Group , int ] \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \u4e3a\u7fa4\u7ec4\u6216\u597d\u53cb\u6216QQ\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) required id str \u6587\u4ef6ID '' Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 @app_ctx_manager async def deleteFile ( self , target : Union [ Friend , Group , int ], id : str = \"\" , ) -> None : \"\"\" \u5220\u9664\u6307\u5b9a\u6587\u4ef6. Args: target (Union[Friend, Group, int]): \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \\ \u4e3a\u7fa4\u7ec4\u6216\u597d\u53cb\u6216QQ\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) id (str): \u6587\u4ef6ID Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" if isinstance ( target , Friend ): raise NotImplementedError ( \"Not implemented for friend\" ) target = target . id if isinstance ( target , Friend ) else target target = target . id if isinstance ( target , Group ) else target await self . adapter . call_api ( \"file/delete\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"id\" : id , \"target\" : target , }, )","title":"deleteFile()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.FileMixin.getFileInfo","text":"getFileInfo ( target : Union [ Friend , Group , int ], id : str = '' , with_download_info : bool = False ) -> FileInfo \u83b7\u53d6\u6307\u5b9a\u6587\u4ef6\u7684\u4fe1\u606f. Parameters: Name Type Description Default target Union [ Friend , Group , int ] \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \u4e3a\u7fa4\u7ec4\u6216\u597d\u53cb\u6216QQ\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) required id str \u6587\u4ef6ID, \u7a7a\u4e32\u4e3a\u6839\u76ee\u5f55 '' with_download_info bool \u662f\u5426\u643a\u5e26\u4e0b\u8f7d\u4fe1\u606f, \u65e0\u5fc5\u8981\u4e0d\u8981\u643a\u5e26 False Returns: Name Type Description FileInfo FileInfo \u8fd4\u56de\u7684\u6587\u4ef6\u4fe1\u606f. Source code in graia/ariadne/app.py 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 @app_ctx_manager async def getFileInfo ( self , target : Union [ Friend , Group , int ], id : str = \"\" , with_download_info : bool = False , ) -> FileInfo : \"\"\" \u83b7\u53d6\u6307\u5b9a\u6587\u4ef6\u7684\u4fe1\u606f. Args: target (Union[Friend, Group, int]): \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \\ \u4e3a\u7fa4\u7ec4\u6216\u597d\u53cb\u6216QQ\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) id (str): \u6587\u4ef6ID, \u7a7a\u4e32\u4e3a\u6839\u76ee\u5f55 with_download_info (bool): \u662f\u5426\u643a\u5e26\u4e0b\u8f7d\u4fe1\u606f, \u65e0\u5fc5\u8981\u4e0d\u8981\u643a\u5e26 Returns: FileInfo: \u8fd4\u56de\u7684\u6587\u4ef6\u4fe1\u606f. \"\"\" if isinstance ( target , Friend ): raise NotImplementedError ( \"Not implemented for friend\" ) target = target . id if isinstance ( target , Friend ) else target target = target . id if isinstance ( target , Group ) else target result = await self . adapter . call_api ( \"file/info\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"id\" : id , \"target\" : target , \"withDownloadInfo\" : str ( with_download_info ), # yarl don't accept boolean }, ) return FileInfo . parse_obj ( result )","title":"getFileInfo()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.FileMixin.getFileIterator","text":"getFileIterator ( target : Union [ Group , int ], id : str = '' , offset : int = 0 , size : int = 1 , with_download_info : bool = False ) -> AsyncGenerator [ FileInfo , None ] \u4ee5\u751f\u6210\u5668\u5f62\u5f0f\u5217\u51fa\u6307\u5b9a\u6587\u4ef6\u5939\u4e0b\u7684\u6240\u6709\u6587\u4ef6. Parameters: Name Type Description Default target Union [ Group , int ] \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \u4e3a\u7fa4\u7ec4\u6216\u7fa4\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) required id str \u6587\u4ef6\u5939ID, \u7a7a\u4e32\u4e3a\u6839\u76ee\u5f55 '' offset int \u8d77\u59cb\u5206\u9875\u504f\u79fb 0 size int \u5355\u6b21\u5206\u9875\u5927\u5c0f 1 with_download_info bool \u662f\u5426\u643a\u5e26\u4e0b\u8f7d\u4fe1\u606f, \u65e0\u5fc5\u8981\u4e0d\u8981\u643a\u5e26 False Returns: Type Description AsyncGenerator [ FileInfo , None] AsyncGenerator[FileInfo, None]: \u6587\u4ef6\u4fe1\u606f\u751f\u6210\u5668. Source code in graia/ariadne/app.py 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 async def getFileIterator ( self , target : Union [ Group , int ], id : str = \"\" , offset : int = 0 , size : int = 1 , with_download_info : bool = False , ) -> AsyncGenerator [ FileInfo , None ]: \"\"\" \u4ee5\u751f\u6210\u5668\u5f62\u5f0f\u5217\u51fa\u6307\u5b9a\u6587\u4ef6\u5939\u4e0b\u7684\u6240\u6709\u6587\u4ef6. Args: target (Union[Group, int]): \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \\ \u4e3a\u7fa4\u7ec4\u6216\u7fa4\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) id (str): \u6587\u4ef6\u5939ID, \u7a7a\u4e32\u4e3a\u6839\u76ee\u5f55 offset (int): \u8d77\u59cb\u5206\u9875\u504f\u79fb size (int): \u5355\u6b21\u5206\u9875\u5927\u5c0f with_download_info (bool): \u662f\u5426\u643a\u5e26\u4e0b\u8f7d\u4fe1\u606f, \u65e0\u5fc5\u8981\u4e0d\u8981\u643a\u5e26 Returns: AsyncGenerator[FileInfo, None]: \u6587\u4ef6\u4fe1\u606f\u751f\u6210\u5668. \"\"\" target = int ( target ) current_offset = offset cache : List [ FileInfo ] = [] while True : for file_info in cache : yield file_info cache = await self . getFileList ( target , id , current_offset , size , with_download_info ) current_offset += len ( cache ) if not cache : return","title":"getFileIterator()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.FileMixin.getFileList","text":"getFileList ( target : Union [ Group , int ], id : str = '' , offset : Optional [ int ] = 0 , size : Optional [ int ] = 1 , with_download_info : bool = False ) -> List [ FileInfo ] \u5217\u51fa\u6307\u5b9a\u6587\u4ef6\u5939\u4e0b\u7684\u6240\u6709\u6587\u4ef6. Parameters: Name Type Description Default target Union [ Group , int ] \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \u4e3a\u7fa4\u7ec4\u6216\u7fa4\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) required id str \u6587\u4ef6\u5939ID, \u7a7a\u4e32\u4e3a\u6839\u76ee\u5f55 '' offset int \u5206\u9875\u504f\u79fb 0 size int \u5206\u9875\u5927\u5c0f 1 with_download_info bool \u662f\u5426\u643a\u5e26\u4e0b\u8f7d\u4fe1\u606f, \u65e0\u5fc5\u8981\u4e0d\u8981\u643a\u5e26 False Returns: Type Description List [ FileInfo ] List[FileInfo]: \u8fd4\u56de\u7684\u6587\u4ef6\u4fe1\u606f\u5217\u8868. Source code in graia/ariadne/app.py 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 @app_ctx_manager async def getFileList ( self , target : Union [ Group , int ], id : str = \"\" , offset : Optional [ int ] = 0 , size : Optional [ int ] = 1 , with_download_info : bool = False , ) -> List [ FileInfo ]: \"\"\" \u5217\u51fa\u6307\u5b9a\u6587\u4ef6\u5939\u4e0b\u7684\u6240\u6709\u6587\u4ef6. Args: target (Union[Group, int]): \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \\ \u4e3a\u7fa4\u7ec4\u6216\u7fa4\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) id (str): \u6587\u4ef6\u5939ID, \u7a7a\u4e32\u4e3a\u6839\u76ee\u5f55 offset (int): \u5206\u9875\u504f\u79fb size (int): \u5206\u9875\u5927\u5c0f with_download_info (bool): \u662f\u5426\u643a\u5e26\u4e0b\u8f7d\u4fe1\u606f, \u65e0\u5fc5\u8981\u4e0d\u8981\u643a\u5e26 Returns: List[FileInfo]: \u8fd4\u56de\u7684\u6587\u4ef6\u4fe1\u606f\u5217\u8868. \"\"\" target = int ( target ) result = await self . adapter . call_api ( \"file/list\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"id\" : id , \"target\" : target , \"withDownloadInfo\" : str ( with_download_info ), # yarl don't accept boolean \"offset\" : offset , \"size\" : size , }, ) return [ FileInfo . parse_obj ( i ) for i in result ]","title":"getFileList()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.FileMixin.makeDirectory","text":"makeDirectory ( target : Union [ Friend , Group , int ], name : str , id : str = '' ) -> FileInfo \u5728\u6307\u5b9a\u4f4d\u7f6e\u521b\u5efa\u65b0\u6587\u4ef6\u5939. Parameters: Name Type Description Default target Union [ Friend , Group , int ] \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \u4e3a\u7fa4\u7ec4\u6216\u597d\u53cb\u6216QQ\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) required name str \u8981\u521b\u5efa\u7684\u6587\u4ef6\u5939\u540d\u79f0. required id str \u4e0a\u7ea7\u6587\u4ef6\u5939ID, \u7a7a\u4e32\u4e3a\u6839\u76ee\u5f55 '' Returns: Name Type Description FileInfo FileInfo \u65b0\u521b\u5efa\u6587\u4ef6\u5939\u7684\u4fe1\u606f. Source code in graia/ariadne/app.py 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 @app_ctx_manager async def makeDirectory ( self , target : Union [ Friend , Group , int ], name : str , id : str = \"\" , ) -> FileInfo : \"\"\" \u5728\u6307\u5b9a\u4f4d\u7f6e\u521b\u5efa\u65b0\u6587\u4ef6\u5939. Args: target (Union[Friend, Group, int]): \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \\ \u4e3a\u7fa4\u7ec4\u6216\u597d\u53cb\u6216QQ\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) name (str): \u8981\u521b\u5efa\u7684\u6587\u4ef6\u5939\u540d\u79f0. id (str): \u4e0a\u7ea7\u6587\u4ef6\u5939ID, \u7a7a\u4e32\u4e3a\u6839\u76ee\u5f55 Returns: FileInfo: \u65b0\u521b\u5efa\u6587\u4ef6\u5939\u7684\u4fe1\u606f. \"\"\" if isinstance ( target , Friend ): raise NotImplementedError ( \"Not implemented for friend\" ) target = target . id if isinstance ( target , Friend ) else target target = target . id if isinstance ( target , Group ) else target result = await self . adapter . call_api ( \"file/mkdir\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"id\" : id , \"name\" : name , \"target\" : target , }, ) return FileInfo . parse_obj ( result )","title":"makeDirectory()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.FileMixin.moveFile","text":"moveFile ( target : Union [ Friend , Group , int ], id : str = '' , dest_id : str = '' ) -> None \u79fb\u52a8\u6307\u5b9a\u6587\u4ef6. Parameters: Name Type Description Default target Union [ Friend , Group , int ] \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \u4e3a\u7fa4\u7ec4\u6216\u597d\u53cb\u6216QQ\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) required id str \u6e90\u6587\u4ef6ID '' dest_id str \u76ee\u6807\u6587\u4ef6\u5939ID '' Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 @app_ctx_manager async def moveFile ( self , target : Union [ Friend , Group , int ], id : str = \"\" , dest_id : str = \"\" , ) -> None : \"\"\" \u79fb\u52a8\u6307\u5b9a\u6587\u4ef6. Args: target (Union[Friend, Group, int]): \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \\ \u4e3a\u7fa4\u7ec4\u6216\u597d\u53cb\u6216QQ\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) id (str): \u6e90\u6587\u4ef6ID dest_id (str): \u76ee\u6807\u6587\u4ef6\u5939ID Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" if isinstance ( target , Friend ): raise NotImplementedError ( \"Not implemented for friend\" ) target = target . id if isinstance ( target , Friend ) else target target = target . id if isinstance ( target , Group ) else target await self . adapter . call_api ( \"file/move\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"id\" : id , \"target\" : target , \"moveTo\" : dest_id , }, )","title":"moveFile()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.FileMixin.renameFile","text":"renameFile ( target : Union [ Friend , Group , int ], id : str = '' , dest_name : str = '' ) -> None \u91cd\u547d\u540d\u6307\u5b9a\u6587\u4ef6. Parameters: Name Type Description Default target Union [ Friend , Group , int ] \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \u4e3a\u7fa4\u7ec4\u6216\u597d\u53cb\u6216QQ\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) required id str \u6e90\u6587\u4ef6ID '' dest_name str \u76ee\u6807\u6587\u4ef6\u65b0\u540d\u79f0. '' Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 @app_ctx_manager async def renameFile ( self , target : Union [ Friend , Group , int ], id : str = \"\" , dest_name : str = \"\" , ) -> None : \"\"\" \u91cd\u547d\u540d\u6307\u5b9a\u6587\u4ef6. Args: target (Union[Friend, Group, int]): \u8981\u5217\u51fa\u6587\u4ef6\u7684\u6839\u4f4d\u7f6e, \\ \u4e3a\u7fa4\u7ec4\u6216\u597d\u53cb\u6216QQ\u53f7 (\u5f53\u524d\u4ec5\u652f\u6301\u7fa4\u7ec4) id (str): \u6e90\u6587\u4ef6ID dest_name (str): \u76ee\u6807\u6587\u4ef6\u65b0\u540d\u79f0. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" if isinstance ( target , Friend ): raise NotImplementedError ( \"Not implemented for friend\" ) target = target . id if isinstance ( target , Friend ) else target target = target . id if isinstance ( target , Group ) else target await self . adapter . call_api ( \"file/rename\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"id\" : id , \"target\" : target , \"renameTo\" : dest_name , }, )","title":"renameFile()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.FileMixin.uploadFile","text":"uploadFile ( data : Union [ bytes , io . IOBase , os . PathLike ], method : Union [ str , UploadMethod , None ] = None , target : Union [ Friend , Group , int ] = - 1 , path : str = '' , name : str = '' ) -> 'FileInfo' \u4e0a\u4f20\u6587\u4ef6\u5230\u6307\u5b9a\u76ee\u6807, \u9700\u8981\u63d0\u4f9b: \u6587\u4ef6\u7684\u539f\u59cb\u6570\u636e(bytes), \u6587\u4ef6\u7684\u4e0a\u4f20\u7c7b\u578b, \u4e0a\u4f20\u76ee\u6807, (\u53ef\u9009)\u4e0a\u4f20\u76ee\u5f55ID. Parameters: Name Type Description Default data Union [ bytes , io . IOBase , os . PathLike ] \u6587\u4ef6\u7684\u539f\u59cb\u6570\u636e required method str | UploadMethod \u6587\u4ef6\u7684\u4e0a\u4f20\u7c7b\u578b None target Union [ Friend , Group , int ] \u6587\u4ef6\u4e0a\u4f20\u76ee\u6807, \u5373\u7fa4\u7ec4 -1 path str \u76ee\u6807\u8def\u5f84, \u9ed8\u8ba4\u4e3a\u6839\u8def\u5f84. '' name str \u6587\u4ef6\u540d, \u53ef\u9009, \u82e5 path \u5b58\u5728\u659c\u6760\u53ef\u4ece path \u63a8\u65ad. '' Returns: Name Type Description FileInfo 'FileInfo' \u6587\u4ef6\u4fe1\u606f Source code in graia/ariadne/app.py 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 @app_ctx_manager async def uploadFile ( self , data : Union [ bytes , io . IOBase , os . PathLike ], method : Union [ str , UploadMethod , None ] = None , target : Union [ Friend , Group , int ] = - 1 , path : str = \"\" , name : str = \"\" , ) -> \"FileInfo\" : \"\"\" \u4e0a\u4f20\u6587\u4ef6\u5230\u6307\u5b9a\u76ee\u6807, \u9700\u8981\u63d0\u4f9b: \u6587\u4ef6\u7684\u539f\u59cb\u6570\u636e(bytes), \u6587\u4ef6\u7684\u4e0a\u4f20\u7c7b\u578b, \u4e0a\u4f20\u76ee\u6807, (\u53ef\u9009)\u4e0a\u4f20\u76ee\u5f55ID. Args: data (Union[bytes, io.IOBase, os.PathLike]): \u6587\u4ef6\u7684\u539f\u59cb\u6570\u636e method (str | UploadMethod, optional): \u6587\u4ef6\u7684\u4e0a\u4f20\u7c7b\u578b target (Union[Friend, Group, int]): \u6587\u4ef6\u4e0a\u4f20\u76ee\u6807, \u5373\u7fa4\u7ec4 path (str): \u76ee\u6807\u8def\u5f84, \u9ed8\u8ba4\u4e3a\u6839\u8def\u5f84. name (str): \u6587\u4ef6\u540d, \u53ef\u9009, \u82e5 path \u5b58\u5728\u659c\u6760\u53ef\u4ece path \u63a8\u65ad. Returns: FileInfo: \u6587\u4ef6\u4fe1\u606f \"\"\" method = str ( method or UploadMethod [ target . __class__ . __name__ ]) . lower () if method != \"group\" : raise NotImplementedError ( f \"Not implemented for { method } \" ) target = target . id if isinstance ( target , ( Friend , Group )) else target if \"/\" in path and not name : path , name = path . rsplit ( \"/\" , 1 ) if isinstance ( data , os . PathLike ): data = open ( data , \"rb\" ) result = await self . adapter . call_api ( \"file/upload\" , CallMethod . MULTIPART , { \"sessionKey\" : self . session_key , \"type\" : method , \"target\" : str ( target ), \"path\" : path , \"file\" : ( data , { \"filename\" : name } if name else {}), }, ) return FileInfo . parse_obj ( result )","title":"uploadFile()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.MessageMixin","text":"Bases: AriadneMixin \u7528\u4e8e\u53d1\u9001, \u64a4\u56de, \u83b7\u53d6\u6d88\u606f\u7684 Mixin \u7c7b. Source code in graia/ariadne/app.pyclass MessageMixin ( AriadneMixin ): \"\"\"\u7528\u4e8e\u53d1\u9001, \u64a4\u56de, \u83b7\u53d6\u6d88\u606f\u7684 Mixin \u7c7b.\"\"\" default_send_action : SendMessageActionProtocol @app_ctx_manager async def getMessageFromId ( self , messageId : int ) -> MessageEvent : \"\"\"\u4ece \u6d88\u606f ID \u63d0\u53d6 \u6d88\u606f\u4e8b\u4ef6. Args: messageId (int): \u6d88\u606f ID. Returns: MessageEvent: \u63d0\u53d6\u7684\u4e8b\u4ef6. \"\"\" result = await self . adapter . call_api ( \"messageFromId\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"id\" : messageId }, ) return cast ( MessageEvent , self . adapter . build_event ( result )) @app_ctx_manager async def sendFriendMessage ( self , target : Union [ Friend , int ], message : MessageChain , * , quote : Optional [ Union [ Source , int ]] = None , ) -> BotMessage : \"\"\"\u53d1\u9001\u6d88\u606f\u7ed9\u597d\u53cb, \u53ef\u4ee5\u6307\u5b9a\u56de\u590d\u7684\u6d88\u606f. Args: target (Union[Friend, int]): \u6307\u5b9a\u7684\u597d\u53cb message (MessageChain): \u6709\u6548\u7684, \u53ef\u53d1\u9001\u7684(Sendable)\u6d88\u606f\u94fe. quote (Optional[Union[Source, int]], optional): \u9700\u8981\u56de\u590d\u7684\u6d88\u606f, \u4e0d\u8981\u5ffd\u89c6\u6211\u554a\u5582?!!, \u9ed8\u8ba4\u4e3a None. Returns: BotMessage: \u5373\u5f53\u524d\u4f1a\u8bdd\u8d26\u53f7\u6240\u53d1\u51fa\u6d88\u606f\u7684\u5143\u6570\u636e, \u5185\u5305\u542b\u6709\u4e00 `messageId` \u5c5e\u6027, \u53ef\u7528\u4e8e\u56de\u590d. \"\"\" from .event.message import ActiveFriendMessage with enter_message_send_context ( UploadMethod . Friend ): new_msg = message . copy () new_msg . prepare () result = await self . adapter . call_api ( \"sendFriendMessage\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : int ( target ), \"messageChain\" : new_msg . dict ()[ \"__root__\" ], ** ({ \"quote\" : quote . id if isinstance ( quote , Source ) else quote } if quote else {}), }, ) event : ActiveFriendMessage = ActiveFriendMessage ( messageChain = MessageChain ([ Source ( id = result [ \"messageId\" ], time = datetime . now ())]) + message , subject = ( await RelationshipMixin . getFriend ( self , int ( target ))), # type: ignore ) with enter_context ( self , event ): self . broadcast . postEvent ( event ) if result [ \"messageId\" ] < 0 : logger . warning ( \"Failed to send message, your account may be blocked.\" ) return BotMessage ( messageId = result [ \"messageId\" ], origin = message ) @app_ctx_manager async def sendGroupMessage ( self , target : Union [ Group , Member , int ], message : MessageChain , * , quote : Optional [ Union [ Source , int ]] = None , ) -> BotMessage : \"\"\"\u53d1\u9001\u6d88\u606f\u5230\u7fa4\u7ec4\u5185, \u53ef\u4ee5\u6307\u5b9a\u56de\u590d\u7684\u6d88\u606f. Args: target (Union[Group, Member, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4, \u53ef\u4ee5\u662f\u7fa4\u7ec4\u7684 ID \u4e5f\u53ef\u4ee5\u662f Group \u6216 Member \u5b9e\u4f8b. message (MessageChain): \u6709\u6548\u7684, \u53ef\u53d1\u9001\u7684(Sendable)\u6d88\u606f\u94fe. quote (Optional[Union[Source, int]], optional): \u9700\u8981\u56de\u590d\u7684\u6d88\u606f, \u4e0d\u8981\u5ffd\u89c6\u6211\u554a\u5582?!!, \u9ed8\u8ba4\u4e3a None. Returns: BotMessage: \u5373\u5f53\u524d\u4f1a\u8bdd\u8d26\u53f7\u6240\u53d1\u51fa\u6d88\u606f\u7684\u5143\u6570\u636e, \u5185\u5305\u542b\u6709\u4e00 `messageId` \u5c5e\u6027, \u53ef\u7528\u4e8e\u56de\u590d. \"\"\" from .event.message import ActiveGroupMessage if isinstance ( target , Member ): target = target . group with enter_message_send_context ( UploadMethod . Group ): new_msg = message . copy () new_msg . prepare () result = await self . adapter . call_api ( \"sendGroupMessage\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : int ( target ), \"messageChain\" : new_msg . dict ()[ \"__root__\" ], ** ({ \"quote\" : quote . id if isinstance ( quote , Source ) else quote } if quote else {}), }, ) event : ActiveGroupMessage = ActiveGroupMessage ( messageChain = MessageChain ([ Source ( id = result [ \"messageId\" ], time = datetime . now ())]) + message , subject = ( await RelationshipMixin . getGroup ( self , int ( target ))), # type: ignore ) with enter_context ( self , event ): self . broadcast . postEvent ( event ) if result [ \"messageId\" ] < 0 : logger . warning ( \"Failed to send message, your account may be blocked.\" ) return BotMessage ( messageId = result [ \"messageId\" ], origin = message ) @app_ctx_manager async def sendTempMessage ( self , target : Union [ Member , int ], message : MessageChain , group : Optional [ Union [ Group , int ]] = None , * , quote : Optional [ Union [ Source , int ]] = None , ) -> BotMessage : \"\"\"\u53d1\u9001\u4e34\u65f6\u4f1a\u8bdd\u7ed9\u7fa4\u7ec4\u4e2d\u7684\u7279\u5b9a\u6210\u5458, \u53ef\u6307\u5b9a\u56de\u590d\u7684\u6d88\u606f. Warning: \u672c API \u5927\u6982\u7387\u4f1a\u5bfc\u81f4\u8d26\u53f7\u98ce\u63a7/\u51bb\u7ed3. \u8bf7\u8c28\u614e\u4f7f\u7528. Args: group (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4, \u53ef\u4ee5\u662f\u7fa4\u7ec4\u7684 ID \u4e5f\u53ef\u4ee5\u662f Group \u5b9e\u4f8b. target (Union[Member, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4\u6210\u5458, \u53ef\u4ee5\u662f\u6210\u5458\u7684 ID \u4e5f\u53ef\u4ee5\u662f Member \u5b9e\u4f8b. message (MessageChain): \u6709\u6548\u7684, \u53ef\u53d1\u9001\u7684(Sendable)\u6d88\u606f\u94fe. quote (Optional[Union[Source, int]], optional): \u9700\u8981\u56de\u590d\u7684\u6d88\u606f, \u4e0d\u8981\u5ffd\u89c6\u6211\u554a\u5582?!!, \u9ed8\u8ba4\u4e3a None. Returns: BotMessage: \u5373\u5f53\u524d\u4f1a\u8bdd\u8d26\u53f7\u6240\u53d1\u51fa\u6d88\u606f\u7684\u5143\u6570\u636e, \u5185\u5305\u542b\u6709\u4e00 `messageId` \u5c5e\u6027, \u53ef\u7528\u4e8e\u56de\u590d. \"\"\" from .event.message import ActiveTempMessage new_msg = message . copy () new_msg . prepare () group = target . group if ( isinstance ( target , Member ) and not group ) else group if not group : raise ValueError ( \"Missing necessary argument: group\" ) with enter_message_send_context ( UploadMethod . Temp ): result = await self . adapter . call_api ( \"sendTempMessage\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"group\" : int ( group ), \"qq\" : int ( target ), \"messageChain\" : new_msg . dict ()[ \"__root__\" ], ** ({ \"quote\" : quote . id if isinstance ( quote , Source ) else quote } if quote else {}), }, ) event : ActiveTempMessage = ActiveTempMessage ( messageChain = MessageChain ([ Source ( id = result [ \"messageId\" ], time = datetime . now ())]) + message , subject = ( await RelationshipMixin . getMember ( self , int ( group ), int ( target ))), # type: ignore ) with enter_context ( self , event ): self . broadcast . postEvent ( event ) if result [ \"messageId\" ] < 0 : logger . warning ( \"Failed to send message, your account may be limited.\" ) return BotMessage ( messageId = result [ \"messageId\" ], origin = message ) @app_ctx_manager async def sendMessage ( self , target : Union [ MessageEvent , Group , Friend , Member ], message : MessageChain , * , quote : Union [ bool , int , Source , MessageChain ] = False , action : SendMessageActionProtocol [ \"T\" ] = ... , ) -> \"T\" : \"\"\" \u4f9d\u636e\u4f20\u5165\u7684 `target` \u81ea\u52a8\u53d1\u9001\u6d88\u606f. \u8bf7\u6ce8\u610f\u53d1\u9001\u7ed9\u7fa4\u6210\u5458\u65f6\u4f1a\u81ea\u52a8\u4f5c\u4e3a\u4e34\u65f6\u6d88\u606f\u53d1\u9001. Args: target (Union[MessageEvent, Group, Friend, Member]): \u6d88\u606f\u53d1\u9001\u76ee\u6807. message (MessageChain): \u8981\u53d1\u9001\u7684\u6d88\u606f\u94fe. quote (Union[bool, int, Source]): \u82e5\u4e3a\u5e03\u5c14\u7c7b\u578b, \u5219\u4f1a\u5c1d\u8bd5\u901a\u8fc7\u4f20\u5165\u5bf9\u8c61\u89e3\u6790\u8981\u56de\u590d\u7684\u6d88\u606f, \\ \u5426\u5219\u4f1a\u89c6\u4e3a `messageId` \u5904\u7406. action (SendMessageCaller[T], optional): \u6d88\u606f\u53d1\u9001\u7684\u5904\u7406 action, \\ \u53ef\u4ee5\u5728 graia.ariadne.util.send \u67e5\u770b\u81ea\u5e26\u7684 action, \\ \u672a\u4f20\u5165\u4f7f\u7528\u9ed8\u8ba4 action Returns: Union[T, R]: \u9ed8\u8ba4\u5b9e\u73b0\u4e3a BotMessage \"\"\" action = action if action is not ... else self . default_send_action data : Dict [ Any , Any ] = { \"message\" : message } # quote if isinstance ( quote , bool ) and quote and isinstance ( target , MessageEvent ): data [ \"quote\" ] = target . messageChain . getFirst ( Source ) elif isinstance ( quote , ( int , Source )): data [ \"quote\" ] = quote elif isinstance ( quote , MessageChain ): data [ \"quote\" ] = quote . getFirst ( Source ) # target: MessageEvent if isinstance ( target , GroupMessage ): data [ \"target\" ] = target . sender . group elif isinstance ( target , ( FriendMessage , TempMessage )): data [ \"target\" ] = target . sender else : # target: sender data [ \"target\" ] = target send_data : SendMessageDict = SendMessageDict ( ** data ) # send message data = await action . param ( send_data ) # type: ignore try : if isinstance ( data [ \"target\" ], Friend ): val = await self . sendFriendMessage ( ** data ) elif isinstance ( data [ \"target\" ], Group ): val = await self . sendGroupMessage ( ** data ) elif isinstance ( data [ \"target\" ], Member ): val = await self . sendTempMessage ( ** data ) else : logger . warning ( f \"Unable to send { data [ 'message' ] } to { data [ 'target' ] } of type { type ( data [ 'target' ]) } \" ) return await action . result ( BotMessage ( messageId =- 1 , origin = data [ \"message\" ])) except Exception as e : e . send_data = send_data # type: ignore return await action . exception ( cast ( SendMessageException , e )) else : return await action . result ( val ) @app_ctx_manager async def sendNudge ( self , target : Union [ Friend , Member , int ], group : Optional [ Union [ Group , int ]] = None ) -> None : \"\"\" \u5411\u6307\u5b9a\u7684\u7fa4\u7ec4\u6210\u5458\u6216\u597d\u53cb\u53d1\u9001\u6233\u4e00\u6233\u6d88\u606f. Args: target (Union[Friend, Member]): \u53d1\u9001\u6233\u4e00\u6233\u7684\u76ee\u6807. group (Union[Group, int], optional): \u53d1\u9001\u7684\u7fa4\u7ec4. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" target_id = target if isinstance ( target , int ) else target . id subject_id = ( group . id if isinstance ( group , Group ) else group ) or ( target . group . id if isinstance ( target , Member ) else target_id ) kind = \"Group\" if group or isinstance ( target , Member ) else \"Friend\" await self . adapter . call_api ( \"sendNudge\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : target_id , \"subject\" : subject_id , \"kind\" : kind , }, ) @app_ctx_manager async def recallMessage ( self , target : Union [ MessageChain , Source , BotMessage , int ]) -> None : \"\"\"\u64a4\u56de\u7279\u5b9a\u7684\u6d88\u606f; \u64a4\u56de\u81ea\u5df1\u7684\u6d88\u606f\u9700\u8981\u5728\u53d1\u51fa\u540e 2 \u5206\u949f\u5185\u624d\u80fd\u6210\u529f\u64a4\u56de; \u5982\u679c\u5728\u7fa4\u7ec4\u5185, \u9700\u8981\u64a4\u56de\u4ed6\u4eba\u7684\u6d88\u606f\u5219\u9700\u8981\u7ba1\u7406\u5458/\u7fa4\u4e3b\u6743\u9650. Args: target (Union[Source, BotMessage, int]): \u7279\u5b9a\u4fe1\u606f\u7684 `messageId`, \\ \u53ef\u4ee5\u662f `Source` \u5b9e\u4f8b, `BotMessage` \u5b9e\u4f8b\u6216\u8005\u662f\u5355\u7eaf\u7684 int \u6574\u6570. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" if isinstance ( target , BotMessage ): target = target . messageId elif isinstance ( target , Source ): target = target . id elif isinstance ( target , MessageChain ): target = target . getFirst ( Source ) . id await self . adapter . call_api ( \"recall\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : target }, )","title":"MessageMixin"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.MessageMixin.getMessageFromId","text":"getMessageFromId ( messageId : int ) -> MessageEvent \u4ece \u6d88\u606f ID \u63d0\u53d6 \u6d88\u606f\u4e8b\u4ef6. Parameters: Name Type Description Default messageId int \u6d88\u606f ID. required Returns: Name Type Description MessageEvent MessageEvent \u63d0\u53d6\u7684\u4e8b\u4ef6. Source code in graia/ariadne/app.py 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 @app_ctx_manager async def getMessageFromId ( self , messageId : int ) -> MessageEvent : \"\"\"\u4ece \u6d88\u606f ID \u63d0\u53d6 \u6d88\u606f\u4e8b\u4ef6. Args: messageId (int): \u6d88\u606f ID. Returns: MessageEvent: \u63d0\u53d6\u7684\u4e8b\u4ef6. \"\"\" result = await self . adapter . call_api ( \"messageFromId\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"id\" : messageId }, ) return cast ( MessageEvent , self . adapter . build_event ( result ))","title":"getMessageFromId()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.MessageMixin.recallMessage","text":"recallMessage ( target : Union [ MessageChain , Source , BotMessage , int ]) -> None \u64a4\u56de\u7279\u5b9a\u7684\u6d88\u606f; \u64a4\u56de\u81ea\u5df1\u7684\u6d88\u606f\u9700\u8981\u5728\u53d1\u51fa\u540e 2 \u5206\u949f\u5185\u624d\u80fd\u6210\u529f\u64a4\u56de; \u5982\u679c\u5728\u7fa4\u7ec4\u5185, \u9700\u8981\u64a4\u56de\u4ed6\u4eba\u7684\u6d88\u606f\u5219\u9700\u8981\u7ba1\u7406\u5458/\u7fa4\u4e3b\u6743\u9650. Parameters: Name Type Description Default target Union [ Source , BotMessage , int ] \u7279\u5b9a\u4fe1\u606f\u7684 messageId , \u53ef\u4ee5\u662f Source \u5b9e\u4f8b, BotMessage \u5b9e\u4f8b\u6216\u8005\u662f\u5355\u7eaf\u7684 int \u6574\u6570. required Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 @app_ctx_manager async def recallMessage ( self , target : Union [ MessageChain , Source , BotMessage , int ]) -> None : \"\"\"\u64a4\u56de\u7279\u5b9a\u7684\u6d88\u606f; \u64a4\u56de\u81ea\u5df1\u7684\u6d88\u606f\u9700\u8981\u5728\u53d1\u51fa\u540e 2 \u5206\u949f\u5185\u624d\u80fd\u6210\u529f\u64a4\u56de; \u5982\u679c\u5728\u7fa4\u7ec4\u5185, \u9700\u8981\u64a4\u56de\u4ed6\u4eba\u7684\u6d88\u606f\u5219\u9700\u8981\u7ba1\u7406\u5458/\u7fa4\u4e3b\u6743\u9650. Args: target (Union[Source, BotMessage, int]): \u7279\u5b9a\u4fe1\u606f\u7684 `messageId`, \\ \u53ef\u4ee5\u662f `Source` \u5b9e\u4f8b, `BotMessage` \u5b9e\u4f8b\u6216\u8005\u662f\u5355\u7eaf\u7684 int \u6574\u6570. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" if isinstance ( target , BotMessage ): target = target . messageId elif isinstance ( target , Source ): target = target . id elif isinstance ( target , MessageChain ): target = target . getFirst ( Source ) . id await self . adapter . call_api ( \"recall\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : target }, )","title":"recallMessage()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.MessageMixin.sendFriendMessage","text":"sendFriendMessage ( target : Union [ Friend , int ], message : MessageChain , * , quote : Optional [ Union [ Source , int ]] = None ) -> BotMessage \u53d1\u9001\u6d88\u606f\u7ed9\u597d\u53cb, \u53ef\u4ee5\u6307\u5b9a\u56de\u590d\u7684\u6d88\u606f. Parameters: Name Type Description Default target Union [ Friend , int ] \u6307\u5b9a\u7684\u597d\u53cb required message MessageChain \u6709\u6548\u7684, \u53ef\u53d1\u9001\u7684(Sendable)\u6d88\u606f\u94fe. required quote Optional [ Union [ Source , int ]] \u9700\u8981\u56de\u590d\u7684\u6d88\u606f, \u4e0d\u8981\u5ffd\u89c6\u6211\u554a\u5582?!!, \u9ed8\u8ba4\u4e3a None. None Returns: Name Type Description BotMessage BotMessage \u5373\u5f53\u524d\u4f1a\u8bdd\u8d26\u53f7\u6240\u53d1\u51fa\u6d88\u606f\u7684\u5143\u6570\u636e, \u5185\u5305\u542b\u6709\u4e00 messageId \u5c5e\u6027, \u53ef\u7528\u4e8e\u56de\u590d. Source code in graia/ariadne/app.py 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 @app_ctx_manager async def sendFriendMessage ( self , target : Union [ Friend , int ], message : MessageChain , * , quote : Optional [ Union [ Source , int ]] = None , ) -> BotMessage : \"\"\"\u53d1\u9001\u6d88\u606f\u7ed9\u597d\u53cb, \u53ef\u4ee5\u6307\u5b9a\u56de\u590d\u7684\u6d88\u606f. Args: target (Union[Friend, int]): \u6307\u5b9a\u7684\u597d\u53cb message (MessageChain): \u6709\u6548\u7684, \u53ef\u53d1\u9001\u7684(Sendable)\u6d88\u606f\u94fe. quote (Optional[Union[Source, int]], optional): \u9700\u8981\u56de\u590d\u7684\u6d88\u606f, \u4e0d\u8981\u5ffd\u89c6\u6211\u554a\u5582?!!, \u9ed8\u8ba4\u4e3a None. Returns: BotMessage: \u5373\u5f53\u524d\u4f1a\u8bdd\u8d26\u53f7\u6240\u53d1\u51fa\u6d88\u606f\u7684\u5143\u6570\u636e, \u5185\u5305\u542b\u6709\u4e00 `messageId` \u5c5e\u6027, \u53ef\u7528\u4e8e\u56de\u590d. \"\"\" from .event.message import ActiveFriendMessage with enter_message_send_context ( UploadMethod . Friend ): new_msg = message . copy () new_msg . prepare () result = await self . adapter . call_api ( \"sendFriendMessage\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : int ( target ), \"messageChain\" : new_msg . dict ()[ \"__root__\" ], ** ({ \"quote\" : quote . id if isinstance ( quote , Source ) else quote } if quote else {}), }, ) event : ActiveFriendMessage = ActiveFriendMessage ( messageChain = MessageChain ([ Source ( id = result [ \"messageId\" ], time = datetime . now ())]) + message , subject = ( await RelationshipMixin . getFriend ( self , int ( target ))), # type: ignore ) with enter_context ( self , event ): self . broadcast . postEvent ( event ) if result [ \"messageId\" ] < 0 : logger . warning ( \"Failed to send message, your account may be blocked.\" ) return BotMessage ( messageId = result [ \"messageId\" ], origin = message )","title":"sendFriendMessage()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.MessageMixin.sendGroupMessage","text":"sendGroupMessage ( target : Union [ Group , Member , int ], message : MessageChain , * , quote : Optional [ Union [ Source , int ]] = None ) -> BotMessage \u53d1\u9001\u6d88\u606f\u5230\u7fa4\u7ec4\u5185, \u53ef\u4ee5\u6307\u5b9a\u56de\u590d\u7684\u6d88\u606f. Parameters: Name Type Description Default target Union [ Group , Member , int ] \u6307\u5b9a\u7684\u7fa4\u7ec4, \u53ef\u4ee5\u662f\u7fa4\u7ec4\u7684 ID \u4e5f\u53ef\u4ee5\u662f Group \u6216 Member \u5b9e\u4f8b. required message MessageChain \u6709\u6548\u7684, \u53ef\u53d1\u9001\u7684(Sendable)\u6d88\u606f\u94fe. required quote Optional [ Union [ Source , int ]] \u9700\u8981\u56de\u590d\u7684\u6d88\u606f, \u4e0d\u8981\u5ffd\u89c6\u6211\u554a\u5582?!!, \u9ed8\u8ba4\u4e3a None. None Returns: Name Type Description BotMessage BotMessage \u5373\u5f53\u524d\u4f1a\u8bdd\u8d26\u53f7\u6240\u53d1\u51fa\u6d88\u606f\u7684\u5143\u6570\u636e, \u5185\u5305\u542b\u6709\u4e00 messageId \u5c5e\u6027, \u53ef\u7528\u4e8e\u56de\u590d. Source code in graia/ariadne/app.py 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 @app_ctx_manager async def sendGroupMessage ( self , target : Union [ Group , Member , int ], message : MessageChain , * , quote : Optional [ Union [ Source , int ]] = None , ) -> BotMessage : \"\"\"\u53d1\u9001\u6d88\u606f\u5230\u7fa4\u7ec4\u5185, \u53ef\u4ee5\u6307\u5b9a\u56de\u590d\u7684\u6d88\u606f. Args: target (Union[Group, Member, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4, \u53ef\u4ee5\u662f\u7fa4\u7ec4\u7684 ID \u4e5f\u53ef\u4ee5\u662f Group \u6216 Member \u5b9e\u4f8b. message (MessageChain): \u6709\u6548\u7684, \u53ef\u53d1\u9001\u7684(Sendable)\u6d88\u606f\u94fe. quote (Optional[Union[Source, int]], optional): \u9700\u8981\u56de\u590d\u7684\u6d88\u606f, \u4e0d\u8981\u5ffd\u89c6\u6211\u554a\u5582?!!, \u9ed8\u8ba4\u4e3a None. Returns: BotMessage: \u5373\u5f53\u524d\u4f1a\u8bdd\u8d26\u53f7\u6240\u53d1\u51fa\u6d88\u606f\u7684\u5143\u6570\u636e, \u5185\u5305\u542b\u6709\u4e00 `messageId` \u5c5e\u6027, \u53ef\u7528\u4e8e\u56de\u590d. \"\"\" from .event.message import ActiveGroupMessage if isinstance ( target , Member ): target = target . group with enter_message_send_context ( UploadMethod . Group ): new_msg = message . copy () new_msg . prepare () result = await self . adapter . call_api ( \"sendGroupMessage\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : int ( target ), \"messageChain\" : new_msg . dict ()[ \"__root__\" ], ** ({ \"quote\" : quote . id if isinstance ( quote , Source ) else quote } if quote else {}), }, ) event : ActiveGroupMessage = ActiveGroupMessage ( messageChain = MessageChain ([ Source ( id = result [ \"messageId\" ], time = datetime . now ())]) + message , subject = ( await RelationshipMixin . getGroup ( self , int ( target ))), # type: ignore ) with enter_context ( self , event ): self . broadcast . postEvent ( event ) if result [ \"messageId\" ] < 0 : logger . warning ( \"Failed to send message, your account may be blocked.\" ) return BotMessage ( messageId = result [ \"messageId\" ], origin = message )","title":"sendGroupMessage()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.MessageMixin.sendMessage","text":"sendMessage ( target : Union [ MessageEvent , Group , Friend , Member ], message : MessageChain , * , quote : Union [ bool , int , Source , MessageChain ] = False , action : SendMessageActionProtocol [ 'T' ] = Ellipsis ) -> 'T' \u4f9d\u636e\u4f20\u5165\u7684 target \u81ea\u52a8\u53d1\u9001\u6d88\u606f. \u8bf7\u6ce8\u610f\u53d1\u9001\u7ed9\u7fa4\u6210\u5458\u65f6\u4f1a\u81ea\u52a8\u4f5c\u4e3a\u4e34\u65f6\u6d88\u606f\u53d1\u9001. Parameters: Name Type Description Default target Union [ MessageEvent , Group , Friend , Member ] \u6d88\u606f\u53d1\u9001\u76ee\u6807. required message MessageChain \u8981\u53d1\u9001\u7684\u6d88\u606f\u94fe. required quote Union [ bool , int , Source ] \u82e5\u4e3a\u5e03\u5c14\u7c7b\u578b, \u5219\u4f1a\u5c1d\u8bd5\u901a\u8fc7\u4f20\u5165\u5bf9\u8c61\u89e3\u6790\u8981\u56de\u590d\u7684\u6d88\u606f, \u5426\u5219\u4f1a\u89c6\u4e3a messageId \u5904\u7406. False action SendMessageCaller [ T ] \u6d88\u606f\u53d1\u9001\u7684\u5904\u7406 action, \u53ef\u4ee5\u5728 graia.ariadne.util.send \u67e5\u770b\u81ea\u5e26\u7684 action, \u672a\u4f20\u5165\u4f7f\u7528\u9ed8\u8ba4 action Ellipsis Returns: Type Description 'T' Union[T, R]: \u9ed8\u8ba4\u5b9e\u73b0\u4e3a BotMessage Source code in graia/ariadne/app.py 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 @app_ctx_manager async def sendMessage ( self , target : Union [ MessageEvent , Group , Friend , Member ], message : MessageChain , * , quote : Union [ bool , int , Source , MessageChain ] = False , action : SendMessageActionProtocol [ \"T\" ] = ... , ) -> \"T\" : \"\"\" \u4f9d\u636e\u4f20\u5165\u7684 `target` \u81ea\u52a8\u53d1\u9001\u6d88\u606f. \u8bf7\u6ce8\u610f\u53d1\u9001\u7ed9\u7fa4\u6210\u5458\u65f6\u4f1a\u81ea\u52a8\u4f5c\u4e3a\u4e34\u65f6\u6d88\u606f\u53d1\u9001. Args: target (Union[MessageEvent, Group, Friend, Member]): \u6d88\u606f\u53d1\u9001\u76ee\u6807. message (MessageChain): \u8981\u53d1\u9001\u7684\u6d88\u606f\u94fe. quote (Union[bool, int, Source]): \u82e5\u4e3a\u5e03\u5c14\u7c7b\u578b, \u5219\u4f1a\u5c1d\u8bd5\u901a\u8fc7\u4f20\u5165\u5bf9\u8c61\u89e3\u6790\u8981\u56de\u590d\u7684\u6d88\u606f, \\ \u5426\u5219\u4f1a\u89c6\u4e3a `messageId` \u5904\u7406. action (SendMessageCaller[T], optional): \u6d88\u606f\u53d1\u9001\u7684\u5904\u7406 action, \\ \u53ef\u4ee5\u5728 graia.ariadne.util.send \u67e5\u770b\u81ea\u5e26\u7684 action, \\ \u672a\u4f20\u5165\u4f7f\u7528\u9ed8\u8ba4 action Returns: Union[T, R]: \u9ed8\u8ba4\u5b9e\u73b0\u4e3a BotMessage \"\"\" action = action if action is not ... else self . default_send_action data : Dict [ Any , Any ] = { \"message\" : message } # quote if isinstance ( quote , bool ) and quote and isinstance ( target , MessageEvent ): data [ \"quote\" ] = target . messageChain . getFirst ( Source ) elif isinstance ( quote , ( int , Source )): data [ \"quote\" ] = quote elif isinstance ( quote , MessageChain ): data [ \"quote\" ] = quote . getFirst ( Source ) # target: MessageEvent if isinstance ( target , GroupMessage ): data [ \"target\" ] = target . sender . group elif isinstance ( target , ( FriendMessage , TempMessage )): data [ \"target\" ] = target . sender else : # target: sender data [ \"target\" ] = target send_data : SendMessageDict = SendMessageDict ( ** data ) # send message data = await action . param ( send_data ) # type: ignore try : if isinstance ( data [ \"target\" ], Friend ): val = await self . sendFriendMessage ( ** data ) elif isinstance ( data [ \"target\" ], Group ): val = await self . sendGroupMessage ( ** data ) elif isinstance ( data [ \"target\" ], Member ): val = await self . sendTempMessage ( ** data ) else : logger . warning ( f \"Unable to send { data [ 'message' ] } to { data [ 'target' ] } of type { type ( data [ 'target' ]) } \" ) return await action . result ( BotMessage ( messageId =- 1 , origin = data [ \"message\" ])) except Exception as e : e . send_data = send_data # type: ignore return await action . exception ( cast ( SendMessageException , e )) else : return await action . result ( val )","title":"sendMessage()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.MessageMixin.sendNudge","text":"sendNudge ( target : Union [ Friend , Member , int ], group : Optional [ Union [ Group , int ]] = None ) -> None \u5411\u6307\u5b9a\u7684\u7fa4\u7ec4\u6210\u5458\u6216\u597d\u53cb\u53d1\u9001\u6233\u4e00\u6233\u6d88\u606f. Parameters: Name Type Description Default target Union [ Friend , Member ] \u53d1\u9001\u6233\u4e00\u6233\u7684\u76ee\u6807. required group Union [ Group , int ] \u53d1\u9001\u7684\u7fa4\u7ec4. None Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 @app_ctx_manager async def sendNudge ( self , target : Union [ Friend , Member , int ], group : Optional [ Union [ Group , int ]] = None ) -> None : \"\"\" \u5411\u6307\u5b9a\u7684\u7fa4\u7ec4\u6210\u5458\u6216\u597d\u53cb\u53d1\u9001\u6233\u4e00\u6233\u6d88\u606f. Args: target (Union[Friend, Member]): \u53d1\u9001\u6233\u4e00\u6233\u7684\u76ee\u6807. group (Union[Group, int], optional): \u53d1\u9001\u7684\u7fa4\u7ec4. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" target_id = target if isinstance ( target , int ) else target . id subject_id = ( group . id if isinstance ( group , Group ) else group ) or ( target . group . id if isinstance ( target , Member ) else target_id ) kind = \"Group\" if group or isinstance ( target , Member ) else \"Friend\" await self . adapter . call_api ( \"sendNudge\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : target_id , \"subject\" : subject_id , \"kind\" : kind , }, )","title":"sendNudge()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.MessageMixin.sendTempMessage","text":"sendTempMessage ( target : Union [ Member , int ], message : MessageChain , group : Optional [ Union [ Group , int ]] = None , * , quote : Optional [ Union [ Source , int ]] = None ) -> BotMessage \u53d1\u9001\u4e34\u65f6\u4f1a\u8bdd\u7ed9\u7fa4\u7ec4\u4e2d\u7684\u7279\u5b9a\u6210\u5458, \u53ef\u6307\u5b9a\u56de\u590d\u7684\u6d88\u606f. Warning \u672c API \u5927\u6982\u7387\u4f1a\u5bfc\u81f4\u8d26\u53f7\u98ce\u63a7/\u51bb\u7ed3. \u8bf7\u8c28\u614e\u4f7f\u7528. Parameters: Name Type Description Default group Union [ Group , int ] \u6307\u5b9a\u7684\u7fa4\u7ec4, \u53ef\u4ee5\u662f\u7fa4\u7ec4\u7684 ID \u4e5f\u53ef\u4ee5\u662f Group \u5b9e\u4f8b. None target Union [ Member , int ] \u6307\u5b9a\u7684\u7fa4\u7ec4\u6210\u5458, \u53ef\u4ee5\u662f\u6210\u5458\u7684 ID \u4e5f\u53ef\u4ee5\u662f Member \u5b9e\u4f8b. required message MessageChain \u6709\u6548\u7684, \u53ef\u53d1\u9001\u7684(Sendable)\u6d88\u606f\u94fe. required quote Optional [ Union [ Source , int ]] \u9700\u8981\u56de\u590d\u7684\u6d88\u606f, \u4e0d\u8981\u5ffd\u89c6\u6211\u554a\u5582?!!, \u9ed8\u8ba4\u4e3a None. None Returns: Name Type Description BotMessage BotMessage \u5373\u5f53\u524d\u4f1a\u8bdd\u8d26\u53f7\u6240\u53d1\u51fa\u6d88\u606f\u7684\u5143\u6570\u636e, \u5185\u5305\u542b\u6709\u4e00 messageId \u5c5e\u6027, \u53ef\u7528\u4e8e\u56de\u590d. Source code in graia/ariadne/app.py 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 @app_ctx_manager async def sendTempMessage ( self , target : Union [ Member , int ], message : MessageChain , group : Optional [ Union [ Group , int ]] = None , * , quote : Optional [ Union [ Source , int ]] = None , ) -> BotMessage : \"\"\"\u53d1\u9001\u4e34\u65f6\u4f1a\u8bdd\u7ed9\u7fa4\u7ec4\u4e2d\u7684\u7279\u5b9a\u6210\u5458, \u53ef\u6307\u5b9a\u56de\u590d\u7684\u6d88\u606f. Warning: \u672c API \u5927\u6982\u7387\u4f1a\u5bfc\u81f4\u8d26\u53f7\u98ce\u63a7/\u51bb\u7ed3. \u8bf7\u8c28\u614e\u4f7f\u7528. Args: group (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4, \u53ef\u4ee5\u662f\u7fa4\u7ec4\u7684 ID \u4e5f\u53ef\u4ee5\u662f Group \u5b9e\u4f8b. target (Union[Member, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4\u6210\u5458, \u53ef\u4ee5\u662f\u6210\u5458\u7684 ID \u4e5f\u53ef\u4ee5\u662f Member \u5b9e\u4f8b. message (MessageChain): \u6709\u6548\u7684, \u53ef\u53d1\u9001\u7684(Sendable)\u6d88\u606f\u94fe. quote (Optional[Union[Source, int]], optional): \u9700\u8981\u56de\u590d\u7684\u6d88\u606f, \u4e0d\u8981\u5ffd\u89c6\u6211\u554a\u5582?!!, \u9ed8\u8ba4\u4e3a None. Returns: BotMessage: \u5373\u5f53\u524d\u4f1a\u8bdd\u8d26\u53f7\u6240\u53d1\u51fa\u6d88\u606f\u7684\u5143\u6570\u636e, \u5185\u5305\u542b\u6709\u4e00 `messageId` \u5c5e\u6027, \u53ef\u7528\u4e8e\u56de\u590d. \"\"\" from .event.message import ActiveTempMessage new_msg = message . copy () new_msg . prepare () group = target . group if ( isinstance ( target , Member ) and not group ) else group if not group : raise ValueError ( \"Missing necessary argument: group\" ) with enter_message_send_context ( UploadMethod . Temp ): result = await self . adapter . call_api ( \"sendTempMessage\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"group\" : int ( group ), \"qq\" : int ( target ), \"messageChain\" : new_msg . dict ()[ \"__root__\" ], ** ({ \"quote\" : quote . id if isinstance ( quote , Source ) else quote } if quote else {}), }, ) event : ActiveTempMessage = ActiveTempMessage ( messageChain = MessageChain ([ Source ( id = result [ \"messageId\" ], time = datetime . now ())]) + message , subject = ( await RelationshipMixin . getMember ( self , int ( group ), int ( target ))), # type: ignore ) with enter_context ( self , event ): self . broadcast . postEvent ( event ) if result [ \"messageId\" ] < 0 : logger . warning ( \"Failed to send message, your account may be limited.\" ) return BotMessage ( messageId = result [ \"messageId\" ], origin = message )","title":"sendTempMessage()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.MultimediaMixin","text":"Bases: AriadneMixin \u7528\u4e8e\u4e0e\u591a\u5a92\u4f53\u4fe1\u606f\u4ea4\u4e92\u7684 Mixin \u7c7b. Source code in graia/ariadne/app.py 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 class MultimediaMixin ( AriadneMixin ): \"\"\"\u7528\u4e8e\u4e0e\u591a\u5a92\u4f53\u4fe1\u606f\u4ea4\u4e92\u7684 Mixin \u7c7b.\"\"\" @app_ctx_manager async def uploadImage ( self , data : Union [ bytes , io . IOBase , os . PathLike ], method : Union [ None , str , UploadMethod ] = None ) -> \"Image\" : \"\"\"\u4e0a\u4f20\u4e00\u5f20\u56fe\u7247\u5230\u8fdc\u7aef\u670d\u52a1\u5668, \u9700\u8981\u63d0\u4f9b: \u56fe\u7247\u7684\u539f\u59cb\u6570\u636e(bytes), \u56fe\u7247\u7684\u4e0a\u4f20\u7c7b\u578b. Args: data (Union[bytes, io.IOBase, os.PathLike]): \u56fe\u7247\u7684\u539f\u59cb\u6570\u636e method (str | UploadMethod, optional): \u56fe\u7247\u7684\u4e0a\u4f20\u7c7b\u578b, \u53ef\u4ece\u4e0a\u4e0b\u6587\u63a8\u65ad Returns: Image: \u751f\u6210\u7684\u56fe\u7247\u6d88\u606f\u5143\u7d20 \"\"\" from .context import upload_method_ctx from .message.element import Image method = str ( method or upload_method_ctx . get ()) . lower () if isinstance ( data , os . PathLike ): data = open ( data , \"rb\" ) result = await self . adapter . call_api ( \"uploadImage\" , CallMethod . MULTIPART , { \"sessionKey\" : self . session_key , \"type\" : method , \"img\" : data , }, ) return Image . parse_obj ( result ) @app_ctx_manager async def uploadVoice ( self , data : Union [ bytes , io . IOBase , os . PathLike ], method : Union [ None , str , UploadMethod ] = None ) -> \"Voice\" : \"\"\"\u4e0a\u4f20\u8bed\u97f3\u5230\u8fdc\u7aef\u670d\u52a1\u5668, \u9700\u8981\u63d0\u4f9b: \u8bed\u97f3\u7684\u539f\u59cb\u6570\u636e(bytes), \u8bed\u97f3\u7684\u4e0a\u4f20\u7c7b\u578b. Args: data (Union[bytes, io.IOBase, os.PathLike]): \u8bed\u97f3\u7684\u539f\u59cb\u6570\u636e method (str | UploadMethod, optional): \u8bed\u97f3\u7684\u4e0a\u4f20\u7c7b\u578b, \u53ef\u4ece\u4e0a\u4e0b\u6587\u63a8\u65ad Returns: Voice: \u751f\u6210\u7684\u8bed\u97f3\u6d88\u606f\u5143\u7d20 \"\"\" from .context import upload_method_ctx from .message.element import Voice method = str ( method or upload_method_ctx . get ()) . lower () if isinstance ( data , os . PathLike ): data = open ( data , \"rb\" ) result = await self . adapter . call_api ( \"uploadVoice\" , CallMethod . MULTIPART , { \"sessionKey\" : self . session_key , \"type\" : method , \"voice\" : data , }, ) return Voice . parse_obj ( result )","title":"MultimediaMixin"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.MultimediaMixin.uploadImage","text":"uploadImage ( data : Union [ bytes , io . IOBase , os . PathLike ], method : Union [ None , str , UploadMethod ] = None ) -> 'Image' \u4e0a\u4f20\u4e00\u5f20\u56fe\u7247\u5230\u8fdc\u7aef\u670d\u52a1\u5668, \u9700\u8981\u63d0\u4f9b: \u56fe\u7247\u7684\u539f\u59cb\u6570\u636e(bytes), \u56fe\u7247\u7684\u4e0a\u4f20\u7c7b\u578b. Parameters: Name Type Description Default data Union [ bytes , io . IOBase , os . PathLike ] \u56fe\u7247\u7684\u539f\u59cb\u6570\u636e required method str | UploadMethod \u56fe\u7247\u7684\u4e0a\u4f20\u7c7b\u578b, \u53ef\u4ece\u4e0a\u4e0b\u6587\u63a8\u65ad None Returns: Name Type Description Image 'Image' \u751f\u6210\u7684\u56fe\u7247\u6d88\u606f\u5143\u7d20 Source code in graia/ariadne/app.py 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 @app_ctx_manager async def uploadImage ( self , data : Union [ bytes , io . IOBase , os . PathLike ], method : Union [ None , str , UploadMethod ] = None ) -> \"Image\" : \"\"\"\u4e0a\u4f20\u4e00\u5f20\u56fe\u7247\u5230\u8fdc\u7aef\u670d\u52a1\u5668, \u9700\u8981\u63d0\u4f9b: \u56fe\u7247\u7684\u539f\u59cb\u6570\u636e(bytes), \u56fe\u7247\u7684\u4e0a\u4f20\u7c7b\u578b. Args: data (Union[bytes, io.IOBase, os.PathLike]): \u56fe\u7247\u7684\u539f\u59cb\u6570\u636e method (str | UploadMethod, optional): \u56fe\u7247\u7684\u4e0a\u4f20\u7c7b\u578b, \u53ef\u4ece\u4e0a\u4e0b\u6587\u63a8\u65ad Returns: Image: \u751f\u6210\u7684\u56fe\u7247\u6d88\u606f\u5143\u7d20 \"\"\" from .context import upload_method_ctx from .message.element import Image method = str ( method or upload_method_ctx . get ()) . lower () if isinstance ( data , os . PathLike ): data = open ( data , \"rb\" ) result = await self . adapter . call_api ( \"uploadImage\" , CallMethod . MULTIPART , { \"sessionKey\" : self . session_key , \"type\" : method , \"img\" : data , }, ) return Image . parse_obj ( result )","title":"uploadImage()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.MultimediaMixin.uploadVoice","text":"uploadVoice ( data : Union [ bytes , io . IOBase , os . PathLike ], method : Union [ None , str , UploadMethod ] = None ) -> 'Voice' \u4e0a\u4f20\u8bed\u97f3\u5230\u8fdc\u7aef\u670d\u52a1\u5668, \u9700\u8981\u63d0\u4f9b: \u8bed\u97f3\u7684\u539f\u59cb\u6570\u636e(bytes), \u8bed\u97f3\u7684\u4e0a\u4f20\u7c7b\u578b. Parameters: Name Type Description Default data Union [ bytes , io . IOBase , os . PathLike ] \u8bed\u97f3\u7684\u539f\u59cb\u6570\u636e required method str | UploadMethod \u8bed\u97f3\u7684\u4e0a\u4f20\u7c7b\u578b, \u53ef\u4ece\u4e0a\u4e0b\u6587\u63a8\u65ad None Returns: Name Type Description Voice 'Voice' \u751f\u6210\u7684\u8bed\u97f3\u6d88\u606f\u5143\u7d20 Source code in graia/ariadne/app.py 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 @app_ctx_manager async def uploadVoice ( self , data : Union [ bytes , io . IOBase , os . PathLike ], method : Union [ None , str , UploadMethod ] = None ) -> \"Voice\" : \"\"\"\u4e0a\u4f20\u8bed\u97f3\u5230\u8fdc\u7aef\u670d\u52a1\u5668, \u9700\u8981\u63d0\u4f9b: \u8bed\u97f3\u7684\u539f\u59cb\u6570\u636e(bytes), \u8bed\u97f3\u7684\u4e0a\u4f20\u7c7b\u578b. Args: data (Union[bytes, io.IOBase, os.PathLike]): \u8bed\u97f3\u7684\u539f\u59cb\u6570\u636e method (str | UploadMethod, optional): \u8bed\u97f3\u7684\u4e0a\u4f20\u7c7b\u578b, \u53ef\u4ece\u4e0a\u4e0b\u6587\u63a8\u65ad Returns: Voice: \u751f\u6210\u7684\u8bed\u97f3\u6d88\u606f\u5143\u7d20 \"\"\" from .context import upload_method_ctx from .message.element import Voice method = str ( method or upload_method_ctx . get ()) . lower () if isinstance ( data , os . PathLike ): data = open ( data , \"rb\" ) result = await self . adapter . call_api ( \"uploadVoice\" , CallMethod . MULTIPART , { \"sessionKey\" : self . session_key , \"type\" : method , \"voice\" : data , }, ) return Voice . parse_obj ( result )","title":"uploadVoice()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.OperationMixin","text":"Bases: AriadneMixin \u5728\u5404\u79cd\u5173\u7cfb\u6a21\u578b\u4e2d\u8fdb\u884c\u64cd\u4f5c\u7684 Mixin \u7c7b. Source code in graia/ariadne/app.pyclass OperationMixin ( AriadneMixin ): \"\"\"\u5728\u5404\u79cd\u5173\u7cfb\u6a21\u578b\u4e2d\u8fdb\u884c\u64cd\u4f5c\u7684 Mixin \u7c7b.\"\"\" @app_ctx_manager async def deleteFriend ( self , target : Union [ Friend , int ]) -> None : \"\"\" \u5220\u9664\u6307\u5b9a\u597d\u53cb. Args: target (Union[Friend, int]): \u597d\u53cb\u5bf9\u8c61\u6216QQ\u53f7. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" friend_id = target . id if isinstance ( target , Friend ) else target await self . adapter . call_api ( \"deleteFriend\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : friend_id , }, ) @app_ctx_manager async def muteMember ( self , group : Union [ Group , int ], member : Union [ Member , int ], time : int ) -> None : \"\"\" \u5728\u6307\u5b9a\u7fa4\u7ec4\u7981\u8a00\u6307\u5b9a\u7fa4\u6210\u5458; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b); `time` \u4e0d\u5f97\u5927\u4e8e `30*24*60*60=2592000` \u6216\u5c0f\u4e8e `0`, \u5426\u5219\u4f1a\u81ea\u52a8\u4fee\u6b63; \u5f53 `time` \u5c0f\u4e8e\u7b49\u4e8e `0` \u65f6, \u4e0d\u4f1a\u89e6\u53d1\u7981\u8a00\u64cd\u4f5c; \u7981\u8a00\u5bf9\u8c61\u6781\u6709\u53ef\u80fd\u89e6\u53d1 `PermissionError`, \u5728\u8fd9\u4e4b\u524d\u8bf7\u5bf9\u5176\u8fdb\u884c\u5224\u65ad! Args: group (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4 member (Union[Member, int]): \u6307\u5b9a\u7684\u7fa4\u6210\u5458(\u53ea\u80fd\u662f\u666e\u901a\u7fa4\u5458\u6216\u8005\u662f\u7ba1\u7406\u5458, \u540e\u8005\u5219\u8981\u6c42\u7fa4\u4e3b\u6743\u9650) time (int): \u7981\u8a00\u4e8b\u4ef6, \u5355\u4f4d\u79d2, \u4fee\u6b63\u89c4\u5219: `0 < time <= 2592000` Raises: PermissionError: \u6ca1\u6709\u76f8\u5e94\u64cd\u4f5c\u6743\u9650. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" time = max ( 0 , min ( time , 2592000 )) # Fix time parameter if not time : return await self . adapter . call_api ( \"mute\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , \"memberId\" : member . id if isinstance ( member , Member ) else member , \"time\" : time , }, ) @app_ctx_manager async def unmuteMember ( self , group : Union [ Group , int ], member : Union [ Member , int ]) -> None : \"\"\" \u5728\u6307\u5b9a\u7fa4\u7ec4\u89e3\u9664\u5bf9\u6307\u5b9a\u7fa4\u6210\u5458\u7684\u7981\u8a00; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b); \u5bf9\u8c61\u6781\u6709\u53ef\u80fd\u89e6\u53d1 `PermissionError`, \u5728\u8fd9\u4e4b\u524d\u8bf7\u5bf9\u5176\u8fdb\u884c\u5224\u65ad! Args: group (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4 member (Union[Member, int]): \u6307\u5b9a\u7684\u7fa4\u6210\u5458(\u53ea\u80fd\u662f\u666e\u901a\u7fa4\u5458\u6216\u8005\u662f\u7ba1\u7406\u5458, \u540e\u8005\u5219\u8981\u6c42\u7fa4\u4e3b\u6743\u9650) Raises: PermissionError: \u6ca1\u6709\u76f8\u5e94\u64cd\u4f5c\u6743\u9650. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . adapter . call_api ( \"unmute\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , \"memberId\" : member . id if isinstance ( member , Member ) else member , }, ) @app_ctx_manager async def muteAll ( self , group : Union [ Group , int ]) -> None : \"\"\"\u5728\u6307\u5b9a\u7fa4\u7ec4\u5f00\u542f\u5168\u4f53\u7981\u8a00, \u9700\u8981\u5f53\u524d\u4f1a\u8bdd\u8d26\u53f7\u5728\u6307\u5b9a\u7fa4\u4e3b\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458\u6216\u8005\u7fa4\u4e3b\u6743\u9650) Args: group (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . adapter . call_api ( \"muteAll\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , }, ) @app_ctx_manager async def unmuteAll ( self , group : Union [ Group , int ]) -> None : \"\"\"\u5728\u6307\u5b9a\u7fa4\u7ec4\u5173\u95ed\u5168\u4f53\u7981\u8a00, \u9700\u8981\u5f53\u524d\u4f1a\u8bdd\u8d26\u53f7\u5728\u6307\u5b9a\u7fa4\u4e3b\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458\u6216\u8005\u7fa4\u4e3b\u6743\u9650) Args: group (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . adapter . call_api ( \"unmuteAll\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , }, ) @app_ctx_manager async def kickMember ( self , group : Union [ Group , int ], member : Union [ Member , int ], message : str = \"\" ) -> None : \"\"\" \u5c06\u76ee\u6807\u7fa4\u7ec4\u6210\u5458\u4ece\u6307\u5b9a\u7fa4\u7ec4\u8e22\u51fa; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b) Args: group (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4 member (Union[Member, int]): \u6307\u5b9a\u7684\u7fa4\u6210\u5458(\u53ea\u80fd\u662f\u666e\u901a\u7fa4\u5458\u6216\u8005\u662f\u7ba1\u7406\u5458, \u540e\u8005\u5219\u8981\u6c42\u7fa4\u4e3b\u6743\u9650) message (str, optional): \u5bf9\u8e22\u51fa\u5bf9\u8c61\u8981\u5c55\u793a\u7684\u6d88\u606f Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . adapter . call_api ( \"kick\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , \"memberId\" : member . id if isinstance ( member , Member ) else member , \"msg\" : message , }, ) @app_ctx_manager async def quitGroup ( self , group : Union [ Group , int ]) -> None : \"\"\" \u4e3b\u52a8\u4ece\u6307\u5b9a\u7fa4\u7ec4\u9000\u51fa Args: group (Union[Group, int]): \u9700\u8981\u9000\u51fa\u7684\u6307\u5b9a\u7fa4\u7ec4 Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . adapter . call_api ( \"quit\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , }, ) @app_ctx_manager async def setEssence ( self , target : Union [ Source , BotMessage , int ]) -> None : \"\"\" \u6dfb\u52a0\u6307\u5b9a\u6d88\u606f\u4e3a\u7fa4\u7cbe\u534e\u6d88\u606f; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b). \u8bf7\u81ea\u884c\u5224\u65ad\u6d88\u606f\u6765\u6e90\u662f\u5426\u4e3a\u7fa4\u7ec4. Args: target (Union[Source, BotMessage, int]): \u7279\u5b9a\u4fe1\u606f\u7684 `messageId`, \\ \u53ef\u4ee5\u662f `Source` \u5b9e\u4f8b, `BotMessage` \u5b9e\u4f8b\u6216\u8005\u662f\u5355\u7eaf\u7684 int \u6574\u6570. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" if isinstance ( target , BotMessage ): target = target . messageId elif isinstance ( target , Source ): target = target . id await self . adapter . call_api ( \"setEssence\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : target }, ) @app_ctx_manager async def getGroupConfig ( self , group : Union [ Group , int ]) -> GroupConfig : \"\"\" \u83b7\u53d6\u6307\u5b9a\u7fa4\u7ec4\u7684\u7fa4\u8bbe\u7f6e Args: group (Union[Group, int]): \u9700\u8981\u83b7\u53d6\u7fa4\u8bbe\u7f6e\u7684\u6307\u5b9a\u7fa4\u7ec4 Returns: GroupConfig: \u6307\u5b9a\u7fa4\u7ec4\u7684\u7fa4\u8bbe\u7f6e \"\"\" result = await self . adapter . call_api ( \"groupConfig\" , CallMethod . RESTGET , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , }, ) return GroupConfig . parse_obj ( result ) @app_ctx_manager async def modifyGroupConfig ( self , group : Union [ Group , int ], config : GroupConfig ) -> None : \"\"\"\u4fee\u6539\u6307\u5b9a\u7fa4\u7ec4\u7684\u7fa4\u8bbe\u7f6e; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b). Args: group (Union[Group, int]): \u9700\u8981\u4fee\u6539\u7fa4\u8bbe\u7f6e\u7684\u6307\u5b9a\u7fa4\u7ec4 config (GroupConfig): \u7ecf\u8fc7\u4fee\u6539\u540e\u7684\u7fa4\u8bbe\u7f6e Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . adapter . call_api ( \"groupConfig\" , CallMethod . RESTPOST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , \"config\" : config . dict ( exclude_unset = True , exclude_none = True ), }, ) @app_ctx_manager async def modifyMemberInfo ( self , member : Union [ Member , int ], info : MemberInfo , group : Optional [ Union [ Group , int ]] = None , ) -> None : \"\"\" \u4fee\u6539\u6307\u5b9a\u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b). Args: member (Union[Member, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4\u6210\u5458, \u53ef\u4e3a Member \u5b9e\u4f8b, \u82e5\u524d\u8bbe\u6210\u7acb, \u5219\u4e0d\u9700\u8981\u63d0\u4f9b group. info (MemberInfo): \u5df2\u4fee\u6539\u7684\u6307\u5b9a\u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001 group (Optional[Union[Group, int]], optional): \u5982\u679c member \u4e3a Member \u5b9e\u4f8b, \u5219\u4e0d\u9700\u8981\u63d0\u4f9b\u672c\u9879, \u5426\u5219\u9700\u8981. \u9ed8\u8ba4\u4e3a None. Raises: TypeError: \u63d0\u4f9b\u4e86\u9519\u8bef\u7684\u53c2\u6570, \u9605\u8bfb\u6709\u5173\u6587\u6863\u5f97\u5230\u95ee\u9898\u539f\u56e0 Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" if group is None : if isinstance ( member , Member ): group = member . group else : raise TypeError ( \"you should give a Member instance if you cannot give a Group instance to me.\" ) await self . adapter . call_api ( \"memberInfo\" , CallMethod . RESTPOST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , \"memberId\" : member . id if isinstance ( member , Member ) else member , \"info\" : info . dict ( exclude_none = True , exclude_unset = True , by_alias = True ), }, ) @app_ctx_manager async def modifyMemberAdmin ( self , assign : bool , member : Union [ Member , int ], group : Optional [ Union [ Group , int ]] = None , ) -> None : \"\"\" \u4fee\u6539\u4e00\u4f4d\u7fa4\u7ec4\u6210\u5458\u7ba1\u7406\u5458\u6743\u9650; \u9700\u8981\u6709\u76f8\u5e94\u6743\u9650(\u7fa4\u4e3b) Args: member (Union[Member, int]): \u6307\u5b9a\u7fa4\u6210\u5458, \u53ef\u4e3a Member \u5b9e\u4f8b, \u82e5\u524d\u8bbe\u6210\u7acb, \u5219\u4e0d\u9700\u8981\u63d0\u4f9b group. assign (bool): \u662f\u5426\u8bbe\u7f6e\u7fa4\u6210\u5458\u4e3a\u7ba1\u7406\u5458. group (Optional[Union[Group, int]], optional): \u5982\u679c member \u4e3a Member \u5b9e\u4f8b, \u5219\u4e0d\u9700\u8981\u63d0\u4f9b\u672c\u9879, \u5426\u5219\u9700\u8981. \u9ed8\u8ba4\u4e3a None. Raises: TypeError: \u63d0\u4f9b\u4e86\u9519\u8bef\u7684\u53c2\u6570, \u9605\u8bfb\u6709\u5173\u6587\u6863\u5f97\u5230\u95ee\u9898\u539f\u56e0 PermissionError: \u6ca1\u6709\u76f8\u5e94\u64cd\u4f5c\u6743\u9650. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" if group is None : if isinstance ( member , Member ): group = member . group else : raise TypeError ( \"you should give a Member instance if you cannot give a Group instance to me.\" ) await self . adapter . call_api ( \"memberAdmin\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , \"memberId\" : member . id if isinstance ( member , Member ) else member , \"assign\" : assign , }, ) @app_ctx_manager async def registerCommand ( self , name : str , alias : Iterable [ str ] = (), usage : str = \"\" , description : str = \"\" ) -> None : \"\"\"\u6ce8\u518c\u4e00\u4e2a\u6307\u4ee4 Args: name (str): \u6307\u4ee4\u540d alias (Iterable[str], optional): \u6307\u4ee4\u522b\u540d. Defaults to (). usage (str, optional): \u4f7f\u7528\u65b9\u6cd5\u5b57\u7b26\u4e32. Defaults to \"\". description (str, optional): \u63cf\u8ff0\u5b57\u7b26\u4e32. Defaults to \"\". \"\"\" await self . adapter . call_api ( \"cmd/register\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"name\" : name , \"alias\" : alias , \"usage\" : usage , \"description\" : description , }, ) @app_ctx_manager async def executeCommand ( self , command : Union [ str , Iterable [ str ]]) -> None : \"\"\"\u6267\u884c\u4e00\u6761\u6307\u4ee4 Args: command (Union[str, Iterable[str]]): \u6307\u4ee4\u5b57\u7b26\u4e32. \"\"\" if isinstance ( command , str ): command = command . split ( \" \" ) await self . adapter . call_api ( \"cmd/execute\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"command\" : command } )","title":"OperationMixin"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.OperationMixin.deleteFriend","text":"deleteFriend ( target : Union [ Friend , int ]) -> None \u5220\u9664\u6307\u5b9a\u597d\u53cb. Parameters: Name Type Description Default target Union [ Friend , int ] \u597d\u53cb\u5bf9\u8c61\u6216QQ\u53f7. required Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 @app_ctx_manager async def deleteFriend ( self , target : Union [ Friend , int ]) -> None : \"\"\" \u5220\u9664\u6307\u5b9a\u597d\u53cb. Args: target (Union[Friend, int]): \u597d\u53cb\u5bf9\u8c61\u6216QQ\u53f7. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" friend_id = target . id if isinstance ( target , Friend ) else target await self . adapter . call_api ( \"deleteFriend\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : friend_id , }, )","title":"deleteFriend()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.OperationMixin.executeCommand","text":"executeCommand ( command : Union [ str , Iterable [ str ]]) -> None \u6267\u884c\u4e00\u6761\u6307\u4ee4 Parameters: Name Type Description Default command Union [ str , Iterable [ str ]] \u6307\u4ee4\u5b57\u7b26\u4e32. required Source code in graia/ariadne/app.py 914 915 916 917 918 919 920 921 922 923 924 925 926 @app_ctx_manager async def executeCommand ( self , command : Union [ str , Iterable [ str ]]) -> None : \"\"\"\u6267\u884c\u4e00\u6761\u6307\u4ee4 Args: command (Union[str, Iterable[str]]): \u6307\u4ee4\u5b57\u7b26\u4e32. \"\"\" if isinstance ( command , str ): command = command . split ( \" \" ) await self . adapter . call_api ( \"cmd/execute\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"command\" : command } )","title":"executeCommand()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.OperationMixin.getGroupConfig","text":"getGroupConfig ( group : Union [ Group , int ]) -> GroupConfig \u83b7\u53d6\u6307\u5b9a\u7fa4\u7ec4\u7684\u7fa4\u8bbe\u7f6e Parameters: Name Type Description Default group Union [ Group , int ] \u9700\u8981\u83b7\u53d6\u7fa4\u8bbe\u7f6e\u7684\u6307\u5b9a\u7fa4\u7ec4 required Returns: Name Type Description GroupConfig GroupConfig \u6307\u5b9a\u7fa4\u7ec4\u7684\u7fa4\u8bbe\u7f6e Source code in graia/ariadne/app.py 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 @app_ctx_manager async def getGroupConfig ( self , group : Union [ Group , int ]) -> GroupConfig : \"\"\" \u83b7\u53d6\u6307\u5b9a\u7fa4\u7ec4\u7684\u7fa4\u8bbe\u7f6e Args: group (Union[Group, int]): \u9700\u8981\u83b7\u53d6\u7fa4\u8bbe\u7f6e\u7684\u6307\u5b9a\u7fa4\u7ec4 Returns: GroupConfig: \u6307\u5b9a\u7fa4\u7ec4\u7684\u7fa4\u8bbe\u7f6e \"\"\" result = await self . adapter . call_api ( \"groupConfig\" , CallMethod . RESTGET , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , }, ) return GroupConfig . parse_obj ( result )","title":"getGroupConfig()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.OperationMixin.kickMember","text":"kickMember ( group : Union [ Group , int ], member : Union [ Member , int ], message : str = '' ) -> None \u5c06\u76ee\u6807\u7fa4\u7ec4\u6210\u5458\u4ece\u6307\u5b9a\u7fa4\u7ec4\u8e22\u51fa; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b) Parameters: Name Type Description Default group Union [ Group , int ] \u6307\u5b9a\u7684\u7fa4\u7ec4 required member Union [ Member , int ] \u6307\u5b9a\u7684\u7fa4\u6210\u5458(\u53ea\u80fd\u662f\u666e\u901a\u7fa4\u5458\u6216\u8005\u662f\u7ba1\u7406\u5458, \u540e\u8005\u5219\u8981\u6c42\u7fa4\u4e3b\u6743\u9650) required message str \u5bf9\u8e22\u51fa\u5bf9\u8c61\u8981\u5c55\u793a\u7684\u6d88\u606f '' Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 @app_ctx_manager async def kickMember ( self , group : Union [ Group , int ], member : Union [ Member , int ], message : str = \"\" ) -> None : \"\"\" \u5c06\u76ee\u6807\u7fa4\u7ec4\u6210\u5458\u4ece\u6307\u5b9a\u7fa4\u7ec4\u8e22\u51fa; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b) Args: group (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4 member (Union[Member, int]): \u6307\u5b9a\u7684\u7fa4\u6210\u5458(\u53ea\u80fd\u662f\u666e\u901a\u7fa4\u5458\u6216\u8005\u662f\u7ba1\u7406\u5458, \u540e\u8005\u5219\u8981\u6c42\u7fa4\u4e3b\u6743\u9650) message (str, optional): \u5bf9\u8e22\u51fa\u5bf9\u8c61\u8981\u5c55\u793a\u7684\u6d88\u606f Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . adapter . call_api ( \"kick\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , \"memberId\" : member . id if isinstance ( member , Member ) else member , \"msg\" : message , }, )","title":"kickMember()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.OperationMixin.modifyGroupConfig","text":"modifyGroupConfig ( group : Union [ Group , int ], config : GroupConfig ) -> None \u4fee\u6539\u6307\u5b9a\u7fa4\u7ec4\u7684\u7fa4\u8bbe\u7f6e; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b). Parameters: Name Type Description Default group Union [ Group , int ] \u9700\u8981\u4fee\u6539\u7fa4\u8bbe\u7f6e\u7684\u6307\u5b9a\u7fa4\u7ec4 required config GroupConfig \u7ecf\u8fc7\u4fee\u6539\u540e\u7684\u7fa4\u8bbe\u7f6e required Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 @app_ctx_manager async def modifyGroupConfig ( self , group : Union [ Group , int ], config : GroupConfig ) -> None : \"\"\"\u4fee\u6539\u6307\u5b9a\u7fa4\u7ec4\u7684\u7fa4\u8bbe\u7f6e; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b). Args: group (Union[Group, int]): \u9700\u8981\u4fee\u6539\u7fa4\u8bbe\u7f6e\u7684\u6307\u5b9a\u7fa4\u7ec4 config (GroupConfig): \u7ecf\u8fc7\u4fee\u6539\u540e\u7684\u7fa4\u8bbe\u7f6e Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . adapter . call_api ( \"groupConfig\" , CallMethod . RESTPOST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , \"config\" : config . dict ( exclude_unset = True , exclude_none = True ), }, )","title":"modifyGroupConfig()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.OperationMixin.modifyMemberAdmin","text":"modifyMemberAdmin ( assign : bool , member : Union [ Member , int ], group : Optional [ Union [ Group , int ]] = None ) -> None \u4fee\u6539\u4e00\u4f4d\u7fa4\u7ec4\u6210\u5458\u7ba1\u7406\u5458\u6743\u9650; \u9700\u8981\u6709\u76f8\u5e94\u6743\u9650(\u7fa4\u4e3b) Parameters: Name Type Description Default member Union [ Member , int ] \u6307\u5b9a\u7fa4\u6210\u5458, \u53ef\u4e3a Member \u5b9e\u4f8b, \u82e5\u524d\u8bbe\u6210\u7acb, \u5219\u4e0d\u9700\u8981\u63d0\u4f9b group. required assign bool \u662f\u5426\u8bbe\u7f6e\u7fa4\u6210\u5458\u4e3a\u7ba1\u7406\u5458. required group Optional [ Union [ Group , int ]] \u5982\u679c member \u4e3a Member \u5b9e\u4f8b, \u5219\u4e0d\u9700\u8981\u63d0\u4f9b\u672c\u9879, \u5426\u5219\u9700\u8981. \u9ed8\u8ba4\u4e3a None. None Raises: Type Description TypeError \u63d0\u4f9b\u4e86\u9519\u8bef\u7684\u53c2\u6570, \u9605\u8bfb\u6709\u5173\u6587\u6863\u5f97\u5230\u95ee\u9898\u539f\u56e0 PermissionError \u6ca1\u6709\u76f8\u5e94\u64cd\u4f5c\u6743\u9650. Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 @app_ctx_manager async def modifyMemberAdmin ( self , assign : bool , member : Union [ Member , int ], group : Optional [ Union [ Group , int ]] = None , ) -> None : \"\"\" \u4fee\u6539\u4e00\u4f4d\u7fa4\u7ec4\u6210\u5458\u7ba1\u7406\u5458\u6743\u9650; \u9700\u8981\u6709\u76f8\u5e94\u6743\u9650(\u7fa4\u4e3b) Args: member (Union[Member, int]): \u6307\u5b9a\u7fa4\u6210\u5458, \u53ef\u4e3a Member \u5b9e\u4f8b, \u82e5\u524d\u8bbe\u6210\u7acb, \u5219\u4e0d\u9700\u8981\u63d0\u4f9b group. assign (bool): \u662f\u5426\u8bbe\u7f6e\u7fa4\u6210\u5458\u4e3a\u7ba1\u7406\u5458. group (Optional[Union[Group, int]], optional): \u5982\u679c member \u4e3a Member \u5b9e\u4f8b, \u5219\u4e0d\u9700\u8981\u63d0\u4f9b\u672c\u9879, \u5426\u5219\u9700\u8981. \u9ed8\u8ba4\u4e3a None. Raises: TypeError: \u63d0\u4f9b\u4e86\u9519\u8bef\u7684\u53c2\u6570, \u9605\u8bfb\u6709\u5173\u6587\u6863\u5f97\u5230\u95ee\u9898\u539f\u56e0 PermissionError: \u6ca1\u6709\u76f8\u5e94\u64cd\u4f5c\u6743\u9650. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" if group is None : if isinstance ( member , Member ): group = member . group else : raise TypeError ( \"you should give a Member instance if you cannot give a Group instance to me.\" ) await self . adapter . call_api ( \"memberAdmin\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , \"memberId\" : member . id if isinstance ( member , Member ) else member , \"assign\" : assign , }, )","title":"modifyMemberAdmin()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.OperationMixin.modifyMemberInfo","text":"modifyMemberInfo ( member : Union [ Member , int ], info : MemberInfo , group : Optional [ Union [ Group , int ]] = None ) -> None \u4fee\u6539\u6307\u5b9a\u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b). Parameters: Name Type Description Default member Union [ Member , int ] \u6307\u5b9a\u7684\u7fa4\u7ec4\u6210\u5458, \u53ef\u4e3a Member \u5b9e\u4f8b, \u82e5\u524d\u8bbe\u6210\u7acb, \u5219\u4e0d\u9700\u8981\u63d0\u4f9b group. required info MemberInfo \u5df2\u4fee\u6539\u7684\u6307\u5b9a\u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001 required group Optional [ Union [ Group , int ]] \u5982\u679c member \u4e3a Member \u5b9e\u4f8b, \u5219\u4e0d\u9700\u8981\u63d0\u4f9b\u672c\u9879, \u5426\u5219\u9700\u8981. \u9ed8\u8ba4\u4e3a None. None Raises: Type Description TypeError \u63d0\u4f9b\u4e86\u9519\u8bef\u7684\u53c2\u6570, \u9605\u8bfb\u6709\u5173\u6587\u6863\u5f97\u5230\u95ee\u9898\u539f\u56e0 Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 @app_ctx_manager async def modifyMemberInfo ( self , member : Union [ Member , int ], info : MemberInfo , group : Optional [ Union [ Group , int ]] = None , ) -> None : \"\"\" \u4fee\u6539\u6307\u5b9a\u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b). Args: member (Union[Member, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4\u6210\u5458, \u53ef\u4e3a Member \u5b9e\u4f8b, \u82e5\u524d\u8bbe\u6210\u7acb, \u5219\u4e0d\u9700\u8981\u63d0\u4f9b group. info (MemberInfo): \u5df2\u4fee\u6539\u7684\u6307\u5b9a\u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001 group (Optional[Union[Group, int]], optional): \u5982\u679c member \u4e3a Member \u5b9e\u4f8b, \u5219\u4e0d\u9700\u8981\u63d0\u4f9b\u672c\u9879, \u5426\u5219\u9700\u8981. \u9ed8\u8ba4\u4e3a None. Raises: TypeError: \u63d0\u4f9b\u4e86\u9519\u8bef\u7684\u53c2\u6570, \u9605\u8bfb\u6709\u5173\u6587\u6863\u5f97\u5230\u95ee\u9898\u539f\u56e0 Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" if group is None : if isinstance ( member , Member ): group = member . group else : raise TypeError ( \"you should give a Member instance if you cannot give a Group instance to me.\" ) await self . adapter . call_api ( \"memberInfo\" , CallMethod . RESTPOST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , \"memberId\" : member . id if isinstance ( member , Member ) else member , \"info\" : info . dict ( exclude_none = True , exclude_unset = True , by_alias = True ), }, )","title":"modifyMemberInfo()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.OperationMixin.muteAll","text":"muteAll ( group : Union [ Group , int ]) -> None \u5728\u6307\u5b9a\u7fa4\u7ec4\u5f00\u542f\u5168\u4f53\u7981\u8a00, \u9700\u8981\u5f53\u524d\u4f1a\u8bdd\u8d26\u53f7\u5728\u6307\u5b9a\u7fa4\u4e3b\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458\u6216\u8005\u7fa4\u4e3b\u6743\u9650) Parameters: Name Type Description Default group Union [ Group , int ] \u6307\u5b9a\u7684\u7fa4\u7ec4. required Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 @app_ctx_manager async def muteAll ( self , group : Union [ Group , int ]) -> None : \"\"\"\u5728\u6307\u5b9a\u7fa4\u7ec4\u5f00\u542f\u5168\u4f53\u7981\u8a00, \u9700\u8981\u5f53\u524d\u4f1a\u8bdd\u8d26\u53f7\u5728\u6307\u5b9a\u7fa4\u4e3b\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458\u6216\u8005\u7fa4\u4e3b\u6743\u9650) Args: group (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . adapter . call_api ( \"muteAll\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , }, )","title":"muteAll()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.OperationMixin.muteMember","text":"muteMember ( group : Union [ Group , int ], member : Union [ Member , int ], time : int ) -> None \u5728\u6307\u5b9a\u7fa4\u7ec4\u7981\u8a00\u6307\u5b9a\u7fa4\u6210\u5458; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b); time \u4e0d\u5f97\u5927\u4e8e 30*24*60*60=2592000 \u6216\u5c0f\u4e8e 0 , \u5426\u5219\u4f1a\u81ea\u52a8\u4fee\u6b63; \u5f53 time \u5c0f\u4e8e\u7b49\u4e8e 0 \u65f6, \u4e0d\u4f1a\u89e6\u53d1\u7981\u8a00\u64cd\u4f5c; \u7981\u8a00\u5bf9\u8c61\u6781\u6709\u53ef\u80fd\u89e6\u53d1 PermissionError , \u5728\u8fd9\u4e4b\u524d\u8bf7\u5bf9\u5176\u8fdb\u884c\u5224\u65ad! Parameters: Name Type Description Default group Union [ Group , int ] \u6307\u5b9a\u7684\u7fa4\u7ec4 required member Union [ Member , int ] \u6307\u5b9a\u7684\u7fa4\u6210\u5458(\u53ea\u80fd\u662f\u666e\u901a\u7fa4\u5458\u6216\u8005\u662f\u7ba1\u7406\u5458, \u540e\u8005\u5219\u8981\u6c42\u7fa4\u4e3b\u6743\u9650) required time int \u7981\u8a00\u4e8b\u4ef6, \u5355\u4f4d\u79d2, \u4fee\u6b63\u89c4\u5219: 0 < time <= 2592000 required Raises: Type Description PermissionError \u6ca1\u6709\u76f8\u5e94\u64cd\u4f5c\u6743\u9650. Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 @app_ctx_manager async def muteMember ( self , group : Union [ Group , int ], member : Union [ Member , int ], time : int ) -> None : \"\"\" \u5728\u6307\u5b9a\u7fa4\u7ec4\u7981\u8a00\u6307\u5b9a\u7fa4\u6210\u5458; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b); `time` \u4e0d\u5f97\u5927\u4e8e `30*24*60*60=2592000` \u6216\u5c0f\u4e8e `0`, \u5426\u5219\u4f1a\u81ea\u52a8\u4fee\u6b63; \u5f53 `time` \u5c0f\u4e8e\u7b49\u4e8e `0` \u65f6, \u4e0d\u4f1a\u89e6\u53d1\u7981\u8a00\u64cd\u4f5c; \u7981\u8a00\u5bf9\u8c61\u6781\u6709\u53ef\u80fd\u89e6\u53d1 `PermissionError`, \u5728\u8fd9\u4e4b\u524d\u8bf7\u5bf9\u5176\u8fdb\u884c\u5224\u65ad! Args: group (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4 member (Union[Member, int]): \u6307\u5b9a\u7684\u7fa4\u6210\u5458(\u53ea\u80fd\u662f\u666e\u901a\u7fa4\u5458\u6216\u8005\u662f\u7ba1\u7406\u5458, \u540e\u8005\u5219\u8981\u6c42\u7fa4\u4e3b\u6743\u9650) time (int): \u7981\u8a00\u4e8b\u4ef6, \u5355\u4f4d\u79d2, \u4fee\u6b63\u89c4\u5219: `0 < time <= 2592000` Raises: PermissionError: \u6ca1\u6709\u76f8\u5e94\u64cd\u4f5c\u6743\u9650. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" time = max ( 0 , min ( time , 2592000 )) # Fix time parameter if not time : return await self . adapter . call_api ( \"mute\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , \"memberId\" : member . id if isinstance ( member , Member ) else member , \"time\" : time , }, )","title":"muteMember()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.OperationMixin.quitGroup","text":"quitGroup ( group : Union [ Group , int ]) -> None \u4e3b\u52a8\u4ece\u6307\u5b9a\u7fa4\u7ec4\u9000\u51fa Parameters: Name Type Description Default group Union [ Group , int ] \u9700\u8981\u9000\u51fa\u7684\u6307\u5b9a\u7fa4\u7ec4 required Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 @app_ctx_manager async def quitGroup ( self , group : Union [ Group , int ]) -> None : \"\"\" \u4e3b\u52a8\u4ece\u6307\u5b9a\u7fa4\u7ec4\u9000\u51fa Args: group (Union[Group, int]): \u9700\u8981\u9000\u51fa\u7684\u6307\u5b9a\u7fa4\u7ec4 Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . adapter . call_api ( \"quit\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , }, )","title":"quitGroup()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.OperationMixin.registerCommand","text":"registerCommand ( name : str , alias : Iterable [ str ] = (), usage : str = '' , description : str = '' ) -> None \u6ce8\u518c\u4e00\u4e2a\u6307\u4ee4 Parameters: Name Type Description Default name str \u6307\u4ee4\u540d required alias Iterable [ str ] \u6307\u4ee4\u522b\u540d. Defaults to (). () usage str \u4f7f\u7528\u65b9\u6cd5\u5b57\u7b26\u4e32. Defaults to \"\". '' description str \u63cf\u8ff0\u5b57\u7b26\u4e32. Defaults to \"\". '' Source code in graia/ariadne/app.py 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 @app_ctx_manager async def registerCommand ( self , name : str , alias : Iterable [ str ] = (), usage : str = \"\" , description : str = \"\" ) -> None : \"\"\"\u6ce8\u518c\u4e00\u4e2a\u6307\u4ee4 Args: name (str): \u6307\u4ee4\u540d alias (Iterable[str], optional): \u6307\u4ee4\u522b\u540d. Defaults to (). usage (str, optional): \u4f7f\u7528\u65b9\u6cd5\u5b57\u7b26\u4e32. Defaults to \"\". description (str, optional): \u63cf\u8ff0\u5b57\u7b26\u4e32. Defaults to \"\". \"\"\" await self . adapter . call_api ( \"cmd/register\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"name\" : name , \"alias\" : alias , \"usage\" : usage , \"description\" : description , }, )","title":"registerCommand()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.OperationMixin.setEssence","text":"setEssence ( target : Union [ Source , BotMessage , int ]) -> None \u6dfb\u52a0\u6307\u5b9a\u6d88\u606f\u4e3a\u7fa4\u7cbe\u534e\u6d88\u606f; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b). \u8bf7\u81ea\u884c\u5224\u65ad\u6d88\u606f\u6765\u6e90\u662f\u5426\u4e3a\u7fa4\u7ec4. Parameters: Name Type Description Default target Union [ Source , BotMessage , int ] \u7279\u5b9a\u4fe1\u606f\u7684 messageId , \u53ef\u4ee5\u662f Source \u5b9e\u4f8b, BotMessage \u5b9e\u4f8b\u6216\u8005\u662f\u5355\u7eaf\u7684 int \u6574\u6570. required Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 @app_ctx_manager async def setEssence ( self , target : Union [ Source , BotMessage , int ]) -> None : \"\"\" \u6dfb\u52a0\u6307\u5b9a\u6d88\u606f\u4e3a\u7fa4\u7cbe\u534e\u6d88\u606f; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b). \u8bf7\u81ea\u884c\u5224\u65ad\u6d88\u606f\u6765\u6e90\u662f\u5426\u4e3a\u7fa4\u7ec4. Args: target (Union[Source, BotMessage, int]): \u7279\u5b9a\u4fe1\u606f\u7684 `messageId`, \\ \u53ef\u4ee5\u662f `Source` \u5b9e\u4f8b, `BotMessage` \u5b9e\u4f8b\u6216\u8005\u662f\u5355\u7eaf\u7684 int \u6574\u6570. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" if isinstance ( target , BotMessage ): target = target . messageId elif isinstance ( target , Source ): target = target . id await self . adapter . call_api ( \"setEssence\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : target }, )","title":"setEssence()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.OperationMixin.unmuteAll","text":"unmuteAll ( group : Union [ Group , int ]) -> None \u5728\u6307\u5b9a\u7fa4\u7ec4\u5173\u95ed\u5168\u4f53\u7981\u8a00, \u9700\u8981\u5f53\u524d\u4f1a\u8bdd\u8d26\u53f7\u5728\u6307\u5b9a\u7fa4\u4e3b\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458\u6216\u8005\u7fa4\u4e3b\u6743\u9650) Parameters: Name Type Description Default group Union [ Group , int ] \u6307\u5b9a\u7684\u7fa4\u7ec4. required Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 @app_ctx_manager async def unmuteAll ( self , group : Union [ Group , int ]) -> None : \"\"\"\u5728\u6307\u5b9a\u7fa4\u7ec4\u5173\u95ed\u5168\u4f53\u7981\u8a00, \u9700\u8981\u5f53\u524d\u4f1a\u8bdd\u8d26\u53f7\u5728\u6307\u5b9a\u7fa4\u4e3b\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458\u6216\u8005\u7fa4\u4e3b\u6743\u9650) Args: group (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . adapter . call_api ( \"unmuteAll\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , }, )","title":"unmuteAll()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.OperationMixin.unmuteMember","text":"unmuteMember ( group : Union [ Group , int ], member : Union [ Member , int ]) -> None \u5728\u6307\u5b9a\u7fa4\u7ec4\u89e3\u9664\u5bf9\u6307\u5b9a\u7fa4\u6210\u5458\u7684\u7981\u8a00; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b); \u5bf9\u8c61\u6781\u6709\u53ef\u80fd\u89e6\u53d1 PermissionError , \u5728\u8fd9\u4e4b\u524d\u8bf7\u5bf9\u5176\u8fdb\u884c\u5224\u65ad! Parameters: Name Type Description Default group Union [ Group , int ] \u6307\u5b9a\u7684\u7fa4\u7ec4 required member Union [ Member , int ] \u6307\u5b9a\u7684\u7fa4\u6210\u5458(\u53ea\u80fd\u662f\u666e\u901a\u7fa4\u5458\u6216\u8005\u662f\u7ba1\u7406\u5458, \u540e\u8005\u5219\u8981\u6c42\u7fa4\u4e3b\u6743\u9650) required Raises: Type Description PermissionError \u6ca1\u6709\u76f8\u5e94\u64cd\u4f5c\u6743\u9650. Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/app.py 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 @app_ctx_manager async def unmuteMember ( self , group : Union [ Group , int ], member : Union [ Member , int ]) -> None : \"\"\" \u5728\u6307\u5b9a\u7fa4\u7ec4\u89e3\u9664\u5bf9\u6307\u5b9a\u7fa4\u6210\u5458\u7684\u7981\u8a00; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b); \u5bf9\u8c61\u6781\u6709\u53ef\u80fd\u89e6\u53d1 `PermissionError`, \u5728\u8fd9\u4e4b\u524d\u8bf7\u5bf9\u5176\u8fdb\u884c\u5224\u65ad! Args: group (Union[Group, int]): \u6307\u5b9a\u7684\u7fa4\u7ec4 member (Union[Member, int]): \u6307\u5b9a\u7684\u7fa4\u6210\u5458(\u53ea\u80fd\u662f\u666e\u901a\u7fa4\u5458\u6216\u8005\u662f\u7ba1\u7406\u5458, \u540e\u8005\u5219\u8981\u6c42\u7fa4\u4e3b\u6743\u9650) Raises: PermissionError: \u6ca1\u6709\u76f8\u5e94\u64cd\u4f5c\u6743\u9650. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . adapter . call_api ( \"unmute\" , CallMethod . POST , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , \"memberId\" : member . id if isinstance ( member , Member ) else member , }, )","title":"unmuteMember()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.RelationshipMixin","text":"Bases: AriadneMixin \u83b7\u53d6\u5404\u79cd\u5173\u7cfb\u6a21\u578b\u7684 Mixin \u7c7b. Source code in graia/ariadne/app.pyclass RelationshipMixin ( AriadneMixin ): \"\"\"\u83b7\u53d6\u5404\u79cd\u5173\u7cfb\u6a21\u578b\u7684 Mixin \u7c7b.\"\"\" @app_ctx_manager async def getFriendList ( self ) -> List [ Friend ]: \"\"\"\u83b7\u53d6\u672c\u5b9e\u4f8b\u8d26\u53f7\u6dfb\u52a0\u7684\u597d\u53cb\u5217\u8868. Returns: List[Friend]: \u6dfb\u52a0\u7684\u597d\u53cb. \"\"\" result = await self . adapter . call_api ( \"friendList\" , CallMethod . GET , { \"sessionKey\" : self . session_key }, ) return [ Friend . parse_obj ( i ) for i in result ] @app_ctx_manager async def getFriend ( self , friend_id : int ) -> Optional [ Friend ]: \"\"\"\u4ece\u5df2\u77e5\u7684\u53ef\u80fd\u7684\u597d\u53cb ID, \u83b7\u53d6 Friend \u5b9e\u4f8b. Args: friend_id (int): \u5df2\u77e5\u7684\u53ef\u80fd\u7684\u597d\u53cb ID. Returns: Friend: \u64cd\u4f5c\u6210\u529f, \u4f60\u5f97\u5230\u4e86\u4f60\u5e94\u5f97\u7684. None: \u672a\u80fd\u83b7\u53d6\u5230. \"\"\" data = await self . getFriendList () for i in data : if i . id == friend_id : return i @app_ctx_manager async def getGroupList ( self ) -> List [ Group ]: \"\"\"\u83b7\u53d6\u672c\u5b9e\u4f8b\u8d26\u53f7\u52a0\u5165\u7684\u7fa4\u7ec4\u5217\u8868. Returns: List[Group]: \u52a0\u5165\u7684\u7fa4\u7ec4. \"\"\" result = await self . adapter . call_api ( \"groupList\" , CallMethod . GET , { \"sessionKey\" : self . session_key }, ) return [ Group . parse_obj ( i ) for i in result ] @app_ctx_manager async def getGroup ( self , group_id : int ) -> Optional [ Group ]: \"\"\"\u5c1d\u8bd5\u4ece\u5df2\u77e5\u7684\u7fa4\u7ec4\u552f\u4e00ID, \u83b7\u53d6\u5bf9\u5e94\u7fa4\u7ec4\u7684\u4fe1\u606f; \u53ef\u80fd\u8fd4\u56de None. Args: group_id (int): \u5c1d\u8bd5\u83b7\u53d6\u7684\u7fa4\u7ec4\u7684\u552f\u4e00 ID. Returns: Group: \u64cd\u4f5c\u6210\u529f, \u4f60\u5f97\u5230\u4e86\u4f60\u5e94\u5f97\u7684. None: \u672a\u80fd\u83b7\u53d6\u5230. \"\"\" data = await self . getGroupList () for i in data : if i . id == group_id : return i @app_ctx_manager async def getMemberList ( self , group : Union [ Group , int ]) -> List [ Member ]: \"\"\"\u5c1d\u8bd5\u4ece\u5df2\u77e5\u7684\u7fa4\u7ec4\u83b7\u53d6\u5bf9\u5e94\u6210\u5458\u7684\u5217\u8868. Args: group (Union[Group, int]): \u5df2\u77e5\u7684\u7fa4\u7ec4 Returns: List[Member]: \u7fa4\u5185\u6210\u5458\u7684 Member \u5bf9\u8c61. \"\"\" result = await self . adapter . call_api ( \"memberList\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , }, ) return [ Member . parse_obj ( i ) for i in result ] @app_ctx_manager async def getMember ( self , group : Union [ Group , int ], member_id : int ) -> Member : \"\"\"\u5c1d\u8bd5\u4ece\u5df2\u77e5\u7684\u7fa4\u7ec4\u552f\u4e00 ID \u548c\u5df2\u77e5\u7684\u7fa4\u7ec4\u6210\u5458\u7684 ID, \u83b7\u53d6\u5bf9\u5e94\u6210\u5458\u7684\u4fe1\u606f. Args: group (Union[Group, int]): \u5df2\u77e5\u7684\u7fa4\u7ec4\u552f\u4e00 ID member_id (int): \u5df2\u77e5\u7684\u7fa4\u7ec4\u6210\u5458\u7684 ID Returns: Member: \u5bf9\u5e94\u7fa4\u6210\u5458\u5bf9\u8c61 \"\"\" result = await self . adapter . call_api ( \"memberInfo\" , CallMethod . RESTGET , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , \"memberId\" : member_id , }, ) return Member . parse_obj ( result ) @app_ctx_manager async def getBotProfile ( self ) -> Profile : \"\"\"\u83b7\u53d6\u672c\u5b9e\u4f8b\u7ed1\u5b9a\u8d26\u53f7\u7684 Profile. Returns: Profile: \u627e\u5230\u7684 Profile. \"\"\" result = await self . adapter . call_api ( \"botProfile\" , CallMethod . GET , { \"sessionKey\" : self . session_key }, ) return Profile . parse_obj ( result ) @app_ctx_manager async def getUserProfile ( self , target : Union [ int , Friend , Member , Stranger ]) -> Profile : \"\"\"\u83b7\u53d6\u4efb\u610f QQ \u7528\u6237\u7684 Profile. Args: target (Union[int, Friend, Member, Stranger]): \u4efb\u610f QQ \u7528\u6237. Returns: Profile: \u627e\u5230\u7684 Profile. \"\"\" result = await self . adapter . call_api ( \"userProfile\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"target\" : int ( target ), }, ) return Profile . parse_obj ( result ) @app_ctx_manager async def getFriendProfile ( self , friend : Union [ Friend , int ]) -> Profile : \"\"\"\u83b7\u53d6\u597d\u53cb\u7684 Profile. Args: friend (Union[Friend, int]): \u67e5\u627e\u7684\u597d\u53cb. Returns: Profile: \u627e\u5230\u7684 Profile. \"\"\" result = await self . adapter . call_api ( \"friendProfile\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"target\" : int ( friend ), }, ) return Profile . parse_obj ( result ) @app_ctx_manager async def getMemberProfile ( self , member : Union [ Member , int ], group : Optional [ Union [ Group , int ]] = None ) -> Profile : \"\"\"\u83b7\u53d6\u7fa4\u5458\u7684 Profile. Args: member (Union[Member, int]): \u7fa4\u5458\u5bf9\u8c61. group (Optional[Union[Group, int]], optional): \u68c0\u7d22\u7684\u7fa4. \u63d0\u4f9b Member \u5f62\u5f0f\u7684 member \u53c2\u6570\u540e\u53ef\u4ee5\u4e0d\u63d0\u4f9b. Raises: ValueError: \u6ca1\u6709\u63d0\u4f9b\u53ef\u68c0\u7d22\u7684\u7fa4 ID. Returns: Profile: \u627e\u5230\u7684 Profile \u5bf9\u8c61. \"\"\" member_id = member . id if isinstance ( member , Member ) else member group = group or ( member . group if isinstance ( member , Member ) else None ) group_id = group . id if isinstance ( group , Group ) else group if not group_id : raise ValueError ( \"Missing necessary argument: group\" ) result = await self . adapter . call_api ( \"memberProfile\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"target\" : group_id , \"memberId\" : member_id }, ) return Profile . parse_obj ( result )","title":"RelationshipMixin"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.RelationshipMixin.getBotProfile","text":"getBotProfile () -> Profile \u83b7\u53d6\u672c\u5b9e\u4f8b\u7ed1\u5b9a\u8d26\u53f7\u7684 Profile. Returns: Name Type Description Profile Profile \u627e\u5230\u7684 Profile. Source code in graia/ariadne/app.py 494 495 496 497 498 499 500 501 502 503 504 505 506 @app_ctx_manager async def getBotProfile ( self ) -> Profile : \"\"\"\u83b7\u53d6\u672c\u5b9e\u4f8b\u7ed1\u5b9a\u8d26\u53f7\u7684 Profile. Returns: Profile: \u627e\u5230\u7684 Profile. \"\"\" result = await self . adapter . call_api ( \"botProfile\" , CallMethod . GET , { \"sessionKey\" : self . session_key }, ) return Profile . parse_obj ( result )","title":"getBotProfile()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.RelationshipMixin.getFriend","text":"getFriend ( friend_id : int ) -> Optional [ Friend ] \u4ece\u5df2\u77e5\u7684\u53ef\u80fd\u7684\u597d\u53cb ID, \u83b7\u53d6 Friend \u5b9e\u4f8b. Parameters: Name Type Description Default friend_id int \u5df2\u77e5\u7684\u53ef\u80fd\u7684\u597d\u53cb ID. required Returns: Name Type Description Friend Optional [ Friend ] \u64cd\u4f5c\u6210\u529f, \u4f60\u5f97\u5230\u4e86\u4f60\u5e94\u5f97\u7684. None Optional [ Friend ] \u672a\u80fd\u83b7\u53d6\u5230. Source code in graia/ariadne/app.py 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 @app_ctx_manager async def getFriend ( self , friend_id : int ) -> Optional [ Friend ]: \"\"\"\u4ece\u5df2\u77e5\u7684\u53ef\u80fd\u7684\u597d\u53cb ID, \u83b7\u53d6 Friend \u5b9e\u4f8b. Args: friend_id (int): \u5df2\u77e5\u7684\u53ef\u80fd\u7684\u597d\u53cb ID. Returns: Friend: \u64cd\u4f5c\u6210\u529f, \u4f60\u5f97\u5230\u4e86\u4f60\u5e94\u5f97\u7684. None: \u672a\u80fd\u83b7\u53d6\u5230. \"\"\" data = await self . getFriendList () for i in data : if i . id == friend_id : return i","title":"getFriend()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.RelationshipMixin.getFriendList","text":"getFriendList () -> List [ Friend ] \u83b7\u53d6\u672c\u5b9e\u4f8b\u8d26\u53f7\u6dfb\u52a0\u7684\u597d\u53cb\u5217\u8868. Returns: Type Description List [ Friend ] List[Friend]: \u6dfb\u52a0\u7684\u597d\u53cb. Source code in graia/ariadne/app.py 391 392 393 394 395 396 397 398 399 400 401 402 403 @app_ctx_manager async def getFriendList ( self ) -> List [ Friend ]: \"\"\"\u83b7\u53d6\u672c\u5b9e\u4f8b\u8d26\u53f7\u6dfb\u52a0\u7684\u597d\u53cb\u5217\u8868. Returns: List[Friend]: \u6dfb\u52a0\u7684\u597d\u53cb. \"\"\" result = await self . adapter . call_api ( \"friendList\" , CallMethod . GET , { \"sessionKey\" : self . session_key }, ) return [ Friend . parse_obj ( i ) for i in result ]","title":"getFriendList()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.RelationshipMixin.getFriendProfile","text":"getFriendProfile ( friend : Union [ Friend , int ]) -> Profile \u83b7\u53d6\u597d\u53cb\u7684 Profile. Parameters: Name Type Description Default friend Union [ Friend , int ] \u67e5\u627e\u7684\u597d\u53cb. required Returns: Name Type Description Profile Profile \u627e\u5230\u7684 Profile. Source code in graia/ariadne/app.py 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 @app_ctx_manager async def getFriendProfile ( self , friend : Union [ Friend , int ]) -> Profile : \"\"\"\u83b7\u53d6\u597d\u53cb\u7684 Profile. Args: friend (Union[Friend, int]): \u67e5\u627e\u7684\u597d\u53cb. Returns: Profile: \u627e\u5230\u7684 Profile. \"\"\" result = await self . adapter . call_api ( \"friendProfile\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"target\" : int ( friend ), }, ) return Profile . parse_obj ( result )","title":"getFriendProfile()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.RelationshipMixin.getGroup","text":"getGroup ( group_id : int ) -> Optional [ Group ] \u5c1d\u8bd5\u4ece\u5df2\u77e5\u7684\u7fa4\u7ec4\u552f\u4e00ID, \u83b7\u53d6\u5bf9\u5e94\u7fa4\u7ec4\u7684\u4fe1\u606f; \u53ef\u80fd\u8fd4\u56de None. Parameters: Name Type Description Default group_id int \u5c1d\u8bd5\u83b7\u53d6\u7684\u7fa4\u7ec4\u7684\u552f\u4e00 ID. required Returns: Name Type Description Group Optional [ Group ] \u64cd\u4f5c\u6210\u529f, \u4f60\u5f97\u5230\u4e86\u4f60\u5e94\u5f97\u7684. None Optional [ Group ] \u672a\u80fd\u83b7\u53d6\u5230. Source code in graia/ariadne/app.py 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 @app_ctx_manager async def getGroup ( self , group_id : int ) -> Optional [ Group ]: \"\"\"\u5c1d\u8bd5\u4ece\u5df2\u77e5\u7684\u7fa4\u7ec4\u552f\u4e00ID, \u83b7\u53d6\u5bf9\u5e94\u7fa4\u7ec4\u7684\u4fe1\u606f; \u53ef\u80fd\u8fd4\u56de None. Args: group_id (int): \u5c1d\u8bd5\u83b7\u53d6\u7684\u7fa4\u7ec4\u7684\u552f\u4e00 ID. Returns: Group: \u64cd\u4f5c\u6210\u529f, \u4f60\u5f97\u5230\u4e86\u4f60\u5e94\u5f97\u7684. None: \u672a\u80fd\u83b7\u53d6\u5230. \"\"\" data = await self . getGroupList () for i in data : if i . id == group_id : return i","title":"getGroup()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.RelationshipMixin.getGroupList","text":"getGroupList () -> List [ Group ] \u83b7\u53d6\u672c\u5b9e\u4f8b\u8d26\u53f7\u52a0\u5165\u7684\u7fa4\u7ec4\u5217\u8868. Returns: Type Description List [ Group ] List[Group]: \u52a0\u5165\u7684\u7fa4\u7ec4. Source code in graia/ariadne/app.py 421 422 423 424 425 426 427 428 429 430 431 432 433 @app_ctx_manager async def getGroupList ( self ) -> List [ Group ]: \"\"\"\u83b7\u53d6\u672c\u5b9e\u4f8b\u8d26\u53f7\u52a0\u5165\u7684\u7fa4\u7ec4\u5217\u8868. Returns: List[Group]: \u52a0\u5165\u7684\u7fa4\u7ec4. \"\"\" result = await self . adapter . call_api ( \"groupList\" , CallMethod . GET , { \"sessionKey\" : self . session_key }, ) return [ Group . parse_obj ( i ) for i in result ]","title":"getGroupList()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.RelationshipMixin.getMember","text":"getMember ( group : Union [ Group , int ], member_id : int ) -> Member \u5c1d\u8bd5\u4ece\u5df2\u77e5\u7684\u7fa4\u7ec4\u552f\u4e00 ID \u548c\u5df2\u77e5\u7684\u7fa4\u7ec4\u6210\u5458\u7684 ID, \u83b7\u53d6\u5bf9\u5e94\u6210\u5458\u7684\u4fe1\u606f. Parameters: Name Type Description Default group Union [ Group , int ] \u5df2\u77e5\u7684\u7fa4\u7ec4\u552f\u4e00 ID required member_id int \u5df2\u77e5\u7684\u7fa4\u7ec4\u6210\u5458\u7684 ID required Returns: Name Type Description Member Member \u5bf9\u5e94\u7fa4\u6210\u5458\u5bf9\u8c61 Source code in graia/ariadne/app.py 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 @app_ctx_manager async def getMember ( self , group : Union [ Group , int ], member_id : int ) -> Member : \"\"\"\u5c1d\u8bd5\u4ece\u5df2\u77e5\u7684\u7fa4\u7ec4\u552f\u4e00 ID \u548c\u5df2\u77e5\u7684\u7fa4\u7ec4\u6210\u5458\u7684 ID, \u83b7\u53d6\u5bf9\u5e94\u6210\u5458\u7684\u4fe1\u606f. Args: group (Union[Group, int]): \u5df2\u77e5\u7684\u7fa4\u7ec4\u552f\u4e00 ID member_id (int): \u5df2\u77e5\u7684\u7fa4\u7ec4\u6210\u5458\u7684 ID Returns: Member: \u5bf9\u5e94\u7fa4\u6210\u5458\u5bf9\u8c61 \"\"\" result = await self . adapter . call_api ( \"memberInfo\" , CallMethod . RESTGET , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , \"memberId\" : member_id , }, ) return Member . parse_obj ( result )","title":"getMember()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.RelationshipMixin.getMemberList","text":"getMemberList ( group : Union [ Group , int ]) -> List [ Member ] \u5c1d\u8bd5\u4ece\u5df2\u77e5\u7684\u7fa4\u7ec4\u83b7\u53d6\u5bf9\u5e94\u6210\u5458\u7684\u5217\u8868. Parameters: Name Type Description Default group Union [ Group , int ] \u5df2\u77e5\u7684\u7fa4\u7ec4 required Returns: Type Description List [ Member ] List[Member]: \u7fa4\u5185\u6210\u5458\u7684 Member \u5bf9\u8c61. Source code in graia/ariadne/app.py 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 @app_ctx_manager async def getMemberList ( self , group : Union [ Group , int ]) -> List [ Member ]: \"\"\"\u5c1d\u8bd5\u4ece\u5df2\u77e5\u7684\u7fa4\u7ec4\u83b7\u53d6\u5bf9\u5e94\u6210\u5458\u7684\u5217\u8868. Args: group (Union[Group, int]): \u5df2\u77e5\u7684\u7fa4\u7ec4 Returns: List[Member]: \u7fa4\u5185\u6210\u5458\u7684 Member \u5bf9\u8c61. \"\"\" result = await self . adapter . call_api ( \"memberList\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"target\" : group . id if isinstance ( group , Group ) else group , }, ) return [ Member . parse_obj ( i ) for i in result ]","title":"getMemberList()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.RelationshipMixin.getMemberProfile","text":"getMemberProfile ( member : Union [ Member , int ], group : Optional [ Union [ Group , int ]] = None ) -> Profile \u83b7\u53d6\u7fa4\u5458\u7684 Profile. Parameters: Name Type Description Default member Union [ Member , int ] \u7fa4\u5458\u5bf9\u8c61. required group Optional [ Union [ Group , int ]] \u68c0\u7d22\u7684\u7fa4. \u63d0\u4f9b Member \u5f62\u5f0f\u7684 member \u53c2\u6570\u540e\u53ef\u4ee5\u4e0d\u63d0\u4f9b. None Raises: Type Description ValueError \u6ca1\u6709\u63d0\u4f9b\u53ef\u68c0\u7d22\u7684\u7fa4 ID. Returns: Name Type Description Profile Profile \u627e\u5230\u7684 Profile \u5bf9\u8c61. Source code in graia/ariadne/app.py 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 @app_ctx_manager async def getMemberProfile ( self , member : Union [ Member , int ], group : Optional [ Union [ Group , int ]] = None ) -> Profile : \"\"\"\u83b7\u53d6\u7fa4\u5458\u7684 Profile. Args: member (Union[Member, int]): \u7fa4\u5458\u5bf9\u8c61. group (Optional[Union[Group, int]], optional): \u68c0\u7d22\u7684\u7fa4. \u63d0\u4f9b Member \u5f62\u5f0f\u7684 member \u53c2\u6570\u540e\u53ef\u4ee5\u4e0d\u63d0\u4f9b. Raises: ValueError: \u6ca1\u6709\u63d0\u4f9b\u53ef\u68c0\u7d22\u7684\u7fa4 ID. Returns: Profile: \u627e\u5230\u7684 Profile \u5bf9\u8c61. \"\"\" member_id = member . id if isinstance ( member , Member ) else member group = group or ( member . group if isinstance ( member , Member ) else None ) group_id = group . id if isinstance ( group , Group ) else group if not group_id : raise ValueError ( \"Missing necessary argument: group\" ) result = await self . adapter . call_api ( \"memberProfile\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"target\" : group_id , \"memberId\" : member_id }, ) return Profile . parse_obj ( result )","title":"getMemberProfile()"},{"location":"refs/graia/ariadne/app/#graia.ariadne.app.RelationshipMixin.getUserProfile","text":"getUserProfile ( target : Union [ int , Friend , Member , Stranger ]) -> Profile \u83b7\u53d6\u4efb\u610f QQ \u7528\u6237\u7684 Profile. Parameters: Name Type Description Default target Union [ int , Friend , Member , Stranger ] \u4efb\u610f QQ \u7528\u6237. required Returns: Name Type Description Profile Profile \u627e\u5230\u7684 Profile. Source code in graia/ariadne/app.py 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 @app_ctx_manager async def getUserProfile ( self , target : Union [ int , Friend , Member , Stranger ]) -> Profile : \"\"\"\u83b7\u53d6\u4efb\u610f QQ \u7528\u6237\u7684 Profile. Args: target (Union[int, Friend, Member, Stranger]): \u4efb\u610f QQ \u7528\u6237. Returns: Profile: \u627e\u5230\u7684 Profile. \"\"\" result = await self . adapter . call_api ( \"userProfile\" , CallMethod . GET , { \"sessionKey\" : self . session_key , \"target\" : int ( target ), }, ) return Profile . parse_obj ( result )","title":"getUserProfile()"},{"location":"refs/graia/ariadne/context/","text":"\u672c\u6a21\u5757\u521b\u5efa\u4e86 Ariadne \u4e2d\u7684\u4e0a\u4e0b\u6587\u53d8\u91cf enter_context \ud83d\udd17 enter_context ( app : Optional [ 'AriadneMixin' ] = None , event : Optional [ 'Dispatchable' ] = None ) \u8fdb\u5165\u4e8b\u4ef6\u4e0a\u4e0b\u6587 Parameters: Name Type Description Default app Ariadne Ariadne \u5b9e\u4f8b. None event Dispatchable \u5f53\u524d\u4e8b\u4ef6 None Source code in graia/ariadne/context.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 @contextmanager def enter_context ( app : Optional [ \"AriadneMixin\" ] = None , event : Optional [ \"Dispatchable\" ] = None ): \"\"\"\u8fdb\u5165\u4e8b\u4ef6\u4e0a\u4e0b\u6587 Args: app (Ariadne, optional): Ariadne \u5b9e\u4f8b. event (Dispatchable, optional): \u5f53\u524d\u4e8b\u4ef6 \"\"\" token_loop = None token_bcc = None token_adapter = None token_app = None if app : token_app = ariadne_ctx . set ( app ) token_loop = event_loop_ctx . set ( app . broadcast . loop ) token_bcc = broadcast_ctx . set ( app . broadcast ) token_adapter = adapter_ctx . set ( app . adapter ) token_event = event_ctx . set ( event ) if event else None yield with suppress ( ValueError ): if token_app : ariadne_ctx . reset ( token_app ) if token_adapter : adapter_ctx . reset ( token_adapter ) if token_event : event_ctx . reset ( token_event ) if token_loop : event_loop_ctx . reset ( token_loop ) if token_bcc : broadcast_ctx . reset ( token_bcc ) enter_message_send_context \ud83d\udd17 enter_message_send_context ( method : 'UploadMethod' ) \u8fdb\u5165\u6d88\u606f\u53d1\u9001\u4e0a\u4e0b\u6587 Parameters: Name Type Description Default method UploadMethod \u6d88\u606f\u4e0a\u4e0b\u6587\u7684\u679a\u4e3e\u5bf9\u8c61 required Source code in graia/ariadne/context.py 41 42 43 44 45 46 47 48 49 50 @contextmanager def enter_message_send_context ( method : \"UploadMethod\" ): \"\"\"\u8fdb\u5165\u6d88\u606f\u53d1\u9001\u4e0a\u4e0b\u6587 Args: method (UploadMethod): \u6d88\u606f\u4e0a\u4e0b\u6587\u7684\u679a\u4e3e\u5bf9\u8c61 \"\"\" t = upload_method_ctx . set ( method ) yield upload_method_ctx . reset ( t )","title":"context"},{"location":"refs/graia/ariadne/context/#graia.ariadne.context.enter_context","text":"enter_context ( app : Optional [ 'AriadneMixin' ] = None , event : Optional [ 'Dispatchable' ] = None ) \u8fdb\u5165\u4e8b\u4ef6\u4e0a\u4e0b\u6587 Parameters: Name Type Description Default app Ariadne Ariadne \u5b9e\u4f8b. None event Dispatchable \u5f53\u524d\u4e8b\u4ef6 None Source code in graia/ariadne/context.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 @contextmanager def enter_context ( app : Optional [ \"AriadneMixin\" ] = None , event : Optional [ \"Dispatchable\" ] = None ): \"\"\"\u8fdb\u5165\u4e8b\u4ef6\u4e0a\u4e0b\u6587 Args: app (Ariadne, optional): Ariadne \u5b9e\u4f8b. event (Dispatchable, optional): \u5f53\u524d\u4e8b\u4ef6 \"\"\" token_loop = None token_bcc = None token_adapter = None token_app = None if app : token_app = ariadne_ctx . set ( app ) token_loop = event_loop_ctx . set ( app . broadcast . loop ) token_bcc = broadcast_ctx . set ( app . broadcast ) token_adapter = adapter_ctx . set ( app . adapter ) token_event = event_ctx . set ( event ) if event else None yield with suppress ( ValueError ): if token_app : ariadne_ctx . reset ( token_app ) if token_adapter : adapter_ctx . reset ( token_adapter ) if token_event : event_ctx . reset ( token_event ) if token_loop : event_loop_ctx . reset ( token_loop ) if token_bcc : broadcast_ctx . reset ( token_bcc )","title":"enter_context()"},{"location":"refs/graia/ariadne/context/#graia.ariadne.context.enter_message_send_context","text":"enter_message_send_context ( method : 'UploadMethod' ) \u8fdb\u5165\u6d88\u606f\u53d1\u9001\u4e0a\u4e0b\u6587 Parameters: Name Type Description Default method UploadMethod \u6d88\u606f\u4e0a\u4e0b\u6587\u7684\u679a\u4e3e\u5bf9\u8c61 required Source code in graia/ariadne/context.py 41 42 43 44 45 46 47 48 49 50 @contextmanager def enter_message_send_context ( method : \"UploadMethod\" ): \"\"\"\u8fdb\u5165\u6d88\u606f\u53d1\u9001\u4e0a\u4e0b\u6587 Args: method (UploadMethod): \u6d88\u606f\u4e0a\u4e0b\u6587\u7684\u679a\u4e3e\u5bf9\u8c61 \"\"\" t = upload_method_ctx . set ( method ) yield upload_method_ctx . reset ( t )","title":"enter_message_send_context()"},{"location":"refs/graia/ariadne/dispatcher/","text":"Ariadne \u5185\u7f6e\u7684 Dispatcher BaseDispatcher \ud83d\udd17 Bases: AbstractDispatcher \u7a7a Dispatcher Source code in graia/ariadne/dispatcher.py 78 79 80 81 82 83 class BaseDispatcher ( AbstractDispatcher ): \"\"\"\u7a7a Dispatcher\"\"\" @staticmethod async def catch ( * _ ): pass ContextDispatcher \ud83d\udd17 Bases: AbstractDispatcher \u63d0\u53d6\u4e0a\u4e0b\u6587\u7684 Dispatcher Source code in graia/ariadne/dispatcher.py 26 27 28 29 30 31 32 33 34 35 36 class ContextDispatcher ( AbstractDispatcher ): \"\"\"\u63d0\u53d6\u4e0a\u4e0b\u6587\u7684 Dispatcher\"\"\" @staticmethod async def catch ( interface : DispatcherInterface ): from . import get_running if generic_isinstance ( interface . event , interface . annotation ): return interface . event return get_running ( interface . annotation , fail_err = False ) MessageChainDispatcher \ud83d\udd17 Bases: AbstractDispatcher \u4ece MessageEvent \u63d0\u53d6 MessageChain \u7684 Dispatcher Source code in graia/ariadne/dispatcher.py 14 15 16 17 18 19 20 21 22 23 class MessageChainDispatcher ( AbstractDispatcher ): \"\"\"\u4ece MessageEvent \u63d0\u53d6 MessageChain \u7684 Dispatcher\"\"\" @staticmethod async def catch ( interface : DispatcherInterface ): from .event.message import ActiveMessage , MessageEvent if isinstance ( interface . event , ( MessageEvent , ActiveMessage )): if generic_issubclass ( MessageChain , interface . annotation ): return interface . event . messageChain SenderDispatcher \ud83d\udd17 Bases: AbstractDispatcher \u4ece MessageEvent \u63d0\u53d6 sender \u7684 Dispatcher. Source code in graia/ariadne/dispatcher.py 51 52 53 54 55 56 57 58 59 60 61 62 63 class SenderDispatcher ( AbstractDispatcher ): \"\"\" \u4ece MessageEvent \u63d0\u53d6 sender \u7684 Dispatcher. \"\"\" @staticmethod async def catch ( interface : DispatcherInterface ): from .event.message import MessageEvent if isinstance ( interface . event , MessageEvent ): with contextlib . suppress ( TypeError ): if generic_isinstance ( interface . event . sender , interface . annotation ): return interface . event . sender SourceDispatcher \ud83d\udd17 Bases: AbstractDispatcher \u63d0\u53d6 MessageEvent \u6d88\u606f\u94fe Source \u5143\u7d20\u7684 Dispatcher Source code in graia/ariadne/dispatcher.py 39 40 41 42 43 44 45 46 47 48 class SourceDispatcher ( AbstractDispatcher ): \"\"\"\u63d0\u53d6 MessageEvent \u6d88\u606f\u94fe Source \u5143\u7d20\u7684 Dispatcher\"\"\" @staticmethod async def catch ( interface : DispatcherInterface ): from .event.message import ActiveMessage , MessageEvent if isinstance ( interface . event , ( MessageEvent , ActiveMessage )): if generic_issubclass ( Source , interface . annotation ): return interface . event . messageChain . getFirst ( Source ) SubjectDispatcher \ud83d\udd17 Bases: AbstractDispatcher \u4ece ActiveMessage \u63d0\u53d6 subject \u7684 Dispatcher Source code in graia/ariadne/dispatcher.py 66 67 68 69 70 71 72 73 74 75 class SubjectDispatcher ( AbstractDispatcher ): \"\"\"\u4ece ActiveMessage \u63d0\u53d6 subject \u7684 Dispatcher\"\"\" @staticmethod async def catch ( interface : DispatcherInterface ): from .event.message import ActiveMessage if isinstance ( interface . event , ActiveMessage ): if generic_issubclass ( interface . annotation , interface . event . subject ): return interface . event . subject","title":"dispatcher"},{"location":"refs/graia/ariadne/dispatcher/#graia.ariadne.dispatcher.BaseDispatcher","text":"Bases: AbstractDispatcher \u7a7a Dispatcher Source code in graia/ariadne/dispatcher.py 78 79 80 81 82 83 class BaseDispatcher ( AbstractDispatcher ): \"\"\"\u7a7a Dispatcher\"\"\" @staticmethod async def catch ( * _ ): pass","title":"BaseDispatcher"},{"location":"refs/graia/ariadne/dispatcher/#graia.ariadne.dispatcher.ContextDispatcher","text":"Bases: AbstractDispatcher \u63d0\u53d6\u4e0a\u4e0b\u6587\u7684 Dispatcher Source code in graia/ariadne/dispatcher.py 26 27 28 29 30 31 32 33 34 35 36 class ContextDispatcher ( AbstractDispatcher ): \"\"\"\u63d0\u53d6\u4e0a\u4e0b\u6587\u7684 Dispatcher\"\"\" @staticmethod async def catch ( interface : DispatcherInterface ): from . import get_running if generic_isinstance ( interface . event , interface . annotation ): return interface . event return get_running ( interface . annotation , fail_err = False )","title":"ContextDispatcher"},{"location":"refs/graia/ariadne/dispatcher/#graia.ariadne.dispatcher.MessageChainDispatcher","text":"Bases: AbstractDispatcher \u4ece MessageEvent \u63d0\u53d6 MessageChain \u7684 Dispatcher Source code in graia/ariadne/dispatcher.py 14 15 16 17 18 19 20 21 22 23 class MessageChainDispatcher ( AbstractDispatcher ): \"\"\"\u4ece MessageEvent \u63d0\u53d6 MessageChain \u7684 Dispatcher\"\"\" @staticmethod async def catch ( interface : DispatcherInterface ): from .event.message import ActiveMessage , MessageEvent if isinstance ( interface . event , ( MessageEvent , ActiveMessage )): if generic_issubclass ( MessageChain , interface . annotation ): return interface . event . messageChain","title":"MessageChainDispatcher"},{"location":"refs/graia/ariadne/dispatcher/#graia.ariadne.dispatcher.SenderDispatcher","text":"Bases: AbstractDispatcher \u4ece MessageEvent \u63d0\u53d6 sender \u7684 Dispatcher. Source code in graia/ariadne/dispatcher.py 51 52 53 54 55 56 57 58 59 60 61 62 63 class SenderDispatcher ( AbstractDispatcher ): \"\"\" \u4ece MessageEvent \u63d0\u53d6 sender \u7684 Dispatcher. \"\"\" @staticmethod async def catch ( interface : DispatcherInterface ): from .event.message import MessageEvent if isinstance ( interface . event , MessageEvent ): with contextlib . suppress ( TypeError ): if generic_isinstance ( interface . event . sender , interface . annotation ): return interface . event . sender","title":"SenderDispatcher"},{"location":"refs/graia/ariadne/dispatcher/#graia.ariadne.dispatcher.SourceDispatcher","text":"Bases: AbstractDispatcher \u63d0\u53d6 MessageEvent \u6d88\u606f\u94fe Source \u5143\u7d20\u7684 Dispatcher Source code in graia/ariadne/dispatcher.py 39 40 41 42 43 44 45 46 47 48 class SourceDispatcher ( AbstractDispatcher ): \"\"\"\u63d0\u53d6 MessageEvent \u6d88\u606f\u94fe Source \u5143\u7d20\u7684 Dispatcher\"\"\" @staticmethod async def catch ( interface : DispatcherInterface ): from .event.message import ActiveMessage , MessageEvent if isinstance ( interface . event , ( MessageEvent , ActiveMessage )): if generic_issubclass ( Source , interface . annotation ): return interface . event . messageChain . getFirst ( Source )","title":"SourceDispatcher"},{"location":"refs/graia/ariadne/dispatcher/#graia.ariadne.dispatcher.SubjectDispatcher","text":"Bases: AbstractDispatcher \u4ece ActiveMessage \u63d0\u53d6 subject \u7684 Dispatcher Source code in graia/ariadne/dispatcher.py 66 67 68 69 70 71 72 73 74 75 class SubjectDispatcher ( AbstractDispatcher ): \"\"\"\u4ece ActiveMessage \u63d0\u53d6 subject \u7684 Dispatcher\"\"\" @staticmethod async def catch ( interface : DispatcherInterface ): from .event.message import ActiveMessage if isinstance ( interface . event , ActiveMessage ): if generic_issubclass ( interface . annotation , interface . event . subject ): return interface . event . subject","title":"SubjectDispatcher"},{"location":"refs/graia/ariadne/exception/","text":"Ariadne \u7684\u5f02\u5e38\u5b9a\u4e49 AccountMuted \ud83d\udd17 Bases: Exception \u8d26\u53f7\u5728\u5bf9\u8c61\u6240\u5728\u804a\u5929\u533a\u57df\u88ab\u5c01\u7981. Source code in graia/ariadne/exception.py 28 29 class AccountMuted ( Exception ): \"\"\"\u8d26\u53f7\u5728\u5bf9\u8c61\u6240\u5728\u804a\u5929\u533a\u57df\u88ab\u5c01\u7981.\"\"\" AccountNotFound \ud83d\udd17 Bases: Exception \u672a\u80fd\u4f7f\u7528\u6240\u914d\u7f6e\u7684\u8d26\u53f7\u6fc0\u6d3b sessionKey, \u8bf7\u68c0\u67e5 mirai_session \u914d\u7f6e. Source code in graia/ariadne/exception.py 12 13 class AccountNotFound ( Exception ): \"\"\"\u672a\u80fd\u4f7f\u7528\u6240\u914d\u7f6e\u7684\u8d26\u53f7\u6fc0\u6d3b sessionKey, \u8bf7\u68c0\u67e5 mirai_session \u914d\u7f6e.\"\"\" ConflictItem \ud83d\udd17 Bases: Exception \u9879\u51b2\u7a81/\u5176\u4e2d\u4e00\u9879\u88ab\u91cd\u590d\u5b9a\u4e49 Source code in graia/ariadne/exception.py 52 53 class ConflictItem ( Exception ): \"\"\"\u9879\u51b2\u7a81/\u5176\u4e2d\u4e00\u9879\u88ab\u91cd\u590d\u5b9a\u4e49\"\"\" DeprecatedImpl \ud83d\udd17 Bases: Exception \u8be5\u63a5\u53e3\u5df2\u5f03\u7528. Source code in graia/ariadne/exception.py 44 45 class DeprecatedImpl ( Exception ): \"\"\"\u8be5\u63a5\u53e3\u5df2\u5f03\u7528.\"\"\" InvalidArgument \ud83d\udd17 Bases: Exception \u64cd\u4f5c\u53c2\u6570\u4e0d\u5408\u6cd5, \u8bf7\u62a5\u544a\u95ee\u9898. Source code in graia/ariadne/exception.py 36 37 class InvalidArgument ( Exception ): \"\"\"\u64cd\u4f5c\u53c2\u6570\u4e0d\u5408\u6cd5, \u8bf7\u62a5\u544a\u95ee\u9898.\"\"\" InvalidEventTypeDefinition \ud83d\udd17 Bases: Exception \u4e0d\u5408\u6cd5\u7684\u4e8b\u4ef6\u7c7b\u578b\u5b9a\u4e49. Source code in graia/ariadne/exception.py 4 5 class InvalidEventTypeDefinition ( Exception ): \"\"\"\u4e0d\u5408\u6cd5\u7684\u4e8b\u4ef6\u7c7b\u578b\u5b9a\u4e49.\"\"\" InvalidSession \ud83d\udd17 Bases: Exception \u65e0\u6548\u7684 sessionKey, \u8bf7\u91cd\u65b0\u83b7\u53d6. Source code in graia/ariadne/exception.py 16 17 class InvalidSession ( Exception ): \"\"\"\u65e0\u6548\u7684 sessionKey, \u8bf7\u91cd\u65b0\u83b7\u53d6.\"\"\" InvalidVerifyKey \ud83d\udd17 Bases: Exception \u65e0\u6548\u7684 verifyKey \u6216\u5176\u914d\u7f6e. Source code in graia/ariadne/exception.py 8 9 class InvalidVerifyKey ( Exception ): \"\"\"\u65e0\u6548\u7684 verifyKey \u6216\u5176\u914d\u7f6e.\"\"\" MessageTooLong \ud83d\udd17 Bases: Exception \u6d88\u606f\u8fc7\u957f, \u5c1d\u8bd5\u5206\u6bb5\u53d1\u9001\u6216\u62a5\u544a\u95ee\u9898. Source code in graia/ariadne/exception.py 32 33 class MessageTooLong ( Exception ): \"\"\"\u6d88\u606f\u8fc7\u957f, \u5c1d\u8bd5\u5206\u6bb5\u53d1\u9001\u6216\u62a5\u544a\u95ee\u9898.\"\"\" MissingNecessaryArgument \ud83d\udd17 Bases: Exception \u5e94\u5728\u6240\u63d0\u5230\u7684\u53c2\u6570\u4e4b\u4e2d\u81f3\u5c11\u4f20\u5165/\u4f7f\u7528\u4e00\u4e2a Source code in graia/ariadne/exception.py 48 49 class MissingNecessaryArgument ( Exception ): \"\"\"\u5e94\u5728\u6240\u63d0\u5230\u7684\u53c2\u6570\u4e4b\u4e2d\u81f3\u5c11\u4f20\u5165/\u4f7f\u7528\u4e00\u4e2a\"\"\" NotSupportedAction \ud83d\udd17 Bases: Exception \u8be5\u7248\u672c\u4e0d\u652f\u6301\u672c\u63a5\u53e3. Source code in graia/ariadne/exception.py 40 41 class NotSupportedAction ( Exception ): \"\"\"\u8be5\u7248\u672c\u4e0d\u652f\u6301\u672c\u63a5\u53e3.\"\"\" RemoteException \ud83d\udd17 Bases: Exception \u7f51\u7edc\u5f02\u5e38: \u65e0\u5934\u5ba2\u6237\u7aef\u5904\u53d1\u751f\u9519\u8bef, \u4f60\u5e94\u8be5\u68c0\u67e5\u5176\u8f93\u51fa\u7684\u9519\u8bef\u65e5\u5fd7. Source code in graia/ariadne/exception.py 56 57 class RemoteException ( Exception ): \"\"\"\u7f51\u7edc\u5f02\u5e38: \u65e0\u5934\u5ba2\u6237\u7aef\u5904\u53d1\u751f\u9519\u8bef, \u4f60\u5e94\u8be5\u68c0\u67e5\u5176\u8f93\u51fa\u7684\u9519\u8bef\u65e5\u5fd7.\"\"\" UnVerifiedSession \ud83d\udd17 Bases: Exception \u5c1a\u672a\u9a8c\u8bc1/\u7ed1\u5b9a\u7684 session. Source code in graia/ariadne/exception.py 20 21 class UnVerifiedSession ( Exception ): \"\"\"\u5c1a\u672a\u9a8c\u8bc1/\u7ed1\u5b9a\u7684 session.\"\"\" UnknownError \ud83d\udd17 Bases: Exception \u5176\u4ed6\u9519\u8bef Source code in graia/ariadne/exception.py 60 61 class UnknownError ( Exception ): \"\"\"\u5176\u4ed6\u9519\u8bef\"\"\" UnknownTarget \ud83d\udd17 Bases: Exception \u5bf9\u8c61\u4f4d\u7f6e\u672a\u77e5, \u4e0d\u5b58\u5728\u6216\u4e0d\u53ef\u53ca. Source code in graia/ariadne/exception.py 24 25 class UnknownTarget ( Exception ): \"\"\"\u5bf9\u8c61\u4f4d\u7f6e\u672a\u77e5, \u4e0d\u5b58\u5728\u6216\u4e0d\u53ef\u53ca.\"\"\"","title":"exception"},{"location":"refs/graia/ariadne/exception/#graia.ariadne.exception.AccountMuted","text":"Bases: Exception \u8d26\u53f7\u5728\u5bf9\u8c61\u6240\u5728\u804a\u5929\u533a\u57df\u88ab\u5c01\u7981. Source code in graia/ariadne/exception.py 28 29 class AccountMuted ( Exception ): \"\"\"\u8d26\u53f7\u5728\u5bf9\u8c61\u6240\u5728\u804a\u5929\u533a\u57df\u88ab\u5c01\u7981.\"\"\"","title":"AccountMuted"},{"location":"refs/graia/ariadne/exception/#graia.ariadne.exception.AccountNotFound","text":"Bases: Exception \u672a\u80fd\u4f7f\u7528\u6240\u914d\u7f6e\u7684\u8d26\u53f7\u6fc0\u6d3b sessionKey, \u8bf7\u68c0\u67e5 mirai_session \u914d\u7f6e. Source code in graia/ariadne/exception.py 12 13 class AccountNotFound ( Exception ): \"\"\"\u672a\u80fd\u4f7f\u7528\u6240\u914d\u7f6e\u7684\u8d26\u53f7\u6fc0\u6d3b sessionKey, \u8bf7\u68c0\u67e5 mirai_session \u914d\u7f6e.\"\"\"","title":"AccountNotFound"},{"location":"refs/graia/ariadne/exception/#graia.ariadne.exception.ConflictItem","text":"Bases: Exception \u9879\u51b2\u7a81/\u5176\u4e2d\u4e00\u9879\u88ab\u91cd\u590d\u5b9a\u4e49 Source code in graia/ariadne/exception.py 52 53 class ConflictItem ( Exception ): \"\"\"\u9879\u51b2\u7a81/\u5176\u4e2d\u4e00\u9879\u88ab\u91cd\u590d\u5b9a\u4e49\"\"\"","title":"ConflictItem"},{"location":"refs/graia/ariadne/exception/#graia.ariadne.exception.DeprecatedImpl","text":"Bases: Exception \u8be5\u63a5\u53e3\u5df2\u5f03\u7528. Source code in graia/ariadne/exception.py 44 45 class DeprecatedImpl ( Exception ): \"\"\"\u8be5\u63a5\u53e3\u5df2\u5f03\u7528.\"\"\"","title":"DeprecatedImpl"},{"location":"refs/graia/ariadne/exception/#graia.ariadne.exception.InvalidArgument","text":"Bases: Exception \u64cd\u4f5c\u53c2\u6570\u4e0d\u5408\u6cd5, \u8bf7\u62a5\u544a\u95ee\u9898. Source code in graia/ariadne/exception.py 36 37 class InvalidArgument ( Exception ): \"\"\"\u64cd\u4f5c\u53c2\u6570\u4e0d\u5408\u6cd5, \u8bf7\u62a5\u544a\u95ee\u9898.\"\"\"","title":"InvalidArgument"},{"location":"refs/graia/ariadne/exception/#graia.ariadne.exception.InvalidEventTypeDefinition","text":"Bases: Exception \u4e0d\u5408\u6cd5\u7684\u4e8b\u4ef6\u7c7b\u578b\u5b9a\u4e49. Source code in graia/ariadne/exception.py 4 5 class InvalidEventTypeDefinition ( Exception ): \"\"\"\u4e0d\u5408\u6cd5\u7684\u4e8b\u4ef6\u7c7b\u578b\u5b9a\u4e49.\"\"\"","title":"InvalidEventTypeDefinition"},{"location":"refs/graia/ariadne/exception/#graia.ariadne.exception.InvalidSession","text":"Bases: Exception \u65e0\u6548\u7684 sessionKey, \u8bf7\u91cd\u65b0\u83b7\u53d6. Source code in graia/ariadne/exception.py 16 17 class InvalidSession ( Exception ): \"\"\"\u65e0\u6548\u7684 sessionKey, \u8bf7\u91cd\u65b0\u83b7\u53d6.\"\"\"","title":"InvalidSession"},{"location":"refs/graia/ariadne/exception/#graia.ariadne.exception.InvalidVerifyKey","text":"Bases: Exception \u65e0\u6548\u7684 verifyKey \u6216\u5176\u914d\u7f6e. Source code in graia/ariadne/exception.py 8 9 class InvalidVerifyKey ( Exception ): \"\"\"\u65e0\u6548\u7684 verifyKey \u6216\u5176\u914d\u7f6e.\"\"\"","title":"InvalidVerifyKey"},{"location":"refs/graia/ariadne/exception/#graia.ariadne.exception.MessageTooLong","text":"Bases: Exception \u6d88\u606f\u8fc7\u957f, \u5c1d\u8bd5\u5206\u6bb5\u53d1\u9001\u6216\u62a5\u544a\u95ee\u9898. Source code in graia/ariadne/exception.py 32 33 class MessageTooLong ( Exception ): \"\"\"\u6d88\u606f\u8fc7\u957f, \u5c1d\u8bd5\u5206\u6bb5\u53d1\u9001\u6216\u62a5\u544a\u95ee\u9898.\"\"\"","title":"MessageTooLong"},{"location":"refs/graia/ariadne/exception/#graia.ariadne.exception.MissingNecessaryArgument","text":"Bases: Exception \u5e94\u5728\u6240\u63d0\u5230\u7684\u53c2\u6570\u4e4b\u4e2d\u81f3\u5c11\u4f20\u5165/\u4f7f\u7528\u4e00\u4e2a Source code in graia/ariadne/exception.py 48 49 class MissingNecessaryArgument ( Exception ): \"\"\"\u5e94\u5728\u6240\u63d0\u5230\u7684\u53c2\u6570\u4e4b\u4e2d\u81f3\u5c11\u4f20\u5165/\u4f7f\u7528\u4e00\u4e2a\"\"\"","title":"MissingNecessaryArgument"},{"location":"refs/graia/ariadne/exception/#graia.ariadne.exception.NotSupportedAction","text":"Bases: Exception \u8be5\u7248\u672c\u4e0d\u652f\u6301\u672c\u63a5\u53e3. Source code in graia/ariadne/exception.py 40 41 class NotSupportedAction ( Exception ): \"\"\"\u8be5\u7248\u672c\u4e0d\u652f\u6301\u672c\u63a5\u53e3.\"\"\"","title":"NotSupportedAction"},{"location":"refs/graia/ariadne/exception/#graia.ariadne.exception.RemoteException","text":"Bases: Exception \u7f51\u7edc\u5f02\u5e38: \u65e0\u5934\u5ba2\u6237\u7aef\u5904\u53d1\u751f\u9519\u8bef, \u4f60\u5e94\u8be5\u68c0\u67e5\u5176\u8f93\u51fa\u7684\u9519\u8bef\u65e5\u5fd7. Source code in graia/ariadne/exception.py 56 57 class RemoteException ( Exception ): \"\"\"\u7f51\u7edc\u5f02\u5e38: \u65e0\u5934\u5ba2\u6237\u7aef\u5904\u53d1\u751f\u9519\u8bef, \u4f60\u5e94\u8be5\u68c0\u67e5\u5176\u8f93\u51fa\u7684\u9519\u8bef\u65e5\u5fd7.\"\"\"","title":"RemoteException"},{"location":"refs/graia/ariadne/exception/#graia.ariadne.exception.UnVerifiedSession","text":"Bases: Exception \u5c1a\u672a\u9a8c\u8bc1/\u7ed1\u5b9a\u7684 session. Source code in graia/ariadne/exception.py 20 21 class UnVerifiedSession ( Exception ): \"\"\"\u5c1a\u672a\u9a8c\u8bc1/\u7ed1\u5b9a\u7684 session.\"\"\"","title":"UnVerifiedSession"},{"location":"refs/graia/ariadne/exception/#graia.ariadne.exception.UnknownError","text":"Bases: Exception \u5176\u4ed6\u9519\u8bef Source code in graia/ariadne/exception.py 60 61 class UnknownError ( Exception ): \"\"\"\u5176\u4ed6\u9519\u8bef\"\"\"","title":"UnknownError"},{"location":"refs/graia/ariadne/exception/#graia.ariadne.exception.UnknownTarget","text":"Bases: Exception \u5bf9\u8c61\u4f4d\u7f6e\u672a\u77e5, \u4e0d\u5b58\u5728\u6216\u4e0d\u53ef\u53ca. Source code in graia/ariadne/exception.py 24 25 class UnknownTarget ( Exception ): \"\"\"\u5bf9\u8c61\u4f4d\u7f6e\u672a\u77e5, \u4e0d\u5b58\u5728\u6216\u4e0d\u53ef\u53ca.\"\"\"","title":"UnknownTarget"},{"location":"refs/graia/ariadne/model/","text":"Ariadne \u5404\u79cd model \u5b58\u653e\u7684\u4f4d\u7f6e Announcement \ud83d\udd17 Bases: AriadneBaseModel \u7fa4\u516c\u544a Source code in graia/ariadne/model.py 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 class Announcement ( AriadneBaseModel ): \"\"\"\u7fa4\u516c\u544a\"\"\" group : Group \"\"\"\u516c\u544a\u6240\u5728\u7684\u7fa4\"\"\" senderId : int \"\"\"\u53d1\u9001\u8005QQ\u53f7\"\"\" fid : str \"\"\"\u516c\u544a\u552f\u4e00\u6807\u8bc6ID\"\"\" allConfirmed : bool \"\"\"\u7fa4\u6210\u5458\u662f\u5426\u5df2\u5168\u90e8\u786e\u8ba4\"\"\" confirmedMembersCount : int \"\"\"\u5df2\u786e\u8ba4\u7fa4\u6210\u5458\u4eba\u6570\"\"\" publicationTime : datetime \"\"\"\u516c\u544a\u53d1\u5e03\u65f6\u95f4\"\"\" allConfirmed class-attribute \ud83d\udd17 allConfirmed : bool = None \u7fa4\u6210\u5458\u662f\u5426\u5df2\u5168\u90e8\u786e\u8ba4 confirmedMembersCount class-attribute \ud83d\udd17 confirmedMembersCount : int = None \u5df2\u786e\u8ba4\u7fa4\u6210\u5458\u4eba\u6570 fid class-attribute \ud83d\udd17 fid : str = None \u516c\u544a\u552f\u4e00\u6807\u8bc6ID group class-attribute \ud83d\udd17 group : Group = None \u516c\u544a\u6240\u5728\u7684\u7fa4 publicationTime class-attribute \ud83d\udd17 publicationTime : datetime = None \u516c\u544a\u53d1\u5e03\u65f6\u95f4 senderId class-attribute \ud83d\udd17 senderId : int = None \u53d1\u9001\u8005QQ\u53f7 AriadneBaseModel \ud83d\udd17 Bases: BaseModel Ariadne \u4e00\u5207\u6570\u636e\u6a21\u578b\u7684\u57fa\u7c7b. Source code in graia/ariadne/model.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 class AriadneBaseModel ( BaseModel ): \"\"\" Ariadne \u4e00\u5207\u6570\u636e\u6a21\u578b\u7684\u57fa\u7c7b. \"\"\" def dict ( self , * , include : Union [ None , \"AbstractSetIntStr\" , \"MappingIntStrAny\" ] = None , exclude : Union [ None , \"AbstractSetIntStr\" , \"MappingIntStrAny\" ] = None , by_alias : bool = False , skip_defaults : bool = False , exclude_unset : bool = False , exclude_defaults : bool = False , exclude_none : bool = False , ) -> \"DictStrAny\" : _ , * _ = by_alias , exclude_none , skip_defaults return super () . dict ( include = include , # type: ignore exclude = exclude , # type: ignore by_alias = True , exclude_unset = exclude_unset , exclude_defaults = exclude_defaults , exclude_none = True , ) class Config ( BaseConfig ): \"\"\"Ariadne BaseModel \u8bbe\u7f6e\"\"\" extra = Extra . allow json_encoders = { datetime : datetime_encoder , } arbitrary_types_allowed = True Config \ud83d\udd17 Bases: BaseConfig Ariadne BaseModel \u8bbe\u7f6e Source code in graia/ariadne/model.py 70 71 72 73 74 75 76 77 class Config ( BaseConfig ): \"\"\"Ariadne BaseModel \u8bbe\u7f6e\"\"\" extra = Extra . allow json_encoders = { datetime : datetime_encoder , } arbitrary_types_allowed = True AriadneStatus \ud83d\udd17 Bases: Enum \u6307\u793a Ariadne \u72b6\u6001\u7684\u679a\u4e3e\u7c7b Source code in graia/ariadne/model.py 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 class AriadneStatus ( Enum ): \"\"\"\u6307\u793a Ariadne \u72b6\u6001\u7684\u679a\u4e3e\u7c7b\"\"\" STOP = \"stop\" \"\"\"\u5df2\u505c\u6b62\"\"\" LAUNCH = \"launch\" \"\"\"\u6b63\u5728\u542f\u52a8\"\"\" RUNNING = \"running\" \"\"\"\u6b63\u5e38\u8fd0\u884c\"\"\" SHUTDOWN = \"shutdown\" \"\"\"\u521a\u5f00\u59cb\u5173\u95ed\"\"\" CLEANUP = \"cleanup\" \"\"\"\u6e05\u7406\u6b8b\u7559\u4efb\u52a1\"\"\" CLEANUP class-attribute \ud83d\udd17 CLEANUP = 'cleanup' \u6e05\u7406\u6b8b\u7559\u4efb\u52a1 LAUNCH class-attribute \ud83d\udd17 LAUNCH = 'launch' \u6b63\u5728\u542f\u52a8 RUNNING class-attribute \ud83d\udd17 RUNNING = 'running' \u6b63\u5e38\u8fd0\u884c SHUTDOWN class-attribute \ud83d\udd17 SHUTDOWN = 'shutdown' \u521a\u5f00\u59cb\u5173\u95ed STOP class-attribute \ud83d\udd17 STOP = 'stop' \u5df2\u505c\u6b62 BotMessage \ud83d\udd17 Bases: AriadneBaseModel \u6307\u793a Bot \u53d1\u51fa\u7684\u6d88\u606f. Source code in graia/ariadne/model.py 716 717 718 719 720 721 722 723 724 725 class BotMessage ( AriadneBaseModel ): \"\"\" \u6307\u793a Bot \u53d1\u51fa\u7684\u6d88\u606f. \"\"\" messageId : int \"\"\"\u6d88\u606f ID\"\"\" origin : Optional [ \"MessageChain\" ] \"\"\"\u539f\u59cb\u6d88\u606f\u94fe (\u53d1\u9001\u7684\u6d88\u606f\u94fe)\"\"\" messageId class-attribute \ud83d\udd17 messageId : int = None \u6d88\u606f ID origin class-attribute \ud83d\udd17 origin : Optional [ 'MessageChain' ] = None \u539f\u59cb\u6d88\u606f\u94fe (\u53d1\u9001\u7684\u6d88\u606f\u94fe) CallMethod \ud83d\udd17 Bases: str , Enum \u7528\u4e8e\u5411 Adapter.call_api \u6307\u793a\u64cd\u4f5c\u7c7b\u578b. Source code in graia/ariadne/model.py 668 669 670 671 672 673 674 675 676 677 class CallMethod ( str , Enum ): \"\"\" \u7528\u4e8e\u5411 `Adapter.call_api` \u6307\u793a\u64cd\u4f5c\u7c7b\u578b. \"\"\" GET = \"GET\" POST = \"POST\" RESTGET = \"get\" RESTPOST = \"update\" MULTIPART = \"multipart\" ChatLogConfig \ud83d\udd17 \u914d\u7f6e\u65e5\u5fd7\u5982\u4f55\u8bb0\u5f55 QQ \u6d88\u606f\u4e0e\u4e8b\u4ef6. Source code in graia/ariadne/model.py 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 @dataclass class ChatLogConfig : \"\"\"\u914d\u7f6e\u65e5\u5fd7\u5982\u4f55\u8bb0\u5f55 QQ \u6d88\u606f\u4e0e\u4e8b\u4ef6.\"\"\" enabled : bool = True \"\"\"\u662f\u5426\u5f00\u542f\u804a\u5929\u65e5\u5fd7\"\"\" log_level : str = \"INFO\" \"\"\"\u804a\u5929\u65e5\u5fd7\u7684 log \u7b49\u7ea7\"\"\" group_message_log_format : str = ( \" {bot_id} : [ {group_name} ( {group_id} )] {member_name} ( {member_id} ) -> {message_string} \" ) \"\"\"\u7fa4\u6d88\u606f\u683c\u5f0f\"\"\" friend_message_log_format : str = \" {bot_id} : [ {friend_name} ( {friend_id} )] -> {message_string} \" \"\"\"\u597d\u53cb\u6d88\u606f\u683c\u5f0f\"\"\" temp_message_log_format : str = ( \" {bot_id} : [ {group_name} ( {group_id} ). {member_name} ( {member_id} )] -> {message_string} \" ) \"\"\"\u4e34\u65f6\u6d88\u606f\u683c\u5f0f\"\"\" other_client_message_log_format : str = \" {bot_id} : [ {platform_name} ( {platform_id} )] -> {message_string} \" \"\"\"\u5176\u4ed6\u5ba2\u6237\u7aef\u6d88\u606f\u683c\u5f0f\"\"\" stranger_message_log_format : str = \" {bot_id} : [ {stranger_name} ( {stranger_id} )] -> {message_string} \" \"\"\"\u964c\u751f\u4eba\u6d88\u606f\u683c\u5f0f\"\"\" active_message_log_format : str = \" {bot_id} : {sync_label} [ {subject} ] <- {message_string} \" def initialize ( self , app : \"Ariadne\" ): \"\"\"\u5229\u7528 Ariadne \u5bf9\u8c61\u6ce8\u518c\u4e8b\u4ef6\u65e5\u5fd7\u5904\u7406\u5668\"\"\" from .event.message import ( ActiveMessage , FriendMessage , GroupMessage , OtherClientMessage , StrangerMessage , TempMessage , ) @app . broadcast . receiver ( GroupMessage , priority = Priority . Logger ) def log_group_message ( event : GroupMessage ): logger . log ( self . log_level , self . group_message_log_format . format ( group_id = event . sender . group . id , group_name = event . sender . group . name , member_id = event . sender . id , member_name = event . sender . name , member_permission = event . sender . permission . name , bot_id = app . mirai_session . account , message_string = event . messageChain . asDisplay () . __repr__ (), ), ) @app . broadcast . receiver ( FriendMessage , priority = Priority . Logger ) def log_friend_message ( event : FriendMessage ): logger . log ( self . log_level , self . friend_message_log_format . format ( bot_id = app . mirai_session . account , friend_name = event . sender . nickname , friend_id = event . sender . id , message_string = event . messageChain . asDisplay () . __repr__ (), ), ) @app . broadcast . receiver ( TempMessage , priority = Priority . Logger ) def log_temp_message ( event : TempMessage ): logger . log ( self . log_level , self . temp_message_log_format . format ( group_id = event . sender . group . id , group_name = event . sender . group . name , member_id = event . sender . id , member_name = event . sender . name , member_permission = event . sender . permission . name , bot_id = app . mirai_session . account , message_string = event . messageChain . asDisplay () . __repr__ (), ), ) @app . broadcast . receiver ( StrangerMessage , priority = Priority . Logger ) def log_stranger_message ( event : StrangerMessage ): logger . log ( self . log_level , self . stranger_message_log_format . format ( bot_id = app . mirai_session . account , stranger_name = event . sender . nickname , stranger_id = event . sender . id , message_string = event . messageChain . asDisplay () . __repr__ (), ), ) @app . broadcast . receiver ( OtherClientMessage , priority = Priority . Logger ) def log_other_client_message ( event : OtherClientMessage ): logger . log ( self . log_level , self . other_client_message_log_format . format ( bot_id = app . mirai_session . account , platform_name = event . sender . platform , platform_id = event . sender . id , message_string = event . messageChain . asDisplay () . __repr__ (), ), ) def log_active_message ( event : ActiveMessage ): logger . log ( self . log_level , self . active_message_log_format . format ( bot_id = app . mirai_session . account , sync_label = \"[SYNC]\" if event . sync else \"\" , subject = event . subject , message_string = event . messageChain . asDisplay () . __repr__ (), ), ) app . broadcast . listeners . append ( Listener ( log_active_message , app . broadcast . getDefaultNamespace (), list ( gen_subclass ( ActiveMessage )), priority = Priority . Logger , ) ) enabled class-attribute \ud83d\udd17 enabled : bool = True \u662f\u5426\u5f00\u542f\u804a\u5929\u65e5\u5fd7 friend_message_log_format class-attribute \ud83d\udd17 friend_message_log_format : str = ' {bot_id} : [ {friend_name} ( {friend_id} )] -> {message_string} ' \u597d\u53cb\u6d88\u606f\u683c\u5f0f group_message_log_format class-attribute \ud83d\udd17 group_message_log_format : str = ' {bot_id} : [ {group_name} ( {group_id} )] {member_name} ( {member_id} ) -> {message_string} ' \u7fa4\u6d88\u606f\u683c\u5f0f log_level class-attribute \ud83d\udd17 log_level : str = 'INFO' \u804a\u5929\u65e5\u5fd7\u7684 log \u7b49\u7ea7 other_client_message_log_format class-attribute \ud83d\udd17 other_client_message_log_format : str = ' {bot_id} : [ {platform_name} ( {platform_id} )] -> {message_string} ' \u5176\u4ed6\u5ba2\u6237\u7aef\u6d88\u606f\u683c\u5f0f stranger_message_log_format class-attribute \ud83d\udd17 stranger_message_log_format : str = ' {bot_id} : [ {stranger_name} ( {stranger_id} )] -> {message_string} ' \u964c\u751f\u4eba\u6d88\u606f\u683c\u5f0f temp_message_log_format class-attribute \ud83d\udd17 temp_message_log_format : str = ' {bot_id} : [ {group_name} ( {group_id} ). {member_name} ( {member_id} )] -> {message_string} ' \u4e34\u65f6\u6d88\u606f\u683c\u5f0f initialize \ud83d\udd17 initialize ( app : 'Ariadne' ) \u5229\u7528 Ariadne \u5bf9\u8c61\u6ce8\u518c\u4e8b\u4ef6\u65e5\u5fd7\u5904\u7406\u5668 Source code in graia/ariadne/model.py 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 def initialize ( self , app : \"Ariadne\" ): \"\"\"\u5229\u7528 Ariadne \u5bf9\u8c61\u6ce8\u518c\u4e8b\u4ef6\u65e5\u5fd7\u5904\u7406\u5668\"\"\" from .event.message import ( ActiveMessage , FriendMessage , GroupMessage , OtherClientMessage , StrangerMessage , TempMessage , ) @app . broadcast . receiver ( GroupMessage , priority = Priority . Logger ) def log_group_message ( event : GroupMessage ): logger . log ( self . log_level , self . group_message_log_format . format ( group_id = event . sender . group . id , group_name = event . sender . group . name , member_id = event . sender . id , member_name = event . sender . name , member_permission = event . sender . permission . name , bot_id = app . mirai_session . account , message_string = event . messageChain . asDisplay () . __repr__ (), ), ) @app . broadcast . receiver ( FriendMessage , priority = Priority . Logger ) def log_friend_message ( event : FriendMessage ): logger . log ( self . log_level , self . friend_message_log_format . format ( bot_id = app . mirai_session . account , friend_name = event . sender . nickname , friend_id = event . sender . id , message_string = event . messageChain . asDisplay () . __repr__ (), ), ) @app . broadcast . receiver ( TempMessage , priority = Priority . Logger ) def log_temp_message ( event : TempMessage ): logger . log ( self . log_level , self . temp_message_log_format . format ( group_id = event . sender . group . id , group_name = event . sender . group . name , member_id = event . sender . id , member_name = event . sender . name , member_permission = event . sender . permission . name , bot_id = app . mirai_session . account , message_string = event . messageChain . asDisplay () . __repr__ (), ), ) @app . broadcast . receiver ( StrangerMessage , priority = Priority . Logger ) def log_stranger_message ( event : StrangerMessage ): logger . log ( self . log_level , self . stranger_message_log_format . format ( bot_id = app . mirai_session . account , stranger_name = event . sender . nickname , stranger_id = event . sender . id , message_string = event . messageChain . asDisplay () . __repr__ (), ), ) @app . broadcast . receiver ( OtherClientMessage , priority = Priority . Logger ) def log_other_client_message ( event : OtherClientMessage ): logger . log ( self . log_level , self . other_client_message_log_format . format ( bot_id = app . mirai_session . account , platform_name = event . sender . platform , platform_id = event . sender . id , message_string = event . messageChain . asDisplay () . __repr__ (), ), ) def log_active_message ( event : ActiveMessage ): logger . log ( self . log_level , self . active_message_log_format . format ( bot_id = app . mirai_session . account , sync_label = \"[SYNC]\" if event . sync else \"\" , subject = event . subject , message_string = event . messageChain . asDisplay () . __repr__ (), ), ) app . broadcast . listeners . append ( Listener ( log_active_message , app . broadcast . getDefaultNamespace (), list ( gen_subclass ( ActiveMessage )), priority = Priority . Logger , ) ) Client \ud83d\udd17 Bases: AriadneBaseModel \u6307\u793a\u5176\u4ed6\u5ba2\u6237\u7aef Source code in graia/ariadne/model.py 680 681 682 683 684 685 686 687 688 689 class Client ( AriadneBaseModel ): \"\"\" \u6307\u793a\u5176\u4ed6\u5ba2\u6237\u7aef \"\"\" id : int \"\"\"\u5ba2\u6237\u7aef ID\"\"\" platform : str \"\"\"\u5e73\u53f0\u5b57\u7b26\u4e32\u8868\u793a\"\"\" id class-attribute \ud83d\udd17 id : int = None \u5ba2\u6237\u7aef ID platform class-attribute \ud83d\udd17 platform : str = None \u5e73\u53f0\u5b57\u7b26\u4e32\u8868\u793a DatetimeEncoder \ud83d\udd17 Bases: json . JSONEncoder \u53ef\u4ee5\u7f16\u7801 datetime \u7684 JSONEncoder Source code in graia/ariadne/model.py 37 38 39 40 41 class DatetimeEncoder ( json . JSONEncoder ): \"\"\"\u53ef\u4ee5\u7f16\u7801 datetime \u7684 JSONEncoder\"\"\" def default ( self , o ): return int ( o . timestamp ()) if isinstance ( o , datetime ) else super () . default ( o ) DownloadInfo \ud83d\udd17 Bases: AriadneBaseModel \u63cf\u8ff0\u4e00\u4e2a\u6587\u4ef6\u7684\u4e0b\u8f7d\u4fe1\u606f. Source code in graia/ariadne/model.py 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 class DownloadInfo ( AriadneBaseModel ): \"\"\"\u63cf\u8ff0\u4e00\u4e2a\u6587\u4ef6\u7684\u4e0b\u8f7d\u4fe1\u606f.\"\"\" sha : str = \"\" \"\"\"\u6587\u4ef6 SHA256\"\"\" md5 : str = \"\" \"\"\"\u6587\u4ef6 MD5\"\"\" download_times : int = Field ( ... , alias = \"downloadTimes\" ) \"\"\"\u4e0b\u8f7d\u6b21\u6570\"\"\" uploader_id : int = Field ( ... , alias = \"uploaderId\" ) \"\"\"\u4e0a\u4f20\u8005 QQ \u53f7\"\"\" upload_time : datetime = Field ( ... , alias = \"uploadTime\" ) \"\"\"\u4e0a\u4f20\u65f6\u95f4\"\"\" last_modify_time : datetime = Field ( ... , alias = \"lastModifyTime\" ) \"\"\"\u6700\u540e\u4fee\u6539\u65f6\u95f4\"\"\" url : Optional [ str ] = None \"\"\"\u4e0b\u8f7d url\"\"\" download_times class-attribute \ud83d\udd17 download_times : int = Field ( Ellipsis , alias = 'downloadTimes' ) \u4e0b\u8f7d\u6b21\u6570 last_modify_time class-attribute \ud83d\udd17 last_modify_time : datetime = Field ( Ellipsis , alias = 'lastModifyTime' ) \u6700\u540e\u4fee\u6539\u65f6\u95f4 md5 class-attribute \ud83d\udd17 md5 : str = '' \u6587\u4ef6 MD5 sha class-attribute \ud83d\udd17 sha : str = '' \u6587\u4ef6 SHA256 upload_time class-attribute \ud83d\udd17 upload_time : datetime = Field ( Ellipsis , alias = 'uploadTime' ) \u4e0a\u4f20\u65f6\u95f4 uploader_id class-attribute \ud83d\udd17 uploader_id : int = Field ( Ellipsis , alias = 'uploaderId' ) \u4e0a\u4f20\u8005 QQ \u53f7 url class-attribute \ud83d\udd17 url : Optional [ str ] = None \u4e0b\u8f7d url FileInfo \ud83d\udd17 Bases: AriadneBaseModel \u7fa4\u7ec4\u6587\u4ef6\u8be6\u7ec6\u4fe1\u606f Source code in graia/ariadne/model.py 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 class FileInfo ( AriadneBaseModel ): \"\"\"\u7fa4\u7ec4\u6587\u4ef6\u8be6\u7ec6\u4fe1\u606f\"\"\" name : str = \"\" \"\"\"\u6587\u4ef6\u540d\"\"\" path : str = \"\" \"\"\"\u6587\u4ef6\u8def\u5f84\u7684\u5b57\u7b26\u4e32\u8868\u793a\"\"\" id : Optional [ str ] = \"\" \"\"\"\u6587\u4ef6 ID\"\"\" parent : Optional [ \"FileInfo\" ] = None \"\"\"\u7236\u6587\u4ef6\u5939\u7684 FileInfo \u5bf9\u8c61, \u6ca1\u6709\u5219\u8868\u793a\u5b58\u5728\u4e8e\u6839\u76ee\u5f55\"\"\" contact : Optional [ Union [ Group , Friend ]] = None \"\"\"\u6587\u4ef6\u6240\u5728\u4f4d\u7f6e (\u7fa4\u7ec4)\"\"\" is_file : bool = Field ( ... , alias = \"isFile\" ) \"\"\"\u662f\u5426\u4e3a\u6587\u4ef6\"\"\" is_directory : bool = Field ( ... , alias = \"isDirectory\" ) \"\"\"\u662f\u5426\u4e3a\u76ee\u5f55\"\"\" download_info : Optional [ DownloadInfo ] = Field ( None , alias = \"downloadInfo\" ) \"\"\"\u4e0b\u8f7d\u4fe1\u606f\"\"\" @validator ( \"contact\" , pre = True , allow_reuse = True ) def _ ( cls , val : Optional [ dict ]): if not val : return None if \"remark\" in val : # Friend return Friend . parse_obj ( val ) return Group . parse_obj ( val ) # Group contact class-attribute \ud83d\udd17 contact : Optional [ Union [ Group , Friend ]] = None \u6587\u4ef6\u6240\u5728\u4f4d\u7f6e (\u7fa4\u7ec4) download_info class-attribute \ud83d\udd17 download_info : Optional [ DownloadInfo ] = Field ( None , alias = 'downloadInfo' ) \u4e0b\u8f7d\u4fe1\u606f id class-attribute \ud83d\udd17 id : Optional [ str ] = '' \u6587\u4ef6 ID is_directory class-attribute \ud83d\udd17 is_directory : bool = Field ( Ellipsis , alias = 'isDirectory' ) \u662f\u5426\u4e3a\u76ee\u5f55 is_file class-attribute \ud83d\udd17 is_file : bool = Field ( Ellipsis , alias = 'isFile' ) \u662f\u5426\u4e3a\u6587\u4ef6 name class-attribute \ud83d\udd17 name : str = '' \u6587\u4ef6\u540d parent class-attribute \ud83d\udd17 parent : Optional [ 'FileInfo' ] = None \u7236\u6587\u4ef6\u5939\u7684 FileInfo \u5bf9\u8c61, \u6ca1\u6709\u5219\u8868\u793a\u5b58\u5728\u4e8e\u6839\u76ee\u5f55 path class-attribute \ud83d\udd17 path : str = '' \u6587\u4ef6\u8def\u5f84\u7684\u5b57\u7b26\u4e32\u8868\u793a Friend \ud83d\udd17 Bases: AriadneBaseModel \u63cf\u8ff0 Tencent QQ \u4e2d\u7684\u597d\u53cb. Source code in graia/ariadne/model.py 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 class Friend ( AriadneBaseModel ): \"\"\"\u63cf\u8ff0 Tencent QQ \u4e2d\u7684\u597d\u53cb.\"\"\" id : int \"\"\"QQ \u53f7\"\"\" nickname : str \"\"\"\u6635\u79f0\"\"\" remark : str \"\"\"\u81ea\u884c\u8bbe\u7f6e\u7684\u4ee3\u79f0\"\"\" def __int__ ( self ): return self . id def __str__ ( self ) -> str : return f \" { self . remark } ( { self . id } )\" def __eq__ ( self , other : Any ) -> bool : return isinstance ( other , ( Friend , Member , Stranger )) and self . id == other . id async def getProfile ( self ) -> \"Profile\" : \"\"\"\u83b7\u53d6\u8be5\u597d\u53cb\u7684 Profile Returns: Profile: \u8be5\u597d\u53cb\u7684 Profile \u5bf9\u8c61 \"\"\" from . import get_running return await get_running () . getFriendProfile ( self ) async def getAvatar ( self , size : Literal [ 640 , 140 ] = 640 ) -> bytes : \"\"\"\u83b7\u53d6\u8be5\u597d\u53cb\u7684\u5934\u50cf Args: size (Literal[640, 140]): \u5934\u50cf\u5c3a\u5bf8 Returns: bytes: \u597d\u53cb\u5934\u50cf\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9. \"\"\" from . import get_running session = get_running () . adapter . session if not session : raise RuntimeError ( \"No running ClientSession\" ) return await ( await session . get ( f \"https://q.qlogo.cn/g?b=qq&nk= { self . id } &s= { size } \" )) . content . read () id class-attribute \ud83d\udd17 id : int = None QQ \u53f7 nickname class-attribute \ud83d\udd17 nickname : str = None \u6635\u79f0 remark class-attribute \ud83d\udd17 remark : str = None \u81ea\u884c\u8bbe\u7f6e\u7684\u4ee3\u79f0 getAvatar async \ud83d\udd17 getAvatar ( size : Literal [ 640 , 140 ] = 640 ) -> bytes \u83b7\u53d6\u8be5\u597d\u53cb\u7684\u5934\u50cf Parameters: Name Type Description Default size Literal [640, 140] \u5934\u50cf\u5c3a\u5bf8 640 Returns: Name Type Description bytes bytes \u597d\u53cb\u5934\u50cf\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9. Source code in graia/ariadne/model.py 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 async def getAvatar ( self , size : Literal [ 640 , 140 ] = 640 ) -> bytes : \"\"\"\u83b7\u53d6\u8be5\u597d\u53cb\u7684\u5934\u50cf Args: size (Literal[640, 140]): \u5934\u50cf\u5c3a\u5bf8 Returns: bytes: \u597d\u53cb\u5934\u50cf\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9. \"\"\" from . import get_running session = get_running () . adapter . session if not session : raise RuntimeError ( \"No running ClientSession\" ) return await ( await session . get ( f \"https://q.qlogo.cn/g?b=qq&nk= { self . id } &s= { size } \" )) . content . read () getProfile async \ud83d\udd17 getProfile () -> 'Profile' \u83b7\u53d6\u8be5\u597d\u53cb\u7684 Profile Returns: Name Type Description Profile 'Profile' \u8be5\u597d\u53cb\u7684 Profile \u5bf9\u8c61 Source code in graia/ariadne/model.py 469 470 471 472 473 474 475 476 477 async def getProfile ( self ) -> \"Profile\" : \"\"\"\u83b7\u53d6\u8be5\u597d\u53cb\u7684 Profile Returns: Profile: \u8be5\u597d\u53cb\u7684 Profile \u5bf9\u8c61 \"\"\" from . import get_running return await get_running () . getFriendProfile ( self ) Group \ud83d\udd17 Bases: AriadneBaseModel \u63cf\u8ff0 Tencent QQ \u4e2d\u7684\u7fa4\u7ec4. Source code in graia/ariadne/model.py 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 class Group ( AriadneBaseModel ): \"\"\"\u63cf\u8ff0 Tencent QQ \u4e2d\u7684\u7fa4\u7ec4.\"\"\" id : int \"\"\"\u7fa4\u53f7\"\"\" name : str \"\"\"\u7fa4\u540d\"\"\" accountPerm : MemberPerm = Field ( ... , alias = \"permission\" ) \"\"\"\u4f60\u5728\u7fa4\u4e2d\u7684\u6743\u9650\"\"\" def __int__ ( self ): return self . id def __str__ ( self ) -> str : return f \" { self . name } ( { self . id } )\" def __eq__ ( self , other : Any ) -> bool : return isinstance ( other , Group ) and self . id == other . id async def getConfig ( self ) -> \"GroupConfig\" : \"\"\"\u83b7\u53d6\u8be5\u7fa4\u7ec4\u7684 Config Returns: Config: \u8be5\u7fa4\u7ec4\u7684\u8bbe\u7f6e\u5bf9\u8c61. \"\"\" from . import get_running return await get_running () . getGroupConfig ( self ) async def modifyConfig ( self , config : \"GroupConfig\" ) -> None : \"\"\"\u4fee\u6539\u8be5\u7fa4\u7ec4\u7684 Config Args: config (GroupConfig): \u7ecf\u8fc7\u4fee\u6539\u540e\u7684\u7fa4\u8bbe\u7f6e\u5bf9\u8c61. \"\"\" from . import get_running return await get_running () . modifyGroupConfig ( self , config ) async def getAvatar ( self , cover : Optional [ int ] = None ) -> bytes : \"\"\"\u83b7\u53d6\u8be5\u7fa4\u7ec4\u7684\u5934\u50cf Args: cover (Optional[int]): \u7fa4\u5c01\u9762\u6807\u53f7 (\u82e5\u4e3a None \u5219\u83b7\u53d6\u8be5\u7fa4\u5934\u50cf, \u5426\u5219\u83b7\u53d6\u8be5\u7fa4\u5c01\u9762) Returns: bytes: \u7fa4\u5934\u50cf\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9. \"\"\" from . import get_running cover = ( cover or 0 ) + 1 session = get_running () . adapter . session if not session : raise RuntimeError ( \"No running ClientSession\" ) return await ( await session . get ( f \"https://p.qlogo.cn/gh/ { self . id } / { self . id } _ { cover } /\" )) . content . read () accountPerm class-attribute \ud83d\udd17 accountPerm : MemberPerm = Field ( Ellipsis , alias = 'permission' ) \u4f60\u5728\u7fa4\u4e2d\u7684\u6743\u9650 id class-attribute \ud83d\udd17 id : int = None \u7fa4\u53f7 name class-attribute \ud83d\udd17 name : str = None \u7fa4\u540d getAvatar async \ud83d\udd17 getAvatar ( cover : Optional [ int ] = None ) -> bytes \u83b7\u53d6\u8be5\u7fa4\u7ec4\u7684\u5934\u50cf Parameters: Name Type Description Default cover Optional [ int ] \u7fa4\u5c01\u9762\u6807\u53f7 (\u82e5\u4e3a None \u5219\u83b7\u53d6\u8be5\u7fa4\u5934\u50cf, \u5426\u5219\u83b7\u53d6\u8be5\u7fa4\u5c01\u9762) None Returns: Name Type Description bytes bytes \u7fa4\u5934\u50cf\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9. Source code in graia/ariadne/model.py 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 async def getAvatar ( self , cover : Optional [ int ] = None ) -> bytes : \"\"\"\u83b7\u53d6\u8be5\u7fa4\u7ec4\u7684\u5934\u50cf Args: cover (Optional[int]): \u7fa4\u5c01\u9762\u6807\u53f7 (\u82e5\u4e3a None \u5219\u83b7\u53d6\u8be5\u7fa4\u5934\u50cf, \u5426\u5219\u83b7\u53d6\u8be5\u7fa4\u5c01\u9762) Returns: bytes: \u7fa4\u5934\u50cf\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9. \"\"\" from . import get_running cover = ( cover or 0 ) + 1 session = get_running () . adapter . session if not session : raise RuntimeError ( \"No running ClientSession\" ) return await ( await session . get ( f \"https://p.qlogo.cn/gh/ { self . id } / { self . id } _ { cover } /\" )) . content . read () getConfig async \ud83d\udd17 getConfig () -> 'GroupConfig' \u83b7\u53d6\u8be5\u7fa4\u7ec4\u7684 Config Returns: Name Type Description Config 'GroupConfig' \u8be5\u7fa4\u7ec4\u7684\u8bbe\u7f6e\u5bf9\u8c61. Source code in graia/ariadne/model.py 312 313 314 315 316 317 318 319 320 async def getConfig ( self ) -> \"GroupConfig\" : \"\"\"\u83b7\u53d6\u8be5\u7fa4\u7ec4\u7684 Config Returns: Config: \u8be5\u7fa4\u7ec4\u7684\u8bbe\u7f6e\u5bf9\u8c61. \"\"\" from . import get_running return await get_running () . getGroupConfig ( self ) modifyConfig async \ud83d\udd17 modifyConfig ( config : 'GroupConfig' ) -> None \u4fee\u6539\u8be5\u7fa4\u7ec4\u7684 Config Parameters: Name Type Description Default config GroupConfig \u7ecf\u8fc7\u4fee\u6539\u540e\u7684\u7fa4\u8bbe\u7f6e\u5bf9\u8c61. required Source code in graia/ariadne/model.py 322 323 324 325 326 327 328 329 330 async def modifyConfig ( self , config : \"GroupConfig\" ) -> None : \"\"\"\u4fee\u6539\u8be5\u7fa4\u7ec4\u7684 Config Args: config (GroupConfig): \u7ecf\u8fc7\u4fee\u6539\u540e\u7684\u7fa4\u8bbe\u7f6e\u5bf9\u8c61. \"\"\" from . import get_running return await get_running () . modifyGroupConfig ( self , config ) GroupConfig \ud83d\udd17 Bases: AriadneBaseModel \u63cf\u8ff0\u7fa4\u7ec4\u5404\u9879\u529f\u80fd\u7684\u8bbe\u7f6e. Source code in graia/ariadne/model.py 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 class GroupConfig ( AriadneBaseModel ): \"\"\"\u63cf\u8ff0\u7fa4\u7ec4\u5404\u9879\u529f\u80fd\u7684\u8bbe\u7f6e.\"\"\" name : str = \"\" \"\"\"\u7fa4\u540d\"\"\" announcement : str = \"\" \"\"\"\u7fa4\u516c\u544a\"\"\" confessTalk : bool = False \"\"\"\u5f00\u542f\u5766\u767d\u8bf4\"\"\" allowMemberInvite : bool = False \"\"\"\u5141\u8bb8\u7fa4\u6210\u5458\u76f4\u63a5\u9080\u8bf7\u5165\u7fa4\"\"\" autoApprove : bool = False \"\"\"\u81ea\u52a8\u901a\u8fc7\u52a0\u7fa4\u7533\u8bf7\"\"\" anonymousChat : bool = False \"\"\"\u5141\u8bb8\u533f\u540d\u804a\u5929\"\"\" allowMemberInvite class-attribute \ud83d\udd17 allowMemberInvite : bool = False \u5141\u8bb8\u7fa4\u6210\u5458\u76f4\u63a5\u9080\u8bf7\u5165\u7fa4 announcement class-attribute \ud83d\udd17 announcement : str = '' \u7fa4\u516c\u544a anonymousChat class-attribute \ud83d\udd17 anonymousChat : bool = False \u5141\u8bb8\u533f\u540d\u804a\u5929 autoApprove class-attribute \ud83d\udd17 autoApprove : bool = False \u81ea\u52a8\u901a\u8fc7\u52a0\u7fa4\u7533\u8bf7 confessTalk class-attribute \ud83d\udd17 confessTalk : bool = False \u5f00\u542f\u5766\u767d\u8bf4 name class-attribute \ud83d\udd17 name : str = '' \u7fa4\u540d Member \ud83d\udd17 Bases: AriadneBaseModel \u63cf\u8ff0\u7528\u6237\u5728\u7fa4\u7ec4\u4e2d\u6240\u5177\u5907\u7684\u6709\u5173\u72b6\u6001, \u5305\u62ec\u6240\u5728\u7fa4\u7ec4, \u7fa4\u4e2d\u6635\u79f0, \u6240\u5177\u5907\u7684\u6743\u9650, \u552f\u4e00ID. Source code in graia/ariadne/model.py 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 class Member ( AriadneBaseModel ): \"\"\"\u63cf\u8ff0\u7528\u6237\u5728\u7fa4\u7ec4\u4e2d\u6240\u5177\u5907\u7684\u6709\u5173\u72b6\u6001, \u5305\u62ec\u6240\u5728\u7fa4\u7ec4, \u7fa4\u4e2d\u6635\u79f0, \u6240\u5177\u5907\u7684\u6743\u9650, \u552f\u4e00ID.\"\"\" id : int \"\"\"QQ \u53f7\"\"\" name : str = Field ( ... , alias = \"memberName\" ) \"\"\"\u663e\u793a\u540d\u79f0\"\"\" permission : MemberPerm \"\"\"\u7fa4\u6743\u9650\"\"\" specialTitle : Optional [ str ] = None \"\"\"\u7279\u6b8a\u5934\u8854\"\"\" joinTimestamp : Optional [ int ] = None \"\"\"\u52a0\u5165\u7684\u65f6\u95f4\"\"\" lastSpeakTimestamp : Optional [ int ] = None \"\"\"\u6700\u540e\u53d1\u8a00\u65f6\u95f4\"\"\" mutetimeRemaining : Optional [ int ] = None \"\"\"\u7981\u8a00\u5269\u4f59\u65f6\u95f4\"\"\" group : Group \"\"\"\u6240\u5728\u7fa4\u7ec4\"\"\" def __str__ ( self ) -> str : return f \" { self . name } ( { self . id } @ { self . group } )\" def __int__ ( self ): return self . id def __eq__ ( self , other : Any ) -> bool : return isinstance ( other , ( Friend , Member , Stranger )) and self . id == other . id async def getProfile ( self ) -> \"Profile\" : \"\"\"\u83b7\u53d6\u8be5\u7fa4\u6210\u5458\u7684 Profile Returns: Profile: \u8be5\u7fa4\u6210\u5458\u7684 Profile \u5bf9\u8c61 \"\"\" from . import get_running return await get_running () . getMemberProfile ( self ) async def getInfo ( self ) -> \"MemberInfo\" : \"\"\"\u83b7\u53d6\u8be5\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001 Returns: MemberInfo: \u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001 \"\"\" return MemberInfo ( name = self . name , specialTitle = self . specialTitle ) async def modifyInfo ( self , info : \"MemberInfo\" ) -> None : \"\"\" \u4fee\u6539\u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b). Args: info (MemberInfo): \u5df2\u4fee\u6539\u7684\u6307\u5b9a\u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001 Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" from . import get_running return await get_running () . modifyMemberInfo ( self , info ) async def modifyAdmin ( self , assign : bool ) -> None : \"\"\" \u4fee\u6539\u4e00\u4f4d\u7fa4\u7ec4\u6210\u5458\u7ba1\u7406\u5458\u6743\u9650; \u9700\u8981\u6709\u76f8\u5e94\u6743\u9650(\u7fa4\u4e3b) Args: assign (bool): \u662f\u5426\u8bbe\u7f6e\u7fa4\u6210\u5458\u4e3a\u7ba1\u7406\u5458. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" from . import get_running return await get_running () . modifyMemberAdmin ( assign , self ) async def getAvatar ( self , size : Literal [ 640 , 140 ] = 640 ) -> bytes : \"\"\"\u83b7\u53d6\u8be5\u7fa4\u6210\u5458\u7684\u5934\u50cf Args: size (Literal[640, 140]): \u5934\u50cf\u5c3a\u5bf8 Returns: bytes: \u7fa4\u6210\u5458\u5934\u50cf\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9. \"\"\" from . import get_running session = get_running () . adapter . session if not session : raise RuntimeError ( \"No running ClientSession\" ) return await ( await session . get ( f \"https://q.qlogo.cn/g?b=qq&nk= { self . id } &s= { size } \" )) . content . read () group class-attribute \ud83d\udd17 group : Group = None \u6240\u5728\u7fa4\u7ec4 id class-attribute \ud83d\udd17 id : int = None QQ \u53f7 joinTimestamp class-attribute \ud83d\udd17 joinTimestamp : Optional [ int ] = None \u52a0\u5165\u7684\u65f6\u95f4 lastSpeakTimestamp class-attribute \ud83d\udd17 lastSpeakTimestamp : Optional [ int ] = None \u6700\u540e\u53d1\u8a00\u65f6\u95f4 mutetimeRemaining class-attribute \ud83d\udd17 mutetimeRemaining : Optional [ int ] = None \u7981\u8a00\u5269\u4f59\u65f6\u95f4 name class-attribute \ud83d\udd17 name : str = Field ( Ellipsis , alias = 'memberName' ) \u663e\u793a\u540d\u79f0 permission class-attribute \ud83d\udd17 permission : MemberPerm = None \u7fa4\u6743\u9650 specialTitle class-attribute \ud83d\udd17 specialTitle : Optional [ str ] = None \u7279\u6b8a\u5934\u8854 getAvatar async \ud83d\udd17 getAvatar ( size : Literal [ 640 , 140 ] = 640 ) -> bytes \u83b7\u53d6\u8be5\u7fa4\u6210\u5458\u7684\u5934\u50cf Parameters: Name Type Description Default size Literal [640, 140] \u5934\u50cf\u5c3a\u5bf8 640 Returns: Name Type Description bytes bytes \u7fa4\u6210\u5458\u5934\u50cf\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9. Source code in graia/ariadne/model.py 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 async def getAvatar ( self , size : Literal [ 640 , 140 ] = 640 ) -> bytes : \"\"\"\u83b7\u53d6\u8be5\u7fa4\u6210\u5458\u7684\u5934\u50cf Args: size (Literal[640, 140]): \u5934\u50cf\u5c3a\u5bf8 Returns: bytes: \u7fa4\u6210\u5458\u5934\u50cf\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9. \"\"\" from . import get_running session = get_running () . adapter . session if not session : raise RuntimeError ( \"No running ClientSession\" ) return await ( await session . get ( f \"https://q.qlogo.cn/g?b=qq&nk= { self . id } &s= { size } \" )) . content . read () getInfo async \ud83d\udd17 getInfo () -> 'MemberInfo' \u83b7\u53d6\u8be5\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001 Returns: Name Type Description MemberInfo 'MemberInfo' \u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001 Source code in graia/ariadne/model.py 395 396 397 398 399 400 401 async def getInfo ( self ) -> \"MemberInfo\" : \"\"\"\u83b7\u53d6\u8be5\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001 Returns: MemberInfo: \u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001 \"\"\" return MemberInfo ( name = self . name , specialTitle = self . specialTitle ) getProfile async \ud83d\udd17 getProfile () -> 'Profile' \u83b7\u53d6\u8be5\u7fa4\u6210\u5458\u7684 Profile Returns: Name Type Description Profile 'Profile' \u8be5\u7fa4\u6210\u5458\u7684 Profile \u5bf9\u8c61 Source code in graia/ariadne/model.py 385 386 387 388 389 390 391 392 393 async def getProfile ( self ) -> \"Profile\" : \"\"\"\u83b7\u53d6\u8be5\u7fa4\u6210\u5458\u7684 Profile Returns: Profile: \u8be5\u7fa4\u6210\u5458\u7684 Profile \u5bf9\u8c61 \"\"\" from . import get_running return await get_running () . getMemberProfile ( self ) modifyAdmin async \ud83d\udd17 modifyAdmin ( assign : bool ) -> None \u4fee\u6539\u4e00\u4f4d\u7fa4\u7ec4\u6210\u5458\u7ba1\u7406\u5458\u6743\u9650; \u9700\u8981\u6709\u76f8\u5e94\u6743\u9650(\u7fa4\u4e3b) Parameters: Name Type Description Default assign bool \u662f\u5426\u8bbe\u7f6e\u7fa4\u6210\u5458\u4e3a\u7ba1\u7406\u5458. required Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/model.py 417 418 419 420 421 422 423 424 425 426 427 428 429 async def modifyAdmin ( self , assign : bool ) -> None : \"\"\" \u4fee\u6539\u4e00\u4f4d\u7fa4\u7ec4\u6210\u5458\u7ba1\u7406\u5458\u6743\u9650; \u9700\u8981\u6709\u76f8\u5e94\u6743\u9650(\u7fa4\u4e3b) Args: assign (bool): \u662f\u5426\u8bbe\u7f6e\u7fa4\u6210\u5458\u4e3a\u7ba1\u7406\u5458. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" from . import get_running return await get_running () . modifyMemberAdmin ( assign , self ) modifyInfo async \ud83d\udd17 modifyInfo ( info : 'MemberInfo' ) -> None \u4fee\u6539\u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b). Parameters: Name Type Description Default info MemberInfo \u5df2\u4fee\u6539\u7684\u6307\u5b9a\u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001 required Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/model.py 403 404 405 406 407 408 409 410 411 412 413 414 415 async def modifyInfo ( self , info : \"MemberInfo\" ) -> None : \"\"\" \u4fee\u6539\u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b). Args: info (MemberInfo): \u5df2\u4fee\u6539\u7684\u6307\u5b9a\u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001 Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" from . import get_running return await get_running () . modifyMemberInfo ( self , info ) MemberInfo \ud83d\udd17 Bases: AriadneBaseModel \u63cf\u8ff0\u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001, \u4fee\u6539\u9700\u8981\u7ba1\u7406\u5458/\u7fa4\u4e3b\u6743\u9650. Source code in graia/ariadne/model.py 556 557 558 559 560 561 562 563 class MemberInfo ( AriadneBaseModel ): \"\"\"\u63cf\u8ff0\u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001, \u4fee\u6539\u9700\u8981\u7ba1\u7406\u5458/\u7fa4\u4e3b\u6743\u9650.\"\"\" name : str = \"\" \"\"\"\u6635\u79f0, \u4e0e nickname\u4e0d\u540c\"\"\" specialTitle : Optional [ str ] = \"\" \"\"\"\u7279\u6b8a\u5934\u8854\"\"\" name class-attribute \ud83d\udd17 name : str = '' \u6635\u79f0, \u4e0e nickname\u4e0d\u540c specialTitle class-attribute \ud83d\udd17 specialTitle : Optional [ str ] = '' \u7279\u6b8a\u5934\u8854 MemberPerm \ud83d\udd17 Bases: Enum \u63cf\u8ff0\u7fa4\u6210\u5458\u5728\u7fa4\u7ec4\u4e2d\u6240\u5177\u5907\u7684\u6743\u9650 Source code in graia/ariadne/model.py 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 @functools . total_ordering class MemberPerm ( Enum ): \"\"\"\u63cf\u8ff0\u7fa4\u6210\u5458\u5728\u7fa4\u7ec4\u4e2d\u6240\u5177\u5907\u7684\u6743\u9650\"\"\" Member = \"MEMBER\" # \u666e\u901a\u6210\u5458 Administrator = \"ADMINISTRATOR\" # \u7ba1\u7406\u5458 Owner = \"OWNER\" # \u7fa4\u4e3b def __str__ ( self ) -> str : return self . value def __lt__ ( self , other : \"MemberPerm\" ): lv_map = { MemberPerm . Member : 1 , MemberPerm . Administrator : 2 , MemberPerm . Owner : 3 } return lv_map [ self ] < lv_map [ other ] def __repr__ ( self ) -> str : perm_map : Dict [ str , str ] = { \"MEMBER\" : \"<\u666e\u901a\u6210\u5458>\" , \"ADMINISTRATOR\" : \"<\u7ba1\u7406\u5458>\" , \"OWNER\" : \"<\u7fa4\u4e3b>\" , } return perm_map [ self . value ] MiraiSession \ud83d\udd17 Bases: AriadneBaseModel \u7528\u4e8e\u63cf\u8ff0\u4e0e\u4e0a\u6e38\u63a5\u53e3\u4f1a\u8bdd, \u5e76\u5b58\u50a8\u4f1a\u8bdd\u72b6\u6001\u7684\u5b9e\u4f53\u7c7b. Attributes: Name Type Description host AnyHttpUrl mirai-api-http \u670d\u52a1\u6240\u5728\u7684\u6839\u63a5\u53e3\u5730\u5740 account int \u5e94\u7528\u6240\u4f7f\u7528\u8d26\u53f7\u7684\u6574\u6570 ID, \u867d\u7136\u542f\u7528 singleMode \u65f6\u4e0d\u9700\u8981, \u4f46\u4ecd\u7136\u5efa\u8bae\u586b\u5199. verify_key str \u5728 mirai-api-http \u914d\u7f6e\u6d41\u7a0b\u4e2d\u5b9a\u4e49, \u9700\u4e3a\u76f8\u540c\u7684\u503c\u4ee5\u901a\u8fc7\u5b89\u5168\u9a8c\u8bc1, \u9700\u5728 mirai-api-http \u914d\u7f6e\u91cc\u542f\u7528 enableVerify . session_key str \u4f1a\u8bdd\u6807\u8bc6, \u5373\u4f1a\u8bdd\u4e2d\u7528\u4e8e\u8fdb\u884c\u64cd\u4f5c\u7684\u552f\u4e00\u8ba4\u8bc1\u51ed\u8bc1. Source code in graia/ariadne/model.py 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 class MiraiSession ( AriadneBaseModel ): \"\"\" \u7528\u4e8e\u63cf\u8ff0\u4e0e\u4e0a\u6e38\u63a5\u53e3\u4f1a\u8bdd, \u5e76\u5b58\u50a8\u4f1a\u8bdd\u72b6\u6001\u7684\u5b9e\u4f53\u7c7b. Attributes: host (AnyHttpUrl): `mirai-api-http` \u670d\u52a1\u6240\u5728\u7684\u6839\u63a5\u53e3\u5730\u5740 account (int): \u5e94\u7528\u6240\u4f7f\u7528\u8d26\u53f7\u7684\u6574\u6570 ID, \u867d\u7136\u542f\u7528 `singleMode` \u65f6\u4e0d\u9700\u8981, \u4f46\u4ecd\u7136\u5efa\u8bae\u586b\u5199. verify_key (str): \u5728 `mirai-api-http` \u914d\u7f6e\u6d41\u7a0b\u4e2d\u5b9a\u4e49, \u9700\u4e3a\u76f8\u540c\u7684\u503c\u4ee5\u901a\u8fc7\u5b89\u5168\u9a8c\u8bc1, \u9700\u5728 mirai-api-http \u914d\u7f6e\u91cc\u542f\u7528 `enableVerify`. session_key (str, optional): \u4f1a\u8bdd\u6807\u8bc6, \u5373\u4f1a\u8bdd\u4e2d\u7528\u4e8e\u8fdb\u884c\u64cd\u4f5c\u7684\u552f\u4e00\u8ba4\u8bc1\u51ed\u8bc1. \"\"\" host : Optional [ AnyHttpUrl ] \"\"\"\u94fe\u63a5\u5730\u5740, \u4ee5 http \u5f00\u5934, \u4f5c\u4e3a\u670d\u52a1\u5668\u8fde\u63a5\u65f6\u5e94\u4e3a None\"\"\" single_mode : bool = False \"\"\"mirai-console \u662f\u5426\u5f00\u542f single_mode (\u5355\u4f8b\u6a21\u5f0f)\"\"\" account : Optional [ int ] = None \"\"\"\u8d26\u53f7\"\"\" verify_key : Optional [ str ] = None \"\"\"mirai-api-http \u914d\u7f6e\u7684 VerifyKey \u5b57\u6bb5\"\"\" session_key : Optional [ str ] = None \"\"\"\u4f1a\u8bdd\u6807\u8bc6\"\"\" version : Optional [ str ] = None \"\"\"mirai-api-http \u7684\u7248\u672c\"\"\" def __init__ ( self , host : Optional [ Union [ AnyHttpUrl , str ]] = None , account : Optional [ Union [ int , str ]] = None , verify_key : Optional [ str ] = None , * , single_mode : bool = False , ) -> None : super () . __init__ ( host = host , # type: ignore account = account , # type: ignore verify_key = verify_key , # type: ignore single_mode = single_mode , # type: ignore ) def url_gen ( self , route : str ) -> str : \"\"\"\u751f\u6210 route \u5bf9\u5e94\u7684 API URI Args: route (str): route \u5730\u5740 Returns: str: \u5bf9\u5e94\u7684 API URI \"\"\" if self . host is None : raise ValueError ( \"Remote host is unset\" ) return str ( URL ( self . host ) / route ) account class-attribute \ud83d\udd17 account : Optional [ int ] = None \u8d26\u53f7 host class-attribute \ud83d\udd17 host : Optional [ AnyHttpUrl ] = None \u94fe\u63a5\u5730\u5740, \u4ee5 http \u5f00\u5934, \u4f5c\u4e3a\u670d\u52a1\u5668\u8fde\u63a5\u65f6\u5e94\u4e3a None session_key class-attribute \ud83d\udd17 session_key : Optional [ str ] = None \u4f1a\u8bdd\u6807\u8bc6 single_mode class-attribute \ud83d\udd17 single_mode : bool = False mirai-console \u662f\u5426\u5f00\u542f single_mode (\u5355\u4f8b\u6a21\u5f0f) verify_key class-attribute \ud83d\udd17 verify_key : Optional [ str ] = None mirai-api-http \u914d\u7f6e\u7684 VerifyKey \u5b57\u6bb5 version class-attribute \ud83d\udd17 version : Optional [ str ] = None mirai-api-http \u7684\u7248\u672c url_gen \ud83d\udd17 url_gen ( route : str ) -> str \u751f\u6210 route \u5bf9\u5e94\u7684 API URI Parameters: Name Type Description Default route str route \u5730\u5740 required Returns: Name Type Description str str \u5bf9\u5e94\u7684 API URI Source code in graia/ariadne/model.py 253 254 255 256 257 258 259 260 261 262 263 264 def url_gen ( self , route : str ) -> str : \"\"\"\u751f\u6210 route \u5bf9\u5e94\u7684 API URI Args: route (str): route \u5730\u5740 Returns: str: \u5bf9\u5e94\u7684 API URI \"\"\" if self . host is None : raise ValueError ( \"Remote host is unset\" ) return str ( URL ( self . host ) / route ) Profile \ud83d\udd17 Bases: AriadneBaseModel \u6307\u793a\u67d0\u4e2a\u7528\u6237\u7684\u4e2a\u4eba\u8d44\u6599 Source code in graia/ariadne/model.py 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 class Profile ( AriadneBaseModel ): \"\"\" \u6307\u793a\u67d0\u4e2a\u7528\u6237\u7684\u4e2a\u4eba\u8d44\u6599 \"\"\" nickname : str \"\"\"\u6635\u79f0\"\"\" email : Optional [ str ] \"\"\"\u7535\u5b50\u90ae\u4ef6\u5730\u5740\"\"\" age : Optional [ int ] \"\"\"\u5e74\u9f84\"\"\" level : int \"\"\"QQ \u7b49\u7ea7\"\"\" sign : str \"\"\"\u4e2a\u6027\u7b7e\u540d\"\"\" sex : Literal [ \"UNKNOWN\" , \"MALE\" , \"FEMALE\" ] \"\"\"\u6027\u522b\"\"\" age class-attribute \ud83d\udd17 age : Optional [ int ] = None \u5e74\u9f84 email class-attribute \ud83d\udd17 email : Optional [ str ] = None \u7535\u5b50\u90ae\u4ef6\u5730\u5740 level class-attribute \ud83d\udd17 level : int = None QQ \u7b49\u7ea7 nickname class-attribute \ud83d\udd17 nickname : str = None \u6635\u79f0 sex class-attribute \ud83d\udd17 sex : Literal [ 'UNKNOWN' , 'MALE' , 'FEMALE' ] = None \u6027\u522b sign class-attribute \ud83d\udd17 sign : str = None \u4e2a\u6027\u7b7e\u540d Stranger \ud83d\udd17 Bases: AriadneBaseModel \u63cf\u8ff0 Tencent QQ \u4e2d\u7684\u964c\u751f\u4eba. Source code in graia/ariadne/model.py 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 class Stranger ( AriadneBaseModel ): \"\"\"\u63cf\u8ff0 Tencent QQ \u4e2d\u7684\u964c\u751f\u4eba.\"\"\" id : int \"\"\"QQ \u53f7\"\"\" nickname : str \"\"\"\u6635\u79f0\"\"\" remark : str \"\"\"\u81ea\u884c\u8bbe\u7f6e\u7684\u4ee3\u79f0\"\"\" def __int__ ( self ): return self . id def __str__ ( self ) -> str : return f \"Stranger( { self . id } , { self . nickname } )\" def __eq__ ( self , other : Any ) -> bool : return isinstance ( other , ( Friend , Member , Stranger )) and self . id == other . id async def getAvatar ( self , size : Literal [ 640 , 140 ] = 640 ) -> bytes : \"\"\"\u83b7\u53d6\u8be5\u964c\u751f\u4eba\u7684\u5934\u50cf Args: size (Literal[640, 140]): \u5934\u50cf\u5c3a\u5bf8 Returns: bytes: \u964c\u751f\u4eba\u5934\u50cf\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9. \"\"\" from . import get_running session = get_running () . adapter . session if not session : raise RuntimeError ( \"No running ClientSession\" ) return await ( await session . get ( f \"https://q.qlogo.cn/g?b=qq&nk= { self . id } &s= { size } \" )) . content . read () id class-attribute \ud83d\udd17 id : int = None QQ \u53f7 nickname class-attribute \ud83d\udd17 nickname : str = None \u6635\u79f0 remark class-attribute \ud83d\udd17 remark : str = None \u81ea\u884c\u8bbe\u7f6e\u7684\u4ee3\u79f0 getAvatar async \ud83d\udd17 getAvatar ( size : Literal [ 640 , 140 ] = 640 ) -> bytes \u83b7\u53d6\u8be5\u964c\u751f\u4eba\u7684\u5934\u50cf Parameters: Name Type Description Default size Literal [640, 140] \u5934\u50cf\u5c3a\u5bf8 640 Returns: Name Type Description bytes bytes \u964c\u751f\u4eba\u5934\u50cf\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9. Source code in graia/ariadne/model.py 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 async def getAvatar ( self , size : Literal [ 640 , 140 ] = 640 ) -> bytes : \"\"\"\u83b7\u53d6\u8be5\u964c\u751f\u4eba\u7684\u5934\u50cf Args: size (Literal[640, 140]): \u5934\u50cf\u5c3a\u5bf8 Returns: bytes: \u964c\u751f\u4eba\u5934\u50cf\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9. \"\"\" from . import get_running session = get_running () . adapter . session if not session : raise RuntimeError ( \"No running ClientSession\" ) return await ( await session . get ( f \"https://q.qlogo.cn/g?b=qq&nk= { self . id } &s= { size } \" )) . content . read () UploadMethod \ud83d\udd17 Bases: str , Enum \u7528\u4e8e\u5411 upload \u7cfb\u5217\u65b9\u6cd5\u63cf\u8ff0\u4e0a\u4f20\u7c7b\u578b Source code in graia/ariadne/model.py 652 653 654 655 656 657 658 659 660 661 662 663 664 665 class UploadMethod ( str , Enum ): \"\"\"\u7528\u4e8e\u5411 `upload` \u7cfb\u5217\u65b9\u6cd5\u63cf\u8ff0\u4e0a\u4f20\u7c7b\u578b\"\"\" Friend = \"friend\" \"\"\"\u597d\u53cb\"\"\" Group = \"group\" \"\"\"\u7fa4\u7ec4\"\"\" Temp = \"temp\" \"\"\"\u4e34\u65f6\u6d88\u606f\"\"\" def __str__ ( self ) -> str : return self . value Friend class-attribute \ud83d\udd17 Friend = 'friend' \u597d\u53cb Group class-attribute \ud83d\udd17 Group = 'group' \u7fa4\u7ec4 Temp class-attribute \ud83d\udd17 Temp = 'temp' \u4e34\u65f6\u6d88\u606f datetime_encoder \ud83d\udd17 datetime_encoder ( v : datetime ) -> float \u7f16\u7801 datetime \u5bf9\u8c61 Parameters: Name Type Description Default v datetime datetime \u5bf9\u8c61 required Returns: Name Type Description float float \u7f16\u7801\u540e\u7684 datetime (\u65f6\u95f4\u6233) Source code in graia/ariadne/model.py 25 26 27 28 29 30 31 32 33 34 def datetime_encoder ( v : datetime ) -> float : \"\"\"\u7f16\u7801 datetime \u5bf9\u8c61 Args: v (datetime): datetime \u5bf9\u8c61 Returns: float: \u7f16\u7801\u540e\u7684 datetime (\u65f6\u95f4\u6233) \"\"\" return v . timestamp ()","title":"model"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Announcement","text":"Bases: AriadneBaseModel \u7fa4\u516c\u544a Source code in graia/ariadne/model.py 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 class Announcement ( AriadneBaseModel ): \"\"\"\u7fa4\u516c\u544a\"\"\" group : Group \"\"\"\u516c\u544a\u6240\u5728\u7684\u7fa4\"\"\" senderId : int \"\"\"\u53d1\u9001\u8005QQ\u53f7\"\"\" fid : str \"\"\"\u516c\u544a\u552f\u4e00\u6807\u8bc6ID\"\"\" allConfirmed : bool \"\"\"\u7fa4\u6210\u5458\u662f\u5426\u5df2\u5168\u90e8\u786e\u8ba4\"\"\" confirmedMembersCount : int \"\"\"\u5df2\u786e\u8ba4\u7fa4\u6210\u5458\u4eba\u6570\"\"\" publicationTime : datetime \"\"\"\u516c\u544a\u53d1\u5e03\u65f6\u95f4\"\"\"","title":"Announcement"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Announcement.allConfirmed","text":"allConfirmed : bool = None \u7fa4\u6210\u5458\u662f\u5426\u5df2\u5168\u90e8\u786e\u8ba4","title":"allConfirmed"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Announcement.confirmedMembersCount","text":"confirmedMembersCount : int = None \u5df2\u786e\u8ba4\u7fa4\u6210\u5458\u4eba\u6570","title":"confirmedMembersCount"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Announcement.fid","text":"fid : str = None \u516c\u544a\u552f\u4e00\u6807\u8bc6ID","title":"fid"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Announcement.group","text":"group : Group = None \u516c\u544a\u6240\u5728\u7684\u7fa4","title":"group"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Announcement.publicationTime","text":"publicationTime : datetime = None \u516c\u544a\u53d1\u5e03\u65f6\u95f4","title":"publicationTime"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Announcement.senderId","text":"senderId : int = None \u53d1\u9001\u8005QQ\u53f7","title":"senderId"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.AriadneBaseModel","text":"Bases: BaseModel Ariadne \u4e00\u5207\u6570\u636e\u6a21\u578b\u7684\u57fa\u7c7b. Source code in graia/ariadne/model.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 class AriadneBaseModel ( BaseModel ): \"\"\" Ariadne \u4e00\u5207\u6570\u636e\u6a21\u578b\u7684\u57fa\u7c7b. \"\"\" def dict ( self , * , include : Union [ None , \"AbstractSetIntStr\" , \"MappingIntStrAny\" ] = None , exclude : Union [ None , \"AbstractSetIntStr\" , \"MappingIntStrAny\" ] = None , by_alias : bool = False , skip_defaults : bool = False , exclude_unset : bool = False , exclude_defaults : bool = False , exclude_none : bool = False , ) -> \"DictStrAny\" : _ , * _ = by_alias , exclude_none , skip_defaults return super () . dict ( include = include , # type: ignore exclude = exclude , # type: ignore by_alias = True , exclude_unset = exclude_unset , exclude_defaults = exclude_defaults , exclude_none = True , ) class Config ( BaseConfig ): \"\"\"Ariadne BaseModel \u8bbe\u7f6e\"\"\" extra = Extra . allow json_encoders = { datetime : datetime_encoder , } arbitrary_types_allowed = True","title":"AriadneBaseModel"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.AriadneBaseModel.Config","text":"Bases: BaseConfig Ariadne BaseModel \u8bbe\u7f6e Source code in graia/ariadne/model.py 70 71 72 73 74 75 76 77 class Config ( BaseConfig ): \"\"\"Ariadne BaseModel \u8bbe\u7f6e\"\"\" extra = Extra . allow json_encoders = { datetime : datetime_encoder , } arbitrary_types_allowed = True","title":"Config"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.AriadneStatus","text":"Bases: Enum \u6307\u793a Ariadne \u72b6\u6001\u7684\u679a\u4e3e\u7c7b Source code in graia/ariadne/model.py 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 class AriadneStatus ( Enum ): \"\"\"\u6307\u793a Ariadne \u72b6\u6001\u7684\u679a\u4e3e\u7c7b\"\"\" STOP = \"stop\" \"\"\"\u5df2\u505c\u6b62\"\"\" LAUNCH = \"launch\" \"\"\"\u6b63\u5728\u542f\u52a8\"\"\" RUNNING = \"running\" \"\"\"\u6b63\u5e38\u8fd0\u884c\"\"\" SHUTDOWN = \"shutdown\" \"\"\"\u521a\u5f00\u59cb\u5173\u95ed\"\"\" CLEANUP = \"cleanup\" \"\"\"\u6e05\u7406\u6b8b\u7559\u4efb\u52a1\"\"\"","title":"AriadneStatus"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.AriadneStatus.CLEANUP","text":"CLEANUP = 'cleanup' \u6e05\u7406\u6b8b\u7559\u4efb\u52a1","title":"CLEANUP"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.AriadneStatus.LAUNCH","text":"LAUNCH = 'launch' \u6b63\u5728\u542f\u52a8","title":"LAUNCH"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.AriadneStatus.RUNNING","text":"RUNNING = 'running' \u6b63\u5e38\u8fd0\u884c","title":"RUNNING"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.AriadneStatus.SHUTDOWN","text":"SHUTDOWN = 'shutdown' \u521a\u5f00\u59cb\u5173\u95ed","title":"SHUTDOWN"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.AriadneStatus.STOP","text":"STOP = 'stop' \u5df2\u505c\u6b62","title":"STOP"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.BotMessage","text":"Bases: AriadneBaseModel \u6307\u793a Bot \u53d1\u51fa\u7684\u6d88\u606f. Source code in graia/ariadne/model.py 716 717 718 719 720 721 722 723 724 725 class BotMessage ( AriadneBaseModel ): \"\"\" \u6307\u793a Bot \u53d1\u51fa\u7684\u6d88\u606f. \"\"\" messageId : int \"\"\"\u6d88\u606f ID\"\"\" origin : Optional [ \"MessageChain\" ] \"\"\"\u539f\u59cb\u6d88\u606f\u94fe (\u53d1\u9001\u7684\u6d88\u606f\u94fe)\"\"\"","title":"BotMessage"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.BotMessage.messageId","text":"messageId : int = None \u6d88\u606f ID","title":"messageId"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.BotMessage.origin","text":"origin : Optional [ 'MessageChain' ] = None \u539f\u59cb\u6d88\u606f\u94fe (\u53d1\u9001\u7684\u6d88\u606f\u94fe)","title":"origin"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.CallMethod","text":"Bases: str , Enum \u7528\u4e8e\u5411 Adapter.call_api \u6307\u793a\u64cd\u4f5c\u7c7b\u578b. Source code in graia/ariadne/model.py 668 669 670 671 672 673 674 675 676 677 class CallMethod ( str , Enum ): \"\"\" \u7528\u4e8e\u5411 `Adapter.call_api` \u6307\u793a\u64cd\u4f5c\u7c7b\u578b. \"\"\" GET = \"GET\" POST = \"POST\" RESTGET = \"get\" RESTPOST = \"update\" MULTIPART = \"multipart\"","title":"CallMethod"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.ChatLogConfig","text":"\u914d\u7f6e\u65e5\u5fd7\u5982\u4f55\u8bb0\u5f55 QQ \u6d88\u606f\u4e0e\u4e8b\u4ef6. Source code in graia/ariadne/model.py 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 @dataclass class ChatLogConfig : \"\"\"\u914d\u7f6e\u65e5\u5fd7\u5982\u4f55\u8bb0\u5f55 QQ \u6d88\u606f\u4e0e\u4e8b\u4ef6.\"\"\" enabled : bool = True \"\"\"\u662f\u5426\u5f00\u542f\u804a\u5929\u65e5\u5fd7\"\"\" log_level : str = \"INFO\" \"\"\"\u804a\u5929\u65e5\u5fd7\u7684 log \u7b49\u7ea7\"\"\" group_message_log_format : str = ( \" {bot_id} : [ {group_name} ( {group_id} )] {member_name} ( {member_id} ) -> {message_string} \" ) \"\"\"\u7fa4\u6d88\u606f\u683c\u5f0f\"\"\" friend_message_log_format : str = \" {bot_id} : [ {friend_name} ( {friend_id} )] -> {message_string} \" \"\"\"\u597d\u53cb\u6d88\u606f\u683c\u5f0f\"\"\" temp_message_log_format : str = ( \" {bot_id} : [ {group_name} ( {group_id} ). {member_name} ( {member_id} )] -> {message_string} \" ) \"\"\"\u4e34\u65f6\u6d88\u606f\u683c\u5f0f\"\"\" other_client_message_log_format : str = \" {bot_id} : [ {platform_name} ( {platform_id} )] -> {message_string} \" \"\"\"\u5176\u4ed6\u5ba2\u6237\u7aef\u6d88\u606f\u683c\u5f0f\"\"\" stranger_message_log_format : str = \" {bot_id} : [ {stranger_name} ( {stranger_id} )] -> {message_string} \" \"\"\"\u964c\u751f\u4eba\u6d88\u606f\u683c\u5f0f\"\"\" active_message_log_format : str = \" {bot_id} : {sync_label} [ {subject} ] <- {message_string} \" def initialize ( self , app : \"Ariadne\" ): \"\"\"\u5229\u7528 Ariadne \u5bf9\u8c61\u6ce8\u518c\u4e8b\u4ef6\u65e5\u5fd7\u5904\u7406\u5668\"\"\" from .event.message import ( ActiveMessage , FriendMessage , GroupMessage , OtherClientMessage , StrangerMessage , TempMessage , ) @app . broadcast . receiver ( GroupMessage , priority = Priority . Logger ) def log_group_message ( event : GroupMessage ): logger . log ( self . log_level , self . group_message_log_format . format ( group_id = event . sender . group . id , group_name = event . sender . group . name , member_id = event . sender . id , member_name = event . sender . name , member_permission = event . sender . permission . name , bot_id = app . mirai_session . account , message_string = event . messageChain . asDisplay () . __repr__ (), ), ) @app . broadcast . receiver ( FriendMessage , priority = Priority . Logger ) def log_friend_message ( event : FriendMessage ): logger . log ( self . log_level , self . friend_message_log_format . format ( bot_id = app . mirai_session . account , friend_name = event . sender . nickname , friend_id = event . sender . id , message_string = event . messageChain . asDisplay () . __repr__ (), ), ) @app . broadcast . receiver ( TempMessage , priority = Priority . Logger ) def log_temp_message ( event : TempMessage ): logger . log ( self . log_level , self . temp_message_log_format . format ( group_id = event . sender . group . id , group_name = event . sender . group . name , member_id = event . sender . id , member_name = event . sender . name , member_permission = event . sender . permission . name , bot_id = app . mirai_session . account , message_string = event . messageChain . asDisplay () . __repr__ (), ), ) @app . broadcast . receiver ( StrangerMessage , priority = Priority . Logger ) def log_stranger_message ( event : StrangerMessage ): logger . log ( self . log_level , self . stranger_message_log_format . format ( bot_id = app . mirai_session . account , stranger_name = event . sender . nickname , stranger_id = event . sender . id , message_string = event . messageChain . asDisplay () . __repr__ (), ), ) @app . broadcast . receiver ( OtherClientMessage , priority = Priority . Logger ) def log_other_client_message ( event : OtherClientMessage ): logger . log ( self . log_level , self . other_client_message_log_format . format ( bot_id = app . mirai_session . account , platform_name = event . sender . platform , platform_id = event . sender . id , message_string = event . messageChain . asDisplay () . __repr__ (), ), ) def log_active_message ( event : ActiveMessage ): logger . log ( self . log_level , self . active_message_log_format . format ( bot_id = app . mirai_session . account , sync_label = \"[SYNC]\" if event . sync else \"\" , subject = event . subject , message_string = event . messageChain . asDisplay () . __repr__ (), ), ) app . broadcast . listeners . append ( Listener ( log_active_message , app . broadcast . getDefaultNamespace (), list ( gen_subclass ( ActiveMessage )), priority = Priority . Logger , ) )","title":"ChatLogConfig"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.ChatLogConfig.enabled","text":"enabled : bool = True \u662f\u5426\u5f00\u542f\u804a\u5929\u65e5\u5fd7","title":"enabled"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.ChatLogConfig.friend_message_log_format","text":"friend_message_log_format : str = ' {bot_id} : [ {friend_name} ( {friend_id} )] -> {message_string} ' \u597d\u53cb\u6d88\u606f\u683c\u5f0f","title":"friend_message_log_format"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.ChatLogConfig.group_message_log_format","text":"group_message_log_format : str = ' {bot_id} : [ {group_name} ( {group_id} )] {member_name} ( {member_id} ) -> {message_string} ' \u7fa4\u6d88\u606f\u683c\u5f0f","title":"group_message_log_format"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.ChatLogConfig.log_level","text":"log_level : str = 'INFO' \u804a\u5929\u65e5\u5fd7\u7684 log \u7b49\u7ea7","title":"log_level"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.ChatLogConfig.other_client_message_log_format","text":"other_client_message_log_format : str = ' {bot_id} : [ {platform_name} ( {platform_id} )] -> {message_string} ' \u5176\u4ed6\u5ba2\u6237\u7aef\u6d88\u606f\u683c\u5f0f","title":"other_client_message_log_format"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.ChatLogConfig.stranger_message_log_format","text":"stranger_message_log_format : str = ' {bot_id} : [ {stranger_name} ( {stranger_id} )] -> {message_string} ' \u964c\u751f\u4eba\u6d88\u606f\u683c\u5f0f","title":"stranger_message_log_format"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.ChatLogConfig.temp_message_log_format","text":"temp_message_log_format : str = ' {bot_id} : [ {group_name} ( {group_id} ). {member_name} ( {member_id} )] -> {message_string} ' \u4e34\u65f6\u6d88\u606f\u683c\u5f0f","title":"temp_message_log_format"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.ChatLogConfig.initialize","text":"initialize ( app : 'Ariadne' ) \u5229\u7528 Ariadne \u5bf9\u8c61\u6ce8\u518c\u4e8b\u4ef6\u65e5\u5fd7\u5904\u7406\u5668 Source code in graia/ariadne/model.py 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 def initialize ( self , app : \"Ariadne\" ): \"\"\"\u5229\u7528 Ariadne \u5bf9\u8c61\u6ce8\u518c\u4e8b\u4ef6\u65e5\u5fd7\u5904\u7406\u5668\"\"\" from .event.message import ( ActiveMessage , FriendMessage , GroupMessage , OtherClientMessage , StrangerMessage , TempMessage , ) @app . broadcast . receiver ( GroupMessage , priority = Priority . Logger ) def log_group_message ( event : GroupMessage ): logger . log ( self . log_level , self . group_message_log_format . format ( group_id = event . sender . group . id , group_name = event . sender . group . name , member_id = event . sender . id , member_name = event . sender . name , member_permission = event . sender . permission . name , bot_id = app . mirai_session . account , message_string = event . messageChain . asDisplay () . __repr__ (), ), ) @app . broadcast . receiver ( FriendMessage , priority = Priority . Logger ) def log_friend_message ( event : FriendMessage ): logger . log ( self . log_level , self . friend_message_log_format . format ( bot_id = app . mirai_session . account , friend_name = event . sender . nickname , friend_id = event . sender . id , message_string = event . messageChain . asDisplay () . __repr__ (), ), ) @app . broadcast . receiver ( TempMessage , priority = Priority . Logger ) def log_temp_message ( event : TempMessage ): logger . log ( self . log_level , self . temp_message_log_format . format ( group_id = event . sender . group . id , group_name = event . sender . group . name , member_id = event . sender . id , member_name = event . sender . name , member_permission = event . sender . permission . name , bot_id = app . mirai_session . account , message_string = event . messageChain . asDisplay () . __repr__ (), ), ) @app . broadcast . receiver ( StrangerMessage , priority = Priority . Logger ) def log_stranger_message ( event : StrangerMessage ): logger . log ( self . log_level , self . stranger_message_log_format . format ( bot_id = app . mirai_session . account , stranger_name = event . sender . nickname , stranger_id = event . sender . id , message_string = event . messageChain . asDisplay () . __repr__ (), ), ) @app . broadcast . receiver ( OtherClientMessage , priority = Priority . Logger ) def log_other_client_message ( event : OtherClientMessage ): logger . log ( self . log_level , self . other_client_message_log_format . format ( bot_id = app . mirai_session . account , platform_name = event . sender . platform , platform_id = event . sender . id , message_string = event . messageChain . asDisplay () . __repr__ (), ), ) def log_active_message ( event : ActiveMessage ): logger . log ( self . log_level , self . active_message_log_format . format ( bot_id = app . mirai_session . account , sync_label = \"[SYNC]\" if event . sync else \"\" , subject = event . subject , message_string = event . messageChain . asDisplay () . __repr__ (), ), ) app . broadcast . listeners . append ( Listener ( log_active_message , app . broadcast . getDefaultNamespace (), list ( gen_subclass ( ActiveMessage )), priority = Priority . Logger , ) )","title":"initialize()"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Client","text":"Bases: AriadneBaseModel \u6307\u793a\u5176\u4ed6\u5ba2\u6237\u7aef Source code in graia/ariadne/model.py 680 681 682 683 684 685 686 687 688 689 class Client ( AriadneBaseModel ): \"\"\" \u6307\u793a\u5176\u4ed6\u5ba2\u6237\u7aef \"\"\" id : int \"\"\"\u5ba2\u6237\u7aef ID\"\"\" platform : str \"\"\"\u5e73\u53f0\u5b57\u7b26\u4e32\u8868\u793a\"\"\"","title":"Client"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Client.id","text":"id : int = None \u5ba2\u6237\u7aef ID","title":"id"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Client.platform","text":"platform : str = None \u5e73\u53f0\u5b57\u7b26\u4e32\u8868\u793a","title":"platform"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.DatetimeEncoder","text":"Bases: json . JSONEncoder \u53ef\u4ee5\u7f16\u7801 datetime \u7684 JSONEncoder Source code in graia/ariadne/model.py 37 38 39 40 41 class DatetimeEncoder ( json . JSONEncoder ): \"\"\"\u53ef\u4ee5\u7f16\u7801 datetime \u7684 JSONEncoder\"\"\" def default ( self , o ): return int ( o . timestamp ()) if isinstance ( o , datetime ) else super () . default ( o )","title":"DatetimeEncoder"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.DownloadInfo","text":"Bases: AriadneBaseModel \u63cf\u8ff0\u4e00\u4e2a\u6587\u4ef6\u7684\u4e0b\u8f7d\u4fe1\u606f. Source code in graia/ariadne/model.py 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 class DownloadInfo ( AriadneBaseModel ): \"\"\"\u63cf\u8ff0\u4e00\u4e2a\u6587\u4ef6\u7684\u4e0b\u8f7d\u4fe1\u606f.\"\"\" sha : str = \"\" \"\"\"\u6587\u4ef6 SHA256\"\"\" md5 : str = \"\" \"\"\"\u6587\u4ef6 MD5\"\"\" download_times : int = Field ( ... , alias = \"downloadTimes\" ) \"\"\"\u4e0b\u8f7d\u6b21\u6570\"\"\" uploader_id : int = Field ( ... , alias = \"uploaderId\" ) \"\"\"\u4e0a\u4f20\u8005 QQ \u53f7\"\"\" upload_time : datetime = Field ( ... , alias = \"uploadTime\" ) \"\"\"\u4e0a\u4f20\u65f6\u95f4\"\"\" last_modify_time : datetime = Field ( ... , alias = \"lastModifyTime\" ) \"\"\"\u6700\u540e\u4fee\u6539\u65f6\u95f4\"\"\" url : Optional [ str ] = None \"\"\"\u4e0b\u8f7d url\"\"\"","title":"DownloadInfo"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.DownloadInfo.download_times","text":"download_times : int = Field ( Ellipsis , alias = 'downloadTimes' ) \u4e0b\u8f7d\u6b21\u6570","title":"download_times"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.DownloadInfo.last_modify_time","text":"last_modify_time : datetime = Field ( Ellipsis , alias = 'lastModifyTime' ) \u6700\u540e\u4fee\u6539\u65f6\u95f4","title":"last_modify_time"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.DownloadInfo.md5","text":"md5 : str = '' \u6587\u4ef6 MD5","title":"md5"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.DownloadInfo.sha","text":"sha : str = '' \u6587\u4ef6 SHA256","title":"sha"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.DownloadInfo.upload_time","text":"upload_time : datetime = Field ( Ellipsis , alias = 'uploadTime' ) \u4e0a\u4f20\u65f6\u95f4","title":"upload_time"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.DownloadInfo.uploader_id","text":"uploader_id : int = Field ( Ellipsis , alias = 'uploaderId' ) \u4e0a\u4f20\u8005 QQ \u53f7","title":"uploader_id"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.DownloadInfo.url","text":"url : Optional [ str ] = None \u4e0b\u8f7d url","title":"url"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.FileInfo","text":"Bases: AriadneBaseModel \u7fa4\u7ec4\u6587\u4ef6\u8be6\u7ec6\u4fe1\u606f Source code in graia/ariadne/model.py 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 class FileInfo ( AriadneBaseModel ): \"\"\"\u7fa4\u7ec4\u6587\u4ef6\u8be6\u7ec6\u4fe1\u606f\"\"\" name : str = \"\" \"\"\"\u6587\u4ef6\u540d\"\"\" path : str = \"\" \"\"\"\u6587\u4ef6\u8def\u5f84\u7684\u5b57\u7b26\u4e32\u8868\u793a\"\"\" id : Optional [ str ] = \"\" \"\"\"\u6587\u4ef6 ID\"\"\" parent : Optional [ \"FileInfo\" ] = None \"\"\"\u7236\u6587\u4ef6\u5939\u7684 FileInfo \u5bf9\u8c61, \u6ca1\u6709\u5219\u8868\u793a\u5b58\u5728\u4e8e\u6839\u76ee\u5f55\"\"\" contact : Optional [ Union [ Group , Friend ]] = None \"\"\"\u6587\u4ef6\u6240\u5728\u4f4d\u7f6e (\u7fa4\u7ec4)\"\"\" is_file : bool = Field ( ... , alias = \"isFile\" ) \"\"\"\u662f\u5426\u4e3a\u6587\u4ef6\"\"\" is_directory : bool = Field ( ... , alias = \"isDirectory\" ) \"\"\"\u662f\u5426\u4e3a\u76ee\u5f55\"\"\" download_info : Optional [ DownloadInfo ] = Field ( None , alias = \"downloadInfo\" ) \"\"\"\u4e0b\u8f7d\u4fe1\u606f\"\"\" @validator ( \"contact\" , pre = True , allow_reuse = True ) def _ ( cls , val : Optional [ dict ]): if not val : return None if \"remark\" in val : # Friend return Friend . parse_obj ( val ) return Group . parse_obj ( val ) # Group","title":"FileInfo"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.FileInfo.contact","text":"contact : Optional [ Union [ Group , Friend ]] = None \u6587\u4ef6\u6240\u5728\u4f4d\u7f6e (\u7fa4\u7ec4)","title":"contact"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.FileInfo.download_info","text":"download_info : Optional [ DownloadInfo ] = Field ( None , alias = 'downloadInfo' ) \u4e0b\u8f7d\u4fe1\u606f","title":"download_info"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.FileInfo.id","text":"id : Optional [ str ] = '' \u6587\u4ef6 ID","title":"id"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.FileInfo.is_directory","text":"is_directory : bool = Field ( Ellipsis , alias = 'isDirectory' ) \u662f\u5426\u4e3a\u76ee\u5f55","title":"is_directory"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.FileInfo.is_file","text":"is_file : bool = Field ( Ellipsis , alias = 'isFile' ) \u662f\u5426\u4e3a\u6587\u4ef6","title":"is_file"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.FileInfo.name","text":"name : str = '' \u6587\u4ef6\u540d","title":"name"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.FileInfo.parent","text":"parent : Optional [ 'FileInfo' ] = None \u7236\u6587\u4ef6\u5939\u7684 FileInfo \u5bf9\u8c61, \u6ca1\u6709\u5219\u8868\u793a\u5b58\u5728\u4e8e\u6839\u76ee\u5f55","title":"parent"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.FileInfo.path","text":"path : str = '' \u6587\u4ef6\u8def\u5f84\u7684\u5b57\u7b26\u4e32\u8868\u793a","title":"path"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Friend","text":"Bases: AriadneBaseModel \u63cf\u8ff0 Tencent QQ \u4e2d\u7684\u597d\u53cb. Source code in graia/ariadne/model.py 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 class Friend ( AriadneBaseModel ): \"\"\"\u63cf\u8ff0 Tencent QQ \u4e2d\u7684\u597d\u53cb.\"\"\" id : int \"\"\"QQ \u53f7\"\"\" nickname : str \"\"\"\u6635\u79f0\"\"\" remark : str \"\"\"\u81ea\u884c\u8bbe\u7f6e\u7684\u4ee3\u79f0\"\"\" def __int__ ( self ): return self . id def __str__ ( self ) -> str : return f \" { self . remark } ( { self . id } )\" def __eq__ ( self , other : Any ) -> bool : return isinstance ( other , ( Friend , Member , Stranger )) and self . id == other . id async def getProfile ( self ) -> \"Profile\" : \"\"\"\u83b7\u53d6\u8be5\u597d\u53cb\u7684 Profile Returns: Profile: \u8be5\u597d\u53cb\u7684 Profile \u5bf9\u8c61 \"\"\" from . import get_running return await get_running () . getFriendProfile ( self ) async def getAvatar ( self , size : Literal [ 640 , 140 ] = 640 ) -> bytes : \"\"\"\u83b7\u53d6\u8be5\u597d\u53cb\u7684\u5934\u50cf Args: size (Literal[640, 140]): \u5934\u50cf\u5c3a\u5bf8 Returns: bytes: \u597d\u53cb\u5934\u50cf\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9. \"\"\" from . import get_running session = get_running () . adapter . session if not session : raise RuntimeError ( \"No running ClientSession\" ) return await ( await session . get ( f \"https://q.qlogo.cn/g?b=qq&nk= { self . id } &s= { size } \" )) . content . read ()","title":"Friend"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Friend.id","text":"id : int = None QQ \u53f7","title":"id"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Friend.nickname","text":"nickname : str = None \u6635\u79f0","title":"nickname"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Friend.remark","text":"remark : str = None \u81ea\u884c\u8bbe\u7f6e\u7684\u4ee3\u79f0","title":"remark"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Friend.getAvatar","text":"getAvatar ( size : Literal [ 640 , 140 ] = 640 ) -> bytes \u83b7\u53d6\u8be5\u597d\u53cb\u7684\u5934\u50cf Parameters: Name Type Description Default size Literal [640, 140] \u5934\u50cf\u5c3a\u5bf8 640 Returns: Name Type Description bytes bytes \u597d\u53cb\u5934\u50cf\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9. Source code in graia/ariadne/model.py 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 async def getAvatar ( self , size : Literal [ 640 , 140 ] = 640 ) -> bytes : \"\"\"\u83b7\u53d6\u8be5\u597d\u53cb\u7684\u5934\u50cf Args: size (Literal[640, 140]): \u5934\u50cf\u5c3a\u5bf8 Returns: bytes: \u597d\u53cb\u5934\u50cf\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9. \"\"\" from . import get_running session = get_running () . adapter . session if not session : raise RuntimeError ( \"No running ClientSession\" ) return await ( await session . get ( f \"https://q.qlogo.cn/g?b=qq&nk= { self . id } &s= { size } \" )) . content . read ()","title":"getAvatar()"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Friend.getProfile","text":"getProfile () -> 'Profile' \u83b7\u53d6\u8be5\u597d\u53cb\u7684 Profile Returns: Name Type Description Profile 'Profile' \u8be5\u597d\u53cb\u7684 Profile \u5bf9\u8c61 Source code in graia/ariadne/model.py 469 470 471 472 473 474 475 476 477 async def getProfile ( self ) -> \"Profile\" : \"\"\"\u83b7\u53d6\u8be5\u597d\u53cb\u7684 Profile Returns: Profile: \u8be5\u597d\u53cb\u7684 Profile \u5bf9\u8c61 \"\"\" from . import get_running return await get_running () . getFriendProfile ( self )","title":"getProfile()"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Group","text":"Bases: AriadneBaseModel \u63cf\u8ff0 Tencent QQ \u4e2d\u7684\u7fa4\u7ec4. Source code in graia/ariadne/model.py 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 class Group ( AriadneBaseModel ): \"\"\"\u63cf\u8ff0 Tencent QQ \u4e2d\u7684\u7fa4\u7ec4.\"\"\" id : int \"\"\"\u7fa4\u53f7\"\"\" name : str \"\"\"\u7fa4\u540d\"\"\" accountPerm : MemberPerm = Field ( ... , alias = \"permission\" ) \"\"\"\u4f60\u5728\u7fa4\u4e2d\u7684\u6743\u9650\"\"\" def __int__ ( self ): return self . id def __str__ ( self ) -> str : return f \" { self . name } ( { self . id } )\" def __eq__ ( self , other : Any ) -> bool : return isinstance ( other , Group ) and self . id == other . id async def getConfig ( self ) -> \"GroupConfig\" : \"\"\"\u83b7\u53d6\u8be5\u7fa4\u7ec4\u7684 Config Returns: Config: \u8be5\u7fa4\u7ec4\u7684\u8bbe\u7f6e\u5bf9\u8c61. \"\"\" from . import get_running return await get_running () . getGroupConfig ( self ) async def modifyConfig ( self , config : \"GroupConfig\" ) -> None : \"\"\"\u4fee\u6539\u8be5\u7fa4\u7ec4\u7684 Config Args: config (GroupConfig): \u7ecf\u8fc7\u4fee\u6539\u540e\u7684\u7fa4\u8bbe\u7f6e\u5bf9\u8c61. \"\"\" from . import get_running return await get_running () . modifyGroupConfig ( self , config ) async def getAvatar ( self , cover : Optional [ int ] = None ) -> bytes : \"\"\"\u83b7\u53d6\u8be5\u7fa4\u7ec4\u7684\u5934\u50cf Args: cover (Optional[int]): \u7fa4\u5c01\u9762\u6807\u53f7 (\u82e5\u4e3a None \u5219\u83b7\u53d6\u8be5\u7fa4\u5934\u50cf, \u5426\u5219\u83b7\u53d6\u8be5\u7fa4\u5c01\u9762) Returns: bytes: \u7fa4\u5934\u50cf\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9. \"\"\" from . import get_running cover = ( cover or 0 ) + 1 session = get_running () . adapter . session if not session : raise RuntimeError ( \"No running ClientSession\" ) return await ( await session . get ( f \"https://p.qlogo.cn/gh/ { self . id } / { self . id } _ { cover } /\" )) . content . read ()","title":"Group"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Group.accountPerm","text":"accountPerm : MemberPerm = Field ( Ellipsis , alias = 'permission' ) \u4f60\u5728\u7fa4\u4e2d\u7684\u6743\u9650","title":"accountPerm"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Group.id","text":"id : int = None \u7fa4\u53f7","title":"id"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Group.name","text":"name : str = None \u7fa4\u540d","title":"name"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Group.getAvatar","text":"getAvatar ( cover : Optional [ int ] = None ) -> bytes \u83b7\u53d6\u8be5\u7fa4\u7ec4\u7684\u5934\u50cf Parameters: Name Type Description Default cover Optional [ int ] \u7fa4\u5c01\u9762\u6807\u53f7 (\u82e5\u4e3a None \u5219\u83b7\u53d6\u8be5\u7fa4\u5934\u50cf, \u5426\u5219\u83b7\u53d6\u8be5\u7fa4\u5c01\u9762) None Returns: Name Type Description bytes bytes \u7fa4\u5934\u50cf\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9. Source code in graia/ariadne/model.py 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 async def getAvatar ( self , cover : Optional [ int ] = None ) -> bytes : \"\"\"\u83b7\u53d6\u8be5\u7fa4\u7ec4\u7684\u5934\u50cf Args: cover (Optional[int]): \u7fa4\u5c01\u9762\u6807\u53f7 (\u82e5\u4e3a None \u5219\u83b7\u53d6\u8be5\u7fa4\u5934\u50cf, \u5426\u5219\u83b7\u53d6\u8be5\u7fa4\u5c01\u9762) Returns: bytes: \u7fa4\u5934\u50cf\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9. \"\"\" from . import get_running cover = ( cover or 0 ) + 1 session = get_running () . adapter . session if not session : raise RuntimeError ( \"No running ClientSession\" ) return await ( await session . get ( f \"https://p.qlogo.cn/gh/ { self . id } / { self . id } _ { cover } /\" )) . content . read ()","title":"getAvatar()"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Group.getConfig","text":"getConfig () -> 'GroupConfig' \u83b7\u53d6\u8be5\u7fa4\u7ec4\u7684 Config Returns: Name Type Description Config 'GroupConfig' \u8be5\u7fa4\u7ec4\u7684\u8bbe\u7f6e\u5bf9\u8c61. Source code in graia/ariadne/model.py 312 313 314 315 316 317 318 319 320 async def getConfig ( self ) -> \"GroupConfig\" : \"\"\"\u83b7\u53d6\u8be5\u7fa4\u7ec4\u7684 Config Returns: Config: \u8be5\u7fa4\u7ec4\u7684\u8bbe\u7f6e\u5bf9\u8c61. \"\"\" from . import get_running return await get_running () . getGroupConfig ( self )","title":"getConfig()"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Group.modifyConfig","text":"modifyConfig ( config : 'GroupConfig' ) -> None \u4fee\u6539\u8be5\u7fa4\u7ec4\u7684 Config Parameters: Name Type Description Default config GroupConfig \u7ecf\u8fc7\u4fee\u6539\u540e\u7684\u7fa4\u8bbe\u7f6e\u5bf9\u8c61. required Source code in graia/ariadne/model.py 322 323 324 325 326 327 328 329 330 async def modifyConfig ( self , config : \"GroupConfig\" ) -> None : \"\"\"\u4fee\u6539\u8be5\u7fa4\u7ec4\u7684 Config Args: config (GroupConfig): \u7ecf\u8fc7\u4fee\u6539\u540e\u7684\u7fa4\u8bbe\u7f6e\u5bf9\u8c61. \"\"\" from . import get_running return await get_running () . modifyGroupConfig ( self , config )","title":"modifyConfig()"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.GroupConfig","text":"Bases: AriadneBaseModel \u63cf\u8ff0\u7fa4\u7ec4\u5404\u9879\u529f\u80fd\u7684\u8bbe\u7f6e. Source code in graia/ariadne/model.py 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 class GroupConfig ( AriadneBaseModel ): \"\"\"\u63cf\u8ff0\u7fa4\u7ec4\u5404\u9879\u529f\u80fd\u7684\u8bbe\u7f6e.\"\"\" name : str = \"\" \"\"\"\u7fa4\u540d\"\"\" announcement : str = \"\" \"\"\"\u7fa4\u516c\u544a\"\"\" confessTalk : bool = False \"\"\"\u5f00\u542f\u5766\u767d\u8bf4\"\"\" allowMemberInvite : bool = False \"\"\"\u5141\u8bb8\u7fa4\u6210\u5458\u76f4\u63a5\u9080\u8bf7\u5165\u7fa4\"\"\" autoApprove : bool = False \"\"\"\u81ea\u52a8\u901a\u8fc7\u52a0\u7fa4\u7533\u8bf7\"\"\" anonymousChat : bool = False \"\"\"\u5141\u8bb8\u533f\u540d\u804a\u5929\"\"\"","title":"GroupConfig"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.GroupConfig.allowMemberInvite","text":"allowMemberInvite : bool = False \u5141\u8bb8\u7fa4\u6210\u5458\u76f4\u63a5\u9080\u8bf7\u5165\u7fa4","title":"allowMemberInvite"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.GroupConfig.announcement","text":"announcement : str = '' \u7fa4\u516c\u544a","title":"announcement"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.GroupConfig.anonymousChat","text":"anonymousChat : bool = False \u5141\u8bb8\u533f\u540d\u804a\u5929","title":"anonymousChat"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.GroupConfig.autoApprove","text":"autoApprove : bool = False \u81ea\u52a8\u901a\u8fc7\u52a0\u7fa4\u7533\u8bf7","title":"autoApprove"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.GroupConfig.confessTalk","text":"confessTalk : bool = False \u5f00\u542f\u5766\u767d\u8bf4","title":"confessTalk"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.GroupConfig.name","text":"name : str = '' \u7fa4\u540d","title":"name"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Member","text":"Bases: AriadneBaseModel \u63cf\u8ff0\u7528\u6237\u5728\u7fa4\u7ec4\u4e2d\u6240\u5177\u5907\u7684\u6709\u5173\u72b6\u6001, \u5305\u62ec\u6240\u5728\u7fa4\u7ec4, \u7fa4\u4e2d\u6635\u79f0, \u6240\u5177\u5907\u7684\u6743\u9650, \u552f\u4e00ID. Source code in graia/ariadne/model.py 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 class Member ( AriadneBaseModel ): \"\"\"\u63cf\u8ff0\u7528\u6237\u5728\u7fa4\u7ec4\u4e2d\u6240\u5177\u5907\u7684\u6709\u5173\u72b6\u6001, \u5305\u62ec\u6240\u5728\u7fa4\u7ec4, \u7fa4\u4e2d\u6635\u79f0, \u6240\u5177\u5907\u7684\u6743\u9650, \u552f\u4e00ID.\"\"\" id : int \"\"\"QQ \u53f7\"\"\" name : str = Field ( ... , alias = \"memberName\" ) \"\"\"\u663e\u793a\u540d\u79f0\"\"\" permission : MemberPerm \"\"\"\u7fa4\u6743\u9650\"\"\" specialTitle : Optional [ str ] = None \"\"\"\u7279\u6b8a\u5934\u8854\"\"\" joinTimestamp : Optional [ int ] = None \"\"\"\u52a0\u5165\u7684\u65f6\u95f4\"\"\" lastSpeakTimestamp : Optional [ int ] = None \"\"\"\u6700\u540e\u53d1\u8a00\u65f6\u95f4\"\"\" mutetimeRemaining : Optional [ int ] = None \"\"\"\u7981\u8a00\u5269\u4f59\u65f6\u95f4\"\"\" group : Group \"\"\"\u6240\u5728\u7fa4\u7ec4\"\"\" def __str__ ( self ) -> str : return f \" { self . name } ( { self . id } @ { self . group } )\" def __int__ ( self ): return self . id def __eq__ ( self , other : Any ) -> bool : return isinstance ( other , ( Friend , Member , Stranger )) and self . id == other . id async def getProfile ( self ) -> \"Profile\" : \"\"\"\u83b7\u53d6\u8be5\u7fa4\u6210\u5458\u7684 Profile Returns: Profile: \u8be5\u7fa4\u6210\u5458\u7684 Profile \u5bf9\u8c61 \"\"\" from . import get_running return await get_running () . getMemberProfile ( self ) async def getInfo ( self ) -> \"MemberInfo\" : \"\"\"\u83b7\u53d6\u8be5\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001 Returns: MemberInfo: \u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001 \"\"\" return MemberInfo ( name = self . name , specialTitle = self . specialTitle ) async def modifyInfo ( self , info : \"MemberInfo\" ) -> None : \"\"\" \u4fee\u6539\u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b). Args: info (MemberInfo): \u5df2\u4fee\u6539\u7684\u6307\u5b9a\u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001 Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" from . import get_running return await get_running () . modifyMemberInfo ( self , info ) async def modifyAdmin ( self , assign : bool ) -> None : \"\"\" \u4fee\u6539\u4e00\u4f4d\u7fa4\u7ec4\u6210\u5458\u7ba1\u7406\u5458\u6743\u9650; \u9700\u8981\u6709\u76f8\u5e94\u6743\u9650(\u7fa4\u4e3b) Args: assign (bool): \u662f\u5426\u8bbe\u7f6e\u7fa4\u6210\u5458\u4e3a\u7ba1\u7406\u5458. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" from . import get_running return await get_running () . modifyMemberAdmin ( assign , self ) async def getAvatar ( self , size : Literal [ 640 , 140 ] = 640 ) -> bytes : \"\"\"\u83b7\u53d6\u8be5\u7fa4\u6210\u5458\u7684\u5934\u50cf Args: size (Literal[640, 140]): \u5934\u50cf\u5c3a\u5bf8 Returns: bytes: \u7fa4\u6210\u5458\u5934\u50cf\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9. \"\"\" from . import get_running session = get_running () . adapter . session if not session : raise RuntimeError ( \"No running ClientSession\" ) return await ( await session . get ( f \"https://q.qlogo.cn/g?b=qq&nk= { self . id } &s= { size } \" )) . content . read ()","title":"Member"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Member.group","text":"group : Group = None \u6240\u5728\u7fa4\u7ec4","title":"group"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Member.id","text":"id : int = None QQ \u53f7","title":"id"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Member.joinTimestamp","text":"joinTimestamp : Optional [ int ] = None \u52a0\u5165\u7684\u65f6\u95f4","title":"joinTimestamp"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Member.lastSpeakTimestamp","text":"lastSpeakTimestamp : Optional [ int ] = None \u6700\u540e\u53d1\u8a00\u65f6\u95f4","title":"lastSpeakTimestamp"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Member.mutetimeRemaining","text":"mutetimeRemaining : Optional [ int ] = None \u7981\u8a00\u5269\u4f59\u65f6\u95f4","title":"mutetimeRemaining"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Member.name","text":"name : str = Field ( Ellipsis , alias = 'memberName' ) \u663e\u793a\u540d\u79f0","title":"name"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Member.permission","text":"permission : MemberPerm = None \u7fa4\u6743\u9650","title":"permission"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Member.specialTitle","text":"specialTitle : Optional [ str ] = None \u7279\u6b8a\u5934\u8854","title":"specialTitle"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Member.getAvatar","text":"getAvatar ( size : Literal [ 640 , 140 ] = 640 ) -> bytes \u83b7\u53d6\u8be5\u7fa4\u6210\u5458\u7684\u5934\u50cf Parameters: Name Type Description Default size Literal [640, 140] \u5934\u50cf\u5c3a\u5bf8 640 Returns: Name Type Description bytes bytes \u7fa4\u6210\u5458\u5934\u50cf\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9. Source code in graia/ariadne/model.py 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 async def getAvatar ( self , size : Literal [ 640 , 140 ] = 640 ) -> bytes : \"\"\"\u83b7\u53d6\u8be5\u7fa4\u6210\u5458\u7684\u5934\u50cf Args: size (Literal[640, 140]): \u5934\u50cf\u5c3a\u5bf8 Returns: bytes: \u7fa4\u6210\u5458\u5934\u50cf\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9. \"\"\" from . import get_running session = get_running () . adapter . session if not session : raise RuntimeError ( \"No running ClientSession\" ) return await ( await session . get ( f \"https://q.qlogo.cn/g?b=qq&nk= { self . id } &s= { size } \" )) . content . read ()","title":"getAvatar()"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Member.getInfo","text":"getInfo () -> 'MemberInfo' \u83b7\u53d6\u8be5\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001 Returns: Name Type Description MemberInfo 'MemberInfo' \u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001 Source code in graia/ariadne/model.py 395 396 397 398 399 400 401 async def getInfo ( self ) -> \"MemberInfo\" : \"\"\"\u83b7\u53d6\u8be5\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001 Returns: MemberInfo: \u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001 \"\"\" return MemberInfo ( name = self . name , specialTitle = self . specialTitle )","title":"getInfo()"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Member.getProfile","text":"getProfile () -> 'Profile' \u83b7\u53d6\u8be5\u7fa4\u6210\u5458\u7684 Profile Returns: Name Type Description Profile 'Profile' \u8be5\u7fa4\u6210\u5458\u7684 Profile \u5bf9\u8c61 Source code in graia/ariadne/model.py 385 386 387 388 389 390 391 392 393 async def getProfile ( self ) -> \"Profile\" : \"\"\"\u83b7\u53d6\u8be5\u7fa4\u6210\u5458\u7684 Profile Returns: Profile: \u8be5\u7fa4\u6210\u5458\u7684 Profile \u5bf9\u8c61 \"\"\" from . import get_running return await get_running () . getMemberProfile ( self )","title":"getProfile()"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Member.modifyAdmin","text":"modifyAdmin ( assign : bool ) -> None \u4fee\u6539\u4e00\u4f4d\u7fa4\u7ec4\u6210\u5458\u7ba1\u7406\u5458\u6743\u9650; \u9700\u8981\u6709\u76f8\u5e94\u6743\u9650(\u7fa4\u4e3b) Parameters: Name Type Description Default assign bool \u662f\u5426\u8bbe\u7f6e\u7fa4\u6210\u5458\u4e3a\u7ba1\u7406\u5458. required Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/model.py 417 418 419 420 421 422 423 424 425 426 427 428 429 async def modifyAdmin ( self , assign : bool ) -> None : \"\"\" \u4fee\u6539\u4e00\u4f4d\u7fa4\u7ec4\u6210\u5458\u7ba1\u7406\u5458\u6743\u9650; \u9700\u8981\u6709\u76f8\u5e94\u6743\u9650(\u7fa4\u4e3b) Args: assign (bool): \u662f\u5426\u8bbe\u7f6e\u7fa4\u6210\u5458\u4e3a\u7ba1\u7406\u5458. Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" from . import get_running return await get_running () . modifyMemberAdmin ( assign , self )","title":"modifyAdmin()"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Member.modifyInfo","text":"modifyInfo ( info : 'MemberInfo' ) -> None \u4fee\u6539\u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b). Parameters: Name Type Description Default info MemberInfo \u5df2\u4fee\u6539\u7684\u6307\u5b9a\u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001 required Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/model.py 403 404 405 406 407 408 409 410 411 412 413 414 415 async def modifyInfo ( self , info : \"MemberInfo\" ) -> None : \"\"\" \u4fee\u6539\u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001; \u9700\u8981\u5177\u6709\u76f8\u5e94\u6743\u9650(\u7ba1\u7406\u5458/\u7fa4\u4e3b). Args: info (MemberInfo): \u5df2\u4fee\u6539\u7684\u6307\u5b9a\u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001 Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" from . import get_running return await get_running () . modifyMemberInfo ( self , info )","title":"modifyInfo()"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.MemberInfo","text":"Bases: AriadneBaseModel \u63cf\u8ff0\u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001, \u4fee\u6539\u9700\u8981\u7ba1\u7406\u5458/\u7fa4\u4e3b\u6743\u9650. Source code in graia/ariadne/model.py 556 557 558 559 560 561 562 563 class MemberInfo ( AriadneBaseModel ): \"\"\"\u63cf\u8ff0\u7fa4\u7ec4\u6210\u5458\u7684\u53ef\u4fee\u6539\u72b6\u6001, \u4fee\u6539\u9700\u8981\u7ba1\u7406\u5458/\u7fa4\u4e3b\u6743\u9650.\"\"\" name : str = \"\" \"\"\"\u6635\u79f0, \u4e0e nickname\u4e0d\u540c\"\"\" specialTitle : Optional [ str ] = \"\" \"\"\"\u7279\u6b8a\u5934\u8854\"\"\"","title":"MemberInfo"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.MemberInfo.name","text":"name : str = '' \u6635\u79f0, \u4e0e nickname\u4e0d\u540c","title":"name"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.MemberInfo.specialTitle","text":"specialTitle : Optional [ str ] = '' \u7279\u6b8a\u5934\u8854","title":"specialTitle"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.MemberPerm","text":"Bases: Enum \u63cf\u8ff0\u7fa4\u6210\u5458\u5728\u7fa4\u7ec4\u4e2d\u6240\u5177\u5907\u7684\u6743\u9650 Source code in graia/ariadne/model.py 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 @functools . total_ordering class MemberPerm ( Enum ): \"\"\"\u63cf\u8ff0\u7fa4\u6210\u5458\u5728\u7fa4\u7ec4\u4e2d\u6240\u5177\u5907\u7684\u6743\u9650\"\"\" Member = \"MEMBER\" # \u666e\u901a\u6210\u5458 Administrator = \"ADMINISTRATOR\" # \u7ba1\u7406\u5458 Owner = \"OWNER\" # \u7fa4\u4e3b def __str__ ( self ) -> str : return self . value def __lt__ ( self , other : \"MemberPerm\" ): lv_map = { MemberPerm . Member : 1 , MemberPerm . Administrator : 2 , MemberPerm . Owner : 3 } return lv_map [ self ] < lv_map [ other ] def __repr__ ( self ) -> str : perm_map : Dict [ str , str ] = { \"MEMBER\" : \"<\u666e\u901a\u6210\u5458>\" , \"ADMINISTRATOR\" : \"<\u7ba1\u7406\u5458>\" , \"OWNER\" : \"<\u7fa4\u4e3b>\" , } return perm_map [ self . value ]","title":"MemberPerm"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.MiraiSession","text":"Bases: AriadneBaseModel \u7528\u4e8e\u63cf\u8ff0\u4e0e\u4e0a\u6e38\u63a5\u53e3\u4f1a\u8bdd, \u5e76\u5b58\u50a8\u4f1a\u8bdd\u72b6\u6001\u7684\u5b9e\u4f53\u7c7b. Attributes: Name Type Description host AnyHttpUrl mirai-api-http \u670d\u52a1\u6240\u5728\u7684\u6839\u63a5\u53e3\u5730\u5740 account int \u5e94\u7528\u6240\u4f7f\u7528\u8d26\u53f7\u7684\u6574\u6570 ID, \u867d\u7136\u542f\u7528 singleMode \u65f6\u4e0d\u9700\u8981, \u4f46\u4ecd\u7136\u5efa\u8bae\u586b\u5199. verify_key str \u5728 mirai-api-http \u914d\u7f6e\u6d41\u7a0b\u4e2d\u5b9a\u4e49, \u9700\u4e3a\u76f8\u540c\u7684\u503c\u4ee5\u901a\u8fc7\u5b89\u5168\u9a8c\u8bc1, \u9700\u5728 mirai-api-http \u914d\u7f6e\u91cc\u542f\u7528 enableVerify . session_key str \u4f1a\u8bdd\u6807\u8bc6, \u5373\u4f1a\u8bdd\u4e2d\u7528\u4e8e\u8fdb\u884c\u64cd\u4f5c\u7684\u552f\u4e00\u8ba4\u8bc1\u51ed\u8bc1. Source code in graia/ariadne/model.py 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 class MiraiSession ( AriadneBaseModel ): \"\"\" \u7528\u4e8e\u63cf\u8ff0\u4e0e\u4e0a\u6e38\u63a5\u53e3\u4f1a\u8bdd, \u5e76\u5b58\u50a8\u4f1a\u8bdd\u72b6\u6001\u7684\u5b9e\u4f53\u7c7b. Attributes: host (AnyHttpUrl): `mirai-api-http` \u670d\u52a1\u6240\u5728\u7684\u6839\u63a5\u53e3\u5730\u5740 account (int): \u5e94\u7528\u6240\u4f7f\u7528\u8d26\u53f7\u7684\u6574\u6570 ID, \u867d\u7136\u542f\u7528 `singleMode` \u65f6\u4e0d\u9700\u8981, \u4f46\u4ecd\u7136\u5efa\u8bae\u586b\u5199. verify_key (str): \u5728 `mirai-api-http` \u914d\u7f6e\u6d41\u7a0b\u4e2d\u5b9a\u4e49, \u9700\u4e3a\u76f8\u540c\u7684\u503c\u4ee5\u901a\u8fc7\u5b89\u5168\u9a8c\u8bc1, \u9700\u5728 mirai-api-http \u914d\u7f6e\u91cc\u542f\u7528 `enableVerify`. session_key (str, optional): \u4f1a\u8bdd\u6807\u8bc6, \u5373\u4f1a\u8bdd\u4e2d\u7528\u4e8e\u8fdb\u884c\u64cd\u4f5c\u7684\u552f\u4e00\u8ba4\u8bc1\u51ed\u8bc1. \"\"\" host : Optional [ AnyHttpUrl ] \"\"\"\u94fe\u63a5\u5730\u5740, \u4ee5 http \u5f00\u5934, \u4f5c\u4e3a\u670d\u52a1\u5668\u8fde\u63a5\u65f6\u5e94\u4e3a None\"\"\" single_mode : bool = False \"\"\"mirai-console \u662f\u5426\u5f00\u542f single_mode (\u5355\u4f8b\u6a21\u5f0f)\"\"\" account : Optional [ int ] = None \"\"\"\u8d26\u53f7\"\"\" verify_key : Optional [ str ] = None \"\"\"mirai-api-http \u914d\u7f6e\u7684 VerifyKey \u5b57\u6bb5\"\"\" session_key : Optional [ str ] = None \"\"\"\u4f1a\u8bdd\u6807\u8bc6\"\"\" version : Optional [ str ] = None \"\"\"mirai-api-http \u7684\u7248\u672c\"\"\" def __init__ ( self , host : Optional [ Union [ AnyHttpUrl , str ]] = None , account : Optional [ Union [ int , str ]] = None , verify_key : Optional [ str ] = None , * , single_mode : bool = False , ) -> None : super () . __init__ ( host = host , # type: ignore account = account , # type: ignore verify_key = verify_key , # type: ignore single_mode = single_mode , # type: ignore ) def url_gen ( self , route : str ) -> str : \"\"\"\u751f\u6210 route \u5bf9\u5e94\u7684 API URI Args: route (str): route \u5730\u5740 Returns: str: \u5bf9\u5e94\u7684 API URI \"\"\" if self . host is None : raise ValueError ( \"Remote host is unset\" ) return str ( URL ( self . host ) / route )","title":"MiraiSession"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.MiraiSession.account","text":"account : Optional [ int ] = None \u8d26\u53f7","title":"account"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.MiraiSession.host","text":"host : Optional [ AnyHttpUrl ] = None \u94fe\u63a5\u5730\u5740, \u4ee5 http \u5f00\u5934, \u4f5c\u4e3a\u670d\u52a1\u5668\u8fde\u63a5\u65f6\u5e94\u4e3a None","title":"host"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.MiraiSession.session_key","text":"session_key : Optional [ str ] = None \u4f1a\u8bdd\u6807\u8bc6","title":"session_key"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.MiraiSession.single_mode","text":"single_mode : bool = False mirai-console \u662f\u5426\u5f00\u542f single_mode (\u5355\u4f8b\u6a21\u5f0f)","title":"single_mode"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.MiraiSession.verify_key","text":"verify_key : Optional [ str ] = None mirai-api-http \u914d\u7f6e\u7684 VerifyKey \u5b57\u6bb5","title":"verify_key"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.MiraiSession.version","text":"version : Optional [ str ] = None mirai-api-http \u7684\u7248\u672c","title":"version"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.MiraiSession.url_gen","text":"url_gen ( route : str ) -> str \u751f\u6210 route \u5bf9\u5e94\u7684 API URI Parameters: Name Type Description Default route str route \u5730\u5740 required Returns: Name Type Description str str \u5bf9\u5e94\u7684 API URI Source code in graia/ariadne/model.py 253 254 255 256 257 258 259 260 261 262 263 264 def url_gen ( self , route : str ) -> str : \"\"\"\u751f\u6210 route \u5bf9\u5e94\u7684 API URI Args: route (str): route \u5730\u5740 Returns: str: \u5bf9\u5e94\u7684 API URI \"\"\" if self . host is None : raise ValueError ( \"Remote host is unset\" ) return str ( URL ( self . host ) / route )","title":"url_gen()"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Profile","text":"Bases: AriadneBaseModel \u6307\u793a\u67d0\u4e2a\u7528\u6237\u7684\u4e2a\u4eba\u8d44\u6599 Source code in graia/ariadne/model.py 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 class Profile ( AriadneBaseModel ): \"\"\" \u6307\u793a\u67d0\u4e2a\u7528\u6237\u7684\u4e2a\u4eba\u8d44\u6599 \"\"\" nickname : str \"\"\"\u6635\u79f0\"\"\" email : Optional [ str ] \"\"\"\u7535\u5b50\u90ae\u4ef6\u5730\u5740\"\"\" age : Optional [ int ] \"\"\"\u5e74\u9f84\"\"\" level : int \"\"\"QQ \u7b49\u7ea7\"\"\" sign : str \"\"\"\u4e2a\u6027\u7b7e\u540d\"\"\" sex : Literal [ \"UNKNOWN\" , \"MALE\" , \"FEMALE\" ] \"\"\"\u6027\u522b\"\"\"","title":"Profile"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Profile.age","text":"age : Optional [ int ] = None \u5e74\u9f84","title":"age"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Profile.email","text":"email : Optional [ str ] = None \u7535\u5b50\u90ae\u4ef6\u5730\u5740","title":"email"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Profile.level","text":"level : int = None QQ \u7b49\u7ea7","title":"level"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Profile.nickname","text":"nickname : str = None \u6635\u79f0","title":"nickname"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Profile.sex","text":"sex : Literal [ 'UNKNOWN' , 'MALE' , 'FEMALE' ] = None \u6027\u522b","title":"sex"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Profile.sign","text":"sign : str = None \u4e2a\u6027\u7b7e\u540d","title":"sign"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Stranger","text":"Bases: AriadneBaseModel \u63cf\u8ff0 Tencent QQ \u4e2d\u7684\u964c\u751f\u4eba. Source code in graia/ariadne/model.py 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 class Stranger ( AriadneBaseModel ): \"\"\"\u63cf\u8ff0 Tencent QQ \u4e2d\u7684\u964c\u751f\u4eba.\"\"\" id : int \"\"\"QQ \u53f7\"\"\" nickname : str \"\"\"\u6635\u79f0\"\"\" remark : str \"\"\"\u81ea\u884c\u8bbe\u7f6e\u7684\u4ee3\u79f0\"\"\" def __int__ ( self ): return self . id def __str__ ( self ) -> str : return f \"Stranger( { self . id } , { self . nickname } )\" def __eq__ ( self , other : Any ) -> bool : return isinstance ( other , ( Friend , Member , Stranger )) and self . id == other . id async def getAvatar ( self , size : Literal [ 640 , 140 ] = 640 ) -> bytes : \"\"\"\u83b7\u53d6\u8be5\u964c\u751f\u4eba\u7684\u5934\u50cf Args: size (Literal[640, 140]): \u5934\u50cf\u5c3a\u5bf8 Returns: bytes: \u964c\u751f\u4eba\u5934\u50cf\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9. \"\"\" from . import get_running session = get_running () . adapter . session if not session : raise RuntimeError ( \"No running ClientSession\" ) return await ( await session . get ( f \"https://q.qlogo.cn/g?b=qq&nk= { self . id } &s= { size } \" )) . content . read ()","title":"Stranger"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Stranger.id","text":"id : int = None QQ \u53f7","title":"id"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Stranger.nickname","text":"nickname : str = None \u6635\u79f0","title":"nickname"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Stranger.remark","text":"remark : str = None \u81ea\u884c\u8bbe\u7f6e\u7684\u4ee3\u79f0","title":"remark"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.Stranger.getAvatar","text":"getAvatar ( size : Literal [ 640 , 140 ] = 640 ) -> bytes \u83b7\u53d6\u8be5\u964c\u751f\u4eba\u7684\u5934\u50cf Parameters: Name Type Description Default size Literal [640, 140] \u5934\u50cf\u5c3a\u5bf8 640 Returns: Name Type Description bytes bytes \u964c\u751f\u4eba\u5934\u50cf\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9. Source code in graia/ariadne/model.py 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 async def getAvatar ( self , size : Literal [ 640 , 140 ] = 640 ) -> bytes : \"\"\"\u83b7\u53d6\u8be5\u964c\u751f\u4eba\u7684\u5934\u50cf Args: size (Literal[640, 140]): \u5934\u50cf\u5c3a\u5bf8 Returns: bytes: \u964c\u751f\u4eba\u5934\u50cf\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9. \"\"\" from . import get_running session = get_running () . adapter . session if not session : raise RuntimeError ( \"No running ClientSession\" ) return await ( await session . get ( f \"https://q.qlogo.cn/g?b=qq&nk= { self . id } &s= { size } \" )) . content . read ()","title":"getAvatar()"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.UploadMethod","text":"Bases: str , Enum \u7528\u4e8e\u5411 upload \u7cfb\u5217\u65b9\u6cd5\u63cf\u8ff0\u4e0a\u4f20\u7c7b\u578b Source code in graia/ariadne/model.py 652 653 654 655 656 657 658 659 660 661 662 663 664 665 class UploadMethod ( str , Enum ): \"\"\"\u7528\u4e8e\u5411 `upload` \u7cfb\u5217\u65b9\u6cd5\u63cf\u8ff0\u4e0a\u4f20\u7c7b\u578b\"\"\" Friend = \"friend\" \"\"\"\u597d\u53cb\"\"\" Group = \"group\" \"\"\"\u7fa4\u7ec4\"\"\" Temp = \"temp\" \"\"\"\u4e34\u65f6\u6d88\u606f\"\"\" def __str__ ( self ) -> str : return self . value","title":"UploadMethod"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.UploadMethod.Friend","text":"Friend = 'friend' \u597d\u53cb","title":"Friend"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.UploadMethod.Group","text":"Group = 'group' \u7fa4\u7ec4","title":"Group"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.UploadMethod.Temp","text":"Temp = 'temp' \u4e34\u65f6\u6d88\u606f","title":"Temp"},{"location":"refs/graia/ariadne/model/#graia.ariadne.model.datetime_encoder","text":"datetime_encoder ( v : datetime ) -> float \u7f16\u7801 datetime \u5bf9\u8c61 Parameters: Name Type Description Default v datetime datetime \u5bf9\u8c61 required Returns: Name Type Description float float \u7f16\u7801\u540e\u7684 datetime (\u65f6\u95f4\u6233) Source code in graia/ariadne/model.py 25 26 27 28 29 30 31 32 33 34 def datetime_encoder ( v : datetime ) -> float : \"\"\"\u7f16\u7801 datetime \u5bf9\u8c61 Args: v (datetime): datetime \u5bf9\u8c61 Returns: float: \u7f16\u7801\u540e\u7684 datetime (\u65f6\u95f4\u6233) \"\"\" return v . timestamp ()","title":"datetime_encoder()"},{"location":"refs/graia/ariadne/typing/","text":"Ariadne \u7684\u7c7b\u578b\u6807\u6ce8 SendMessageAction \ud83d\udd17 Bases: Generic [ T , R ] \u8868\u793a SendMessage \u7684 action Source code in graia/ariadne/typing.py 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 class SendMessageAction ( Generic [ T , R ]): \"\"\"\u8868\u793a SendMessage \u7684 action\"\"\" @staticmethod async def param ( item : SendMessageDict ) -> SendMessageDict : \"\"\"\u4f20\u5165 SendMessageDict \u4f5c\u4e3a\u53c2\u6570, \u4f20\u51fa SendMessageDict \u4f5c\u4e3a\u7ed3\u679c Args: item (SendMessageDict): \u8c03\u7528\u53c2\u6570 Returns: SendMessageDict: \u4fee\u6539\u540e\u7684\u8c03\u7528\u53c2\u6570 \"\"\" return item @staticmethod async def result ( item : \"BotMessage\" ) -> R : \"\"\"\u5904\u7406\u8fd4\u56de\u7ed3\u679c Args: item (BotMessage): SendMessage \u6210\u529f\u65f6\u7684\u7ed3\u679c Returns: R: \u8981\u5b9e\u9645\u7531 SendMessage \u8fd4\u56de\u7684\u6570\u636e \"\"\" return item # type: ignore @staticmethod async def exception ( item : SendMessageException ) -> Optional [ T ]: \"\"\"\u53d1\u751f\u5f02\u5e38\u65f6\u8fdb\u884c\u5904\u7406\uff0c\u53ef\u4ee5\u9009\u62e9\u4e0d\u8fd4\u56de\u800c\u662f\u76f4\u63a5\u5f15\u53d1\u5f02\u5e38 Args: item (SendMessageException): \u53d1\u751f\u7684\u5f02\u5e38 Returns: T: \u5c06\u4f5c\u4e3a sendMessage \u7684\u8fd4\u56de\u503c \"\"\" raise item exception staticmethod async \ud83d\udd17 exception ( item : SendMessageException ) -> Optional [ T ] \u53d1\u751f\u5f02\u5e38\u65f6\u8fdb\u884c\u5904\u7406\uff0c\u53ef\u4ee5\u9009\u62e9\u4e0d\u8fd4\u56de\u800c\u662f\u76f4\u63a5\u5f15\u53d1\u5f02\u5e38 Parameters: Name Type Description Default item SendMessageException \u53d1\u751f\u7684\u5f02\u5e38 required Returns: Name Type Description T Optional [ T ] \u5c06\u4f5c\u4e3a sendMessage \u7684\u8fd4\u56de\u503c Source code in graia/ariadne/typing.py 100 101 102 103 104 105 106 107 108 109 110 @staticmethod async def exception ( item : SendMessageException ) -> Optional [ T ]: \"\"\"\u53d1\u751f\u5f02\u5e38\u65f6\u8fdb\u884c\u5904\u7406\uff0c\u53ef\u4ee5\u9009\u62e9\u4e0d\u8fd4\u56de\u800c\u662f\u76f4\u63a5\u5f15\u53d1\u5f02\u5e38 Args: item (SendMessageException): \u53d1\u751f\u7684\u5f02\u5e38 Returns: T: \u5c06\u4f5c\u4e3a sendMessage \u7684\u8fd4\u56de\u503c \"\"\" raise item param staticmethod async \ud83d\udd17 param ( item : SendMessageDict ) -> SendMessageDict \u4f20\u5165 SendMessageDict \u4f5c\u4e3a\u53c2\u6570, \u4f20\u51fa SendMessageDict \u4f5c\u4e3a\u7ed3\u679c Parameters: Name Type Description Default item SendMessageDict \u8c03\u7528\u53c2\u6570 required Returns: Name Type Description SendMessageDict SendMessageDict \u4fee\u6539\u540e\u7684\u8c03\u7528\u53c2\u6570 Source code in graia/ariadne/typing.py 76 77 78 79 80 81 82 83 84 85 86 @staticmethod async def param ( item : SendMessageDict ) -> SendMessageDict : \"\"\"\u4f20\u5165 SendMessageDict \u4f5c\u4e3a\u53c2\u6570, \u4f20\u51fa SendMessageDict \u4f5c\u4e3a\u7ed3\u679c Args: item (SendMessageDict): \u8c03\u7528\u53c2\u6570 Returns: SendMessageDict: \u4fee\u6539\u540e\u7684\u8c03\u7528\u53c2\u6570 \"\"\" return item result staticmethod async \ud83d\udd17 result ( item : 'BotMessage' ) -> R \u5904\u7406\u8fd4\u56de\u7ed3\u679c Parameters: Name Type Description Default item BotMessage SendMessage \u6210\u529f\u65f6\u7684\u7ed3\u679c required Returns: Name Type Description R R \u8981\u5b9e\u9645\u7531 SendMessage \u8fd4\u56de\u7684\u6570\u636e Source code in graia/ariadne/typing.py 88 89 90 91 92 93 94 95 96 97 98 @staticmethod async def result ( item : \"BotMessage\" ) -> R : \"\"\"\u5904\u7406\u8fd4\u56de\u7ed3\u679c Args: item (BotMessage): SendMessage \u6210\u529f\u65f6\u7684\u7ed3\u679c Returns: R: \u8981\u5b9e\u9645\u7531 SendMessage \u8fd4\u56de\u7684\u6570\u636e \"\"\" return item # type: ignore SendMessageDict \ud83d\udd17 Bases: TypedDict \u4f7f\u7528 SendMessage \u65f6, \u5bf9 action \u4f20\u5165\u7684\u5b57\u5178 Source code in graia/ariadne/typing.py 54 55 56 57 58 59 class SendMessageDict ( TypedDict ): \"\"\"\u4f7f\u7528 SendMessage \u65f6, \u5bf9 action \u4f20\u5165\u7684\u5b57\u5178\"\"\" message : \"MessageChain\" target : \"Union[Group, Friend, Member]\" quote : Optional [ int ] SendMessageException \ud83d\udd17 Bases: Exception \u643a\u5e26\u4e86 SendMessageDict \u7684 Exception Source code in graia/ariadne/typing.py 64 65 66 67 class SendMessageException ( Exception ): \"\"\"\u643a\u5e26\u4e86 SendMessageDict \u7684 Exception\"\"\" send_data : SendMessageDict Slice \ud83d\udd17 Bases: Generic [ T_start , T_stop , T_step ] \u5bf9 slice \u5bf9\u8c61\u7684\u6cdb\u578b\u5316\u5305\u88c5, \u4f46\u65e0\u6cd5\u76f4\u63a5\u7ee7\u627f\u4e8e slice Source code in graia/ariadne/typing.py 36 37 38 39 40 41 class Slice ( Generic [ T_start , T_stop , T_step ]): # type: ignore \"\"\"\u5bf9 slice \u5bf9\u8c61\u7684\u6cdb\u578b\u5316\u5305\u88c5, \u4f46\u65e0\u6cd5\u76f4\u63a5\u7ee7\u627f\u4e8e slice\"\"\" start : T_start stop : T_stop step : T_step generic_isinstance \ud83d\udd17 generic_isinstance ( obj : Any , par : Union [ type , Any , Tuple [ type , ... ]]) -> bool \u68c0\u67e5 obj \u662f\u5426\u662f args \u4e2d\u7684\u4e00\u4e2a\u7c7b\u578b, \u652f\u6301\u6cdb\u578b, Any, Union Parameters: Name Type Description Default obj Any \u8981\u68c0\u67e5\u7684\u5bf9\u8c61 required par Union [ type , Any , Tuple [ type , ...]] \u8981\u68c0\u67e5\u7684\u5bf9\u8c61\u7684\u7c7b\u578b required Returns: Name Type Description bool bool \u662f\u5426\u662f\u7c7b\u578b Source code in graia/ariadne/typing.py 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 def generic_isinstance ( obj : Any , par : Union [ type , Any , Tuple [ type , ... ]]) -> bool : \"\"\"\u68c0\u67e5 obj \u662f\u5426\u662f args \u4e2d\u7684\u4e00\u4e2a\u7c7b\u578b, \u652f\u6301\u6cdb\u578b, Any, Union Args: obj (Any): \u8981\u68c0\u67e5\u7684\u5bf9\u8c61 par (Union[type, Any, Tuple[type, ...]]): \u8981\u68c0\u67e5\u7684\u5bf9\u8c61\u7684\u7c7b\u578b Returns: bool: \u662f\u5426\u662f\u7c7b\u578b \"\"\" if par is Any : return True with contextlib . suppress ( TypeError ): if isinstance ( par , ( type , tuple )): return isinstance ( obj , par ) if typing . get_origin ( par ) is Union : return any ( generic_isinstance ( obj , p ) for p in typing . get_args ( par )) if isinstance ( par , TypeVar ): if par . __constraints__ : return any ( generic_isinstance ( obj , p ) for p in par . __constraints__ ) if par . __bound__ : return generic_isinstance ( obj , par . __bound__ ) return False generic_issubclass \ud83d\udd17 generic_issubclass ( cls : type , par : Union [ type , Any , Tuple [ type , ... ]]) -> bool \u68c0\u67e5 cls \u662f\u5426\u662f args \u4e2d\u7684\u4e00\u4e2a\u5b50\u7c7b, \u652f\u6301\u6cdb\u578b, Any, Union Parameters: Name Type Description Default cls type \u8981\u68c0\u67e5\u7684\u7c7b required par Union [ type , Any , Tuple [ type , ...]] \u8981\u68c0\u67e5\u7684\u7c7b\u7684\u7236\u7c7b required Returns: Name Type Description bool bool \u662f\u5426\u662f\u7236\u7c7b Source code in graia/ariadne/typing.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 def generic_issubclass ( cls : type , par : Union [ type , Any , Tuple [ type , ... ]]) -> bool : \"\"\"\u68c0\u67e5 cls \u662f\u5426\u662f args \u4e2d\u7684\u4e00\u4e2a\u5b50\u7c7b, \u652f\u6301\u6cdb\u578b, Any, Union Args: cls (type): \u8981\u68c0\u67e5\u7684\u7c7b par (Union[type, Any, Tuple[type, ...]]): \u8981\u68c0\u67e5\u7684\u7c7b\u7684\u7236\u7c7b Returns: bool: \u662f\u5426\u662f\u7236\u7c7b \"\"\" if par is Any : return True with contextlib . suppress ( TypeError ): if isinstance ( par , ( type , tuple )): return issubclass ( cls , par ) if typing . get_origin ( par ) is Union : return any ( generic_issubclass ( cls , p ) for p in typing . get_args ( par )) if isinstance ( par , TypeVar ): if par . __constraints__ : return any ( generic_issubclass ( cls , p ) for p in par . __constraints__ ) if par . __bound__ : return generic_issubclass ( cls , par . __bound__ ) return False","title":"typing"},{"location":"refs/graia/ariadne/typing/#graia.ariadne.typing.SendMessageAction","text":"Bases: Generic [ T , R ] \u8868\u793a SendMessage \u7684 action Source code in graia/ariadne/typing.py 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 class SendMessageAction ( Generic [ T , R ]): \"\"\"\u8868\u793a SendMessage \u7684 action\"\"\" @staticmethod async def param ( item : SendMessageDict ) -> SendMessageDict : \"\"\"\u4f20\u5165 SendMessageDict \u4f5c\u4e3a\u53c2\u6570, \u4f20\u51fa SendMessageDict \u4f5c\u4e3a\u7ed3\u679c Args: item (SendMessageDict): \u8c03\u7528\u53c2\u6570 Returns: SendMessageDict: \u4fee\u6539\u540e\u7684\u8c03\u7528\u53c2\u6570 \"\"\" return item @staticmethod async def result ( item : \"BotMessage\" ) -> R : \"\"\"\u5904\u7406\u8fd4\u56de\u7ed3\u679c Args: item (BotMessage): SendMessage \u6210\u529f\u65f6\u7684\u7ed3\u679c Returns: R: \u8981\u5b9e\u9645\u7531 SendMessage \u8fd4\u56de\u7684\u6570\u636e \"\"\" return item # type: ignore @staticmethod async def exception ( item : SendMessageException ) -> Optional [ T ]: \"\"\"\u53d1\u751f\u5f02\u5e38\u65f6\u8fdb\u884c\u5904\u7406\uff0c\u53ef\u4ee5\u9009\u62e9\u4e0d\u8fd4\u56de\u800c\u662f\u76f4\u63a5\u5f15\u53d1\u5f02\u5e38 Args: item (SendMessageException): \u53d1\u751f\u7684\u5f02\u5e38 Returns: T: \u5c06\u4f5c\u4e3a sendMessage \u7684\u8fd4\u56de\u503c \"\"\" raise item","title":"SendMessageAction"},{"location":"refs/graia/ariadne/typing/#graia.ariadne.typing.SendMessageAction.exception","text":"exception ( item : SendMessageException ) -> Optional [ T ] \u53d1\u751f\u5f02\u5e38\u65f6\u8fdb\u884c\u5904\u7406\uff0c\u53ef\u4ee5\u9009\u62e9\u4e0d\u8fd4\u56de\u800c\u662f\u76f4\u63a5\u5f15\u53d1\u5f02\u5e38 Parameters: Name Type Description Default item SendMessageException \u53d1\u751f\u7684\u5f02\u5e38 required Returns: Name Type Description T Optional [ T ] \u5c06\u4f5c\u4e3a sendMessage \u7684\u8fd4\u56de\u503c Source code in graia/ariadne/typing.py 100 101 102 103 104 105 106 107 108 109 110 @staticmethod async def exception ( item : SendMessageException ) -> Optional [ T ]: \"\"\"\u53d1\u751f\u5f02\u5e38\u65f6\u8fdb\u884c\u5904\u7406\uff0c\u53ef\u4ee5\u9009\u62e9\u4e0d\u8fd4\u56de\u800c\u662f\u76f4\u63a5\u5f15\u53d1\u5f02\u5e38 Args: item (SendMessageException): \u53d1\u751f\u7684\u5f02\u5e38 Returns: T: \u5c06\u4f5c\u4e3a sendMessage \u7684\u8fd4\u56de\u503c \"\"\" raise item","title":"exception()"},{"location":"refs/graia/ariadne/typing/#graia.ariadne.typing.SendMessageAction.param","text":"param ( item : SendMessageDict ) -> SendMessageDict \u4f20\u5165 SendMessageDict \u4f5c\u4e3a\u53c2\u6570, \u4f20\u51fa SendMessageDict \u4f5c\u4e3a\u7ed3\u679c Parameters: Name Type Description Default item SendMessageDict \u8c03\u7528\u53c2\u6570 required Returns: Name Type Description SendMessageDict SendMessageDict \u4fee\u6539\u540e\u7684\u8c03\u7528\u53c2\u6570 Source code in graia/ariadne/typing.py 76 77 78 79 80 81 82 83 84 85 86 @staticmethod async def param ( item : SendMessageDict ) -> SendMessageDict : \"\"\"\u4f20\u5165 SendMessageDict \u4f5c\u4e3a\u53c2\u6570, \u4f20\u51fa SendMessageDict \u4f5c\u4e3a\u7ed3\u679c Args: item (SendMessageDict): \u8c03\u7528\u53c2\u6570 Returns: SendMessageDict: \u4fee\u6539\u540e\u7684\u8c03\u7528\u53c2\u6570 \"\"\" return item","title":"param()"},{"location":"refs/graia/ariadne/typing/#graia.ariadne.typing.SendMessageAction.result","text":"result ( item : 'BotMessage' ) -> R \u5904\u7406\u8fd4\u56de\u7ed3\u679c Parameters: Name Type Description Default item BotMessage SendMessage \u6210\u529f\u65f6\u7684\u7ed3\u679c required Returns: Name Type Description R R \u8981\u5b9e\u9645\u7531 SendMessage \u8fd4\u56de\u7684\u6570\u636e Source code in graia/ariadne/typing.py 88 89 90 91 92 93 94 95 96 97 98 @staticmethod async def result ( item : \"BotMessage\" ) -> R : \"\"\"\u5904\u7406\u8fd4\u56de\u7ed3\u679c Args: item (BotMessage): SendMessage \u6210\u529f\u65f6\u7684\u7ed3\u679c Returns: R: \u8981\u5b9e\u9645\u7531 SendMessage \u8fd4\u56de\u7684\u6570\u636e \"\"\" return item # type: ignore","title":"result()"},{"location":"refs/graia/ariadne/typing/#graia.ariadne.typing.SendMessageDict","text":"Bases: TypedDict \u4f7f\u7528 SendMessage \u65f6, \u5bf9 action \u4f20\u5165\u7684\u5b57\u5178 Source code in graia/ariadne/typing.py 54 55 56 57 58 59 class SendMessageDict ( TypedDict ): \"\"\"\u4f7f\u7528 SendMessage \u65f6, \u5bf9 action \u4f20\u5165\u7684\u5b57\u5178\"\"\" message : \"MessageChain\" target : \"Union[Group, Friend, Member]\" quote : Optional [ int ]","title":"SendMessageDict"},{"location":"refs/graia/ariadne/typing/#graia.ariadne.typing.SendMessageException","text":"Bases: Exception \u643a\u5e26\u4e86 SendMessageDict \u7684 Exception Source code in graia/ariadne/typing.py 64 65 66 67 class SendMessageException ( Exception ): \"\"\"\u643a\u5e26\u4e86 SendMessageDict \u7684 Exception\"\"\" send_data : SendMessageDict","title":"SendMessageException"},{"location":"refs/graia/ariadne/typing/#graia.ariadne.typing.Slice","text":"Bases: Generic [ T_start , T_stop , T_step ] \u5bf9 slice \u5bf9\u8c61\u7684\u6cdb\u578b\u5316\u5305\u88c5, \u4f46\u65e0\u6cd5\u76f4\u63a5\u7ee7\u627f\u4e8e slice Source code in graia/ariadne/typing.py 36 37 38 39 40 41 class Slice ( Generic [ T_start , T_stop , T_step ]): # type: ignore \"\"\"\u5bf9 slice \u5bf9\u8c61\u7684\u6cdb\u578b\u5316\u5305\u88c5, \u4f46\u65e0\u6cd5\u76f4\u63a5\u7ee7\u627f\u4e8e slice\"\"\" start : T_start stop : T_stop step : T_step","title":"Slice"},{"location":"refs/graia/ariadne/typing/#graia.ariadne.typing.generic_isinstance","text":"generic_isinstance ( obj : Any , par : Union [ type , Any , Tuple [ type , ... ]]) -> bool \u68c0\u67e5 obj \u662f\u5426\u662f args \u4e2d\u7684\u4e00\u4e2a\u7c7b\u578b, \u652f\u6301\u6cdb\u578b, Any, Union Parameters: Name Type Description Default obj Any \u8981\u68c0\u67e5\u7684\u5bf9\u8c61 required par Union [ type , Any , Tuple [ type , ...]] \u8981\u68c0\u67e5\u7684\u5bf9\u8c61\u7684\u7c7b\u578b required Returns: Name Type Description bool bool \u662f\u5426\u662f\u7c7b\u578b Source code in graia/ariadne/typing.py 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 def generic_isinstance ( obj : Any , par : Union [ type , Any , Tuple [ type , ... ]]) -> bool : \"\"\"\u68c0\u67e5 obj \u662f\u5426\u662f args \u4e2d\u7684\u4e00\u4e2a\u7c7b\u578b, \u652f\u6301\u6cdb\u578b, Any, Union Args: obj (Any): \u8981\u68c0\u67e5\u7684\u5bf9\u8c61 par (Union[type, Any, Tuple[type, ...]]): \u8981\u68c0\u67e5\u7684\u5bf9\u8c61\u7684\u7c7b\u578b Returns: bool: \u662f\u5426\u662f\u7c7b\u578b \"\"\" if par is Any : return True with contextlib . suppress ( TypeError ): if isinstance ( par , ( type , tuple )): return isinstance ( obj , par ) if typing . get_origin ( par ) is Union : return any ( generic_isinstance ( obj , p ) for p in typing . get_args ( par )) if isinstance ( par , TypeVar ): if par . __constraints__ : return any ( generic_isinstance ( obj , p ) for p in par . __constraints__ ) if par . __bound__ : return generic_isinstance ( obj , par . __bound__ ) return False","title":"generic_isinstance()"},{"location":"refs/graia/ariadne/typing/#graia.ariadne.typing.generic_issubclass","text":"generic_issubclass ( cls : type , par : Union [ type , Any , Tuple [ type , ... ]]) -> bool \u68c0\u67e5 cls \u662f\u5426\u662f args \u4e2d\u7684\u4e00\u4e2a\u5b50\u7c7b, \u652f\u6301\u6cdb\u578b, Any, Union Parameters: Name Type Description Default cls type \u8981\u68c0\u67e5\u7684\u7c7b required par Union [ type , Any , Tuple [ type , ...]] \u8981\u68c0\u67e5\u7684\u7c7b\u7684\u7236\u7c7b required Returns: Name Type Description bool bool \u662f\u5426\u662f\u7236\u7c7b Source code in graia/ariadne/typing.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 def generic_issubclass ( cls : type , par : Union [ type , Any , Tuple [ type , ... ]]) -> bool : \"\"\"\u68c0\u67e5 cls \u662f\u5426\u662f args \u4e2d\u7684\u4e00\u4e2a\u5b50\u7c7b, \u652f\u6301\u6cdb\u578b, Any, Union Args: cls (type): \u8981\u68c0\u67e5\u7684\u7c7b par (Union[type, Any, Tuple[type, ...]]): \u8981\u68c0\u67e5\u7684\u7c7b\u7684\u7236\u7c7b Returns: bool: \u662f\u5426\u662f\u7236\u7c7b \"\"\" if par is Any : return True with contextlib . suppress ( TypeError ): if isinstance ( par , ( type , tuple )): return issubclass ( cls , par ) if typing . get_origin ( par ) is Union : return any ( generic_issubclass ( cls , p ) for p in typing . get_args ( par )) if isinstance ( par , TypeVar ): if par . __constraints__ : return any ( generic_issubclass ( cls , p ) for p in par . __constraints__ ) if par . __bound__ : return generic_issubclass ( cls , par . __bound__ ) return False","title":"generic_issubclass()"},{"location":"refs/graia/ariadne/adapter/","text":"Ariadne \u7684\u9002\u914d\u5668 Adapter \ud83d\udd17 Bases: abc . ABC Source code in graia/ariadne/adapter/__init__.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 class Adapter ( abc . ABC ): tags : FrozenSet [ str ] = frozenset ([ \"abstract\" ]) def __init__ ( self , broadcast : Broadcast , mirai_session : MiraiSession ) -> None : \"\"\"\u521d\u59cb\u5316 Adapter. Args: broadcast (Broadcast): \u5e7f\u64ad\u7cfb\u7edf mirai_session (MiraiSession): MiraiSession \u5b9e\u4f8b \"\"\" self . broadcast : Broadcast = broadcast self . running : bool = False self . mirai_session : MiraiSession = mirai_session self . fetch_task : Optional [ Task ] = None self . call_task : Optional [ Task ] = None self . session : Optional [ ClientSession ] = None self . event_queue : Optional [ Queue [ MiraiEvent ]] = None self . connected : AsyncSignal [ bool ] = AsyncSignal ( False ) if \"abstract\" in self . tags : raise TypeError ( \"Adapter is abstract, cannot be instantiated.\" ) @abc . abstractmethod async def call_api ( self , action : str , method : CallMethod , data : Optional [ Union [ Dict [ str , Any ], str , FormData ]] = None , ) -> Dict [ Any , Any ]: \"\"\"\u8c03\u7528 API Args: action (str): API \u52a8\u4f5c\u540d, \u7528\u659c\u6760\u5206\u5272 method (CallMethod): \u8c03\u7528\u65b9\u6cd5 data (Optional[Union[Dict[str, Any], str, FormData]], optional): \u8c03\u7528\u6570\u636e. Defaults to None. Returns: dict: API \u8fd4\u56de\u7684\u6570\u636e, \u4e3a json \u517c\u5bb9\u683c\u5f0f \"\"\" ... async def start ( self ): \"\"\"\u542f\u52a8 Adapter\"\"\" if not self . running : self . running = True self . event_queue = Queue () self . fetch_task = asyncio . create_task ( self . fetch_cycle ()) if self . mirai_session . single_mode : self . connected . set ( True ) if \"reverse\" not in self . tags : await self . connected . wait ( True ) def build_event ( self , data : dict ) -> MiraiEvent : \"\"\" \u4ece\u5c1a\u672a\u660e\u786e\u6307\u5b9a\u4e8b\u4ef6\u7c7b\u578b\u7684\u5bf9\u8c61\u4e2d\u83b7\u53d6\u4e8b\u4ef6\u7684\u5b9a\u4e49, \u5e76\u8fdb\u884c\u89e3\u6790 Args: data (dict): \u7528 dict \u8868\u793a\u7684\u5e8f\u5217\u5316\u6001\u4e8b\u4ef6, \u5e94\u5305\u542b\u6709\u5b57\u6bb5 `type` \u4ee5\u4f9b\u5206\u6790\u4e8b\u4ef6\u5b9a\u4e49. Raises: InvalidArgument: \u76ee\u6807\u5bf9\u8c61\u4e2d\u4e0d\u5305\u542b\u5b57\u6bb5 `type` ValueError: \u6ca1\u6709\u627e\u5230\u5bf9\u5e94\u7684\u5b57\u6bb5, \u901a\u5e38\u7684, \u8fd9\u610f\u5473\u7740\u5e94\u7528\u83b7\u53d6\u5230\u4e86\u4e00\u4e2a\u5c1a\u672a\u88ab\u5b9a\u4e49\u7684\u4e8b\u4ef6, \u8bf7\u62a5\u544a\u95ee\u9898. Returns: MiraiEvent: \u5df2\u7ecf\u88ab\u5e8f\u5217\u5316\u7684\u4e8b\u4ef6 \"\"\" event_type : Optional [ str ] = data . get ( \"type\" ) if not event_type or not isinstance ( event_type , str ): raise InvalidArgument ( \"Unable to find 'type' field for automatic parsing\" , data ) event_class : Optional [ MiraiEvent ] = self . broadcast . findEvent ( event_type ) # type: ignore if not event_class : logger . error ( \"An event is not recognized! Please report with your log to help us diagnose.\" ) raise ValueError ( f \"Unable to find event: { event_type } \" , data ) data = { k : v for k , v in data . items () if k != \"type\" } return event_class . parse_obj ( data ) @abc . abstractmethod async def fetch_cycle ( self ): \"\"\"\u5faa\u73af\u83b7\u53d6\u4e8b\u4ef6, \u653e\u5165 event_queue \u4e2d\"\"\" ... async def stop ( self ): \"\"\"\u505c\u6b62 Adapter\"\"\" self . running = False if self . fetch_task : await self . fetch_task logger . success ( \"Event fetch task completed.\" ) self . fetch_task = None __init__ \ud83d\udd17 __init__ ( broadcast : Broadcast , mirai_session : MiraiSession ) -> None \u521d\u59cb\u5316 Adapter. Parameters: Name Type Description Default broadcast Broadcast \u5e7f\u64ad\u7cfb\u7edf required mirai_session MiraiSession MiraiSession \u5b9e\u4f8b required Source code in graia/ariadne/adapter/__init__.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 def __init__ ( self , broadcast : Broadcast , mirai_session : MiraiSession ) -> None : \"\"\"\u521d\u59cb\u5316 Adapter. Args: broadcast (Broadcast): \u5e7f\u64ad\u7cfb\u7edf mirai_session (MiraiSession): MiraiSession \u5b9e\u4f8b \"\"\" self . broadcast : Broadcast = broadcast self . running : bool = False self . mirai_session : MiraiSession = mirai_session self . fetch_task : Optional [ Task ] = None self . call_task : Optional [ Task ] = None self . session : Optional [ ClientSession ] = None self . event_queue : Optional [ Queue [ MiraiEvent ]] = None self . connected : AsyncSignal [ bool ] = AsyncSignal ( False ) if \"abstract\" in self . tags : raise TypeError ( \"Adapter is abstract, cannot be instantiated.\" ) build_event \ud83d\udd17 build_event ( data : dict ) -> MiraiEvent \u4ece\u5c1a\u672a\u660e\u786e\u6307\u5b9a\u4e8b\u4ef6\u7c7b\u578b\u7684\u5bf9\u8c61\u4e2d\u83b7\u53d6\u4e8b\u4ef6\u7684\u5b9a\u4e49, \u5e76\u8fdb\u884c\u89e3\u6790 Parameters: Name Type Description Default data dict \u7528 dict \u8868\u793a\u7684\u5e8f\u5217\u5316\u6001\u4e8b\u4ef6, \u5e94\u5305\u542b\u6709\u5b57\u6bb5 type \u4ee5\u4f9b\u5206\u6790\u4e8b\u4ef6\u5b9a\u4e49. required Raises: Type Description InvalidArgument \u76ee\u6807\u5bf9\u8c61\u4e2d\u4e0d\u5305\u542b\u5b57\u6bb5 type ValueError \u6ca1\u6709\u627e\u5230\u5bf9\u5e94\u7684\u5b57\u6bb5, \u901a\u5e38\u7684, \u8fd9\u610f\u5473\u7740\u5e94\u7528\u83b7\u53d6\u5230\u4e86\u4e00\u4e2a\u5c1a\u672a\u88ab\u5b9a\u4e49\u7684\u4e8b\u4ef6, \u8bf7\u62a5\u544a\u95ee\u9898. Returns: Name Type Description MiraiEvent MiraiEvent \u5df2\u7ecf\u88ab\u5e8f\u5217\u5316\u7684\u4e8b\u4ef6 Source code in graia/ariadne/adapter/__init__.py 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 def build_event ( self , data : dict ) -> MiraiEvent : \"\"\" \u4ece\u5c1a\u672a\u660e\u786e\u6307\u5b9a\u4e8b\u4ef6\u7c7b\u578b\u7684\u5bf9\u8c61\u4e2d\u83b7\u53d6\u4e8b\u4ef6\u7684\u5b9a\u4e49, \u5e76\u8fdb\u884c\u89e3\u6790 Args: data (dict): \u7528 dict \u8868\u793a\u7684\u5e8f\u5217\u5316\u6001\u4e8b\u4ef6, \u5e94\u5305\u542b\u6709\u5b57\u6bb5 `type` \u4ee5\u4f9b\u5206\u6790\u4e8b\u4ef6\u5b9a\u4e49. Raises: InvalidArgument: \u76ee\u6807\u5bf9\u8c61\u4e2d\u4e0d\u5305\u542b\u5b57\u6bb5 `type` ValueError: \u6ca1\u6709\u627e\u5230\u5bf9\u5e94\u7684\u5b57\u6bb5, \u901a\u5e38\u7684, \u8fd9\u610f\u5473\u7740\u5e94\u7528\u83b7\u53d6\u5230\u4e86\u4e00\u4e2a\u5c1a\u672a\u88ab\u5b9a\u4e49\u7684\u4e8b\u4ef6, \u8bf7\u62a5\u544a\u95ee\u9898. Returns: MiraiEvent: \u5df2\u7ecf\u88ab\u5e8f\u5217\u5316\u7684\u4e8b\u4ef6 \"\"\" event_type : Optional [ str ] = data . get ( \"type\" ) if not event_type or not isinstance ( event_type , str ): raise InvalidArgument ( \"Unable to find 'type' field for automatic parsing\" , data ) event_class : Optional [ MiraiEvent ] = self . broadcast . findEvent ( event_type ) # type: ignore if not event_class : logger . error ( \"An event is not recognized! Please report with your log to help us diagnose.\" ) raise ValueError ( f \"Unable to find event: { event_type } \" , data ) data = { k : v for k , v in data . items () if k != \"type\" } return event_class . parse_obj ( data ) call_api abstractmethod async \ud83d\udd17 call_api ( action : str , method : CallMethod , data : Optional [ Union [ Dict [ str , Any ], str , FormData ]] = None ) -> Dict [ Any , Any ] \u8c03\u7528 API Parameters: Name Type Description Default action str API \u52a8\u4f5c\u540d, \u7528\u659c\u6760\u5206\u5272 required method CallMethod \u8c03\u7528\u65b9\u6cd5 required data Optional [ Union [ Dict [ str , Any ], str , FormData ]] \u8c03\u7528\u6570\u636e. Defaults to None. None Returns: Name Type Description dict Dict [ Any , Any ] API \u8fd4\u56de\u7684\u6570\u636e, \u4e3a json \u517c\u5bb9\u683c\u5f0f Source code in graia/ariadne/adapter/__init__.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 @abc . abstractmethod async def call_api ( self , action : str , method : CallMethod , data : Optional [ Union [ Dict [ str , Any ], str , FormData ]] = None , ) -> Dict [ Any , Any ]: \"\"\"\u8c03\u7528 API Args: action (str): API \u52a8\u4f5c\u540d, \u7528\u659c\u6760\u5206\u5272 method (CallMethod): \u8c03\u7528\u65b9\u6cd5 data (Optional[Union[Dict[str, Any], str, FormData]], optional): \u8c03\u7528\u6570\u636e. Defaults to None. Returns: dict: API \u8fd4\u56de\u7684\u6570\u636e, \u4e3a json \u517c\u5bb9\u683c\u5f0f \"\"\" ... fetch_cycle abstractmethod async \ud83d\udd17 fetch_cycle () \u5faa\u73af\u83b7\u53d6\u4e8b\u4ef6, \u653e\u5165 event_queue \u4e2d Source code in graia/ariadne/adapter/__init__.py 94 95 96 97 @abc . abstractmethod async def fetch_cycle ( self ): \"\"\"\u5faa\u73af\u83b7\u53d6\u4e8b\u4ef6, \u653e\u5165 event_queue \u4e2d\"\"\" ... start async \ud83d\udd17 start () \u542f\u52a8 Adapter Source code in graia/ariadne/adapter/__init__.py 59 60 61 62 63 64 65 66 67 68 async def start ( self ): \"\"\"\u542f\u52a8 Adapter\"\"\" if not self . running : self . running = True self . event_queue = Queue () self . fetch_task = asyncio . create_task ( self . fetch_cycle ()) if self . mirai_session . single_mode : self . connected . set ( True ) if \"reverse\" not in self . tags : await self . connected . wait ( True ) stop async \ud83d\udd17 stop () \u505c\u6b62 Adapter Source code in graia/ariadne/adapter/__init__.py 99 100 101 102 103 104 105 async def stop ( self ): \"\"\"\u505c\u6b62 Adapter\"\"\" self . running = False if self . fetch_task : await self . fetch_task logger . success ( \"Event fetch task completed.\" ) self . fetch_task = None DebugAdapter \ud83d\udd17 Bases: DefaultAdapter \u8c03\u8bd5 Adapter Source code in graia/ariadne/adapter/__init__.py 115 116 117 118 119 120 121 class DebugAdapter ( DefaultAdapter ): \"\"\"\u8c03\u8bd5 Adapter\"\"\" def build_event ( self , data : dict ) -> MiraiEvent : event = super () . build_event ( data ) logger . debug ( event ) return event","title":"adapter"},{"location":"refs/graia/ariadne/adapter/#graia.ariadne.adapter.Adapter","text":"Bases: abc . ABC Source code in graia/ariadne/adapter/__init__.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 class Adapter ( abc . ABC ): tags : FrozenSet [ str ] = frozenset ([ \"abstract\" ]) def __init__ ( self , broadcast : Broadcast , mirai_session : MiraiSession ) -> None : \"\"\"\u521d\u59cb\u5316 Adapter. Args: broadcast (Broadcast): \u5e7f\u64ad\u7cfb\u7edf mirai_session (MiraiSession): MiraiSession \u5b9e\u4f8b \"\"\" self . broadcast : Broadcast = broadcast self . running : bool = False self . mirai_session : MiraiSession = mirai_session self . fetch_task : Optional [ Task ] = None self . call_task : Optional [ Task ] = None self . session : Optional [ ClientSession ] = None self . event_queue : Optional [ Queue [ MiraiEvent ]] = None self . connected : AsyncSignal [ bool ] = AsyncSignal ( False ) if \"abstract\" in self . tags : raise TypeError ( \"Adapter is abstract, cannot be instantiated.\" ) @abc . abstractmethod async def call_api ( self , action : str , method : CallMethod , data : Optional [ Union [ Dict [ str , Any ], str , FormData ]] = None , ) -> Dict [ Any , Any ]: \"\"\"\u8c03\u7528 API Args: action (str): API \u52a8\u4f5c\u540d, \u7528\u659c\u6760\u5206\u5272 method (CallMethod): \u8c03\u7528\u65b9\u6cd5 data (Optional[Union[Dict[str, Any], str, FormData]], optional): \u8c03\u7528\u6570\u636e. Defaults to None. Returns: dict: API \u8fd4\u56de\u7684\u6570\u636e, \u4e3a json \u517c\u5bb9\u683c\u5f0f \"\"\" ... async def start ( self ): \"\"\"\u542f\u52a8 Adapter\"\"\" if not self . running : self . running = True self . event_queue = Queue () self . fetch_task = asyncio . create_task ( self . fetch_cycle ()) if self . mirai_session . single_mode : self . connected . set ( True ) if \"reverse\" not in self . tags : await self . connected . wait ( True ) def build_event ( self , data : dict ) -> MiraiEvent : \"\"\" \u4ece\u5c1a\u672a\u660e\u786e\u6307\u5b9a\u4e8b\u4ef6\u7c7b\u578b\u7684\u5bf9\u8c61\u4e2d\u83b7\u53d6\u4e8b\u4ef6\u7684\u5b9a\u4e49, \u5e76\u8fdb\u884c\u89e3\u6790 Args: data (dict): \u7528 dict \u8868\u793a\u7684\u5e8f\u5217\u5316\u6001\u4e8b\u4ef6, \u5e94\u5305\u542b\u6709\u5b57\u6bb5 `type` \u4ee5\u4f9b\u5206\u6790\u4e8b\u4ef6\u5b9a\u4e49. Raises: InvalidArgument: \u76ee\u6807\u5bf9\u8c61\u4e2d\u4e0d\u5305\u542b\u5b57\u6bb5 `type` ValueError: \u6ca1\u6709\u627e\u5230\u5bf9\u5e94\u7684\u5b57\u6bb5, \u901a\u5e38\u7684, \u8fd9\u610f\u5473\u7740\u5e94\u7528\u83b7\u53d6\u5230\u4e86\u4e00\u4e2a\u5c1a\u672a\u88ab\u5b9a\u4e49\u7684\u4e8b\u4ef6, \u8bf7\u62a5\u544a\u95ee\u9898. Returns: MiraiEvent: \u5df2\u7ecf\u88ab\u5e8f\u5217\u5316\u7684\u4e8b\u4ef6 \"\"\" event_type : Optional [ str ] = data . get ( \"type\" ) if not event_type or not isinstance ( event_type , str ): raise InvalidArgument ( \"Unable to find 'type' field for automatic parsing\" , data ) event_class : Optional [ MiraiEvent ] = self . broadcast . findEvent ( event_type ) # type: ignore if not event_class : logger . error ( \"An event is not recognized! Please report with your log to help us diagnose.\" ) raise ValueError ( f \"Unable to find event: { event_type } \" , data ) data = { k : v for k , v in data . items () if k != \"type\" } return event_class . parse_obj ( data ) @abc . abstractmethod async def fetch_cycle ( self ): \"\"\"\u5faa\u73af\u83b7\u53d6\u4e8b\u4ef6, \u653e\u5165 event_queue \u4e2d\"\"\" ... async def stop ( self ): \"\"\"\u505c\u6b62 Adapter\"\"\" self . running = False if self . fetch_task : await self . fetch_task logger . success ( \"Event fetch task completed.\" ) self . fetch_task = None","title":"Adapter"},{"location":"refs/graia/ariadne/adapter/#graia.ariadne.adapter.Adapter.__init__","text":"__init__ ( broadcast : Broadcast , mirai_session : MiraiSession ) -> None \u521d\u59cb\u5316 Adapter. Parameters: Name Type Description Default broadcast Broadcast \u5e7f\u64ad\u7cfb\u7edf required mirai_session MiraiSession MiraiSession \u5b9e\u4f8b required Source code in graia/ariadne/adapter/__init__.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 def __init__ ( self , broadcast : Broadcast , mirai_session : MiraiSession ) -> None : \"\"\"\u521d\u59cb\u5316 Adapter. Args: broadcast (Broadcast): \u5e7f\u64ad\u7cfb\u7edf mirai_session (MiraiSession): MiraiSession \u5b9e\u4f8b \"\"\" self . broadcast : Broadcast = broadcast self . running : bool = False self . mirai_session : MiraiSession = mirai_session self . fetch_task : Optional [ Task ] = None self . call_task : Optional [ Task ] = None self . session : Optional [ ClientSession ] = None self . event_queue : Optional [ Queue [ MiraiEvent ]] = None self . connected : AsyncSignal [ bool ] = AsyncSignal ( False ) if \"abstract\" in self . tags : raise TypeError ( \"Adapter is abstract, cannot be instantiated.\" )","title":"__init__()"},{"location":"refs/graia/ariadne/adapter/#graia.ariadne.adapter.Adapter.build_event","text":"build_event ( data : dict ) -> MiraiEvent \u4ece\u5c1a\u672a\u660e\u786e\u6307\u5b9a\u4e8b\u4ef6\u7c7b\u578b\u7684\u5bf9\u8c61\u4e2d\u83b7\u53d6\u4e8b\u4ef6\u7684\u5b9a\u4e49, \u5e76\u8fdb\u884c\u89e3\u6790 Parameters: Name Type Description Default data dict \u7528 dict \u8868\u793a\u7684\u5e8f\u5217\u5316\u6001\u4e8b\u4ef6, \u5e94\u5305\u542b\u6709\u5b57\u6bb5 type \u4ee5\u4f9b\u5206\u6790\u4e8b\u4ef6\u5b9a\u4e49. required Raises: Type Description InvalidArgument \u76ee\u6807\u5bf9\u8c61\u4e2d\u4e0d\u5305\u542b\u5b57\u6bb5 type ValueError \u6ca1\u6709\u627e\u5230\u5bf9\u5e94\u7684\u5b57\u6bb5, \u901a\u5e38\u7684, \u8fd9\u610f\u5473\u7740\u5e94\u7528\u83b7\u53d6\u5230\u4e86\u4e00\u4e2a\u5c1a\u672a\u88ab\u5b9a\u4e49\u7684\u4e8b\u4ef6, \u8bf7\u62a5\u544a\u95ee\u9898. Returns: Name Type Description MiraiEvent MiraiEvent \u5df2\u7ecf\u88ab\u5e8f\u5217\u5316\u7684\u4e8b\u4ef6 Source code in graia/ariadne/adapter/__init__.py 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 def build_event ( self , data : dict ) -> MiraiEvent : \"\"\" \u4ece\u5c1a\u672a\u660e\u786e\u6307\u5b9a\u4e8b\u4ef6\u7c7b\u578b\u7684\u5bf9\u8c61\u4e2d\u83b7\u53d6\u4e8b\u4ef6\u7684\u5b9a\u4e49, \u5e76\u8fdb\u884c\u89e3\u6790 Args: data (dict): \u7528 dict \u8868\u793a\u7684\u5e8f\u5217\u5316\u6001\u4e8b\u4ef6, \u5e94\u5305\u542b\u6709\u5b57\u6bb5 `type` \u4ee5\u4f9b\u5206\u6790\u4e8b\u4ef6\u5b9a\u4e49. Raises: InvalidArgument: \u76ee\u6807\u5bf9\u8c61\u4e2d\u4e0d\u5305\u542b\u5b57\u6bb5 `type` ValueError: \u6ca1\u6709\u627e\u5230\u5bf9\u5e94\u7684\u5b57\u6bb5, \u901a\u5e38\u7684, \u8fd9\u610f\u5473\u7740\u5e94\u7528\u83b7\u53d6\u5230\u4e86\u4e00\u4e2a\u5c1a\u672a\u88ab\u5b9a\u4e49\u7684\u4e8b\u4ef6, \u8bf7\u62a5\u544a\u95ee\u9898. Returns: MiraiEvent: \u5df2\u7ecf\u88ab\u5e8f\u5217\u5316\u7684\u4e8b\u4ef6 \"\"\" event_type : Optional [ str ] = data . get ( \"type\" ) if not event_type or not isinstance ( event_type , str ): raise InvalidArgument ( \"Unable to find 'type' field for automatic parsing\" , data ) event_class : Optional [ MiraiEvent ] = self . broadcast . findEvent ( event_type ) # type: ignore if not event_class : logger . error ( \"An event is not recognized! Please report with your log to help us diagnose.\" ) raise ValueError ( f \"Unable to find event: { event_type } \" , data ) data = { k : v for k , v in data . items () if k != \"type\" } return event_class . parse_obj ( data )","title":"build_event()"},{"location":"refs/graia/ariadne/adapter/#graia.ariadne.adapter.Adapter.call_api","text":"call_api ( action : str , method : CallMethod , data : Optional [ Union [ Dict [ str , Any ], str , FormData ]] = None ) -> Dict [ Any , Any ] \u8c03\u7528 API Parameters: Name Type Description Default action str API \u52a8\u4f5c\u540d, \u7528\u659c\u6760\u5206\u5272 required method CallMethod \u8c03\u7528\u65b9\u6cd5 required data Optional [ Union [ Dict [ str , Any ], str , FormData ]] \u8c03\u7528\u6570\u636e. Defaults to None. None Returns: Name Type Description dict Dict [ Any , Any ] API \u8fd4\u56de\u7684\u6570\u636e, \u4e3a json \u517c\u5bb9\u683c\u5f0f Source code in graia/ariadne/adapter/__init__.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 @abc . abstractmethod async def call_api ( self , action : str , method : CallMethod , data : Optional [ Union [ Dict [ str , Any ], str , FormData ]] = None , ) -> Dict [ Any , Any ]: \"\"\"\u8c03\u7528 API Args: action (str): API \u52a8\u4f5c\u540d, \u7528\u659c\u6760\u5206\u5272 method (CallMethod): \u8c03\u7528\u65b9\u6cd5 data (Optional[Union[Dict[str, Any], str, FormData]], optional): \u8c03\u7528\u6570\u636e. Defaults to None. Returns: dict: API \u8fd4\u56de\u7684\u6570\u636e, \u4e3a json \u517c\u5bb9\u683c\u5f0f \"\"\" ...","title":"call_api()"},{"location":"refs/graia/ariadne/adapter/#graia.ariadne.adapter.Adapter.fetch_cycle","text":"fetch_cycle () \u5faa\u73af\u83b7\u53d6\u4e8b\u4ef6, \u653e\u5165 event_queue \u4e2d Source code in graia/ariadne/adapter/__init__.py 94 95 96 97 @abc . abstractmethod async def fetch_cycle ( self ): \"\"\"\u5faa\u73af\u83b7\u53d6\u4e8b\u4ef6, \u653e\u5165 event_queue \u4e2d\"\"\" ...","title":"fetch_cycle()"},{"location":"refs/graia/ariadne/adapter/#graia.ariadne.adapter.Adapter.start","text":"start () \u542f\u52a8 Adapter Source code in graia/ariadne/adapter/__init__.py 59 60 61 62 63 64 65 66 67 68 async def start ( self ): \"\"\"\u542f\u52a8 Adapter\"\"\" if not self . running : self . running = True self . event_queue = Queue () self . fetch_task = asyncio . create_task ( self . fetch_cycle ()) if self . mirai_session . single_mode : self . connected . set ( True ) if \"reverse\" not in self . tags : await self . connected . wait ( True )","title":"start()"},{"location":"refs/graia/ariadne/adapter/#graia.ariadne.adapter.Adapter.stop","text":"stop () \u505c\u6b62 Adapter Source code in graia/ariadne/adapter/__init__.py 99 100 101 102 103 104 105 async def stop ( self ): \"\"\"\u505c\u6b62 Adapter\"\"\" self . running = False if self . fetch_task : await self . fetch_task logger . success ( \"Event fetch task completed.\" ) self . fetch_task = None","title":"stop()"},{"location":"refs/graia/ariadne/adapter/#graia.ariadne.adapter.DebugAdapter","text":"Bases: DefaultAdapter \u8c03\u8bd5 Adapter Source code in graia/ariadne/adapter/__init__.py 115 116 117 118 119 120 121 class DebugAdapter ( DefaultAdapter ): \"\"\"\u8c03\u8bd5 Adapter\"\"\" def build_event ( self , data : dict ) -> MiraiEvent : event = super () . build_event ( data ) logger . debug ( event ) return event","title":"DebugAdapter"},{"location":"refs/graia/ariadne/adapter/forward/","text":"\u6b63\u5411 Adapter, \u4f5c\u4e3a\u5ba2\u6237\u7aef\u8fde\u63a5\u81f3 mirai-api-http ComposeForwardAdapter \ud83d\udd17 Bases: WebsocketAdapter \u6b63\u5411 HTTP \u4e0e Websocket \u7684\u7ec4\u5408\u9002\u914d\u5668. Source code in graia/ariadne/adapter/forward.py 275 276 277 278 279 280 class ComposeForwardAdapter ( WebsocketAdapter ): \"\"\"\u6b63\u5411 HTTP \u4e0e Websocket \u7684\u7ec4\u5408\u9002\u914d\u5668.\"\"\" tags : FrozenSet [ str ] = frozenset ([ \"websocket\" , \"http\" , \"forward\" ]) call_api = HttpAdapter . call_api HttpAdapter \ud83d\udd17 Bases: Adapter \u4ec5\u4f7f\u7528\u6b63\u5411 HTTP \u7684\u9002\u914d\u5668, \u91c7\u7528\u77ed\u8f6e\u8be2\u63a5\u6536\u4e8b\u4ef6/\u6d88\u606f. Source code in graia/ariadne/adapter/forward.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 class HttpAdapter ( Adapter ): \"\"\" \u4ec5\u4f7f\u7528\u6b63\u5411 HTTP \u7684\u9002\u914d\u5668, \u91c7\u7528\u77ed\u8f6e\u8be2\u63a5\u6536\u4e8b\u4ef6/\u6d88\u606f. \"\"\" tags : FrozenSet [ str ] = frozenset ([ \"http\" , \"forward\" ]) def __init__ ( self , broadcast : Broadcast , mirai_session : MiraiSession , fetch_interval : float = 0.5 , count : int = 10 , ) -> None : \"\"\"\u521d\u59cb\u5316 HttpAdapter Args: broadcast (Broadcast): \u5e7f\u64ad\u7cfb\u7edf mirai_session (MiraiSession): MiraiSession \u5b9e\u4f8b fetch_interval (float, optional): \u6293\u53d6\u4e8b\u4ef6\u95f4\u9694(s). Defaults to 0.5. count (int, optional): \u5355\u6b21\u6293\u53d6\u4e8b\u4ef6\u6570\u76ee. Defaults to 10. \"\"\" super () . __init__ ( broadcast , mirai_session ) self . fetch_interval = fetch_interval self . count = count async def authenticate ( self ) -> None : \"\"\"\u5728 mira-api-http \u8fdb\u884c\u8ba4\u8bc1\u5e76\u5b58\u5165 MiraiSession\"\"\" if not self . mirai_session . session_key : async with self . session . post ( self . mirai_session . url_gen ( \"verify\" ), data = json . dumps ({ \"verifyKey\" : self . mirai_session . verify_key }), ) as response : response . raise_for_status () session_key : dict = ( await response . json ())[ \"session\" ] async with self . session . post ( self . mirai_session . url_gen ( \"bind\" ), data = json . dumps ({ \"sessionKey\" : session_key , \"qq\" : self . mirai_session . account }), ) as response : response . raise_for_status () validate_response ( await response . json ()) self . mirai_session . session_key = session_key logger . success ( \"Successfully got session key\" ) self . connected . set ( True ) async def fetch_cycle ( self ) -> None : async with ClientSession () as session : self . session = session await self . authenticate () while self . running : await asyncio . sleep ( self . fetch_interval ) async with self . session . get ( URL ( self . mirai_session . url_gen ( \"fetchMessage\" )) . with_query ( { \"sessionKey\" : self . mirai_session . session_key , \"count\" : self . count } ) ) as response : response . raise_for_status () resp_json : dict = await response . json () resp : List [ dict ] = validate_response ( resp_json ) for data in resp : await self . event_queue . put ( self . build_event ( data )) self . connected . set ( False ) self . mirai_session . session_key = None async def call_api ( self , action : str , method : CallMethod , data : Optional [ Union [ Dict [ str , Any ], str , FormData ]] = None , ) -> Union [ dict , list ]: await self . connected . wait ( True ) if method in ( CallMethod . GET , CallMethod . RESTGET ): if isinstance ( data , str ): data = json . loads ( data ) async with self . session . get ( URL ( self . mirai_session . url_gen ( action )) . with_query ( data )) as response : response . raise_for_status () resp_json : dict = await response . json () elif method in ( CallMethod . POST , CallMethod . RESTPOST ): if not isinstance ( data , str ): data = json . dumps ( data , cls = DatetimeEncoder ) async with self . session . post ( self . mirai_session . url_gen ( action ), data = data ) as response : response . raise_for_status () resp_json : dict = await response . json () else : # MULTIPART if isinstance ( data , FormData ): form = data elif isinstance ( data , dict ): form = FormData ( quote_fields = False ) for k , v in data . items (): v : Union [ str , bytes , Tuple [ Any , dict ]] if isinstance ( v , tuple ): form . add_field ( k , v [ 0 ], ** v [ 1 ]) else : form . add_field ( k , v ) async with self . session . post ( self . mirai_session . url_gen ( action ), data = form ) as response : response . raise_for_status () resp_json : dict = await response . json () val = validate_response ( resp_json ) if not isinstance ( val , Exception ): return val if isinstance ( val , InvalidSession ): self . connected . set ( False ) self . mirai_session . session_key = None raise val __init__ \ud83d\udd17 __init__ ( broadcast : Broadcast , mirai_session : MiraiSession , fetch_interval : float = 0.5 , count : int = 10 ) -> None \u521d\u59cb\u5316 HttpAdapter Parameters: Name Type Description Default broadcast Broadcast \u5e7f\u64ad\u7cfb\u7edf required mirai_session MiraiSession MiraiSession \u5b9e\u4f8b required fetch_interval float \u6293\u53d6\u4e8b\u4ef6\u95f4\u9694(s). Defaults to 0.5. 0.5 count int \u5355\u6b21\u6293\u53d6\u4e8b\u4ef6\u6570\u76ee. Defaults to 10. 10 Source code in graia/ariadne/adapter/forward.py 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 def __init__ ( self , broadcast : Broadcast , mirai_session : MiraiSession , fetch_interval : float = 0.5 , count : int = 10 , ) -> None : \"\"\"\u521d\u59cb\u5316 HttpAdapter Args: broadcast (Broadcast): \u5e7f\u64ad\u7cfb\u7edf mirai_session (MiraiSession): MiraiSession \u5b9e\u4f8b fetch_interval (float, optional): \u6293\u53d6\u4e8b\u4ef6\u95f4\u9694(s). Defaults to 0.5. count (int, optional): \u5355\u6b21\u6293\u53d6\u4e8b\u4ef6\u6570\u76ee. Defaults to 10. \"\"\" super () . __init__ ( broadcast , mirai_session ) self . fetch_interval = fetch_interval self . count = count authenticate async \ud83d\udd17 authenticate () -> None \u5728 mira-api-http \u8fdb\u884c\u8ba4\u8bc1\u5e76\u5b58\u5165 MiraiSession Source code in graia/ariadne/adapter/forward.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 async def authenticate ( self ) -> None : \"\"\"\u5728 mira-api-http \u8fdb\u884c\u8ba4\u8bc1\u5e76\u5b58\u5165 MiraiSession\"\"\" if not self . mirai_session . session_key : async with self . session . post ( self . mirai_session . url_gen ( \"verify\" ), data = json . dumps ({ \"verifyKey\" : self . mirai_session . verify_key }), ) as response : response . raise_for_status () session_key : dict = ( await response . json ())[ \"session\" ] async with self . session . post ( self . mirai_session . url_gen ( \"bind\" ), data = json . dumps ({ \"sessionKey\" : session_key , \"qq\" : self . mirai_session . account }), ) as response : response . raise_for_status () validate_response ( await response . json ()) self . mirai_session . session_key = session_key logger . success ( \"Successfully got session key\" ) self . connected . set ( True ) WebsocketAdapter \ud83d\udd17 Bases: Adapter \u6b63\u5411 Websocket \u9002\u914d\u5668. Source code in graia/ariadne/adapter/forward.pyclass WebsocketAdapter ( Adapter ): \"\"\" \u6b63\u5411 Websocket \u9002\u914d\u5668. \"\"\" tags : FrozenSet [ str ] = frozenset ([ \"websocket\" , \"forward\" ]) def __init__ ( self , broadcast : Broadcast , mirai_session : MiraiSession , ping : bool = True , log : bool = False ) -> None : \"\"\"\u521d\u59cb\u5316 WebsocketAdapter Args: broadcast (Broadcast): \u5e7f\u64ad\u7cfb\u7edf mirai_session (MiraiSession): MiraiSession \u5b9e\u4f8b ping (bool, optional): \u662f\u5426\u53d1\u9001 ping \u6d88\u606f. Defaults to True. log (bool, optional): \u662f\u5426\u8bb0\u5f55\u7f51\u7edc\u65e5\u5fd7. Defaults to False. \"\"\" super () . __init__ ( broadcast , mirai_session ) self . ping = ping self . ping_task : Optional [ Task ] = None self . websocket : Optional [ ClientWebSocketResponse ] = None self . query_dict = { \"verifyKey\" : mirai_session . verify_key } self . future_map : Dict [ str , asyncio . Future ] = {} self . log = log if not mirai_session . single_mode : self . query_dict [ \"qq\" ] = mirai_session . account async def ws_ping ( self , interval : float = 30.0 ) -> None : \"\"\"\u5411 Mirai API HTTP \u7684 WebsocketAdapter \u5faa\u73af\u53d1\u9001 ping. Args: interval (float, optional): ping \u95f4\u9694 (s). \u9ed8\u8ba4 30.0. \"\"\" while self . running : try : try : await self . websocket . ping () if self . log : logger . debug ( \"websocket: ping\" ) except Exception as e : logger . exception ( f \"websocket: ping failed: { e !r} \" ) else : if self . log : logger . debug ( f \"websocket: ping success, delay { interval } s\" ) await asyncio . sleep ( interval ) except asyncio . CancelledError : if self . log : logger . debug ( \"websocket: pinger exit\" ) break async def call_api ( self , action : str , method : CallMethod , data : Optional [ Union [ Dict [ str , Any ], str , FormData ]] = None ) -> Union [ dict , list ]: await self . connected . wait ( True ) future = self . broadcast . loop . create_future () self . future_map [ str ( id ( future ))] = future content = { \"syncId\" : str ( id ( future )), \"command\" : action . replace ( \"/\" , \"_\" ), \"content\" : data , } if method == CallMethod . RESTGET : content [ \"subCommand\" ] = \"get\" elif method == CallMethod . RESTPOST : content [ \"subCommand\" ] = \"update\" elif method == CallMethod . MULTIPART : future . set_exception ( NotImplementedError ( f \"Unsupported operation for ReverseWebsocketAdapter: { method } \" ) ), await self . websocket . send_str ( json . dumps ( content , cls = DatetimeEncoder )) return await future async def fetch_cycle ( self ) -> None : self . running = True async with ClientSession () as session : self . session = session try : async with self . session . ws_connect ( str ( URL ( self . mirai_session . url_gen ( \"all\" )) . with_query ( self . query_dict )), autoping = False , ) as connection : logger . info ( \"websocket: connected\" ) self . websocket = connection if self . ping : self . ping_task = self . broadcast . loop . create_task ( self . ws_ping (), name = \"ariadne_adapter_ws_ping\" ) logger . info ( \"websocket: ping task created\" ) async for ws_message in yield_with_timeout ( connection . receive , lambda : self . running ): if ws_message . type is WSMsgType . TEXT : raw_data : dict = json . loads ( ws_message . data ) sync_id : int = int ( raw_data [ \"syncId\" ] or - 1 ) data : dict = raw_data [ \"data\" ] if \"session\" in data : self . mirai_session . session_key = data [ \"session\" ] logger . success ( \"Successfully got session key\" ) self . connected . set ( True ) continue if sync_id in self . future_map : fut = self . future_map . pop ( str ( sync_id )) res = validate_response ( data ) if isinstance ( res , Exception ): fut . set_exception ( res ) else : fut . set_result ( res ) else : await self . event_queue . put ( self . build_event ( data )) elif ws_message . type is WSMsgType . CLOSED : logger . warning ( \"websocket: connection has been closed.\" ) raise WebSocketError ( 1 , \"connection closed\" ) elif ws_message . type is WSMsgType . PONG : if self . log : logger . debug ( \"websocket: received pong\" ) else : logger . warning ( f \"websocket: unknown message type - { ws_message . type } \" ) except CancelledError : pass except ClientConnectionError as e : logger . error ( f \" { e . __class__ . __name__ } : { e } \" ) except Exception as e : logger . exception ( e ) finally : if self . ping_task : self . ping_task . cancel () self . ping_task = None if self . log : logger . debug ( \"websocket: ping task complete\" ) if self . websocket : logger . info ( \"websocket: disconnected\" ) self . running = False self . connected . set ( False ) self . mirai_session . session_key = None self . websocket = None self . session = None __init__ \ud83d\udd17 __init__ ( broadcast : Broadcast , mirai_session : MiraiSession , ping : bool = True , log : bool = False ) -> None \u521d\u59cb\u5316 WebsocketAdapter Parameters: Name Type Description Default broadcast Broadcast \u5e7f\u64ad\u7cfb\u7edf required mirai_session MiraiSession MiraiSession \u5b9e\u4f8b required ping bool \u662f\u5426\u53d1\u9001 ping \u6d88\u606f. Defaults to True. True log bool \u662f\u5426\u8bb0\u5f55\u7f51\u7edc\u65e5\u5fd7. Defaults to False. False Source code in graia/ariadne/adapter/forward.py 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 def __init__ ( self , broadcast : Broadcast , mirai_session : MiraiSession , ping : bool = True , log : bool = False ) -> None : \"\"\"\u521d\u59cb\u5316 WebsocketAdapter Args: broadcast (Broadcast): \u5e7f\u64ad\u7cfb\u7edf mirai_session (MiraiSession): MiraiSession \u5b9e\u4f8b ping (bool, optional): \u662f\u5426\u53d1\u9001 ping \u6d88\u606f. Defaults to True. log (bool, optional): \u662f\u5426\u8bb0\u5f55\u7f51\u7edc\u65e5\u5fd7. Defaults to False. \"\"\" super () . __init__ ( broadcast , mirai_session ) self . ping = ping self . ping_task : Optional [ Task ] = None self . websocket : Optional [ ClientWebSocketResponse ] = None self . query_dict = { \"verifyKey\" : mirai_session . verify_key } self . future_map : Dict [ str , asyncio . Future ] = {} self . log = log if not mirai_session . single_mode : self . query_dict [ \"qq\" ] = mirai_session . account ws_ping async \ud83d\udd17 ws_ping ( interval : float = 30.0 ) -> None \u5411 Mirai API HTTP \u7684 WebsocketAdapter \u5faa\u73af\u53d1\u9001 ping. Parameters: Name Type Description Default interval float ping \u95f4\u9694 (s). \u9ed8\u8ba4 30.0. 30.0 Source code in graia/ariadne/adapter/forward.py 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 async def ws_ping ( self , interval : float = 30.0 ) -> None : \"\"\"\u5411 Mirai API HTTP \u7684 WebsocketAdapter \u5faa\u73af\u53d1\u9001 ping. Args: interval (float, optional): ping \u95f4\u9694 (s). \u9ed8\u8ba4 30.0. \"\"\" while self . running : try : try : await self . websocket . ping () if self . log : logger . debug ( \"websocket: ping\" ) except Exception as e : logger . exception ( f \"websocket: ping failed: { e !r} \" ) else : if self . log : logger . debug ( f \"websocket: ping success, delay { interval } s\" ) await asyncio . sleep ( interval ) except asyncio . CancelledError : if self . log : logger . debug ( \"websocket: pinger exit\" ) break","title":"forward"},{"location":"refs/graia/ariadne/adapter/forward/#graia.ariadne.adapter.forward.ComposeForwardAdapter","text":"Bases: WebsocketAdapter \u6b63\u5411 HTTP \u4e0e Websocket \u7684\u7ec4\u5408\u9002\u914d\u5668. Source code in graia/ariadne/adapter/forward.py 275 276 277 278 279 280 class ComposeForwardAdapter ( WebsocketAdapter ): \"\"\"\u6b63\u5411 HTTP \u4e0e Websocket \u7684\u7ec4\u5408\u9002\u914d\u5668.\"\"\" tags : FrozenSet [ str ] = frozenset ([ \"websocket\" , \"http\" , \"forward\" ]) call_api = HttpAdapter . call_api","title":"ComposeForwardAdapter"},{"location":"refs/graia/ariadne/adapter/forward/#graia.ariadne.adapter.forward.HttpAdapter","text":"Bases: Adapter \u4ec5\u4f7f\u7528\u6b63\u5411 HTTP \u7684\u9002\u914d\u5668, \u91c7\u7528\u77ed\u8f6e\u8be2\u63a5\u6536\u4e8b\u4ef6/\u6d88\u606f. Source code in graia/ariadne/adapter/forward.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 class HttpAdapter ( Adapter ): \"\"\" \u4ec5\u4f7f\u7528\u6b63\u5411 HTTP \u7684\u9002\u914d\u5668, \u91c7\u7528\u77ed\u8f6e\u8be2\u63a5\u6536\u4e8b\u4ef6/\u6d88\u606f. \"\"\" tags : FrozenSet [ str ] = frozenset ([ \"http\" , \"forward\" ]) def __init__ ( self , broadcast : Broadcast , mirai_session : MiraiSession , fetch_interval : float = 0.5 , count : int = 10 , ) -> None : \"\"\"\u521d\u59cb\u5316 HttpAdapter Args: broadcast (Broadcast): \u5e7f\u64ad\u7cfb\u7edf mirai_session (MiraiSession): MiraiSession \u5b9e\u4f8b fetch_interval (float, optional): \u6293\u53d6\u4e8b\u4ef6\u95f4\u9694(s). Defaults to 0.5. count (int, optional): \u5355\u6b21\u6293\u53d6\u4e8b\u4ef6\u6570\u76ee. Defaults to 10. \"\"\" super () . __init__ ( broadcast , mirai_session ) self . fetch_interval = fetch_interval self . count = count async def authenticate ( self ) -> None : \"\"\"\u5728 mira-api-http \u8fdb\u884c\u8ba4\u8bc1\u5e76\u5b58\u5165 MiraiSession\"\"\" if not self . mirai_session . session_key : async with self . session . post ( self . mirai_session . url_gen ( \"verify\" ), data = json . dumps ({ \"verifyKey\" : self . mirai_session . verify_key }), ) as response : response . raise_for_status () session_key : dict = ( await response . json ())[ \"session\" ] async with self . session . post ( self . mirai_session . url_gen ( \"bind\" ), data = json . dumps ({ \"sessionKey\" : session_key , \"qq\" : self . mirai_session . account }), ) as response : response . raise_for_status () validate_response ( await response . json ()) self . mirai_session . session_key = session_key logger . success ( \"Successfully got session key\" ) self . connected . set ( True ) async def fetch_cycle ( self ) -> None : async with ClientSession () as session : self . session = session await self . authenticate () while self . running : await asyncio . sleep ( self . fetch_interval ) async with self . session . get ( URL ( self . mirai_session . url_gen ( \"fetchMessage\" )) . with_query ( { \"sessionKey\" : self . mirai_session . session_key , \"count\" : self . count } ) ) as response : response . raise_for_status () resp_json : dict = await response . json () resp : List [ dict ] = validate_response ( resp_json ) for data in resp : await self . event_queue . put ( self . build_event ( data )) self . connected . set ( False ) self . mirai_session . session_key = None async def call_api ( self , action : str , method : CallMethod , data : Optional [ Union [ Dict [ str , Any ], str , FormData ]] = None , ) -> Union [ dict , list ]: await self . connected . wait ( True ) if method in ( CallMethod . GET , CallMethod . RESTGET ): if isinstance ( data , str ): data = json . loads ( data ) async with self . session . get ( URL ( self . mirai_session . url_gen ( action )) . with_query ( data )) as response : response . raise_for_status () resp_json : dict = await response . json () elif method in ( CallMethod . POST , CallMethod . RESTPOST ): if not isinstance ( data , str ): data = json . dumps ( data , cls = DatetimeEncoder ) async with self . session . post ( self . mirai_session . url_gen ( action ), data = data ) as response : response . raise_for_status () resp_json : dict = await response . json () else : # MULTIPART if isinstance ( data , FormData ): form = data elif isinstance ( data , dict ): form = FormData ( quote_fields = False ) for k , v in data . items (): v : Union [ str , bytes , Tuple [ Any , dict ]] if isinstance ( v , tuple ): form . add_field ( k , v [ 0 ], ** v [ 1 ]) else : form . add_field ( k , v ) async with self . session . post ( self . mirai_session . url_gen ( action ), data = form ) as response : response . raise_for_status () resp_json : dict = await response . json () val = validate_response ( resp_json ) if not isinstance ( val , Exception ): return val if isinstance ( val , InvalidSession ): self . connected . set ( False ) self . mirai_session . session_key = None raise val","title":"HttpAdapter"},{"location":"refs/graia/ariadne/adapter/forward/#graia.ariadne.adapter.forward.HttpAdapter.__init__","text":"__init__ ( broadcast : Broadcast , mirai_session : MiraiSession , fetch_interval : float = 0.5 , count : int = 10 ) -> None \u521d\u59cb\u5316 HttpAdapter Parameters: Name Type Description Default broadcast Broadcast \u5e7f\u64ad\u7cfb\u7edf required mirai_session MiraiSession MiraiSession \u5b9e\u4f8b required fetch_interval float \u6293\u53d6\u4e8b\u4ef6\u95f4\u9694(s). Defaults to 0.5. 0.5 count int \u5355\u6b21\u6293\u53d6\u4e8b\u4ef6\u6570\u76ee. Defaults to 10. 10 Source code in graia/ariadne/adapter/forward.py 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 def __init__ ( self , broadcast : Broadcast , mirai_session : MiraiSession , fetch_interval : float = 0.5 , count : int = 10 , ) -> None : \"\"\"\u521d\u59cb\u5316 HttpAdapter Args: broadcast (Broadcast): \u5e7f\u64ad\u7cfb\u7edf mirai_session (MiraiSession): MiraiSession \u5b9e\u4f8b fetch_interval (float, optional): \u6293\u53d6\u4e8b\u4ef6\u95f4\u9694(s). Defaults to 0.5. count (int, optional): \u5355\u6b21\u6293\u53d6\u4e8b\u4ef6\u6570\u76ee. Defaults to 10. \"\"\" super () . __init__ ( broadcast , mirai_session ) self . fetch_interval = fetch_interval self . count = count","title":"__init__()"},{"location":"refs/graia/ariadne/adapter/forward/#graia.ariadne.adapter.forward.HttpAdapter.authenticate","text":"authenticate () -> None \u5728 mira-api-http \u8fdb\u884c\u8ba4\u8bc1\u5e76\u5b58\u5165 MiraiSession Source code in graia/ariadne/adapter/forward.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 async def authenticate ( self ) -> None : \"\"\"\u5728 mira-api-http \u8fdb\u884c\u8ba4\u8bc1\u5e76\u5b58\u5165 MiraiSession\"\"\" if not self . mirai_session . session_key : async with self . session . post ( self . mirai_session . url_gen ( \"verify\" ), data = json . dumps ({ \"verifyKey\" : self . mirai_session . verify_key }), ) as response : response . raise_for_status () session_key : dict = ( await response . json ())[ \"session\" ] async with self . session . post ( self . mirai_session . url_gen ( \"bind\" ), data = json . dumps ({ \"sessionKey\" : session_key , \"qq\" : self . mirai_session . account }), ) as response : response . raise_for_status () validate_response ( await response . json ()) self . mirai_session . session_key = session_key logger . success ( \"Successfully got session key\" ) self . connected . set ( True )","title":"authenticate()"},{"location":"refs/graia/ariadne/adapter/forward/#graia.ariadne.adapter.forward.WebsocketAdapter","text":"Bases: Adapter \u6b63\u5411 Websocket \u9002\u914d\u5668. Source code in graia/ariadne/adapter/forward.pyclass WebsocketAdapter ( Adapter ): \"\"\" \u6b63\u5411 Websocket \u9002\u914d\u5668. \"\"\" tags : FrozenSet [ str ] = frozenset ([ \"websocket\" , \"forward\" ]) def __init__ ( self , broadcast : Broadcast , mirai_session : MiraiSession , ping : bool = True , log : bool = False ) -> None : \"\"\"\u521d\u59cb\u5316 WebsocketAdapter Args: broadcast (Broadcast): \u5e7f\u64ad\u7cfb\u7edf mirai_session (MiraiSession): MiraiSession \u5b9e\u4f8b ping (bool, optional): \u662f\u5426\u53d1\u9001 ping \u6d88\u606f. Defaults to True. log (bool, optional): \u662f\u5426\u8bb0\u5f55\u7f51\u7edc\u65e5\u5fd7. Defaults to False. \"\"\" super () . __init__ ( broadcast , mirai_session ) self . ping = ping self . ping_task : Optional [ Task ] = None self . websocket : Optional [ ClientWebSocketResponse ] = None self . query_dict = { \"verifyKey\" : mirai_session . verify_key } self . future_map : Dict [ str , asyncio . Future ] = {} self . log = log if not mirai_session . single_mode : self . query_dict [ \"qq\" ] = mirai_session . account async def ws_ping ( self , interval : float = 30.0 ) -> None : \"\"\"\u5411 Mirai API HTTP \u7684 WebsocketAdapter \u5faa\u73af\u53d1\u9001 ping. Args: interval (float, optional): ping \u95f4\u9694 (s). \u9ed8\u8ba4 30.0. \"\"\" while self . running : try : try : await self . websocket . ping () if self . log : logger . debug ( \"websocket: ping\" ) except Exception as e : logger . exception ( f \"websocket: ping failed: { e !r} \" ) else : if self . log : logger . debug ( f \"websocket: ping success, delay { interval } s\" ) await asyncio . sleep ( interval ) except asyncio . CancelledError : if self . log : logger . debug ( \"websocket: pinger exit\" ) break async def call_api ( self , action : str , method : CallMethod , data : Optional [ Union [ Dict [ str , Any ], str , FormData ]] = None ) -> Union [ dict , list ]: await self . connected . wait ( True ) future = self . broadcast . loop . create_future () self . future_map [ str ( id ( future ))] = future content = { \"syncId\" : str ( id ( future )), \"command\" : action . replace ( \"/\" , \"_\" ), \"content\" : data , } if method == CallMethod . RESTGET : content [ \"subCommand\" ] = \"get\" elif method == CallMethod . RESTPOST : content [ \"subCommand\" ] = \"update\" elif method == CallMethod . MULTIPART : future . set_exception ( NotImplementedError ( f \"Unsupported operation for ReverseWebsocketAdapter: { method } \" ) ), await self . websocket . send_str ( json . dumps ( content , cls = DatetimeEncoder )) return await future async def fetch_cycle ( self ) -> None : self . running = True async with ClientSession () as session : self . session = session try : async with self . session . ws_connect ( str ( URL ( self . mirai_session . url_gen ( \"all\" )) . with_query ( self . query_dict )), autoping = False , ) as connection : logger . info ( \"websocket: connected\" ) self . websocket = connection if self . ping : self . ping_task = self . broadcast . loop . create_task ( self . ws_ping (), name = \"ariadne_adapter_ws_ping\" ) logger . info ( \"websocket: ping task created\" ) async for ws_message in yield_with_timeout ( connection . receive , lambda : self . running ): if ws_message . type is WSMsgType . TEXT : raw_data : dict = json . loads ( ws_message . data ) sync_id : int = int ( raw_data [ \"syncId\" ] or - 1 ) data : dict = raw_data [ \"data\" ] if \"session\" in data : self . mirai_session . session_key = data [ \"session\" ] logger . success ( \"Successfully got session key\" ) self . connected . set ( True ) continue if sync_id in self . future_map : fut = self . future_map . pop ( str ( sync_id )) res = validate_response ( data ) if isinstance ( res , Exception ): fut . set_exception ( res ) else : fut . set_result ( res ) else : await self . event_queue . put ( self . build_event ( data )) elif ws_message . type is WSMsgType . CLOSED : logger . warning ( \"websocket: connection has been closed.\" ) raise WebSocketError ( 1 , \"connection closed\" ) elif ws_message . type is WSMsgType . PONG : if self . log : logger . debug ( \"websocket: received pong\" ) else : logger . warning ( f \"websocket: unknown message type - { ws_message . type } \" ) except CancelledError : pass except ClientConnectionError as e : logger . error ( f \" { e . __class__ . __name__ } : { e } \" ) except Exception as e : logger . exception ( e ) finally : if self . ping_task : self . ping_task . cancel () self . ping_task = None if self . log : logger . debug ( \"websocket: ping task complete\" ) if self . websocket : logger . info ( \"websocket: disconnected\" ) self . running = False self . connected . set ( False ) self . mirai_session . session_key = None self . websocket = None self . session = None","title":"WebsocketAdapter"},{"location":"refs/graia/ariadne/adapter/forward/#graia.ariadne.adapter.forward.WebsocketAdapter.__init__","text":"__init__ ( broadcast : Broadcast , mirai_session : MiraiSession , ping : bool = True , log : bool = False ) -> None \u521d\u59cb\u5316 WebsocketAdapter Parameters: Name Type Description Default broadcast Broadcast \u5e7f\u64ad\u7cfb\u7edf required mirai_session MiraiSession MiraiSession \u5b9e\u4f8b required ping bool \u662f\u5426\u53d1\u9001 ping \u6d88\u606f. Defaults to True. True log bool \u662f\u5426\u8bb0\u5f55\u7f51\u7edc\u65e5\u5fd7. Defaults to False. False Source code in graia/ariadne/adapter/forward.py 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 def __init__ ( self , broadcast : Broadcast , mirai_session : MiraiSession , ping : bool = True , log : bool = False ) -> None : \"\"\"\u521d\u59cb\u5316 WebsocketAdapter Args: broadcast (Broadcast): \u5e7f\u64ad\u7cfb\u7edf mirai_session (MiraiSession): MiraiSession \u5b9e\u4f8b ping (bool, optional): \u662f\u5426\u53d1\u9001 ping \u6d88\u606f. Defaults to True. log (bool, optional): \u662f\u5426\u8bb0\u5f55\u7f51\u7edc\u65e5\u5fd7. Defaults to False. \"\"\" super () . __init__ ( broadcast , mirai_session ) self . ping = ping self . ping_task : Optional [ Task ] = None self . websocket : Optional [ ClientWebSocketResponse ] = None self . query_dict = { \"verifyKey\" : mirai_session . verify_key } self . future_map : Dict [ str , asyncio . Future ] = {} self . log = log if not mirai_session . single_mode : self . query_dict [ \"qq\" ] = mirai_session . account","title":"__init__()"},{"location":"refs/graia/ariadne/adapter/forward/#graia.ariadne.adapter.forward.WebsocketAdapter.ws_ping","text":"ws_ping ( interval : float = 30.0 ) -> None \u5411 Mirai API HTTP \u7684 WebsocketAdapter \u5faa\u73af\u53d1\u9001 ping. Parameters: Name Type Description Default interval float ping \u95f4\u9694 (s). \u9ed8\u8ba4 30.0. 30.0 Source code in graia/ariadne/adapter/forward.py 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 async def ws_ping ( self , interval : float = 30.0 ) -> None : \"\"\"\u5411 Mirai API HTTP \u7684 WebsocketAdapter \u5faa\u73af\u53d1\u9001 ping. Args: interval (float, optional): ping \u95f4\u9694 (s). \u9ed8\u8ba4 30.0. \"\"\" while self . running : try : try : await self . websocket . ping () if self . log : logger . debug ( \"websocket: ping\" ) except Exception as e : logger . exception ( f \"websocket: ping failed: { e !r} \" ) else : if self . log : logger . debug ( f \"websocket: ping success, delay { interval } s\" ) await asyncio . sleep ( interval ) except asyncio . CancelledError : if self . log : logger . debug ( \"websocket: pinger exit\" ) break","title":"ws_ping()"},{"location":"refs/graia/ariadne/adapter/reverse/","text":"\u53cd\u5411 Adapter, \u4f5c\u4e3a\u670d\u52a1\u5668\u8ba9 mirai-api-http \u8fde\u63a5 ComposeReverseWebsocketAdapter \ud83d\udd17 Bases: ReverseWebsocketAdapter \u53cd\u5411 WebSocket \u4e0e\u6b63\u5411 HTTP \u7684\u7ec4\u5408 Adapter Source code in graia/ariadne/adapter/reverse.py 293 294 295 296 297 298 299 300 301 302 class ComposeReverseWebsocketAdapter ( ReverseWebsocketAdapter ): \"\"\"\u53cd\u5411 WebSocket \u4e0e\u6b63\u5411 HTTP \u7684\u7ec4\u5408 Adapter\"\"\" tags : FrozenSet [ str ] = frozenset ([ \"reverse\" , \"websocket\" , \"http\" ]) async def call_api ( self , action : str , method : CallMethod , data : Optional [ Union [ Dict [ str , Any ], str , FormData ]] = None ) -> Union [ dict , list ]: await self . connected . wait ( True ) return await HttpAdapter . call_api ( self , action , method , data ) ComposeWebhookAdapter \ud83d\udd17 Bases: ReverseAdapter Webhook (\u53cd\u5411 HTTP) Adapter, \u540c\u65f6\u4f7f\u7528\u4e86\u6b63\u5411 HTTP \u4ee5\u8fdb\u884c API \u8c03\u7528\u652f\u6301 Source code in graia/ariadne/adapter/reverse.py 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 class ComposeWebhookAdapter ( ReverseAdapter ): \"\"\"Webhook (\u53cd\u5411 HTTP) Adapter, \u540c\u65f6\u4f7f\u7528\u4e86\u6b63\u5411 HTTP \u4ee5\u8fdb\u884c API \u8c03\u7528\u652f\u6301\"\"\" tags : FrozenSet [ str ] = frozenset ([ \"reverse\" , \"http\" ]) def __init__ ( self , broadcast : Broadcast , mirai_session : MiraiSession , route : str = \"/\" , extra_headers : Optional [ Dict [ str , str ]] = None , log : bool = True , * , app : Optional [ FastAPI ] = None , port : int = 8000 , server_cls : Type [ NoSigServer ] = NoSigServer , ** config_kwargs : Any , ): \"\"\"\u521d\u59cb\u5316 ComposeWebhookAdapter Args: broadcast (Broadcast): \u4e8b\u4ef6\u7cfb\u7edf mirai_session (MiraiSession): MiraiSession \u5b9e\u4f8b route (str, optional): \u670d\u52a1\u8def\u5f84. Defaults to \"/\". extra_headers (Optional[Dict[str, str]], optional): \u989d\u5916\u7684\u8bf7\u6c42\u5934. Defaults to None. log (bool, optional): \u662f\u5426\u542f\u7528\u8fde\u63a5\u65e5\u5fd7. Defaults to True. app (Optional[FastAPI], optional): ASGI \u5e94\u7528. Defaults to None. port (int, optional): \u670d\u52a1\u7aef\u53e3. Defaults to 8000. server_cls (Type[NoSigServer], optional): Server \u7c7b. Defaults to NoSigServer. **config_kwargs (Any, optional): \u989d\u5916\u914d\u7f6e\u53c2\u6570. Defaults to {}. \"\"\" super () . __init__ ( broadcast , mirai_session , route , log , app = app , port = port , server_cls = server_cls , ** config_kwargs , ) self . asgi . add_api_route ( self . route , self . http_endpoint , methods = [ \"POST\" ]) self . extra_headers : Dict [ str , str ] = extra_headers or {} self . endpoint_connected : AsyncSignal [ bool ] = AsyncSignal ( False ) async def http_endpoint ( self , request : Request ): header : Dict [ str , str ] = dict ( request . headers . items ()) if header [ \"qq\" ] == str ( self . mirai_session . account ): for key , val in self . extra_headers . items (): key = key . lower () if val != header . get ( key , \"\" ): raise HTTPException ( status_code = 401 , detail = \"Authorization Failed\" ) self . endpoint_connected . set ( True ) await self . authenticate () await self . event_queue . put ( self . build_event ( await request . json ())) return { \"command\" : \"\" , \"data\" : {}} authenticate = HttpAdapter . authenticate async def call_api ( self , action : str , method : CallMethod , data : Optional [ Union [ Dict [ str , Any ], str , FormData ]] = None , ) -> Union [ dict , list ]: await self . endpoint_connected . wait ( True ) return await HttpAdapter . call_api ( self , action , method , data ) __init__ \ud83d\udd17 __init__ ( broadcast : Broadcast , mirai_session : MiraiSession , route : str = '/' , extra_headers : Optional [ Dict [ str , str ]] = None , log : bool = True , * , app : Optional [ FastAPI ] = None , port : int = 8000 , server_cls : Type [ NoSigServer ] = NoSigServer , ** config_kwargs : Any ) \u521d\u59cb\u5316 ComposeWebhookAdapter Parameters: Name Type Description Default broadcast Broadcast \u4e8b\u4ef6\u7cfb\u7edf required mirai_session MiraiSession MiraiSession \u5b9e\u4f8b required route str \u670d\u52a1\u8def\u5f84. Defaults to \"/\". '/' extra_headers Optional [ Dict [ str , str ]] \u989d\u5916\u7684\u8bf7\u6c42\u5934. Defaults to None. None log bool \u662f\u5426\u542f\u7528\u8fde\u63a5\u65e5\u5fd7. Defaults to True. True app Optional [ FastAPI ] ASGI \u5e94\u7528. Defaults to None. None port int \u670d\u52a1\u7aef\u53e3. Defaults to 8000. 8000 server_cls Type [ NoSigServer ] Server \u7c7b. Defaults to NoSigServer. NoSigServer **config_kwargs Any \u989d\u5916\u914d\u7f6e\u53c2\u6570. Defaults to {}. {} Source code in graia/ariadne/adapter/reverse.py 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 def __init__ ( self , broadcast : Broadcast , mirai_session : MiraiSession , route : str = \"/\" , extra_headers : Optional [ Dict [ str , str ]] = None , log : bool = True , * , app : Optional [ FastAPI ] = None , port : int = 8000 , server_cls : Type [ NoSigServer ] = NoSigServer , ** config_kwargs : Any , ): \"\"\"\u521d\u59cb\u5316 ComposeWebhookAdapter Args: broadcast (Broadcast): \u4e8b\u4ef6\u7cfb\u7edf mirai_session (MiraiSession): MiraiSession \u5b9e\u4f8b route (str, optional): \u670d\u52a1\u8def\u5f84. Defaults to \"/\". extra_headers (Optional[Dict[str, str]], optional): \u989d\u5916\u7684\u8bf7\u6c42\u5934. Defaults to None. log (bool, optional): \u662f\u5426\u542f\u7528\u8fde\u63a5\u65e5\u5fd7. Defaults to True. app (Optional[FastAPI], optional): ASGI \u5e94\u7528. Defaults to None. port (int, optional): \u670d\u52a1\u7aef\u53e3. Defaults to 8000. server_cls (Type[NoSigServer], optional): Server \u7c7b. Defaults to NoSigServer. **config_kwargs (Any, optional): \u989d\u5916\u914d\u7f6e\u53c2\u6570. Defaults to {}. \"\"\" super () . __init__ ( broadcast , mirai_session , route , log , app = app , port = port , server_cls = server_cls , ** config_kwargs , ) self . asgi . add_api_route ( self . route , self . http_endpoint , methods = [ \"POST\" ]) self . extra_headers : Dict [ str , str ] = extra_headers or {} self . endpoint_connected : AsyncSignal [ bool ] = AsyncSignal ( False ) NoSigServer \ud83d\udd17 Bases: Server \u4e0d\u6ce8\u518c Signal \u7684\u670d\u52a1\u5668 Source code in graia/ariadne/adapter/reverse.py 21 22 23 24 25 class NoSigServer ( Server ): \"\"\"\u4e0d\u6ce8\u518c Signal \u7684\u670d\u52a1\u5668\"\"\" def install_signal_handlers ( self ) -> None : return ReverseAdapter \ud83d\udd17 Bases: Adapter \u53cd\u5411 Adapter \u57fa\u7c7b Source code in graia/ariadne/adapter/reverse.py 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 class ReverseAdapter ( Adapter ): \"\"\"\u53cd\u5411 Adapter \u57fa\u7c7b\"\"\" tags : FrozenSet [ str ] = frozenset ([ \"reverse\" ]) server : NoSigServer asgi : FastAPI mirai_session : MiraiSession broadcast : Broadcast session : Optional [ ClientSession ] def __init__ ( self , broadcast : Broadcast , mirai_session : MiraiSession , route : str = \"/\" , log : bool = True , * , app : Optional [ FastAPI ] = None , port : int = 8000 , server_cls : Type [ NoSigServer ] = NoSigServer , ** config_kwargs : Any , ): \"\"\"\u521d\u59cb\u5316 ReverseAdapter Args: broadcast (Broadcast): \u4e8b\u4ef6\u7cfb\u7edf mirai_session (MiraiSession): MiraiSession \u5b9e\u4f8b route (str, optional): \u670d\u52a1\u8def\u5f84. Defaults to \"/\". log (bool, optional): \u662f\u5426\u542f\u7528\u8fde\u63a5\u65e5\u5fd7. Defaults to True. app (Optional[FastAPI], optional): ASGI \u5e94\u7528. Defaults to None. port (int, optional): \u670d\u52a1\u7aef\u53e3. Defaults to 8000. server_cls (Type[NoSigServer], optional): Server \u7c7b. Defaults to NoSigServer. **config_kwargs (Any, optional): \u989d\u5916\u914d\u7f6e\u53c2\u6570. Defaults to {}. \"\"\" super () . __init__ ( broadcast , mirai_session ) self . asgi = app or FastAPI () self . route = route LOG_CONFIG = { \"version\" : 1 , \"disable_existing_loggers\" : False , \"handlers\" : { \"default\" : { \"class\" : \"graia.ariadne.util.LoguruHandler\" , }, }, \"loggers\" : { \"uvicorn.error\" : { \"handlers\" : [ \"default\" ] if log else [], \"level\" : \"INFO\" }, \"uvicorn.access\" : { \"handlers\" : [ \"default\" ] if log else [], \"level\" : \"INFO\" }, }, } self . server = server_cls ( Config ( self . asgi , port = port , log_config = LOG_CONFIG , ** config_kwargs )) async def stop ( self ) -> None : \"\"\"\u505c\u6b62\u670d\u52a1\u5668\"\"\" self . running = False self . server . should_exit = True try : await asyncio . wait_for ( self . fetch_task , timeout = 5.0 ) except asyncio . TimeoutError : self . server . force_exit = True await self . fetch_task self . fetch_task = None async def fetch_cycle ( self ): async with ClientSession () as session : self . session = session await self . server . serve () self . session = None __init__ \ud83d\udd17 __init__ ( broadcast : Broadcast , mirai_session : MiraiSession , route : str = '/' , log : bool = True , * , app : Optional [ FastAPI ] = None , port : int = 8000 , server_cls : Type [ NoSigServer ] = NoSigServer , ** config_kwargs : Any ) \u521d\u59cb\u5316 ReverseAdapter Parameters: Name Type Description Default broadcast Broadcast \u4e8b\u4ef6\u7cfb\u7edf required mirai_session MiraiSession MiraiSession \u5b9e\u4f8b required route str \u670d\u52a1\u8def\u5f84. Defaults to \"/\". '/' log bool \u662f\u5426\u542f\u7528\u8fde\u63a5\u65e5\u5fd7. Defaults to True. True app Optional [ FastAPI ] ASGI \u5e94\u7528. Defaults to None. None port int \u670d\u52a1\u7aef\u53e3. Defaults to 8000. 8000 server_cls Type [ NoSigServer ] Server \u7c7b. Defaults to NoSigServer. NoSigServer **config_kwargs Any \u989d\u5916\u914d\u7f6e\u53c2\u6570. Defaults to {}. {} Source code in graia/ariadne/adapter/reverse.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 def __init__ ( self , broadcast : Broadcast , mirai_session : MiraiSession , route : str = \"/\" , log : bool = True , * , app : Optional [ FastAPI ] = None , port : int = 8000 , server_cls : Type [ NoSigServer ] = NoSigServer , ** config_kwargs : Any , ): \"\"\"\u521d\u59cb\u5316 ReverseAdapter Args: broadcast (Broadcast): \u4e8b\u4ef6\u7cfb\u7edf mirai_session (MiraiSession): MiraiSession \u5b9e\u4f8b route (str, optional): \u670d\u52a1\u8def\u5f84. Defaults to \"/\". log (bool, optional): \u662f\u5426\u542f\u7528\u8fde\u63a5\u65e5\u5fd7. Defaults to True. app (Optional[FastAPI], optional): ASGI \u5e94\u7528. Defaults to None. port (int, optional): \u670d\u52a1\u7aef\u53e3. Defaults to 8000. server_cls (Type[NoSigServer], optional): Server \u7c7b. Defaults to NoSigServer. **config_kwargs (Any, optional): \u989d\u5916\u914d\u7f6e\u53c2\u6570. Defaults to {}. \"\"\" super () . __init__ ( broadcast , mirai_session ) self . asgi = app or FastAPI () self . route = route LOG_CONFIG = { \"version\" : 1 , \"disable_existing_loggers\" : False , \"handlers\" : { \"default\" : { \"class\" : \"graia.ariadne.util.LoguruHandler\" , }, }, \"loggers\" : { \"uvicorn.error\" : { \"handlers\" : [ \"default\" ] if log else [], \"level\" : \"INFO\" }, \"uvicorn.access\" : { \"handlers\" : [ \"default\" ] if log else [], \"level\" : \"INFO\" }, }, } self . server = server_cls ( Config ( self . asgi , port = port , log_config = LOG_CONFIG , ** config_kwargs )) stop async \ud83d\udd17 stop () -> None \u505c\u6b62\u670d\u52a1\u5668 Source code in graia/ariadne/adapter/reverse.py 81 82 83 84 85 86 87 88 89 90 async def stop ( self ) -> None : \"\"\"\u505c\u6b62\u670d\u52a1\u5668\"\"\" self . running = False self . server . should_exit = True try : await asyncio . wait_for ( self . fetch_task , timeout = 5.0 ) except asyncio . TimeoutError : self . server . force_exit = True await self . fetch_task self . fetch_task = None ReverseWebsocketAdapter \ud83d\udd17 Bases: ReverseAdapter \u53cd\u5411 WebSocket Adapter Source code in graia/ariadne/adapter/reverse.py 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 class ReverseWebsocketAdapter ( ReverseAdapter ): \"\"\"\u53cd\u5411 WebSocket Adapter\"\"\" tags : FrozenSet [ str ] = frozenset ([ \"reverse\" , \"websocket\" ]) def __init__ ( self , broadcast : Broadcast , mirai_session : MiraiSession , route : str = \"/\" , extra_headers : Optional [ Dict [ str , str ]] = None , query_params : Optional [ Dict [ str , str ]] = None , log : bool = True , * , app : Optional [ FastAPI ] = None , port : int = 8000 , server_cls : Type [ NoSigServer ] = NoSigServer , ** config_kwargs : Any , ): \"\"\"\u521d\u59cb\u5316 ReverseWebsocketAdapter Args: broadcast (Broadcast): \u4e8b\u4ef6\u7cfb\u7edf mirai_session (MiraiSession): MiraiSession \u5b9e\u4f8b route (str, optional): \u670d\u52a1\u8def\u5f84. Defaults to \"/\". extra_headers (Optional[Dict[str, str]], optional): \u989d\u5916\u7684\u8bf7\u6c42\u5934. Defaults to None. query_params (Optional[Dict[str, str]], optional): \u989d\u5916\u7684\u8bf7\u6c42\u53c2\u6570 (\u5728 url \u4e2d). Defaults to None. log (bool, optional): \u662f\u5426\u542f\u7528\u8fde\u63a5\u65e5\u5fd7. Defaults to True. app (Optional[FastAPI], optional): ASGI \u5e94\u7528. Defaults to None. port (int, optional): \u670d\u52a1\u7aef\u53e3. Defaults to 8000. server_cls (Type[NoSigServer], optional): Server \u7c7b. Defaults to NoSigServer. **config_kwargs (Any, optional): \u989d\u5916\u914d\u7f6e\u53c2\u6570. Defaults to {}. \"\"\" super () . __init__ ( broadcast , mirai_session , route , log , app = app , port = port , server_cls = server_cls , ** config_kwargs , ) self . asgi . add_api_websocket_route ( self . route , self . websocket_endpoint ) self . future_map : Dict [ str , asyncio . Future ] = {} self . websocket : Optional [ WebSocket ] = None self . extra_headers : Dict [ str , str ] = extra_headers or {} self . query_params : Dict [ str , str ] = query_params or {} async def websocket_endpoint ( self , websocket : WebSocket ): header : Dict [ str , str ] = dict ( websocket . headers . items ()) query_params : Dict [ str , str ] = dict ( websocket . query_params . items ()) for key , val in self . extra_headers . items (): key = key . lower () if val != header . get ( key , \"\" ): raise HTTPException ( status_code = 401 , detail = \"Authorization Failed\" ) for key , val in self . query_params . items (): if val != query_params . get ( key , \"\" ): raise HTTPException ( status_code = 401 , detail = \"Authorization Failed\" ) await websocket . accept () self . websocket = websocket try : asyncio . create_task ( self . get_session_key ()) while True : raw_data = await websocket . receive_json () sync_id : str = raw_data [ \"syncId\" ] or \"\" data : dict = raw_data [ \"data\" ] if sync_id in self . future_map : fut = self . future_map . pop ( sync_id ) res = validate_response ( data ) if isinstance ( res , Exception ): fut . set_exception ( res ) else : fut . set_result ( res ) else : await self . event_queue . put ( self . build_event ( data )) self . connected . set ( True ) except WebSocketDisconnect : self . connected . set ( False ) self . websocket = None self . mirai_session . session_key = None async def get_session_key ( self ): if not self . mirai_session . single_mode and not self . mirai_session . session_key : future = self . broadcast . loop . create_future () self . future_map [ str ( id ( future ))] = future content = { \"syncId\" : str ( id ( future )), \"command\" : \"verify\" , \"content\" : { \"verifyKey\" : self . mirai_session . verify_key , \"qq\" : self . mirai_session . account , \"sessionKey\" : None , }, } await self . websocket . send_text ( json . dumps ( content )) self . mirai_session . session_key = ( await future )[ \"session\" ] logger . success ( \"Successfully got session key\" ) async def call_api ( self , action : str , method : CallMethod , data : Optional [ Union [ Dict [ str , Any ], str , FormData ]] = None , ) -> Union [ dict , list ]: await self . connected . wait ( True ) future = self . broadcast . loop . create_future () self . future_map [ str ( id ( future ))] = future content = { \"syncId\" : str ( id ( future )), \"command\" : action . replace ( \"/\" , \"_\" ), \"content\" : data , } if method == CallMethod . RESTGET : content [ \"subCommand\" ] = \"get\" elif method == CallMethod . RESTPOST : content [ \"subCommand\" ] = \"update\" elif method == CallMethod . MULTIPART : future . set_exception ( NotImplementedError ( f \"Unsupported operation for ReverseWebsocketAdapter: { method } \" ) ), await self . websocket . send_text ( json . dumps ( content , cls = DatetimeEncoder )) return await future __init__ \ud83d\udd17 __init__ ( broadcast : Broadcast , mirai_session : MiraiSession , route : str = '/' , extra_headers : Optional [ Dict [ str , str ]] = None , query_params : Optional [ Dict [ str , str ]] = None , log : bool = True , * , app : Optional [ FastAPI ] = None , port : int = 8000 , server_cls : Type [ NoSigServer ] = NoSigServer , ** config_kwargs : Any ) \u521d\u59cb\u5316 ReverseWebsocketAdapter Parameters: Name Type Description Default broadcast Broadcast \u4e8b\u4ef6\u7cfb\u7edf required mirai_session MiraiSession MiraiSession \u5b9e\u4f8b required route str \u670d\u52a1\u8def\u5f84. Defaults to \"/\". '/' extra_headers Optional [ Dict [ str , str ]] \u989d\u5916\u7684\u8bf7\u6c42\u5934. Defaults to None. None query_params Optional [ Dict [ str , str ]] \u989d\u5916\u7684\u8bf7\u6c42\u53c2\u6570 (\u5728 url \u4e2d). Defaults to None. None log bool \u662f\u5426\u542f\u7528\u8fde\u63a5\u65e5\u5fd7. Defaults to True. True app Optional [ FastAPI ] ASGI \u5e94\u7528. Defaults to None. None port int \u670d\u52a1\u7aef\u53e3. Defaults to 8000. 8000 server_cls Type [ NoSigServer ] Server \u7c7b. Defaults to NoSigServer. NoSigServer **config_kwargs Any \u989d\u5916\u914d\u7f6e\u53c2\u6570. Defaults to {}. {} Source code in graia/ariadne/adapter/reverse.py 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 def __init__ ( self , broadcast : Broadcast , mirai_session : MiraiSession , route : str = \"/\" , extra_headers : Optional [ Dict [ str , str ]] = None , query_params : Optional [ Dict [ str , str ]] = None , log : bool = True , * , app : Optional [ FastAPI ] = None , port : int = 8000 , server_cls : Type [ NoSigServer ] = NoSigServer , ** config_kwargs : Any , ): \"\"\"\u521d\u59cb\u5316 ReverseWebsocketAdapter Args: broadcast (Broadcast): \u4e8b\u4ef6\u7cfb\u7edf mirai_session (MiraiSession): MiraiSession \u5b9e\u4f8b route (str, optional): \u670d\u52a1\u8def\u5f84. Defaults to \"/\". extra_headers (Optional[Dict[str, str]], optional): \u989d\u5916\u7684\u8bf7\u6c42\u5934. Defaults to None. query_params (Optional[Dict[str, str]], optional): \u989d\u5916\u7684\u8bf7\u6c42\u53c2\u6570 (\u5728 url \u4e2d). Defaults to None. log (bool, optional): \u662f\u5426\u542f\u7528\u8fde\u63a5\u65e5\u5fd7. Defaults to True. app (Optional[FastAPI], optional): ASGI \u5e94\u7528. Defaults to None. port (int, optional): \u670d\u52a1\u7aef\u53e3. Defaults to 8000. server_cls (Type[NoSigServer], optional): Server \u7c7b. Defaults to NoSigServer. **config_kwargs (Any, optional): \u989d\u5916\u914d\u7f6e\u53c2\u6570. Defaults to {}. \"\"\" super () . __init__ ( broadcast , mirai_session , route , log , app = app , port = port , server_cls = server_cls , ** config_kwargs , ) self . asgi . add_api_websocket_route ( self . route , self . websocket_endpoint ) self . future_map : Dict [ str , asyncio . Future ] = {} self . websocket : Optional [ WebSocket ] = None self . extra_headers : Dict [ str , str ] = extra_headers or {} self . query_params : Dict [ str , str ] = query_params or {}","title":"reverse"},{"location":"refs/graia/ariadne/adapter/reverse/#graia.ariadne.adapter.reverse.ComposeReverseWebsocketAdapter","text":"Bases: ReverseWebsocketAdapter \u53cd\u5411 WebSocket \u4e0e\u6b63\u5411 HTTP \u7684\u7ec4\u5408 Adapter Source code in graia/ariadne/adapter/reverse.py 293 294 295 296 297 298 299 300 301 302 class ComposeReverseWebsocketAdapter ( ReverseWebsocketAdapter ): \"\"\"\u53cd\u5411 WebSocket \u4e0e\u6b63\u5411 HTTP \u7684\u7ec4\u5408 Adapter\"\"\" tags : FrozenSet [ str ] = frozenset ([ \"reverse\" , \"websocket\" , \"http\" ]) async def call_api ( self , action : str , method : CallMethod , data : Optional [ Union [ Dict [ str , Any ], str , FormData ]] = None ) -> Union [ dict , list ]: await self . connected . wait ( True ) return await HttpAdapter . call_api ( self , action , method , data )","title":"ComposeReverseWebsocketAdapter"},{"location":"refs/graia/ariadne/adapter/reverse/#graia.ariadne.adapter.reverse.ComposeWebhookAdapter","text":"Bases: ReverseAdapter Webhook (\u53cd\u5411 HTTP) Adapter, \u540c\u65f6\u4f7f\u7528\u4e86\u6b63\u5411 HTTP \u4ee5\u8fdb\u884c API \u8c03\u7528\u652f\u6301 Source code in graia/ariadne/adapter/reverse.py 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 class ComposeWebhookAdapter ( ReverseAdapter ): \"\"\"Webhook (\u53cd\u5411 HTTP) Adapter, \u540c\u65f6\u4f7f\u7528\u4e86\u6b63\u5411 HTTP \u4ee5\u8fdb\u884c API \u8c03\u7528\u652f\u6301\"\"\" tags : FrozenSet [ str ] = frozenset ([ \"reverse\" , \"http\" ]) def __init__ ( self , broadcast : Broadcast , mirai_session : MiraiSession , route : str = \"/\" , extra_headers : Optional [ Dict [ str , str ]] = None , log : bool = True , * , app : Optional [ FastAPI ] = None , port : int = 8000 , server_cls : Type [ NoSigServer ] = NoSigServer , ** config_kwargs : Any , ): \"\"\"\u521d\u59cb\u5316 ComposeWebhookAdapter Args: broadcast (Broadcast): \u4e8b\u4ef6\u7cfb\u7edf mirai_session (MiraiSession): MiraiSession \u5b9e\u4f8b route (str, optional): \u670d\u52a1\u8def\u5f84. Defaults to \"/\". extra_headers (Optional[Dict[str, str]], optional): \u989d\u5916\u7684\u8bf7\u6c42\u5934. Defaults to None. log (bool, optional): \u662f\u5426\u542f\u7528\u8fde\u63a5\u65e5\u5fd7. Defaults to True. app (Optional[FastAPI], optional): ASGI \u5e94\u7528. Defaults to None. port (int, optional): \u670d\u52a1\u7aef\u53e3. Defaults to 8000. server_cls (Type[NoSigServer], optional): Server \u7c7b. Defaults to NoSigServer. **config_kwargs (Any, optional): \u989d\u5916\u914d\u7f6e\u53c2\u6570. Defaults to {}. \"\"\" super () . __init__ ( broadcast , mirai_session , route , log , app = app , port = port , server_cls = server_cls , ** config_kwargs , ) self . asgi . add_api_route ( self . route , self . http_endpoint , methods = [ \"POST\" ]) self . extra_headers : Dict [ str , str ] = extra_headers or {} self . endpoint_connected : AsyncSignal [ bool ] = AsyncSignal ( False ) async def http_endpoint ( self , request : Request ): header : Dict [ str , str ] = dict ( request . headers . items ()) if header [ \"qq\" ] == str ( self . mirai_session . account ): for key , val in self . extra_headers . items (): key = key . lower () if val != header . get ( key , \"\" ): raise HTTPException ( status_code = 401 , detail = \"Authorization Failed\" ) self . endpoint_connected . set ( True ) await self . authenticate () await self . event_queue . put ( self . build_event ( await request . json ())) return { \"command\" : \"\" , \"data\" : {}} authenticate = HttpAdapter . authenticate async def call_api ( self , action : str , method : CallMethod , data : Optional [ Union [ Dict [ str , Any ], str , FormData ]] = None , ) -> Union [ dict , list ]: await self . endpoint_connected . wait ( True ) return await HttpAdapter . call_api ( self , action , method , data )","title":"ComposeWebhookAdapter"},{"location":"refs/graia/ariadne/adapter/reverse/#graia.ariadne.adapter.reverse.ComposeWebhookAdapter.__init__","text":"__init__ ( broadcast : Broadcast , mirai_session : MiraiSession , route : str = '/' , extra_headers : Optional [ Dict [ str , str ]] = None , log : bool = True , * , app : Optional [ FastAPI ] = None , port : int = 8000 , server_cls : Type [ NoSigServer ] = NoSigServer , ** config_kwargs : Any ) \u521d\u59cb\u5316 ComposeWebhookAdapter Parameters: Name Type Description Default broadcast Broadcast \u4e8b\u4ef6\u7cfb\u7edf required mirai_session MiraiSession MiraiSession \u5b9e\u4f8b required route str \u670d\u52a1\u8def\u5f84. Defaults to \"/\". '/' extra_headers Optional [ Dict [ str , str ]] \u989d\u5916\u7684\u8bf7\u6c42\u5934. Defaults to None. None log bool \u662f\u5426\u542f\u7528\u8fde\u63a5\u65e5\u5fd7. Defaults to True. True app Optional [ FastAPI ] ASGI \u5e94\u7528. Defaults to None. None port int \u670d\u52a1\u7aef\u53e3. Defaults to 8000. 8000 server_cls Type [ NoSigServer ] Server \u7c7b. Defaults to NoSigServer. NoSigServer **config_kwargs Any \u989d\u5916\u914d\u7f6e\u53c2\u6570. Defaults to {}. {} Source code in graia/ariadne/adapter/reverse.py 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 def __init__ ( self , broadcast : Broadcast , mirai_session : MiraiSession , route : str = \"/\" , extra_headers : Optional [ Dict [ str , str ]] = None , log : bool = True , * , app : Optional [ FastAPI ] = None , port : int = 8000 , server_cls : Type [ NoSigServer ] = NoSigServer , ** config_kwargs : Any , ): \"\"\"\u521d\u59cb\u5316 ComposeWebhookAdapter Args: broadcast (Broadcast): \u4e8b\u4ef6\u7cfb\u7edf mirai_session (MiraiSession): MiraiSession \u5b9e\u4f8b route (str, optional): \u670d\u52a1\u8def\u5f84. Defaults to \"/\". extra_headers (Optional[Dict[str, str]], optional): \u989d\u5916\u7684\u8bf7\u6c42\u5934. Defaults to None. log (bool, optional): \u662f\u5426\u542f\u7528\u8fde\u63a5\u65e5\u5fd7. Defaults to True. app (Optional[FastAPI], optional): ASGI \u5e94\u7528. Defaults to None. port (int, optional): \u670d\u52a1\u7aef\u53e3. Defaults to 8000. server_cls (Type[NoSigServer], optional): Server \u7c7b. Defaults to NoSigServer. **config_kwargs (Any, optional): \u989d\u5916\u914d\u7f6e\u53c2\u6570. Defaults to {}. \"\"\" super () . __init__ ( broadcast , mirai_session , route , log , app = app , port = port , server_cls = server_cls , ** config_kwargs , ) self . asgi . add_api_route ( self . route , self . http_endpoint , methods = [ \"POST\" ]) self . extra_headers : Dict [ str , str ] = extra_headers or {} self . endpoint_connected : AsyncSignal [ bool ] = AsyncSignal ( False )","title":"__init__()"},{"location":"refs/graia/ariadne/adapter/reverse/#graia.ariadne.adapter.reverse.NoSigServer","text":"Bases: Server \u4e0d\u6ce8\u518c Signal \u7684\u670d\u52a1\u5668 Source code in graia/ariadne/adapter/reverse.py 21 22 23 24 25 class NoSigServer ( Server ): \"\"\"\u4e0d\u6ce8\u518c Signal \u7684\u670d\u52a1\u5668\"\"\" def install_signal_handlers ( self ) -> None : return","title":"NoSigServer"},{"location":"refs/graia/ariadne/adapter/reverse/#graia.ariadne.adapter.reverse.ReverseAdapter","text":"Bases: Adapter \u53cd\u5411 Adapter \u57fa\u7c7b Source code in graia/ariadne/adapter/reverse.py 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 class ReverseAdapter ( Adapter ): \"\"\"\u53cd\u5411 Adapter \u57fa\u7c7b\"\"\" tags : FrozenSet [ str ] = frozenset ([ \"reverse\" ]) server : NoSigServer asgi : FastAPI mirai_session : MiraiSession broadcast : Broadcast session : Optional [ ClientSession ] def __init__ ( self , broadcast : Broadcast , mirai_session : MiraiSession , route : str = \"/\" , log : bool = True , * , app : Optional [ FastAPI ] = None , port : int = 8000 , server_cls : Type [ NoSigServer ] = NoSigServer , ** config_kwargs : Any , ): \"\"\"\u521d\u59cb\u5316 ReverseAdapter Args: broadcast (Broadcast): \u4e8b\u4ef6\u7cfb\u7edf mirai_session (MiraiSession): MiraiSession \u5b9e\u4f8b route (str, optional): \u670d\u52a1\u8def\u5f84. Defaults to \"/\". log (bool, optional): \u662f\u5426\u542f\u7528\u8fde\u63a5\u65e5\u5fd7. Defaults to True. app (Optional[FastAPI], optional): ASGI \u5e94\u7528. Defaults to None. port (int, optional): \u670d\u52a1\u7aef\u53e3. Defaults to 8000. server_cls (Type[NoSigServer], optional): Server \u7c7b. Defaults to NoSigServer. **config_kwargs (Any, optional): \u989d\u5916\u914d\u7f6e\u53c2\u6570. Defaults to {}. \"\"\" super () . __init__ ( broadcast , mirai_session ) self . asgi = app or FastAPI () self . route = route LOG_CONFIG = { \"version\" : 1 , \"disable_existing_loggers\" : False , \"handlers\" : { \"default\" : { \"class\" : \"graia.ariadne.util.LoguruHandler\" , }, }, \"loggers\" : { \"uvicorn.error\" : { \"handlers\" : [ \"default\" ] if log else [], \"level\" : \"INFO\" }, \"uvicorn.access\" : { \"handlers\" : [ \"default\" ] if log else [], \"level\" : \"INFO\" }, }, } self . server = server_cls ( Config ( self . asgi , port = port , log_config = LOG_CONFIG , ** config_kwargs )) async def stop ( self ) -> None : \"\"\"\u505c\u6b62\u670d\u52a1\u5668\"\"\" self . running = False self . server . should_exit = True try : await asyncio . wait_for ( self . fetch_task , timeout = 5.0 ) except asyncio . TimeoutError : self . server . force_exit = True await self . fetch_task self . fetch_task = None async def fetch_cycle ( self ): async with ClientSession () as session : self . session = session await self . server . serve () self . session = None","title":"ReverseAdapter"},{"location":"refs/graia/ariadne/adapter/reverse/#graia.ariadne.adapter.reverse.ReverseAdapter.__init__","text":"__init__ ( broadcast : Broadcast , mirai_session : MiraiSession , route : str = '/' , log : bool = True , * , app : Optional [ FastAPI ] = None , port : int = 8000 , server_cls : Type [ NoSigServer ] = NoSigServer , ** config_kwargs : Any ) \u521d\u59cb\u5316 ReverseAdapter Parameters: Name Type Description Default broadcast Broadcast \u4e8b\u4ef6\u7cfb\u7edf required mirai_session MiraiSession MiraiSession \u5b9e\u4f8b required route str \u670d\u52a1\u8def\u5f84. Defaults to \"/\". '/' log bool \u662f\u5426\u542f\u7528\u8fde\u63a5\u65e5\u5fd7. Defaults to True. True app Optional [ FastAPI ] ASGI \u5e94\u7528. Defaults to None. None port int \u670d\u52a1\u7aef\u53e3. Defaults to 8000. 8000 server_cls Type [ NoSigServer ] Server \u7c7b. Defaults to NoSigServer. NoSigServer **config_kwargs Any \u989d\u5916\u914d\u7f6e\u53c2\u6570. Defaults to {}. {} Source code in graia/ariadne/adapter/reverse.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 def __init__ ( self , broadcast : Broadcast , mirai_session : MiraiSession , route : str = \"/\" , log : bool = True , * , app : Optional [ FastAPI ] = None , port : int = 8000 , server_cls : Type [ NoSigServer ] = NoSigServer , ** config_kwargs : Any , ): \"\"\"\u521d\u59cb\u5316 ReverseAdapter Args: broadcast (Broadcast): \u4e8b\u4ef6\u7cfb\u7edf mirai_session (MiraiSession): MiraiSession \u5b9e\u4f8b route (str, optional): \u670d\u52a1\u8def\u5f84. Defaults to \"/\". log (bool, optional): \u662f\u5426\u542f\u7528\u8fde\u63a5\u65e5\u5fd7. Defaults to True. app (Optional[FastAPI], optional): ASGI \u5e94\u7528. Defaults to None. port (int, optional): \u670d\u52a1\u7aef\u53e3. Defaults to 8000. server_cls (Type[NoSigServer], optional): Server \u7c7b. Defaults to NoSigServer. **config_kwargs (Any, optional): \u989d\u5916\u914d\u7f6e\u53c2\u6570. Defaults to {}. \"\"\" super () . __init__ ( broadcast , mirai_session ) self . asgi = app or FastAPI () self . route = route LOG_CONFIG = { \"version\" : 1 , \"disable_existing_loggers\" : False , \"handlers\" : { \"default\" : { \"class\" : \"graia.ariadne.util.LoguruHandler\" , }, }, \"loggers\" : { \"uvicorn.error\" : { \"handlers\" : [ \"default\" ] if log else [], \"level\" : \"INFO\" }, \"uvicorn.access\" : { \"handlers\" : [ \"default\" ] if log else [], \"level\" : \"INFO\" }, }, } self . server = server_cls ( Config ( self . asgi , port = port , log_config = LOG_CONFIG , ** config_kwargs ))","title":"__init__()"},{"location":"refs/graia/ariadne/adapter/reverse/#graia.ariadne.adapter.reverse.ReverseAdapter.stop","text":"stop () -> None \u505c\u6b62\u670d\u52a1\u5668 Source code in graia/ariadne/adapter/reverse.py 81 82 83 84 85 86 87 88 89 90 async def stop ( self ) -> None : \"\"\"\u505c\u6b62\u670d\u52a1\u5668\"\"\" self . running = False self . server . should_exit = True try : await asyncio . wait_for ( self . fetch_task , timeout = 5.0 ) except asyncio . TimeoutError : self . server . force_exit = True await self . fetch_task self . fetch_task = None","title":"stop()"},{"location":"refs/graia/ariadne/adapter/reverse/#graia.ariadne.adapter.reverse.ReverseWebsocketAdapter","text":"Bases: ReverseAdapter \u53cd\u5411 WebSocket Adapter Source code in graia/ariadne/adapter/reverse.py 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 class ReverseWebsocketAdapter ( ReverseAdapter ): \"\"\"\u53cd\u5411 WebSocket Adapter\"\"\" tags : FrozenSet [ str ] = frozenset ([ \"reverse\" , \"websocket\" ]) def __init__ ( self , broadcast : Broadcast , mirai_session : MiraiSession , route : str = \"/\" , extra_headers : Optional [ Dict [ str , str ]] = None , query_params : Optional [ Dict [ str , str ]] = None , log : bool = True , * , app : Optional [ FastAPI ] = None , port : int = 8000 , server_cls : Type [ NoSigServer ] = NoSigServer , ** config_kwargs : Any , ): \"\"\"\u521d\u59cb\u5316 ReverseWebsocketAdapter Args: broadcast (Broadcast): \u4e8b\u4ef6\u7cfb\u7edf mirai_session (MiraiSession): MiraiSession \u5b9e\u4f8b route (str, optional): \u670d\u52a1\u8def\u5f84. Defaults to \"/\". extra_headers (Optional[Dict[str, str]], optional): \u989d\u5916\u7684\u8bf7\u6c42\u5934. Defaults to None. query_params (Optional[Dict[str, str]], optional): \u989d\u5916\u7684\u8bf7\u6c42\u53c2\u6570 (\u5728 url \u4e2d). Defaults to None. log (bool, optional): \u662f\u5426\u542f\u7528\u8fde\u63a5\u65e5\u5fd7. Defaults to True. app (Optional[FastAPI], optional): ASGI \u5e94\u7528. Defaults to None. port (int, optional): \u670d\u52a1\u7aef\u53e3. Defaults to 8000. server_cls (Type[NoSigServer], optional): Server \u7c7b. Defaults to NoSigServer. **config_kwargs (Any, optional): \u989d\u5916\u914d\u7f6e\u53c2\u6570. Defaults to {}. \"\"\" super () . __init__ ( broadcast , mirai_session , route , log , app = app , port = port , server_cls = server_cls , ** config_kwargs , ) self . asgi . add_api_websocket_route ( self . route , self . websocket_endpoint ) self . future_map : Dict [ str , asyncio . Future ] = {} self . websocket : Optional [ WebSocket ] = None self . extra_headers : Dict [ str , str ] = extra_headers or {} self . query_params : Dict [ str , str ] = query_params or {} async def websocket_endpoint ( self , websocket : WebSocket ): header : Dict [ str , str ] = dict ( websocket . headers . items ()) query_params : Dict [ str , str ] = dict ( websocket . query_params . items ()) for key , val in self . extra_headers . items (): key = key . lower () if val != header . get ( key , \"\" ): raise HTTPException ( status_code = 401 , detail = \"Authorization Failed\" ) for key , val in self . query_params . items (): if val != query_params . get ( key , \"\" ): raise HTTPException ( status_code = 401 , detail = \"Authorization Failed\" ) await websocket . accept () self . websocket = websocket try : asyncio . create_task ( self . get_session_key ()) while True : raw_data = await websocket . receive_json () sync_id : str = raw_data [ \"syncId\" ] or \"\" data : dict = raw_data [ \"data\" ] if sync_id in self . future_map : fut = self . future_map . pop ( sync_id ) res = validate_response ( data ) if isinstance ( res , Exception ): fut . set_exception ( res ) else : fut . set_result ( res ) else : await self . event_queue . put ( self . build_event ( data )) self . connected . set ( True ) except WebSocketDisconnect : self . connected . set ( False ) self . websocket = None self . mirai_session . session_key = None async def get_session_key ( self ): if not self . mirai_session . single_mode and not self . mirai_session . session_key : future = self . broadcast . loop . create_future () self . future_map [ str ( id ( future ))] = future content = { \"syncId\" : str ( id ( future )), \"command\" : \"verify\" , \"content\" : { \"verifyKey\" : self . mirai_session . verify_key , \"qq\" : self . mirai_session . account , \"sessionKey\" : None , }, } await self . websocket . send_text ( json . dumps ( content )) self . mirai_session . session_key = ( await future )[ \"session\" ] logger . success ( \"Successfully got session key\" ) async def call_api ( self , action : str , method : CallMethod , data : Optional [ Union [ Dict [ str , Any ], str , FormData ]] = None , ) -> Union [ dict , list ]: await self . connected . wait ( True ) future = self . broadcast . loop . create_future () self . future_map [ str ( id ( future ))] = future content = { \"syncId\" : str ( id ( future )), \"command\" : action . replace ( \"/\" , \"_\" ), \"content\" : data , } if method == CallMethod . RESTGET : content [ \"subCommand\" ] = \"get\" elif method == CallMethod . RESTPOST : content [ \"subCommand\" ] = \"update\" elif method == CallMethod . MULTIPART : future . set_exception ( NotImplementedError ( f \"Unsupported operation for ReverseWebsocketAdapter: { method } \" ) ), await self . websocket . send_text ( json . dumps ( content , cls = DatetimeEncoder )) return await future","title":"ReverseWebsocketAdapter"},{"location":"refs/graia/ariadne/adapter/reverse/#graia.ariadne.adapter.reverse.ReverseWebsocketAdapter.__init__","text":"__init__ ( broadcast : Broadcast , mirai_session : MiraiSession , route : str = '/' , extra_headers : Optional [ Dict [ str , str ]] = None , query_params : Optional [ Dict [ str , str ]] = None , log : bool = True , * , app : Optional [ FastAPI ] = None , port : int = 8000 , server_cls : Type [ NoSigServer ] = NoSigServer , ** config_kwargs : Any ) \u521d\u59cb\u5316 ReverseWebsocketAdapter Parameters: Name Type Description Default broadcast Broadcast \u4e8b\u4ef6\u7cfb\u7edf required mirai_session MiraiSession MiraiSession \u5b9e\u4f8b required route str \u670d\u52a1\u8def\u5f84. Defaults to \"/\". '/' extra_headers Optional [ Dict [ str , str ]] \u989d\u5916\u7684\u8bf7\u6c42\u5934. Defaults to None. None query_params Optional [ Dict [ str , str ]] \u989d\u5916\u7684\u8bf7\u6c42\u53c2\u6570 (\u5728 url \u4e2d). Defaults to None. None log bool \u662f\u5426\u542f\u7528\u8fde\u63a5\u65e5\u5fd7. Defaults to True. True app Optional [ FastAPI ] ASGI \u5e94\u7528. Defaults to None. None port int \u670d\u52a1\u7aef\u53e3. Defaults to 8000. 8000 server_cls Type [ NoSigServer ] Server \u7c7b. Defaults to NoSigServer. NoSigServer **config_kwargs Any \u989d\u5916\u914d\u7f6e\u53c2\u6570. Defaults to {}. {} Source code in graia/ariadne/adapter/reverse.py 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 def __init__ ( self , broadcast : Broadcast , mirai_session : MiraiSession , route : str = \"/\" , extra_headers : Optional [ Dict [ str , str ]] = None , query_params : Optional [ Dict [ str , str ]] = None , log : bool = True , * , app : Optional [ FastAPI ] = None , port : int = 8000 , server_cls : Type [ NoSigServer ] = NoSigServer , ** config_kwargs : Any , ): \"\"\"\u521d\u59cb\u5316 ReverseWebsocketAdapter Args: broadcast (Broadcast): \u4e8b\u4ef6\u7cfb\u7edf mirai_session (MiraiSession): MiraiSession \u5b9e\u4f8b route (str, optional): \u670d\u52a1\u8def\u5f84. Defaults to \"/\". extra_headers (Optional[Dict[str, str]], optional): \u989d\u5916\u7684\u8bf7\u6c42\u5934. Defaults to None. query_params (Optional[Dict[str, str]], optional): \u989d\u5916\u7684\u8bf7\u6c42\u53c2\u6570 (\u5728 url \u4e2d). Defaults to None. log (bool, optional): \u662f\u5426\u542f\u7528\u8fde\u63a5\u65e5\u5fd7. Defaults to True. app (Optional[FastAPI], optional): ASGI \u5e94\u7528. Defaults to None. port (int, optional): \u670d\u52a1\u7aef\u53e3. Defaults to 8000. server_cls (Type[NoSigServer], optional): Server \u7c7b. Defaults to NoSigServer. **config_kwargs (Any, optional): \u989d\u5916\u914d\u7f6e\u53c2\u6570. Defaults to {}. \"\"\" super () . __init__ ( broadcast , mirai_session , route , log , app = app , port = port , server_cls = server_cls , ** config_kwargs , ) self . asgi . add_api_websocket_route ( self . route , self . websocket_endpoint ) self . future_map : Dict [ str , asyncio . Future ] = {} self . websocket : Optional [ WebSocket ] = None self . extra_headers : Dict [ str , str ] = extra_headers or {} self . query_params : Dict [ str , str ] = query_params or {}","title":"__init__()"},{"location":"refs/graia/ariadne/adapter/util/","text":"validate_response \ud83d\udd17 validate_response ( data : Dict [ str , Any ]) -> Union [ dict , Exception ] \u9a8c\u8bc1\u8fdc\u7a0b\u670d\u52a1\u5668\u7684\u8fd4\u56de\u503c Parameters: Name Type Description Default data dict \u8fd4\u56de\u7684\u5bf9\u8c61 required Raises: Type Description Exception \u8bf7\u53c2\u7167 code_exceptions_mapping Source code in graia/ariadne/adapter/util.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 def validate_response ( data : Dict [ str , Any ]) -> Union [ dict , Exception ]: \"\"\"\u9a8c\u8bc1\u8fdc\u7a0b\u670d\u52a1\u5668\u7684\u8fd4\u56de\u503c Args: data (dict): \u8fd4\u56de\u7684\u5bf9\u8c61 Raises: Exception: \u8bf7\u53c2\u7167 code_exceptions_mapping \"\"\" if isinstance ( data , dict ): int_code : int = data . get ( \"code\" ) else : int_code = data if not isinstance ( int_code , int ) or int_code == 200 or int_code == 0 : if \"data\" in data : return data [ \"data\" ] return data exc_cls = code_exceptions_mapping . get ( int_code ) if exc_cls : return exc_cls ( exc_cls . __doc__ , data ) return UnknownError ( data )","title":"util"},{"location":"refs/graia/ariadne/adapter/util/#graia.ariadne.adapter.util.validate_response","text":"validate_response ( data : Dict [ str , Any ]) -> Union [ dict , Exception ] \u9a8c\u8bc1\u8fdc\u7a0b\u670d\u52a1\u5668\u7684\u8fd4\u56de\u503c Parameters: Name Type Description Default data dict \u8fd4\u56de\u7684\u5bf9\u8c61 required Raises: Type Description Exception \u8bf7\u53c2\u7167 code_exceptions_mapping Source code in graia/ariadne/adapter/util.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 def validate_response ( data : Dict [ str , Any ]) -> Union [ dict , Exception ]: \"\"\"\u9a8c\u8bc1\u8fdc\u7a0b\u670d\u52a1\u5668\u7684\u8fd4\u56de\u503c Args: data (dict): \u8fd4\u56de\u7684\u5bf9\u8c61 Raises: Exception: \u8bf7\u53c2\u7167 code_exceptions_mapping \"\"\" if isinstance ( data , dict ): int_code : int = data . get ( \"code\" ) else : int_code = data if not isinstance ( int_code , int ) or int_code == 200 or int_code == 0 : if \"data\" in data : return data [ \"data\" ] return data exc_cls = code_exceptions_mapping . get ( int_code ) if exc_cls : return exc_cls ( exc_cls . __doc__ , data ) return UnknownError ( data )","title":"validate_response()"},{"location":"refs/graia/ariadne/console/","text":"Ariadne \u63a7\u5236\u53f0 \u6ce8\u610f, \u672c\u5b9e\u73b0\u5e76\u4e0d robust, \u4f46\u662f\u53ef\u4ee5\u4f7f\u7528 Console \ud83d\udd17 Ariadne \u7684\u63a7\u5236\u53f0, \u53ef\u4ee5\u8131\u79bb Ariadne \u5b9e\u4f8b\u8fd0\u884c \u8b66\u544a: \u672c\u5b9e\u73b0\u65e0\u6cd5\u786e\u4fdd\u7a33\u5b9a\u6027 Source code in graia/ariadne/console/__init__.pyclass Console : \"\"\"Ariadne \u7684\u63a7\u5236\u53f0, \u53ef\u4ee5\u8131\u79bb Ariadne \u5b9e\u4f8b\u8fd0\u884c \u8b66\u544a: \u672c\u5b9e\u73b0\u65e0\u6cd5\u786e\u4fdd\u7a33\u5b9a\u6027\"\"\" def __init__ ( self , broadcast : Broadcast , prompt : Union [ Callable [[], str ], AnyFormattedText ] = \" {library_name} {graia_ariadne_version} >\" , * , r_prompt : Union [ Callable [[], str ], AnyFormattedText ] = \"\" , style : Optional [ Style ] = None , extra_data_getter : Iterable [ Callable [[], Dict [ str , Any ]]] = (), replace_logger : bool = True , listen_launch : bool = True , listen_shutdown : bool = True , ) -> None : \"\"\"\u521d\u59cb\u5316\u63a7\u5236\u53f0. Args: broadcast (Broadcast): \u4e8b\u4ef6\u7cfb\u7edf. prompt (AnyFormattedText, optional): \u8f93\u5165\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \\ \u9ed8\u8ba4\u4e3a \"{library_name} {graia_ariadne_version}>\". r_prompt (AnyFormattedText, optional): \u53f3\u4fa7\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \u9ed8\u8ba4\u4e3a\u7a7a. style (Style, optional): \u8f93\u5165\u63d0\u793a\u7684\u683c\u5f0f, \u8be6\u89c1 prompt_toolkit \u7684\u4ecb\u7ecd. extra_data_getter (Iterable[() -> Dict[str, Any], optional): \u989d\u5916\u7684 Callable, \u7528\u4e8e\u751f\u6210 prompt \u7684\u683c\u5f0f\u5316\u6570\u636e. replace_logger (bool, optional): \u662f\u5426\u5c1d\u8bd5\u66ff\u6362 loguru \u7684 0 \u53f7 handler (sys.stderr) \u4e3a StdoutProxy. \u9ed8\u8ba4\u4e3a True. listen_launch (bool, optional): \u662f\u5426\u76d1\u542c Ariadne \u7684 ApplicationLaunched \u4e8b\u4ef6\u5e76\u542f\u52a8\u81ea\u8eab, \u9ed8\u8ba4\u4e3a True. listen_shutdown (bool, optional): \u662f\u5426\u76d1\u542c Ariadne \u7684 ApplicationShutdowned \u4e8b\u4ef6\u5e76\u505c\u6b62\u81ea\u8eab, \u9ed8\u8ba4\u4e3a True. \"\"\" self . broadcast = broadcast # Handle Ariadne Event if listen_launch : broadcast . receiver ( ApplicationLaunched )( self . start ) if listen_shutdown : broadcast . receiver ( ApplicationShutdowned )( self . stop ) self . session : PromptSession [ str ] = PromptSession () self . style = style or Style ([]) self . l_prompt : AnyFormattedText = prompt self . r_prompt : AnyFormattedText = r_prompt self . registry : List [ Tuple [ Callable , List [ BaseDispatcher ], List [ Decorator ]]] = [] self . extra_data_getter = extra_data_getter self . running : bool = False self . task : Optional [ Task ] = None self . handler_id : int = 0 self . replace_logger : bool = replace_logger logger . warning ( \"Please note that console is NOT STABLE.\" ) logger . warning ( \"Use it at your own risk.\" ) def data_getter ( self ) -> Dict [ str , Any ]: \"\"\"\u8fd4\u56de\u7528\u4e8e prompt \u7684\u6570\u636e Returns: Dict[str, Any]: \u53ef\u7528\u4e8e format_map \u7684\u6570\u636e\u5b57\u5178 \"\"\" data = { \"library_name\" : \"Ariadne\" , } for dist in importlib . metadata . distributions (): name : str = dist . metadata [ \"Name\" ] version : str = dist . version if name . startswith ( \"graia\" ): if name == \"graia-ariadne-dev\" : name = \"graia-ariadne\" data [ f \" { '_' . join ( name . split ( '-' ) + [ 'version' ]) } \" ] = version for func in self . extra_data_getter : data . update ( func ()) return data async def prompt ( self , l_prompt : Optional [ AnyFormattedText ] = None , r_prompt : Optional [ AnyFormattedText ] = None , style : Optional [ Style ] = None , ) -> str : \"\"\"\u5411\u63a7\u5236\u53f0\u53d1\u9001\u4e00\u4e2a\u8f93\u5165\u8bf7\u6c42, \u5f02\u6b65 Args: l_prompt (AnyFormattedText, optional): \u5de6\u8f93\u5165\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \\ \u9ed8\u8ba4\u4e3a \"{library_name} {graia_ariadne_version}>\". \u6ce8\u610f\u4e3a l_prompt . r_prompt (AnyFormattedText, optional): \u53f3\u4fa7\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \u9ed8\u8ba4\u4e3a\u7a7a. style (Style, optional): \u8f93\u5165\u63d0\u793a\u7684\u683c\u5f0f, \u8be6\u89c1 prompt_toolkit \u7684\u4ecb\u7ecd. Returns: str: \u8f93\u5165\u7ed3\u679c \"\"\" l_prompt = l_prompt or self . l_prompt r_prompt = r_prompt or self . r_prompt style = style or self . style if isinstance ( l_prompt , str ): l_prompt = l_prompt . format_map ( self . data_getter ()) if isinstance ( r_prompt , str ): r_prompt = r_prompt . format_map ( self . data_getter ()) try : return await self . session . prompt_async ( message = l_prompt , rprompt = r_prompt , style = style , set_exception_handler = False , ) except KeyboardInterrupt : self . stop () raise async def loop ( self ) -> None : \"\"\"Console \u7684\u8f93\u5165\u5faa\u73af\"\"\" from graia.ariadne.message.chain import MessageChain from graia.ariadne.message.element import Plain class _Dispatcher ( BaseDispatcher ): def __init__ ( self , command : str , console : Console ) -> None : self . command = command self . console = console async def catch ( self , interface : DispatcherInterface ): if interface . annotation is str and interface . name == \"command\" : return self . command if interface . annotation is MessageChain : return MessageChain ([ Plain ( self . command )], inline = True ) if interface . annotation is Console : return self . console if interface . annotation is Broadcast : return self . console . broadcast if interface . annotation is AbstractEventLoop : return self . console . broadcast . loop while self . running : try : command = await self . prompt () except KeyboardInterrupt : self . stop () raise for func , dispatchers , decorators in self . registry : try : result = await self . broadcast . Executor ( ExecTarget ( func , resolve_dispatchers_mixin ( [ _Dispatcher ( command , self ), ContextDispatcher (), * dispatchers ] ), decorators , ), ) except DisabledNamespace as e : logger . exception ( e ) except PropagationCancelled : break except Exception : pass else : if isinstance ( result , str ): logger . info ( result ) elif isinstance ( result , MessageChain ): logger . info ( result . asDisplay ()) def start ( self ): \"\"\"\u542f\u52a8 Console, \u5e42\u7b49\"\"\" if not self . running : self . running = True if self . replace_logger : with contextlib . suppress ( ValueError ): logger . remove ( 0 ) self . handler_id = logger . add ( StdoutProxy ( raw = True )) # type: ignore self . task = self . broadcast . loop . create_task ( self . loop ()) def stop ( self ): \"\"\"\u63d0\u793a Console \u505c\u6b62, \u975e\u5f02\u6b65, \u5e42\u7b49\"\"\" if self . running : logger . info ( \"Stopping console...\" ) self . running = False if self . replace_logger : logger . remove ( self . handler_id ) self . handler_id = logger . add ( sys . stderr ) async def join ( self ): \"\"\"\u7b49\u5f85 Console \u7ed3\u675f, \u5f02\u6b65, \u5e42\u7b49\"\"\" if self . task : await self . task self . task = None def register ( self , dispatchers : Optional [ List [ BaseDispatcher ]] = None , decorators : Optional [ List [ Decorator ]] = None , ): \"\"\"\u6ce8\u518c\u547d\u4ee4\u5904\u7406\u51fd\u6570 Args: dispatchers (List[BaseDispatcher], optional): \u4f7f\u7528\u7684 Dispatcher \u5217\u8868. decorators (List[Decorator], optional): \u4f7f\u7528\u7684 Decorator \u5217\u8868. \"\"\" def wrapper ( func : Callable ): self . registry . append (( func , dispatchers or [], decorators or [])) return func return wrapper __init__ \ud83d\udd17 __init__ ( broadcast : Broadcast , prompt : Union [ Callable [[], str ], AnyFormattedText ] = ' {library_name} {graia_ariadne_version} >' , * , r_prompt : Union [ Callable [[], str ], AnyFormattedText ] = '' , style : Optional [ Style ] = None , extra_data_getter : Iterable [ Callable [[], Dict [ str , Any ]]] = (), replace_logger : bool = True , listen_launch : bool = True , listen_shutdown : bool = True ) -> None \u521d\u59cb\u5316\u63a7\u5236\u53f0. Parameters: Name Type Description Default broadcast Broadcast \u4e8b\u4ef6\u7cfb\u7edf. required prompt AnyFormattedText \u8f93\u5165\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \u9ed8\u8ba4\u4e3a \"{library_name} {graia_ariadne_version}>\". '{library_name} {graia_ariadne_version}>' r_prompt AnyFormattedText \u53f3\u4fa7\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \u9ed8\u8ba4\u4e3a\u7a7a. '' style Style \u8f93\u5165\u63d0\u793a\u7684\u683c\u5f0f, \u8be6\u89c1 prompt_toolkit \u7684\u4ecb\u7ecd. None extra_data_getter Iterable[() -> Dict[str, Any] \u989d\u5916\u7684 Callable, \u7528\u4e8e\u751f\u6210 prompt \u7684\u683c\u5f0f\u5316\u6570\u636e. () replace_logger bool \u662f\u5426\u5c1d\u8bd5\u66ff\u6362 loguru \u7684 0 \u53f7 handler (sys.stderr) \u4e3a StdoutProxy. \u9ed8\u8ba4\u4e3a True. True listen_launch bool \u662f\u5426\u76d1\u542c Ariadne \u7684 ApplicationLaunched \u4e8b\u4ef6\u5e76\u542f\u52a8\u81ea\u8eab, \u9ed8\u8ba4\u4e3a True. True listen_shutdown bool \u662f\u5426\u76d1\u542c Ariadne \u7684 ApplicationShutdowned \u4e8b\u4ef6\u5e76\u505c\u6b62\u81ea\u8eab, \u9ed8\u8ba4\u4e3a True. True Source code in graia/ariadne/console/__init__.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 def __init__ ( self , broadcast : Broadcast , prompt : Union [ Callable [[], str ], AnyFormattedText ] = \" {library_name} {graia_ariadne_version} >\" , * , r_prompt : Union [ Callable [[], str ], AnyFormattedText ] = \"\" , style : Optional [ Style ] = None , extra_data_getter : Iterable [ Callable [[], Dict [ str , Any ]]] = (), replace_logger : bool = True , listen_launch : bool = True , listen_shutdown : bool = True , ) -> None : \"\"\"\u521d\u59cb\u5316\u63a7\u5236\u53f0. Args: broadcast (Broadcast): \u4e8b\u4ef6\u7cfb\u7edf. prompt (AnyFormattedText, optional): \u8f93\u5165\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \\ \u9ed8\u8ba4\u4e3a \"{library_name} {graia_ariadne_version}>\". r_prompt (AnyFormattedText, optional): \u53f3\u4fa7\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \u9ed8\u8ba4\u4e3a\u7a7a. style (Style, optional): \u8f93\u5165\u63d0\u793a\u7684\u683c\u5f0f, \u8be6\u89c1 prompt_toolkit \u7684\u4ecb\u7ecd. extra_data_getter (Iterable[() -> Dict[str, Any], optional): \u989d\u5916\u7684 Callable, \u7528\u4e8e\u751f\u6210 prompt \u7684\u683c\u5f0f\u5316\u6570\u636e. replace_logger (bool, optional): \u662f\u5426\u5c1d\u8bd5\u66ff\u6362 loguru \u7684 0 \u53f7 handler (sys.stderr) \u4e3a StdoutProxy. \u9ed8\u8ba4\u4e3a True. listen_launch (bool, optional): \u662f\u5426\u76d1\u542c Ariadne \u7684 ApplicationLaunched \u4e8b\u4ef6\u5e76\u542f\u52a8\u81ea\u8eab, \u9ed8\u8ba4\u4e3a True. listen_shutdown (bool, optional): \u662f\u5426\u76d1\u542c Ariadne \u7684 ApplicationShutdowned \u4e8b\u4ef6\u5e76\u505c\u6b62\u81ea\u8eab, \u9ed8\u8ba4\u4e3a True. \"\"\" self . broadcast = broadcast # Handle Ariadne Event if listen_launch : broadcast . receiver ( ApplicationLaunched )( self . start ) if listen_shutdown : broadcast . receiver ( ApplicationShutdowned )( self . stop ) self . session : PromptSession [ str ] = PromptSession () self . style = style or Style ([]) self . l_prompt : AnyFormattedText = prompt self . r_prompt : AnyFormattedText = r_prompt self . registry : List [ Tuple [ Callable , List [ BaseDispatcher ], List [ Decorator ]]] = [] self . extra_data_getter = extra_data_getter self . running : bool = False self . task : Optional [ Task ] = None self . handler_id : int = 0 self . replace_logger : bool = replace_logger logger . warning ( \"Please note that console is NOT STABLE.\" ) logger . warning ( \"Use it at your own risk.\" ) data_getter \ud83d\udd17 data_getter () -> Dict [ str , Any ] \u8fd4\u56de\u7528\u4e8e prompt \u7684\u6570\u636e Returns: Type Description Dict [ str , Any ] Dict[str, Any]: \u53ef\u7528\u4e8e format_map \u7684\u6570\u636e\u5b57\u5178 Source code in graia/ariadne/console/__init__.py 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 def data_getter ( self ) -> Dict [ str , Any ]: \"\"\"\u8fd4\u56de\u7528\u4e8e prompt \u7684\u6570\u636e Returns: Dict[str, Any]: \u53ef\u7528\u4e8e format_map \u7684\u6570\u636e\u5b57\u5178 \"\"\" data = { \"library_name\" : \"Ariadne\" , } for dist in importlib . metadata . distributions (): name : str = dist . metadata [ \"Name\" ] version : str = dist . version if name . startswith ( \"graia\" ): if name == \"graia-ariadne-dev\" : name = \"graia-ariadne\" data [ f \" { '_' . join ( name . split ( '-' ) + [ 'version' ]) } \" ] = version for func in self . extra_data_getter : data . update ( func ()) return data join async \ud83d\udd17 join () \u7b49\u5f85 Console \u7ed3\u675f, \u5f02\u6b65, \u5e42\u7b49 Source code in graia/ariadne/console/__init__.py 220 221 222 223 224 async def join ( self ): \"\"\"\u7b49\u5f85 Console \u7ed3\u675f, \u5f02\u6b65, \u5e42\u7b49\"\"\" if self . task : await self . task self . task = None loop async \ud83d\udd17 loop () -> None Console \u7684\u8f93\u5165\u5faa\u73af Source code in graia/ariadne/console/__init__.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 async def loop ( self ) -> None : \"\"\"Console \u7684\u8f93\u5165\u5faa\u73af\"\"\" from graia.ariadne.message.chain import MessageChain from graia.ariadne.message.element import Plain class _Dispatcher ( BaseDispatcher ): def __init__ ( self , command : str , console : Console ) -> None : self . command = command self . console = console async def catch ( self , interface : DispatcherInterface ): if interface . annotation is str and interface . name == \"command\" : return self . command if interface . annotation is MessageChain : return MessageChain ([ Plain ( self . command )], inline = True ) if interface . annotation is Console : return self . console if interface . annotation is Broadcast : return self . console . broadcast if interface . annotation is AbstractEventLoop : return self . console . broadcast . loop while self . running : try : command = await self . prompt () except KeyboardInterrupt : self . stop () raise for func , dispatchers , decorators in self . registry : try : result = await self . broadcast . Executor ( ExecTarget ( func , resolve_dispatchers_mixin ( [ _Dispatcher ( command , self ), ContextDispatcher (), * dispatchers ] ), decorators , ), ) except DisabledNamespace as e : logger . exception ( e ) except PropagationCancelled : break except Exception : pass else : if isinstance ( result , str ): logger . info ( result ) elif isinstance ( result , MessageChain ): logger . info ( result . asDisplay ()) prompt async \ud83d\udd17 prompt ( l_prompt : Optional [ AnyFormattedText ] = None , r_prompt : Optional [ AnyFormattedText ] = None , style : Optional [ Style ] = None ) -> str \u5411\u63a7\u5236\u53f0\u53d1\u9001\u4e00\u4e2a\u8f93\u5165\u8bf7\u6c42, \u5f02\u6b65 Parameters: Name Type Description Default l_prompt AnyFormattedText \u5de6\u8f93\u5165\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \u9ed8\u8ba4\u4e3a \"{library_name} {graia_ariadne_version}>\". \u6ce8\u610f\u4e3a l_prompt . None r_prompt AnyFormattedText \u53f3\u4fa7\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \u9ed8\u8ba4\u4e3a\u7a7a. None style Style \u8f93\u5165\u63d0\u793a\u7684\u683c\u5f0f, \u8be6\u89c1 prompt_toolkit \u7684\u4ecb\u7ecd. None Returns: Name Type Description str str \u8f93\u5165\u7ed3\u679c Source code in graia/ariadne/console/__init__.py 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 async def prompt ( self , l_prompt : Optional [ AnyFormattedText ] = None , r_prompt : Optional [ AnyFormattedText ] = None , style : Optional [ Style ] = None , ) -> str : \"\"\"\u5411\u63a7\u5236\u53f0\u53d1\u9001\u4e00\u4e2a\u8f93\u5165\u8bf7\u6c42, \u5f02\u6b65 Args: l_prompt (AnyFormattedText, optional): \u5de6\u8f93\u5165\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \\ \u9ed8\u8ba4\u4e3a \"{library_name} {graia_ariadne_version}>\". \u6ce8\u610f\u4e3a l_prompt . r_prompt (AnyFormattedText, optional): \u53f3\u4fa7\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \u9ed8\u8ba4\u4e3a\u7a7a. style (Style, optional): \u8f93\u5165\u63d0\u793a\u7684\u683c\u5f0f, \u8be6\u89c1 prompt_toolkit \u7684\u4ecb\u7ecd. Returns: str: \u8f93\u5165\u7ed3\u679c \"\"\" l_prompt = l_prompt or self . l_prompt r_prompt = r_prompt or self . r_prompt style = style or self . style if isinstance ( l_prompt , str ): l_prompt = l_prompt . format_map ( self . data_getter ()) if isinstance ( r_prompt , str ): r_prompt = r_prompt . format_map ( self . data_getter ()) try : return await self . session . prompt_async ( message = l_prompt , rprompt = r_prompt , style = style , set_exception_handler = False , ) except KeyboardInterrupt : self . stop () raise register \ud83d\udd17 register ( dispatchers : Optional [ List [ BaseDispatcher ]] = None , decorators : Optional [ List [ Decorator ]] = None ) \u6ce8\u518c\u547d\u4ee4\u5904\u7406\u51fd\u6570 Parameters: Name Type Description Default dispatchers List [ BaseDispatcher ] \u4f7f\u7528\u7684 Dispatcher \u5217\u8868. None decorators List [ Decorator ] \u4f7f\u7528\u7684 Decorator \u5217\u8868. None Source code in graia/ariadne/console/__init__.py 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 def register ( self , dispatchers : Optional [ List [ BaseDispatcher ]] = None , decorators : Optional [ List [ Decorator ]] = None , ): \"\"\"\u6ce8\u518c\u547d\u4ee4\u5904\u7406\u51fd\u6570 Args: dispatchers (List[BaseDispatcher], optional): \u4f7f\u7528\u7684 Dispatcher \u5217\u8868. decorators (List[Decorator], optional): \u4f7f\u7528\u7684 Decorator \u5217\u8868. \"\"\" def wrapper ( func : Callable ): self . registry . append (( func , dispatchers or [], decorators or [])) return func return wrapper start \ud83d\udd17 start () \u542f\u52a8 Console, \u5e42\u7b49 Source code in graia/ariadne/console/__init__.py 196 197 198 199 200 201 202 203 204 205 206 def start ( self ): \"\"\"\u542f\u52a8 Console, \u5e42\u7b49\"\"\" if not self . running : self . running = True if self . replace_logger : with contextlib . suppress ( ValueError ): logger . remove ( 0 ) self . handler_id = logger . add ( StdoutProxy ( raw = True )) # type: ignore self . task = self . broadcast . loop . create_task ( self . loop ()) stop \ud83d\udd17 stop () \u63d0\u793a Console \u505c\u6b62, \u975e\u5f02\u6b65, \u5e42\u7b49 Source code in graia/ariadne/console/__init__.py 208 209 210 211 212 213 214 215 216 217 218 def stop ( self ): \"\"\"\u63d0\u793a Console \u505c\u6b62, \u975e\u5f02\u6b65, \u5e42\u7b49\"\"\" if self . running : logger . info ( \"Stopping console...\" ) self . running = False if self . replace_logger : logger . remove ( self . handler_id ) self . handler_id = logger . add ( sys . stderr )","title":"console"},{"location":"refs/graia/ariadne/console/#graia.ariadne.console.Console","text":"Ariadne \u7684\u63a7\u5236\u53f0, \u53ef\u4ee5\u8131\u79bb Ariadne \u5b9e\u4f8b\u8fd0\u884c \u8b66\u544a: \u672c\u5b9e\u73b0\u65e0\u6cd5\u786e\u4fdd\u7a33\u5b9a\u6027 Source code in graia/ariadne/console/__init__.pyclass Console : \"\"\"Ariadne \u7684\u63a7\u5236\u53f0, \u53ef\u4ee5\u8131\u79bb Ariadne \u5b9e\u4f8b\u8fd0\u884c \u8b66\u544a: \u672c\u5b9e\u73b0\u65e0\u6cd5\u786e\u4fdd\u7a33\u5b9a\u6027\"\"\" def __init__ ( self , broadcast : Broadcast , prompt : Union [ Callable [[], str ], AnyFormattedText ] = \" {library_name} {graia_ariadne_version} >\" , * , r_prompt : Union [ Callable [[], str ], AnyFormattedText ] = \"\" , style : Optional [ Style ] = None , extra_data_getter : Iterable [ Callable [[], Dict [ str , Any ]]] = (), replace_logger : bool = True , listen_launch : bool = True , listen_shutdown : bool = True , ) -> None : \"\"\"\u521d\u59cb\u5316\u63a7\u5236\u53f0. Args: broadcast (Broadcast): \u4e8b\u4ef6\u7cfb\u7edf. prompt (AnyFormattedText, optional): \u8f93\u5165\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \\ \u9ed8\u8ba4\u4e3a \"{library_name} {graia_ariadne_version}>\". r_prompt (AnyFormattedText, optional): \u53f3\u4fa7\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \u9ed8\u8ba4\u4e3a\u7a7a. style (Style, optional): \u8f93\u5165\u63d0\u793a\u7684\u683c\u5f0f, \u8be6\u89c1 prompt_toolkit \u7684\u4ecb\u7ecd. extra_data_getter (Iterable[() -> Dict[str, Any], optional): \u989d\u5916\u7684 Callable, \u7528\u4e8e\u751f\u6210 prompt \u7684\u683c\u5f0f\u5316\u6570\u636e. replace_logger (bool, optional): \u662f\u5426\u5c1d\u8bd5\u66ff\u6362 loguru \u7684 0 \u53f7 handler (sys.stderr) \u4e3a StdoutProxy. \u9ed8\u8ba4\u4e3a True. listen_launch (bool, optional): \u662f\u5426\u76d1\u542c Ariadne \u7684 ApplicationLaunched \u4e8b\u4ef6\u5e76\u542f\u52a8\u81ea\u8eab, \u9ed8\u8ba4\u4e3a True. listen_shutdown (bool, optional): \u662f\u5426\u76d1\u542c Ariadne \u7684 ApplicationShutdowned \u4e8b\u4ef6\u5e76\u505c\u6b62\u81ea\u8eab, \u9ed8\u8ba4\u4e3a True. \"\"\" self . broadcast = broadcast # Handle Ariadne Event if listen_launch : broadcast . receiver ( ApplicationLaunched )( self . start ) if listen_shutdown : broadcast . receiver ( ApplicationShutdowned )( self . stop ) self . session : PromptSession [ str ] = PromptSession () self . style = style or Style ([]) self . l_prompt : AnyFormattedText = prompt self . r_prompt : AnyFormattedText = r_prompt self . registry : List [ Tuple [ Callable , List [ BaseDispatcher ], List [ Decorator ]]] = [] self . extra_data_getter = extra_data_getter self . running : bool = False self . task : Optional [ Task ] = None self . handler_id : int = 0 self . replace_logger : bool = replace_logger logger . warning ( \"Please note that console is NOT STABLE.\" ) logger . warning ( \"Use it at your own risk.\" ) def data_getter ( self ) -> Dict [ str , Any ]: \"\"\"\u8fd4\u56de\u7528\u4e8e prompt \u7684\u6570\u636e Returns: Dict[str, Any]: \u53ef\u7528\u4e8e format_map \u7684\u6570\u636e\u5b57\u5178 \"\"\" data = { \"library_name\" : \"Ariadne\" , } for dist in importlib . metadata . distributions (): name : str = dist . metadata [ \"Name\" ] version : str = dist . version if name . startswith ( \"graia\" ): if name == \"graia-ariadne-dev\" : name = \"graia-ariadne\" data [ f \" { '_' . join ( name . split ( '-' ) + [ 'version' ]) } \" ] = version for func in self . extra_data_getter : data . update ( func ()) return data async def prompt ( self , l_prompt : Optional [ AnyFormattedText ] = None , r_prompt : Optional [ AnyFormattedText ] = None , style : Optional [ Style ] = None , ) -> str : \"\"\"\u5411\u63a7\u5236\u53f0\u53d1\u9001\u4e00\u4e2a\u8f93\u5165\u8bf7\u6c42, \u5f02\u6b65 Args: l_prompt (AnyFormattedText, optional): \u5de6\u8f93\u5165\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \\ \u9ed8\u8ba4\u4e3a \"{library_name} {graia_ariadne_version}>\". \u6ce8\u610f\u4e3a l_prompt . r_prompt (AnyFormattedText, optional): \u53f3\u4fa7\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \u9ed8\u8ba4\u4e3a\u7a7a. style (Style, optional): \u8f93\u5165\u63d0\u793a\u7684\u683c\u5f0f, \u8be6\u89c1 prompt_toolkit \u7684\u4ecb\u7ecd. Returns: str: \u8f93\u5165\u7ed3\u679c \"\"\" l_prompt = l_prompt or self . l_prompt r_prompt = r_prompt or self . r_prompt style = style or self . style if isinstance ( l_prompt , str ): l_prompt = l_prompt . format_map ( self . data_getter ()) if isinstance ( r_prompt , str ): r_prompt = r_prompt . format_map ( self . data_getter ()) try : return await self . session . prompt_async ( message = l_prompt , rprompt = r_prompt , style = style , set_exception_handler = False , ) except KeyboardInterrupt : self . stop () raise async def loop ( self ) -> None : \"\"\"Console \u7684\u8f93\u5165\u5faa\u73af\"\"\" from graia.ariadne.message.chain import MessageChain from graia.ariadne.message.element import Plain class _Dispatcher ( BaseDispatcher ): def __init__ ( self , command : str , console : Console ) -> None : self . command = command self . console = console async def catch ( self , interface : DispatcherInterface ): if interface . annotation is str and interface . name == \"command\" : return self . command if interface . annotation is MessageChain : return MessageChain ([ Plain ( self . command )], inline = True ) if interface . annotation is Console : return self . console if interface . annotation is Broadcast : return self . console . broadcast if interface . annotation is AbstractEventLoop : return self . console . broadcast . loop while self . running : try : command = await self . prompt () except KeyboardInterrupt : self . stop () raise for func , dispatchers , decorators in self . registry : try : result = await self . broadcast . Executor ( ExecTarget ( func , resolve_dispatchers_mixin ( [ _Dispatcher ( command , self ), ContextDispatcher (), * dispatchers ] ), decorators , ), ) except DisabledNamespace as e : logger . exception ( e ) except PropagationCancelled : break except Exception : pass else : if isinstance ( result , str ): logger . info ( result ) elif isinstance ( result , MessageChain ): logger . info ( result . asDisplay ()) def start ( self ): \"\"\"\u542f\u52a8 Console, \u5e42\u7b49\"\"\" if not self . running : self . running = True if self . replace_logger : with contextlib . suppress ( ValueError ): logger . remove ( 0 ) self . handler_id = logger . add ( StdoutProxy ( raw = True )) # type: ignore self . task = self . broadcast . loop . create_task ( self . loop ()) def stop ( self ): \"\"\"\u63d0\u793a Console \u505c\u6b62, \u975e\u5f02\u6b65, \u5e42\u7b49\"\"\" if self . running : logger . info ( \"Stopping console...\" ) self . running = False if self . replace_logger : logger . remove ( self . handler_id ) self . handler_id = logger . add ( sys . stderr ) async def join ( self ): \"\"\"\u7b49\u5f85 Console \u7ed3\u675f, \u5f02\u6b65, \u5e42\u7b49\"\"\" if self . task : await self . task self . task = None def register ( self , dispatchers : Optional [ List [ BaseDispatcher ]] = None , decorators : Optional [ List [ Decorator ]] = None , ): \"\"\"\u6ce8\u518c\u547d\u4ee4\u5904\u7406\u51fd\u6570 Args: dispatchers (List[BaseDispatcher], optional): \u4f7f\u7528\u7684 Dispatcher \u5217\u8868. decorators (List[Decorator], optional): \u4f7f\u7528\u7684 Decorator \u5217\u8868. \"\"\" def wrapper ( func : Callable ): self . registry . append (( func , dispatchers or [], decorators or [])) return func return wrapper","title":"Console"},{"location":"refs/graia/ariadne/console/#graia.ariadne.console.Console.__init__","text":"__init__ ( broadcast : Broadcast , prompt : Union [ Callable [[], str ], AnyFormattedText ] = ' {library_name} {graia_ariadne_version} >' , * , r_prompt : Union [ Callable [[], str ], AnyFormattedText ] = '' , style : Optional [ Style ] = None , extra_data_getter : Iterable [ Callable [[], Dict [ str , Any ]]] = (), replace_logger : bool = True , listen_launch : bool = True , listen_shutdown : bool = True ) -> None \u521d\u59cb\u5316\u63a7\u5236\u53f0. Parameters: Name Type Description Default broadcast Broadcast \u4e8b\u4ef6\u7cfb\u7edf. required prompt AnyFormattedText \u8f93\u5165\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \u9ed8\u8ba4\u4e3a \"{library_name} {graia_ariadne_version}>\". '{library_name} {graia_ariadne_version}>' r_prompt AnyFormattedText \u53f3\u4fa7\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \u9ed8\u8ba4\u4e3a\u7a7a. '' style Style \u8f93\u5165\u63d0\u793a\u7684\u683c\u5f0f, \u8be6\u89c1 prompt_toolkit \u7684\u4ecb\u7ecd. None extra_data_getter Iterable[() -> Dict[str, Any] \u989d\u5916\u7684 Callable, \u7528\u4e8e\u751f\u6210 prompt \u7684\u683c\u5f0f\u5316\u6570\u636e. () replace_logger bool \u662f\u5426\u5c1d\u8bd5\u66ff\u6362 loguru \u7684 0 \u53f7 handler (sys.stderr) \u4e3a StdoutProxy. \u9ed8\u8ba4\u4e3a True. True listen_launch bool \u662f\u5426\u76d1\u542c Ariadne \u7684 ApplicationLaunched \u4e8b\u4ef6\u5e76\u542f\u52a8\u81ea\u8eab, \u9ed8\u8ba4\u4e3a True. True listen_shutdown bool \u662f\u5426\u76d1\u542c Ariadne \u7684 ApplicationShutdowned \u4e8b\u4ef6\u5e76\u505c\u6b62\u81ea\u8eab, \u9ed8\u8ba4\u4e3a True. True Source code in graia/ariadne/console/__init__.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 def __init__ ( self , broadcast : Broadcast , prompt : Union [ Callable [[], str ], AnyFormattedText ] = \" {library_name} {graia_ariadne_version} >\" , * , r_prompt : Union [ Callable [[], str ], AnyFormattedText ] = \"\" , style : Optional [ Style ] = None , extra_data_getter : Iterable [ Callable [[], Dict [ str , Any ]]] = (), replace_logger : bool = True , listen_launch : bool = True , listen_shutdown : bool = True , ) -> None : \"\"\"\u521d\u59cb\u5316\u63a7\u5236\u53f0. Args: broadcast (Broadcast): \u4e8b\u4ef6\u7cfb\u7edf. prompt (AnyFormattedText, optional): \u8f93\u5165\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \\ \u9ed8\u8ba4\u4e3a \"{library_name} {graia_ariadne_version}>\". r_prompt (AnyFormattedText, optional): \u53f3\u4fa7\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \u9ed8\u8ba4\u4e3a\u7a7a. style (Style, optional): \u8f93\u5165\u63d0\u793a\u7684\u683c\u5f0f, \u8be6\u89c1 prompt_toolkit \u7684\u4ecb\u7ecd. extra_data_getter (Iterable[() -> Dict[str, Any], optional): \u989d\u5916\u7684 Callable, \u7528\u4e8e\u751f\u6210 prompt \u7684\u683c\u5f0f\u5316\u6570\u636e. replace_logger (bool, optional): \u662f\u5426\u5c1d\u8bd5\u66ff\u6362 loguru \u7684 0 \u53f7 handler (sys.stderr) \u4e3a StdoutProxy. \u9ed8\u8ba4\u4e3a True. listen_launch (bool, optional): \u662f\u5426\u76d1\u542c Ariadne \u7684 ApplicationLaunched \u4e8b\u4ef6\u5e76\u542f\u52a8\u81ea\u8eab, \u9ed8\u8ba4\u4e3a True. listen_shutdown (bool, optional): \u662f\u5426\u76d1\u542c Ariadne \u7684 ApplicationShutdowned \u4e8b\u4ef6\u5e76\u505c\u6b62\u81ea\u8eab, \u9ed8\u8ba4\u4e3a True. \"\"\" self . broadcast = broadcast # Handle Ariadne Event if listen_launch : broadcast . receiver ( ApplicationLaunched )( self . start ) if listen_shutdown : broadcast . receiver ( ApplicationShutdowned )( self . stop ) self . session : PromptSession [ str ] = PromptSession () self . style = style or Style ([]) self . l_prompt : AnyFormattedText = prompt self . r_prompt : AnyFormattedText = r_prompt self . registry : List [ Tuple [ Callable , List [ BaseDispatcher ], List [ Decorator ]]] = [] self . extra_data_getter = extra_data_getter self . running : bool = False self . task : Optional [ Task ] = None self . handler_id : int = 0 self . replace_logger : bool = replace_logger logger . warning ( \"Please note that console is NOT STABLE.\" ) logger . warning ( \"Use it at your own risk.\" )","title":"__init__()"},{"location":"refs/graia/ariadne/console/#graia.ariadne.console.Console.data_getter","text":"data_getter () -> Dict [ str , Any ] \u8fd4\u56de\u7528\u4e8e prompt \u7684\u6570\u636e Returns: Type Description Dict [ str , Any ] Dict[str, Any]: \u53ef\u7528\u4e8e format_map \u7684\u6570\u636e\u5b57\u5178 Source code in graia/ariadne/console/__init__.py 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 def data_getter ( self ) -> Dict [ str , Any ]: \"\"\"\u8fd4\u56de\u7528\u4e8e prompt \u7684\u6570\u636e Returns: Dict[str, Any]: \u53ef\u7528\u4e8e format_map \u7684\u6570\u636e\u5b57\u5178 \"\"\" data = { \"library_name\" : \"Ariadne\" , } for dist in importlib . metadata . distributions (): name : str = dist . metadata [ \"Name\" ] version : str = dist . version if name . startswith ( \"graia\" ): if name == \"graia-ariadne-dev\" : name = \"graia-ariadne\" data [ f \" { '_' . join ( name . split ( '-' ) + [ 'version' ]) } \" ] = version for func in self . extra_data_getter : data . update ( func ()) return data","title":"data_getter()"},{"location":"refs/graia/ariadne/console/#graia.ariadne.console.Console.join","text":"join () \u7b49\u5f85 Console \u7ed3\u675f, \u5f02\u6b65, \u5e42\u7b49 Source code in graia/ariadne/console/__init__.py 220 221 222 223 224 async def join ( self ): \"\"\"\u7b49\u5f85 Console \u7ed3\u675f, \u5f02\u6b65, \u5e42\u7b49\"\"\" if self . task : await self . task self . task = None","title":"join()"},{"location":"refs/graia/ariadne/console/#graia.ariadne.console.Console.loop","text":"loop () -> None Console \u7684\u8f93\u5165\u5faa\u73af Source code in graia/ariadne/console/__init__.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 async def loop ( self ) -> None : \"\"\"Console \u7684\u8f93\u5165\u5faa\u73af\"\"\" from graia.ariadne.message.chain import MessageChain from graia.ariadne.message.element import Plain class _Dispatcher ( BaseDispatcher ): def __init__ ( self , command : str , console : Console ) -> None : self . command = command self . console = console async def catch ( self , interface : DispatcherInterface ): if interface . annotation is str and interface . name == \"command\" : return self . command if interface . annotation is MessageChain : return MessageChain ([ Plain ( self . command )], inline = True ) if interface . annotation is Console : return self . console if interface . annotation is Broadcast : return self . console . broadcast if interface . annotation is AbstractEventLoop : return self . console . broadcast . loop while self . running : try : command = await self . prompt () except KeyboardInterrupt : self . stop () raise for func , dispatchers , decorators in self . registry : try : result = await self . broadcast . Executor ( ExecTarget ( func , resolve_dispatchers_mixin ( [ _Dispatcher ( command , self ), ContextDispatcher (), * dispatchers ] ), decorators , ), ) except DisabledNamespace as e : logger . exception ( e ) except PropagationCancelled : break except Exception : pass else : if isinstance ( result , str ): logger . info ( result ) elif isinstance ( result , MessageChain ): logger . info ( result . asDisplay ())","title":"loop()"},{"location":"refs/graia/ariadne/console/#graia.ariadne.console.Console.prompt","text":"prompt ( l_prompt : Optional [ AnyFormattedText ] = None , r_prompt : Optional [ AnyFormattedText ] = None , style : Optional [ Style ] = None ) -> str \u5411\u63a7\u5236\u53f0\u53d1\u9001\u4e00\u4e2a\u8f93\u5165\u8bf7\u6c42, \u5f02\u6b65 Parameters: Name Type Description Default l_prompt AnyFormattedText \u5de6\u8f93\u5165\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \u9ed8\u8ba4\u4e3a \"{library_name} {graia_ariadne_version}>\". \u6ce8\u610f\u4e3a l_prompt . None r_prompt AnyFormattedText \u53f3\u4fa7\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \u9ed8\u8ba4\u4e3a\u7a7a. None style Style \u8f93\u5165\u63d0\u793a\u7684\u683c\u5f0f, \u8be6\u89c1 prompt_toolkit \u7684\u4ecb\u7ecd. None Returns: Name Type Description str str \u8f93\u5165\u7ed3\u679c Source code in graia/ariadne/console/__init__.py 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 async def prompt ( self , l_prompt : Optional [ AnyFormattedText ] = None , r_prompt : Optional [ AnyFormattedText ] = None , style : Optional [ Style ] = None , ) -> str : \"\"\"\u5411\u63a7\u5236\u53f0\u53d1\u9001\u4e00\u4e2a\u8f93\u5165\u8bf7\u6c42, \u5f02\u6b65 Args: l_prompt (AnyFormattedText, optional): \u5de6\u8f93\u5165\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \\ \u9ed8\u8ba4\u4e3a \"{library_name} {graia_ariadne_version}>\". \u6ce8\u610f\u4e3a l_prompt . r_prompt (AnyFormattedText, optional): \u53f3\u4fa7\u63d0\u793a, \u53ef\u4f7f\u7528 f-string \u5f62\u5f0f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \u9ed8\u8ba4\u4e3a\u7a7a. style (Style, optional): \u8f93\u5165\u63d0\u793a\u7684\u683c\u5f0f, \u8be6\u89c1 prompt_toolkit \u7684\u4ecb\u7ecd. Returns: str: \u8f93\u5165\u7ed3\u679c \"\"\" l_prompt = l_prompt or self . l_prompt r_prompt = r_prompt or self . r_prompt style = style or self . style if isinstance ( l_prompt , str ): l_prompt = l_prompt . format_map ( self . data_getter ()) if isinstance ( r_prompt , str ): r_prompt = r_prompt . format_map ( self . data_getter ()) try : return await self . session . prompt_async ( message = l_prompt , rprompt = r_prompt , style = style , set_exception_handler = False , ) except KeyboardInterrupt : self . stop () raise","title":"prompt()"},{"location":"refs/graia/ariadne/console/#graia.ariadne.console.Console.register","text":"register ( dispatchers : Optional [ List [ BaseDispatcher ]] = None , decorators : Optional [ List [ Decorator ]] = None ) \u6ce8\u518c\u547d\u4ee4\u5904\u7406\u51fd\u6570 Parameters: Name Type Description Default dispatchers List [ BaseDispatcher ] \u4f7f\u7528\u7684 Dispatcher \u5217\u8868. None decorators List [ Decorator ] \u4f7f\u7528\u7684 Decorator \u5217\u8868. None Source code in graia/ariadne/console/__init__.py 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 def register ( self , dispatchers : Optional [ List [ BaseDispatcher ]] = None , decorators : Optional [ List [ Decorator ]] = None , ): \"\"\"\u6ce8\u518c\u547d\u4ee4\u5904\u7406\u51fd\u6570 Args: dispatchers (List[BaseDispatcher], optional): \u4f7f\u7528\u7684 Dispatcher \u5217\u8868. decorators (List[Decorator], optional): \u4f7f\u7528\u7684 Decorator \u5217\u8868. \"\"\" def wrapper ( func : Callable ): self . registry . append (( func , dispatchers or [], decorators or [])) return func return wrapper","title":"register()"},{"location":"refs/graia/ariadne/console/#graia.ariadne.console.Console.start","text":"start () \u542f\u52a8 Console, \u5e42\u7b49 Source code in graia/ariadne/console/__init__.py 196 197 198 199 200 201 202 203 204 205 206 def start ( self ): \"\"\"\u542f\u52a8 Console, \u5e42\u7b49\"\"\" if not self . running : self . running = True if self . replace_logger : with contextlib . suppress ( ValueError ): logger . remove ( 0 ) self . handler_id = logger . add ( StdoutProxy ( raw = True )) # type: ignore self . task = self . broadcast . loop . create_task ( self . loop ())","title":"start()"},{"location":"refs/graia/ariadne/console/#graia.ariadne.console.Console.stop","text":"stop () \u63d0\u793a Console \u505c\u6b62, \u975e\u5f02\u6b65, \u5e42\u7b49 Source code in graia/ariadne/console/__init__.py 208 209 210 211 212 213 214 215 216 217 218 def stop ( self ): \"\"\"\u63d0\u793a Console \u505c\u6b62, \u975e\u5f02\u6b65, \u5e42\u7b49\"\"\" if self . running : logger . info ( \"Stopping console...\" ) self . running = False if self . replace_logger : logger . remove ( self . handler_id ) self . handler_id = logger . add ( sys . stderr )","title":"stop()"},{"location":"refs/graia/ariadne/console/saya/","text":"Ariadne \u63a7\u5236\u53f0\u5bf9 Saya \u5c01\u88c5\u7684 Behaviour \u4e0e Schema ConsoleBehaviour \ud83d\udd17 Bases: Behaviour \u63a7\u5236\u53f0\u7684 Saya Behaviour \u5b9e\u73b0, \u4f20\u5165 Console \u5bf9\u8c61 Source code in graia/ariadne/console/saya.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 class ConsoleBehaviour ( Behaviour ): \"\"\"\u63a7\u5236\u53f0\u7684 Saya Behaviour \u5b9e\u73b0, \u4f20\u5165 Console \u5bf9\u8c61\"\"\" def __init__ ( self , console : Console ) -> None : self . console = console def allocate ( self , cube : Cube [ ConsoleSchema ]): if not isinstance ( cube . metaclass , ConsoleSchema ): return cube . metaclass . register ( cube . content , self . console ) return True def uninstall ( self , cube : Cube [ ConsoleSchema ]): if not isinstance ( cube . metaclass , ConsoleSchema ): return for val in self . console . registry [:]: if cube . content is val [ 0 ]: self . console . registry . remove ( val ) return True ConsoleSchema \ud83d\udd17 Bases: BaseSchema \u63a7\u5236\u53f0\u76d1\u542c Schema, \u76f8\u5f53\u4e8e console.register Source code in graia/ariadne/console/saya.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 @dataclass class ConsoleSchema ( BaseSchema ): \"\"\"\u63a7\u5236\u53f0\u76d1\u542c Schema, \u76f8\u5f53\u4e8e console.register\"\"\" dispatchers : List [ BaseDispatcher ] = field ( default_factory = list ) decorators : List [ Decorator ] = field ( default_factory = list ) def register ( self , func : Callable , console : Console ): \"\"\"\u6ce8\u518c func \u81f3 console Args: func (Callable): \u76d1\u542c\u51fd\u6570 console (Console): \u6ce8\u518c\u5230\u7684 console \"\"\" console . register ( self . dispatchers , self . decorators )( func ) register \ud83d\udd17 register ( func : Callable , console : Console ) \u6ce8\u518c func \u81f3 console Parameters: Name Type Description Default func Callable \u76d1\u542c\u51fd\u6570 required console Console \u6ce8\u518c\u5230\u7684 console required Source code in graia/ariadne/console/saya.py 21 22 23 24 25 26 27 28 def register ( self , func : Callable , console : Console ): \"\"\"\u6ce8\u518c func \u81f3 console Args: func (Callable): \u76d1\u542c\u51fd\u6570 console (Console): \u6ce8\u518c\u5230\u7684 console \"\"\" console . register ( self . dispatchers , self . decorators )( func )","title":"saya"},{"location":"refs/graia/ariadne/console/saya/#graia.ariadne.console.saya.ConsoleBehaviour","text":"Bases: Behaviour \u63a7\u5236\u53f0\u7684 Saya Behaviour \u5b9e\u73b0, \u4f20\u5165 Console \u5bf9\u8c61 Source code in graia/ariadne/console/saya.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 class ConsoleBehaviour ( Behaviour ): \"\"\"\u63a7\u5236\u53f0\u7684 Saya Behaviour \u5b9e\u73b0, \u4f20\u5165 Console \u5bf9\u8c61\"\"\" def __init__ ( self , console : Console ) -> None : self . console = console def allocate ( self , cube : Cube [ ConsoleSchema ]): if not isinstance ( cube . metaclass , ConsoleSchema ): return cube . metaclass . register ( cube . content , self . console ) return True def uninstall ( self , cube : Cube [ ConsoleSchema ]): if not isinstance ( cube . metaclass , ConsoleSchema ): return for val in self . console . registry [:]: if cube . content is val [ 0 ]: self . console . registry . remove ( val ) return True","title":"ConsoleBehaviour"},{"location":"refs/graia/ariadne/console/saya/#graia.ariadne.console.saya.ConsoleSchema","text":"Bases: BaseSchema \u63a7\u5236\u53f0\u76d1\u542c Schema, \u76f8\u5f53\u4e8e console.register Source code in graia/ariadne/console/saya.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 @dataclass class ConsoleSchema ( BaseSchema ): \"\"\"\u63a7\u5236\u53f0\u76d1\u542c Schema, \u76f8\u5f53\u4e8e console.register\"\"\" dispatchers : List [ BaseDispatcher ] = field ( default_factory = list ) decorators : List [ Decorator ] = field ( default_factory = list ) def register ( self , func : Callable , console : Console ): \"\"\"\u6ce8\u518c func \u81f3 console Args: func (Callable): \u76d1\u542c\u51fd\u6570 console (Console): \u6ce8\u518c\u5230\u7684 console \"\"\" console . register ( self . dispatchers , self . decorators )( func )","title":"ConsoleSchema"},{"location":"refs/graia/ariadne/console/saya/#graia.ariadne.console.saya.ConsoleSchema.register","text":"register ( func : Callable , console : Console ) \u6ce8\u518c func \u81f3 console Parameters: Name Type Description Default func Callable \u76d1\u542c\u51fd\u6570 required console Console \u6ce8\u518c\u5230\u7684 console required Source code in graia/ariadne/console/saya.py 21 22 23 24 25 26 27 28 def register ( self , func : Callable , console : Console ): \"\"\"\u6ce8\u518c func \u81f3 console Args: func (Callable): \u76d1\u542c\u51fd\u6570 console (Console): \u6ce8\u518c\u5230\u7684 console \"\"\" console . register ( self . dispatchers , self . decorators )( func )","title":"register()"},{"location":"refs/graia/ariadne/entry/","text":"Ariadne \u4e00\u7ad9\u5f0f\u5bfc\u5165\u7684\u63d0\u4f9b\u6a21\u5757","title":"entry"},{"location":"refs/graia/ariadne/entry/event/","text":"Ariadne \u4e8b\u4ef6\u76f8\u5173\u7684\u5bfc\u5165\u96c6\u5408","title":"event"},{"location":"refs/graia/ariadne/entry/message/","text":"Ariadne \u6d88\u606f\u76f8\u5173\u7684\u5bfc\u5165\u96c6\u5408","title":"message"},{"location":"refs/graia/ariadne/event/","text":"Ariadne \u7684\u4e8b\u4ef6 MiraiEvent \ud83d\udd17 Bases: Dispatchable , AriadneBaseModel Ariadne \u7684\u4e8b\u4ef6\u57fa\u7c7b Source code in graia/ariadne/event/__init__.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class MiraiEvent ( Dispatchable , AriadneBaseModel ): \"\"\"Ariadne \u7684\u4e8b\u4ef6\u57fa\u7c7b\"\"\" type : str \"\"\"\u4e8b\u4ef6\u7c7b\u578b\"\"\" @validator ( \"type\" , allow_reuse = True ) def validate_event_type ( cls , v ): \"\"\"\u9a8c\u8bc1\u4e8b\u4ef6\u7c7b\u578b, \u901a\u8fc7\u6bd4\u5bf9 type \u5b57\u6bb5\u5b9e\u73b0\"\"\" if not isinstance ( cls , type ): raise TypeError ( \"cls must be a class!\" ) if cls . type != v : raise InvalidEventTypeDefinition ( f \" { cls . __name__ } 's type must be ' { cls . type } ', not ' { v } '\" ) return v Dispatcher = BaseDispatcher type class-attribute \ud83d\udd17 type : str = None \u4e8b\u4ef6\u7c7b\u578b validate_event_type \ud83d\udd17 validate_event_type ( v ) \u9a8c\u8bc1\u4e8b\u4ef6\u7c7b\u578b, \u901a\u8fc7\u6bd4\u5bf9 type \u5b57\u6bb5\u5b9e\u73b0 Source code in graia/ariadne/event/__init__.py 16 17 18 19 20 21 22 23 @validator ( \"type\" , allow_reuse = True ) def validate_event_type ( cls , v ): \"\"\"\u9a8c\u8bc1\u4e8b\u4ef6\u7c7b\u578b, \u901a\u8fc7\u6bd4\u5bf9 type \u5b57\u6bb5\u5b9e\u73b0\"\"\" if not isinstance ( cls , type ): raise TypeError ( \"cls must be a class!\" ) if cls . type != v : raise InvalidEventTypeDefinition ( f \" { cls . __name__ } 's type must be ' { cls . type } ', not ' { v } '\" ) return v","title":"event"},{"location":"refs/graia/ariadne/event/#graia.ariadne.event.MiraiEvent","text":"Bases: Dispatchable , AriadneBaseModel Ariadne \u7684\u4e8b\u4ef6\u57fa\u7c7b Source code in graia/ariadne/event/__init__.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class MiraiEvent ( Dispatchable , AriadneBaseModel ): \"\"\"Ariadne \u7684\u4e8b\u4ef6\u57fa\u7c7b\"\"\" type : str \"\"\"\u4e8b\u4ef6\u7c7b\u578b\"\"\" @validator ( \"type\" , allow_reuse = True ) def validate_event_type ( cls , v ): \"\"\"\u9a8c\u8bc1\u4e8b\u4ef6\u7c7b\u578b, \u901a\u8fc7\u6bd4\u5bf9 type \u5b57\u6bb5\u5b9e\u73b0\"\"\" if not isinstance ( cls , type ): raise TypeError ( \"cls must be a class!\" ) if cls . type != v : raise InvalidEventTypeDefinition ( f \" { cls . __name__ } 's type must be ' { cls . type } ', not ' { v } '\" ) return v Dispatcher = BaseDispatcher","title":"MiraiEvent"},{"location":"refs/graia/ariadne/event/#graia.ariadne.event.MiraiEvent.type","text":"type : str = None \u4e8b\u4ef6\u7c7b\u578b","title":"type"},{"location":"refs/graia/ariadne/event/#graia.ariadne.event.MiraiEvent.validate_event_type","text":"validate_event_type ( v ) \u9a8c\u8bc1\u4e8b\u4ef6\u7c7b\u578b, \u901a\u8fc7\u6bd4\u5bf9 type \u5b57\u6bb5\u5b9e\u73b0 Source code in graia/ariadne/event/__init__.py 16 17 18 19 20 21 22 23 @validator ( \"type\" , allow_reuse = True ) def validate_event_type ( cls , v ): \"\"\"\u9a8c\u8bc1\u4e8b\u4ef6\u7c7b\u578b, \u901a\u8fc7\u6bd4\u5bf9 type \u5b57\u6bb5\u5b9e\u73b0\"\"\" if not isinstance ( cls , type ): raise TypeError ( \"cls must be a class!\" ) if cls . type != v : raise InvalidEventTypeDefinition ( f \" { cls . __name__ } 's type must be ' { cls . type } ', not ' { v } '\" ) return v","title":"validate_event_type()"},{"location":"refs/graia/ariadne/event/lifecycle/","text":"Ariadne, Adapter \u751f\u547d\u5468\u671f\u76f8\u5173\u4e8b\u4ef6 AdapterLaunched \ud83d\udd17 Bases: ApplicationLifecycleEvent \u6307\u793a\u8fdc\u7a0b\u9002\u914d\u5668\u542f\u52a8\u4e86. Source code in graia/ariadne/event/lifecycle.py 46 47 48 49 class AdapterLaunched ( ApplicationLifecycleEvent ): \"\"\" \u6307\u793a\u8fdc\u7a0b\u9002\u914d\u5668\u542f\u52a8\u4e86. \"\"\" AdapterShutdowned \ud83d\udd17 Bases: ApplicationLifecycleEvent \u6307\u793a\u8fdc\u7a0b\u9002\u914d\u5668\u5173\u95ed\u4e86. Source code in graia/ariadne/event/lifecycle.py 52 53 54 55 class AdapterShutdowned ( ApplicationLifecycleEvent ): \"\"\" \u6307\u793a\u8fdc\u7a0b\u9002\u914d\u5668\u5173\u95ed\u4e86. \"\"\" ApplicationLaunched \ud83d\udd17 Bases: ApplicationLifecycleEvent \u6307\u793a Ariadne \u542f\u52a8. Source code in graia/ariadne/event/lifecycle.py 34 35 36 37 class ApplicationLaunched ( ApplicationLifecycleEvent ): \"\"\" \u6307\u793a Ariadne \u542f\u52a8. \"\"\" ApplicationLifecycleEvent \ud83d\udd17 Bases: Dispatchable \u6307\u793a\u6709\u5173\u5e94\u7528 (Ariadne) \u7684\u4e8b\u4ef6. Source code in graia/ariadne/event/lifecycle.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class ApplicationLifecycleEvent ( Dispatchable ): \"\"\" \u6307\u793a\u6709\u5173\u5e94\u7528 (Ariadne) \u7684\u4e8b\u4ef6. \"\"\" app : \"Ariadne\" def __init__ ( self , app : \"Ariadne\" ) -> None : self . app = app class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : \"DispatcherInterface\" ): from ..app import Ariadne if isinstance ( interface . event , ApplicationLifecycleEvent ): if generic_issubclass ( Ariadne , interface . annotation ): return interface . event . app ApplicationShutdowned \ud83d\udd17 Bases: ApplicationLifecycleEvent \u6307\u793a Ariadne \u5173\u95ed. Source code in graia/ariadne/event/lifecycle.py 40 41 42 43 class ApplicationShutdowned ( ApplicationLifecycleEvent ): \"\"\" \u6307\u793a Ariadne \u5173\u95ed. \"\"\"","title":"lifecycle"},{"location":"refs/graia/ariadne/event/lifecycle/#graia.ariadne.event.lifecycle.AdapterLaunched","text":"Bases: ApplicationLifecycleEvent \u6307\u793a\u8fdc\u7a0b\u9002\u914d\u5668\u542f\u52a8\u4e86. Source code in graia/ariadne/event/lifecycle.py 46 47 48 49 class AdapterLaunched ( ApplicationLifecycleEvent ): \"\"\" \u6307\u793a\u8fdc\u7a0b\u9002\u914d\u5668\u542f\u52a8\u4e86. \"\"\"","title":"AdapterLaunched"},{"location":"refs/graia/ariadne/event/lifecycle/#graia.ariadne.event.lifecycle.AdapterShutdowned","text":"Bases: ApplicationLifecycleEvent \u6307\u793a\u8fdc\u7a0b\u9002\u914d\u5668\u5173\u95ed\u4e86. Source code in graia/ariadne/event/lifecycle.py 52 53 54 55 class AdapterShutdowned ( ApplicationLifecycleEvent ): \"\"\" \u6307\u793a\u8fdc\u7a0b\u9002\u914d\u5668\u5173\u95ed\u4e86. \"\"\"","title":"AdapterShutdowned"},{"location":"refs/graia/ariadne/event/lifecycle/#graia.ariadne.event.lifecycle.ApplicationLaunched","text":"Bases: ApplicationLifecycleEvent \u6307\u793a Ariadne \u542f\u52a8. Source code in graia/ariadne/event/lifecycle.py 34 35 36 37 class ApplicationLaunched ( ApplicationLifecycleEvent ): \"\"\" \u6307\u793a Ariadne \u542f\u52a8. \"\"\"","title":"ApplicationLaunched"},{"location":"refs/graia/ariadne/event/lifecycle/#graia.ariadne.event.lifecycle.ApplicationLifecycleEvent","text":"Bases: Dispatchable \u6307\u793a\u6709\u5173\u5e94\u7528 (Ariadne) \u7684\u4e8b\u4ef6. Source code in graia/ariadne/event/lifecycle.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class ApplicationLifecycleEvent ( Dispatchable ): \"\"\" \u6307\u793a\u6709\u5173\u5e94\u7528 (Ariadne) \u7684\u4e8b\u4ef6. \"\"\" app : \"Ariadne\" def __init__ ( self , app : \"Ariadne\" ) -> None : self . app = app class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : \"DispatcherInterface\" ): from ..app import Ariadne if isinstance ( interface . event , ApplicationLifecycleEvent ): if generic_issubclass ( Ariadne , interface . annotation ): return interface . event . app","title":"ApplicationLifecycleEvent"},{"location":"refs/graia/ariadne/event/lifecycle/#graia.ariadne.event.lifecycle.ApplicationShutdowned","text":"Bases: ApplicationLifecycleEvent \u6307\u793a Ariadne \u5173\u95ed. Source code in graia/ariadne/event/lifecycle.py 40 41 42 43 class ApplicationShutdowned ( ApplicationLifecycleEvent ): \"\"\" \u6307\u793a Ariadne \u5173\u95ed. \"\"\"","title":"ApplicationShutdowned"},{"location":"refs/graia/ariadne/event/message/","text":"Ariadne \u6d88\u606f\u4e8b\u4ef6 ActiveFriendMessage \ud83d\udd17 Bases: ActiveMessage \u4e3b\u52a8\u597d\u53cb\u6d88\u606f Source code in graia/ariadne/event/message.py 136 137 138 139 140 141 142 143 144 145 146 147 148 class ActiveFriendMessage ( ActiveMessage ): \"\"\"\u4e3b\u52a8\u597d\u53cb\u6d88\u606f\"\"\" type : str = \"ActiveFriendMessage\" messageChain : MessageChain \"\"\"\u6d88\u606f\u94fe\"\"\" subject : Friend \"\"\"\u6d88\u606f\u63a5\u6536\u8005\"\"\" class Dispatcher ( BaseDispatcher ): mixin = [ MessageChainDispatcher , SourceDispatcher , SubjectDispatcher ] messageChain class-attribute \ud83d\udd17 messageChain : MessageChain = None \u6d88\u606f\u94fe subject class-attribute \ud83d\udd17 subject : Friend = None \u6d88\u606f\u63a5\u6536\u8005 ActiveGroupMessage \ud83d\udd17 Bases: ActiveMessage \u4e3b\u52a8\u7fa4\u7ec4\u6d88\u606f Source code in graia/ariadne/event/message.py 151 152 153 154 155 156 157 158 159 160 161 162 163 class ActiveGroupMessage ( ActiveMessage ): \"\"\"\u4e3b\u52a8\u7fa4\u7ec4\u6d88\u606f\"\"\" type : str = \"ActiveGroupMessage\" messageChain : MessageChain \"\"\"\u6d88\u606f\u94fe\"\"\" subject : Group \"\"\"\u6d88\u606f\u63a5\u6536\u8005\"\"\" class Dispatcher ( BaseDispatcher ): mixin = [ MessageChainDispatcher , SourceDispatcher , SubjectDispatcher ] messageChain class-attribute \ud83d\udd17 messageChain : MessageChain = None \u6d88\u606f\u94fe subject class-attribute \ud83d\udd17 subject : Group = None \u6d88\u606f\u63a5\u6536\u8005 ActiveMessage \ud83d\udd17 Bases: MiraiEvent \u4e3b\u52a8\u6d88\u606f: Bot \u8d26\u53f7\u53d1\u9001\u7ed9\u4ed6\u4eba\u7684\u6d88\u606f Source code in graia/ariadne/event/message.py 121 122 123 124 125 126 127 128 129 130 131 132 133 class ActiveMessage ( MiraiEvent ): \"\"\"\u4e3b\u52a8\u6d88\u606f: Bot \u8d26\u53f7\u53d1\u9001\u7ed9\u4ed6\u4eba\u7684\u6d88\u606f\"\"\" type : str messageChain : MessageChain \"\"\"\u6d88\u606f\u94fe\"\"\" subject : Union [ Friend , Group , Member , Stranger ] \"\"\"\u6d88\u606f\u63a5\u6536\u8005\"\"\" sync : bool = False \"\"\"\u662f\u5426\u4e3a\u540c\u6b65\u6d88\u606f\"\"\" messageChain class-attribute \ud83d\udd17 messageChain : MessageChain = None \u6d88\u606f\u94fe subject class-attribute \ud83d\udd17 subject : Union [ Friend , Group , Member , Stranger ] = None \u6d88\u606f\u63a5\u6536\u8005 sync class-attribute \ud83d\udd17 sync : bool = False \u662f\u5426\u4e3a\u540c\u6b65\u6d88\u606f ActiveStrangerMessage \ud83d\udd17 Bases: ActiveMessage \u4e3b\u52a8\u964c\u751f\u4eba\u6d88\u606f Source code in graia/ariadne/event/message.py 187 188 189 190 191 192 193 194 195 196 197 198 199 class ActiveStrangerMessage ( ActiveMessage ): \"\"\"\u4e3b\u52a8\u964c\u751f\u4eba\u6d88\u606f\"\"\" type : str = \"ActiveStrangerMessage\" messageChain : MessageChain \"\"\"\u6d88\u606f\u94fe\"\"\" subject : Stranger \"\"\"\u6d88\u606f\u63a5\u6536\u8005\"\"\" class Dispatcher ( BaseDispatcher ): mixin = [ MessageChainDispatcher , SourceDispatcher , SubjectDispatcher ] messageChain class-attribute \ud83d\udd17 messageChain : MessageChain = None \u6d88\u606f\u94fe subject class-attribute \ud83d\udd17 subject : Stranger = None \u6d88\u606f\u63a5\u6536\u8005 ActiveTempMessage \ud83d\udd17 Bases: ActiveMessage \u4e3b\u52a8\u4e34\u65f6\u6d88\u606f Source code in graia/ariadne/event/message.py 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 class ActiveTempMessage ( ActiveMessage ): \"\"\"\u4e3b\u52a8\u4e34\u65f6\u6d88\u606f\"\"\" type : str = \"ActiveTempMessage\" messageChain : MessageChain \"\"\"\u6d88\u606f\u94fe\"\"\" subject : Member \"\"\"\u6d88\u606f\u63a5\u6536\u8005\"\"\" class Dispatcher ( BaseDispatcher ): mixin = [ MessageChainDispatcher , SourceDispatcher , SubjectDispatcher ] @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , ActiveTempMessage ): if interface . annotation is Group : return interface . event . subject . group messageChain class-attribute \ud83d\udd17 messageChain : MessageChain = None \u6d88\u606f\u94fe subject class-attribute \ud83d\udd17 subject : Member = None \u6d88\u606f\u63a5\u6536\u8005 FriendMessage \ud83d\udd17 Bases: MessageEvent , FriendEvent \u597d\u53cb\u6d88\u606f Source code in graia/ariadne/event/message.py 34 35 36 37 38 39 40 41 42 43 44 45 46 class FriendMessage ( MessageEvent , FriendEvent ): \"\"\"\u597d\u53cb\u6d88\u606f\"\"\" type : str = \"FriendMessage\" messageChain : MessageChain \"\"\"\u6d88\u606f\u94fe\"\"\" sender : Friend \"\"\"\u53d1\u9001\u8005\"\"\" class Dispatcher ( BaseDispatcher ): mixin = [ MessageChainDispatcher , SourceDispatcher , SenderDispatcher ] messageChain class-attribute \ud83d\udd17 messageChain : MessageChain = None \u6d88\u606f\u94fe sender class-attribute \ud83d\udd17 sender : Friend = None \u53d1\u9001\u8005 FriendSyncMessage \ud83d\udd17 Bases: ActiveFriendMessage \u597d\u53cb\u540c\u6b65\u6d88\u606f Source code in graia/ariadne/event/message.py 202 203 204 205 206 207 class FriendSyncMessage ( ActiveFriendMessage ): \"\"\"\u597d\u53cb\u540c\u6b65\u6d88\u606f\"\"\" type : str = \"FriendSyncMessage\" sync = True GroupMessage \ud83d\udd17 Bases: MessageEvent , GroupEvent \u7fa4\u7ec4\u6d88\u606f Source code in graia/ariadne/event/message.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 class GroupMessage ( MessageEvent , GroupEvent ): \"\"\"\u7fa4\u7ec4\u6d88\u606f\"\"\" type : str = \"GroupMessage\" messageChain : MessageChain \"\"\"\u6d88\u606f\u94fe\"\"\" sender : Member \"\"\"\u53d1\u9001\u8005\"\"\" class Dispatcher ( BaseDispatcher ): mixin = [ MessageChainDispatcher , SourceDispatcher , SenderDispatcher ] @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , GroupMessage ): if generic_issubclass ( Group , interface . annotation ): return interface . event . sender . group messageChain class-attribute \ud83d\udd17 messageChain : MessageChain = None \u6d88\u606f\u94fe sender class-attribute \ud83d\udd17 sender : Member = None \u53d1\u9001\u8005 GroupSyncMessage \ud83d\udd17 Bases: ActiveGroupMessage \u7fa4\u7ec4\u540c\u6b65\u6d88\u606f Source code in graia/ariadne/event/message.py 210 211 212 213 214 215 class GroupSyncMessage ( ActiveGroupMessage ): \"\"\"\u7fa4\u7ec4\u540c\u6b65\u6d88\u606f\"\"\" type : str = \"GroupSyncMessage\" sync = True MessageEvent \ud83d\udd17 Bases: MiraiEvent Ariadne \u6d88\u606f\u4e8b\u4ef6\u57fa\u7c7b Source code in graia/ariadne/event/message.py 20 21 22 23 24 25 26 27 28 29 30 31 class MessageEvent ( MiraiEvent ): \"\"\"Ariadne \u6d88\u606f\u4e8b\u4ef6\u57fa\u7c7b\"\"\" type : str = \"MessageEvent\" messageChain : MessageChain \"\"\"\u6d88\u606f\u94fe\"\"\" sender : Union [ Friend , Member , Client , Stranger ] \"\"\"\u53d1\u9001\u8005\"\"\" class Dispatcher ( BaseDispatcher ): mixin = [ MessageChainDispatcher , SourceDispatcher , SenderDispatcher ] messageChain class-attribute \ud83d\udd17 messageChain : MessageChain = None \u6d88\u606f\u94fe sender class-attribute \ud83d\udd17 sender : Union [ Friend , Member , Client , Stranger ] = None \u53d1\u9001\u8005 OtherClientMessage \ud83d\udd17 Bases: MessageEvent \u5176\u4ed6\u5ba2\u6237\u7aef\u6d88\u606f Source code in graia/ariadne/event/message.py 91 92 93 94 95 96 97 98 99 100 101 102 103 class OtherClientMessage ( MessageEvent ): \"\"\"\u5176\u4ed6\u5ba2\u6237\u7aef\u6d88\u606f\"\"\" type : str = \"OtherClientMessage\" messageChain : MessageChain \"\"\"\u6d88\u606f\u94fe\"\"\" sender : Client \"\"\"\u53d1\u9001\u8005\"\"\" class Dispatcher ( BaseDispatcher ): mixin = [ MessageChainDispatcher , SourceDispatcher , SenderDispatcher ] messageChain class-attribute \ud83d\udd17 messageChain : MessageChain = None \u6d88\u606f\u94fe sender class-attribute \ud83d\udd17 sender : Client = None \u53d1\u9001\u8005 StrangerMessage \ud83d\udd17 Bases: MessageEvent \u964c\u751f\u4eba\u6d88\u606f Source code in graia/ariadne/event/message.py 106 107 108 109 110 111 112 113 114 115 116 117 118 class StrangerMessage ( MessageEvent ): \"\"\"\u964c\u751f\u4eba\u6d88\u606f\"\"\" type : str = \"StrangerMessage\" messageChain : MessageChain \"\"\"\u6d88\u606f\u94fe\"\"\" sender : Stranger \"\"\"\u53d1\u9001\u8005\"\"\" class Dispatcher ( BaseDispatcher ): mixin = [ MessageChainDispatcher , SourceDispatcher , SenderDispatcher ] messageChain class-attribute \ud83d\udd17 messageChain : MessageChain = None \u6d88\u606f\u94fe sender class-attribute \ud83d\udd17 sender : Stranger = None \u53d1\u9001\u8005 StrangerSyncMessage \ud83d\udd17 Bases: ActiveStrangerMessage \u964c\u751f\u4eba\u540c\u6b65\u6d88\u606f Source code in graia/ariadne/event/message.py 226 227 228 229 230 231 class StrangerSyncMessage ( ActiveStrangerMessage ): \"\"\"\u964c\u751f\u4eba\u540c\u6b65\u6d88\u606f\"\"\" type : str = \"StrangerSyncMessage\" sync = True TempMessage \ud83d\udd17 Bases: MessageEvent \u4e34\u65f6\u6d88\u606f Source code in graia/ariadne/event/message.py 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 class TempMessage ( MessageEvent ): \"\"\"\u4e34\u65f6\u6d88\u606f\"\"\" type : str = \"TempMessage\" messageChain : MessageChain \"\"\"\u6d88\u606f\u94fe\"\"\" sender : Member \"\"\"\u53d1\u9001\u8005\"\"\" class Dispatcher ( BaseDispatcher ): mixin = [ MessageChainDispatcher , SourceDispatcher , SenderDispatcher ] @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , TempMessage ): if generic_issubclass ( Group , interface . annotation ): return interface . event . sender . group messageChain class-attribute \ud83d\udd17 messageChain : MessageChain = None \u6d88\u606f\u94fe sender class-attribute \ud83d\udd17 sender : Member = None \u53d1\u9001\u8005 TempSyncMessage \ud83d\udd17 Bases: ActiveTempMessage \u4e34\u65f6\u4f1a\u8bdd\u540c\u6b65\u6d88\u606f Source code in graia/ariadne/event/message.py 218 219 220 221 222 223 class TempSyncMessage ( ActiveTempMessage ): \"\"\"\u4e34\u65f6\u4f1a\u8bdd\u540c\u6b65\u6d88\u606f\"\"\" type : str = \"TempSyncMessage\" sync = True","title":"message"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.ActiveFriendMessage","text":"Bases: ActiveMessage \u4e3b\u52a8\u597d\u53cb\u6d88\u606f Source code in graia/ariadne/event/message.py 136 137 138 139 140 141 142 143 144 145 146 147 148 class ActiveFriendMessage ( ActiveMessage ): \"\"\"\u4e3b\u52a8\u597d\u53cb\u6d88\u606f\"\"\" type : str = \"ActiveFriendMessage\" messageChain : MessageChain \"\"\"\u6d88\u606f\u94fe\"\"\" subject : Friend \"\"\"\u6d88\u606f\u63a5\u6536\u8005\"\"\" class Dispatcher ( BaseDispatcher ): mixin = [ MessageChainDispatcher , SourceDispatcher , SubjectDispatcher ]","title":"ActiveFriendMessage"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.ActiveFriendMessage.messageChain","text":"messageChain : MessageChain = None \u6d88\u606f\u94fe","title":"messageChain"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.ActiveFriendMessage.subject","text":"subject : Friend = None \u6d88\u606f\u63a5\u6536\u8005","title":"subject"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.ActiveGroupMessage","text":"Bases: ActiveMessage \u4e3b\u52a8\u7fa4\u7ec4\u6d88\u606f Source code in graia/ariadne/event/message.py 151 152 153 154 155 156 157 158 159 160 161 162 163 class ActiveGroupMessage ( ActiveMessage ): \"\"\"\u4e3b\u52a8\u7fa4\u7ec4\u6d88\u606f\"\"\" type : str = \"ActiveGroupMessage\" messageChain : MessageChain \"\"\"\u6d88\u606f\u94fe\"\"\" subject : Group \"\"\"\u6d88\u606f\u63a5\u6536\u8005\"\"\" class Dispatcher ( BaseDispatcher ): mixin = [ MessageChainDispatcher , SourceDispatcher , SubjectDispatcher ]","title":"ActiveGroupMessage"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.ActiveGroupMessage.messageChain","text":"messageChain : MessageChain = None \u6d88\u606f\u94fe","title":"messageChain"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.ActiveGroupMessage.subject","text":"subject : Group = None \u6d88\u606f\u63a5\u6536\u8005","title":"subject"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.ActiveMessage","text":"Bases: MiraiEvent \u4e3b\u52a8\u6d88\u606f: Bot \u8d26\u53f7\u53d1\u9001\u7ed9\u4ed6\u4eba\u7684\u6d88\u606f Source code in graia/ariadne/event/message.py 121 122 123 124 125 126 127 128 129 130 131 132 133 class ActiveMessage ( MiraiEvent ): \"\"\"\u4e3b\u52a8\u6d88\u606f: Bot \u8d26\u53f7\u53d1\u9001\u7ed9\u4ed6\u4eba\u7684\u6d88\u606f\"\"\" type : str messageChain : MessageChain \"\"\"\u6d88\u606f\u94fe\"\"\" subject : Union [ Friend , Group , Member , Stranger ] \"\"\"\u6d88\u606f\u63a5\u6536\u8005\"\"\" sync : bool = False \"\"\"\u662f\u5426\u4e3a\u540c\u6b65\u6d88\u606f\"\"\"","title":"ActiveMessage"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.ActiveMessage.messageChain","text":"messageChain : MessageChain = None \u6d88\u606f\u94fe","title":"messageChain"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.ActiveMessage.subject","text":"subject : Union [ Friend , Group , Member , Stranger ] = None \u6d88\u606f\u63a5\u6536\u8005","title":"subject"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.ActiveMessage.sync","text":"sync : bool = False \u662f\u5426\u4e3a\u540c\u6b65\u6d88\u606f","title":"sync"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.ActiveStrangerMessage","text":"Bases: ActiveMessage \u4e3b\u52a8\u964c\u751f\u4eba\u6d88\u606f Source code in graia/ariadne/event/message.py 187 188 189 190 191 192 193 194 195 196 197 198 199 class ActiveStrangerMessage ( ActiveMessage ): \"\"\"\u4e3b\u52a8\u964c\u751f\u4eba\u6d88\u606f\"\"\" type : str = \"ActiveStrangerMessage\" messageChain : MessageChain \"\"\"\u6d88\u606f\u94fe\"\"\" subject : Stranger \"\"\"\u6d88\u606f\u63a5\u6536\u8005\"\"\" class Dispatcher ( BaseDispatcher ): mixin = [ MessageChainDispatcher , SourceDispatcher , SubjectDispatcher ]","title":"ActiveStrangerMessage"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.ActiveStrangerMessage.messageChain","text":"messageChain : MessageChain = None \u6d88\u606f\u94fe","title":"messageChain"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.ActiveStrangerMessage.subject","text":"subject : Stranger = None \u6d88\u606f\u63a5\u6536\u8005","title":"subject"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.ActiveTempMessage","text":"Bases: ActiveMessage \u4e3b\u52a8\u4e34\u65f6\u6d88\u606f Source code in graia/ariadne/event/message.py 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 class ActiveTempMessage ( ActiveMessage ): \"\"\"\u4e3b\u52a8\u4e34\u65f6\u6d88\u606f\"\"\" type : str = \"ActiveTempMessage\" messageChain : MessageChain \"\"\"\u6d88\u606f\u94fe\"\"\" subject : Member \"\"\"\u6d88\u606f\u63a5\u6536\u8005\"\"\" class Dispatcher ( BaseDispatcher ): mixin = [ MessageChainDispatcher , SourceDispatcher , SubjectDispatcher ] @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , ActiveTempMessage ): if interface . annotation is Group : return interface . event . subject . group","title":"ActiveTempMessage"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.ActiveTempMessage.messageChain","text":"messageChain : MessageChain = None \u6d88\u606f\u94fe","title":"messageChain"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.ActiveTempMessage.subject","text":"subject : Member = None \u6d88\u606f\u63a5\u6536\u8005","title":"subject"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.FriendMessage","text":"Bases: MessageEvent , FriendEvent \u597d\u53cb\u6d88\u606f Source code in graia/ariadne/event/message.py 34 35 36 37 38 39 40 41 42 43 44 45 46 class FriendMessage ( MessageEvent , FriendEvent ): \"\"\"\u597d\u53cb\u6d88\u606f\"\"\" type : str = \"FriendMessage\" messageChain : MessageChain \"\"\"\u6d88\u606f\u94fe\"\"\" sender : Friend \"\"\"\u53d1\u9001\u8005\"\"\" class Dispatcher ( BaseDispatcher ): mixin = [ MessageChainDispatcher , SourceDispatcher , SenderDispatcher ]","title":"FriendMessage"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.FriendMessage.messageChain","text":"messageChain : MessageChain = None \u6d88\u606f\u94fe","title":"messageChain"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.FriendMessage.sender","text":"sender : Friend = None \u53d1\u9001\u8005","title":"sender"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.FriendSyncMessage","text":"Bases: ActiveFriendMessage \u597d\u53cb\u540c\u6b65\u6d88\u606f Source code in graia/ariadne/event/message.py 202 203 204 205 206 207 class FriendSyncMessage ( ActiveFriendMessage ): \"\"\"\u597d\u53cb\u540c\u6b65\u6d88\u606f\"\"\" type : str = \"FriendSyncMessage\" sync = True","title":"FriendSyncMessage"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.GroupMessage","text":"Bases: MessageEvent , GroupEvent \u7fa4\u7ec4\u6d88\u606f Source code in graia/ariadne/event/message.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 class GroupMessage ( MessageEvent , GroupEvent ): \"\"\"\u7fa4\u7ec4\u6d88\u606f\"\"\" type : str = \"GroupMessage\" messageChain : MessageChain \"\"\"\u6d88\u606f\u94fe\"\"\" sender : Member \"\"\"\u53d1\u9001\u8005\"\"\" class Dispatcher ( BaseDispatcher ): mixin = [ MessageChainDispatcher , SourceDispatcher , SenderDispatcher ] @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , GroupMessage ): if generic_issubclass ( Group , interface . annotation ): return interface . event . sender . group","title":"GroupMessage"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.GroupMessage.messageChain","text":"messageChain : MessageChain = None \u6d88\u606f\u94fe","title":"messageChain"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.GroupMessage.sender","text":"sender : Member = None \u53d1\u9001\u8005","title":"sender"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.GroupSyncMessage","text":"Bases: ActiveGroupMessage \u7fa4\u7ec4\u540c\u6b65\u6d88\u606f Source code in graia/ariadne/event/message.py 210 211 212 213 214 215 class GroupSyncMessage ( ActiveGroupMessage ): \"\"\"\u7fa4\u7ec4\u540c\u6b65\u6d88\u606f\"\"\" type : str = \"GroupSyncMessage\" sync = True","title":"GroupSyncMessage"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.MessageEvent","text":"Bases: MiraiEvent Ariadne \u6d88\u606f\u4e8b\u4ef6\u57fa\u7c7b Source code in graia/ariadne/event/message.py 20 21 22 23 24 25 26 27 28 29 30 31 class MessageEvent ( MiraiEvent ): \"\"\"Ariadne \u6d88\u606f\u4e8b\u4ef6\u57fa\u7c7b\"\"\" type : str = \"MessageEvent\" messageChain : MessageChain \"\"\"\u6d88\u606f\u94fe\"\"\" sender : Union [ Friend , Member , Client , Stranger ] \"\"\"\u53d1\u9001\u8005\"\"\" class Dispatcher ( BaseDispatcher ): mixin = [ MessageChainDispatcher , SourceDispatcher , SenderDispatcher ]","title":"MessageEvent"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.MessageEvent.messageChain","text":"messageChain : MessageChain = None \u6d88\u606f\u94fe","title":"messageChain"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.MessageEvent.sender","text":"sender : Union [ Friend , Member , Client , Stranger ] = None \u53d1\u9001\u8005","title":"sender"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.OtherClientMessage","text":"Bases: MessageEvent \u5176\u4ed6\u5ba2\u6237\u7aef\u6d88\u606f Source code in graia/ariadne/event/message.py 91 92 93 94 95 96 97 98 99 100 101 102 103 class OtherClientMessage ( MessageEvent ): \"\"\"\u5176\u4ed6\u5ba2\u6237\u7aef\u6d88\u606f\"\"\" type : str = \"OtherClientMessage\" messageChain : MessageChain \"\"\"\u6d88\u606f\u94fe\"\"\" sender : Client \"\"\"\u53d1\u9001\u8005\"\"\" class Dispatcher ( BaseDispatcher ): mixin = [ MessageChainDispatcher , SourceDispatcher , SenderDispatcher ]","title":"OtherClientMessage"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.OtherClientMessage.messageChain","text":"messageChain : MessageChain = None \u6d88\u606f\u94fe","title":"messageChain"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.OtherClientMessage.sender","text":"sender : Client = None \u53d1\u9001\u8005","title":"sender"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.StrangerMessage","text":"Bases: MessageEvent \u964c\u751f\u4eba\u6d88\u606f Source code in graia/ariadne/event/message.py 106 107 108 109 110 111 112 113 114 115 116 117 118 class StrangerMessage ( MessageEvent ): \"\"\"\u964c\u751f\u4eba\u6d88\u606f\"\"\" type : str = \"StrangerMessage\" messageChain : MessageChain \"\"\"\u6d88\u606f\u94fe\"\"\" sender : Stranger \"\"\"\u53d1\u9001\u8005\"\"\" class Dispatcher ( BaseDispatcher ): mixin = [ MessageChainDispatcher , SourceDispatcher , SenderDispatcher ]","title":"StrangerMessage"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.StrangerMessage.messageChain","text":"messageChain : MessageChain = None \u6d88\u606f\u94fe","title":"messageChain"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.StrangerMessage.sender","text":"sender : Stranger = None \u53d1\u9001\u8005","title":"sender"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.StrangerSyncMessage","text":"Bases: ActiveStrangerMessage \u964c\u751f\u4eba\u540c\u6b65\u6d88\u606f Source code in graia/ariadne/event/message.py 226 227 228 229 230 231 class StrangerSyncMessage ( ActiveStrangerMessage ): \"\"\"\u964c\u751f\u4eba\u540c\u6b65\u6d88\u606f\"\"\" type : str = \"StrangerSyncMessage\" sync = True","title":"StrangerSyncMessage"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.TempMessage","text":"Bases: MessageEvent \u4e34\u65f6\u6d88\u606f Source code in graia/ariadne/event/message.py 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 class TempMessage ( MessageEvent ): \"\"\"\u4e34\u65f6\u6d88\u606f\"\"\" type : str = \"TempMessage\" messageChain : MessageChain \"\"\"\u6d88\u606f\u94fe\"\"\" sender : Member \"\"\"\u53d1\u9001\u8005\"\"\" class Dispatcher ( BaseDispatcher ): mixin = [ MessageChainDispatcher , SourceDispatcher , SenderDispatcher ] @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , TempMessage ): if generic_issubclass ( Group , interface . annotation ): return interface . event . sender . group","title":"TempMessage"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.TempMessage.messageChain","text":"messageChain : MessageChain = None \u6d88\u606f\u94fe","title":"messageChain"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.TempMessage.sender","text":"sender : Member = None \u53d1\u9001\u8005","title":"sender"},{"location":"refs/graia/ariadne/event/message/#graia.ariadne.event.message.TempSyncMessage","text":"Bases: ActiveTempMessage \u4e34\u65f6\u4f1a\u8bdd\u540c\u6b65\u6d88\u606f Source code in graia/ariadne/event/message.py 218 219 220 221 222 223 class TempSyncMessage ( ActiveTempMessage ): \"\"\"\u4e34\u65f6\u4f1a\u8bdd\u540c\u6b65\u6d88\u606f\"\"\" type : str = \"TempSyncMessage\" sync = True","title":"TempSyncMessage"},{"location":"refs/graia/ariadne/event/mirai/","text":"Mirai \u7684\u5404\u79cd\u4e8b\u4ef6 BotEvent \ud83d\udd17 Bases: MiraiEvent \u6307\u793a\u6709\u5173 Bot \u672c\u8eab\u7684\u4e8b\u4ef6. Source code in graia/ariadne/event/mirai.py 19 20 21 22 class BotEvent ( MiraiEvent ): \"\"\" \u6307\u793a\u6709\u5173 Bot \u672c\u8eab\u7684\u4e8b\u4ef6. \"\"\" BotGroupPermissionChangeEvent \ud83d\udd17 Bases: GroupEvent , BotEvent Bot \u8d26\u53f7\u5728\u4e00\u7279\u5b9a\u7fa4\u7ec4\u5185\u6240\u5177\u6709\u7684\u6743\u9650\u53d1\u751f\u53d8\u5316 Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Source code in graia/ariadne/event/mirai.py 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 class BotGroupPermissionChangeEvent ( GroupEvent , BotEvent ): \"\"\"Bot \u8d26\u53f7\u5728\u4e00\u7279\u5b9a\u7fa4\u7ec4\u5185\u6240\u5177\u6709\u7684\u6743\u9650\u53d1\u751f\u53d8\u5316 Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b - Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 \"\"\" type = \"BotGroupPermissionChangeEvent\" origin : MemberPerm \"\"\"\u539f\u59cb\u6743\u9650\"\"\" current : MemberPerm \"\"\"\u5f53\u524d\u6743\u9650\"\"\" group : Group \"\"\"\u6743\u9650\u6539\u53d8\u6240\u5728\u7684\u7fa4\u4fe1\u606f\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , BotGroupPermissionChangeEvent ) and generic_issubclass ( Group , interface . annotation ): return interface . event . group current class-attribute \ud83d\udd17 current : MemberPerm = None \u5f53\u524d\u6743\u9650 group class-attribute \ud83d\udd17 group : Group = None \u6743\u9650\u6539\u53d8\u6240\u5728\u7684\u7fa4\u4fe1\u606f origin class-attribute \ud83d\udd17 origin : MemberPerm = None \u539f\u59cb\u6743\u9650 BotInvitedJoinGroupRequestEvent \ud83d\udd17 Bases: RequestEvent , BotEvent , GroupEvent Bot \u8d26\u53f7\u63a5\u53d7\u5230\u6765\u81ea\u67d0\u4e2a\u8d26\u53f7\u7684\u9080\u8bf7\u52a0\u5165\u67d0\u4e2a\u7fa4\u7ec4\u7684\u8bf7\u6c42. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \u4e8b\u4ef6\u62d3\u5c55\u652f\u6301 \u8be5\u4e8b\u4ef6\u7684\u5904\u7406\u9700\u8981\u4f60\u83b7\u53d6\u539f\u59cb\u4e8b\u4ef6\u5b9e\u4f8b. \u540c\u610f\u8bf7\u6c42: await event.accept() , \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. \u62d2\u7edd\u8bf7\u6c42: await event.reject() , \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. Source code in graia/ariadne/event/mirai.py 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 class BotInvitedJoinGroupRequestEvent ( RequestEvent , BotEvent , GroupEvent ): \"\"\"Bot \u8d26\u53f7\u63a5\u53d7\u5230\u6765\u81ea\u67d0\u4e2a\u8d26\u53f7\u7684\u9080\u8bf7\u52a0\u5165\u67d0\u4e2a\u7fa4\u7ec4\u7684\u8bf7\u6c42. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \u4e8b\u4ef6\u62d3\u5c55\u652f\u6301: \u8be5\u4e8b\u4ef6\u7684\u5904\u7406\u9700\u8981\u4f60\u83b7\u53d6\u539f\u59cb\u4e8b\u4ef6\u5b9e\u4f8b. 1. \u540c\u610f\u8bf7\u6c42: `await event.accept()`, \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. 2. \u62d2\u7edd\u8bf7\u6c42: `await event.reject()`, \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. \"\"\" type = \"BotInvitedJoinGroupRequestEvent\" requestId : int = Field ( ... , alias = \"eventId\" ) \"\"\"\u4e8b\u4ef6\u6807\u8bc6\uff0c\u54cd\u5e94\u8be5\u4e8b\u4ef6\u65f6\u7684\u6807\u8bc6\"\"\" supplicant : int = Field ( ... , alias = \"fromId\" ) \"\"\"\u9080\u8bf7\u4eba (\u597d\u53cb) \u7684QQ\u53f7\"\"\" nickname : str = Field ( ... , alias = \"nick\" ) \"\"\"\u7533\u8bf7\u4eba\u7684\u6635\u79f0\u6216\u7fa4\u540d\u7247\"\"\" message : str \"\"\"\u7533\u8bf7\u6d88\u606f\"\"\" sourceGroup : int = Field ( ... , alias = \"groupId\" ) \"\"\"\u88ab\u9080\u8bf7\u8fdb\u5165\u7fa4\u7684\u7fa4\u53f7\"\"\" groupName : str \"\"\"\u88ab\u9080\u8bf7\u8fdb\u5165\u7fa4\u7684\u7fa4\u540d\u79f0\"\"\" async def accept ( self , message : str = \"\" ) -> None : \"\"\"\u63a5\u53d7\u9080\u8bf7\u5e76\u52a0\u5165\u7fa4\u7ec4/\u53d1\u8d77\u5bf9\u6307\u5b9a\u7fa4\u7ec4\u7684\u52a0\u5165\u7533\u8bf7. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 0 , message ) async def reject ( self , message : str = \"\" ) -> None : \"\"\"\u62d2\u7edd\u5bf9\u65b9\u52a0\u5165\u6307\u5b9a\u7fa4\u7ec4\u7684\u9080\u8bf7. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 1 , message ) groupName class-attribute \ud83d\udd17 groupName : str = None \u88ab\u9080\u8bf7\u8fdb\u5165\u7fa4\u7684\u7fa4\u540d\u79f0 message class-attribute \ud83d\udd17 message : str = None \u7533\u8bf7\u6d88\u606f nickname class-attribute \ud83d\udd17 nickname : str = Field ( Ellipsis , alias = 'nick' ) \u7533\u8bf7\u4eba\u7684\u6635\u79f0\u6216\u7fa4\u540d\u7247 requestId class-attribute \ud83d\udd17 requestId : int = Field ( Ellipsis , alias = 'eventId' ) \u4e8b\u4ef6\u6807\u8bc6\uff0c\u54cd\u5e94\u8be5\u4e8b\u4ef6\u65f6\u7684\u6807\u8bc6 sourceGroup class-attribute \ud83d\udd17 sourceGroup : int = Field ( Ellipsis , alias = 'groupId' ) \u88ab\u9080\u8bf7\u8fdb\u5165\u7fa4\u7684\u7fa4\u53f7 supplicant class-attribute \ud83d\udd17 supplicant : int = Field ( Ellipsis , alias = 'fromId' ) \u9080\u8bf7\u4eba (\u597d\u53cb) \u7684QQ\u53f7 accept async \ud83d\udd17 accept ( message : str = '' ) -> None \u63a5\u53d7\u9080\u8bf7\u5e76\u52a0\u5165\u7fa4\u7ec4/\u53d1\u8d77\u5bf9\u6307\u5b9a\u7fa4\u7ec4\u7684\u52a0\u5165\u7533\u8bf7. Parameters: Name Type Description Default message str \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". '' Raises: Type Description LookupError \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/event/mirai.py 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 async def accept ( self , message : str = \"\" ) -> None : \"\"\"\u63a5\u53d7\u9080\u8bf7\u5e76\u52a0\u5165\u7fa4\u7ec4/\u53d1\u8d77\u5bf9\u6307\u5b9a\u7fa4\u7ec4\u7684\u52a0\u5165\u7533\u8bf7. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 0 , message ) reject async \ud83d\udd17 reject ( message : str = '' ) -> None \u62d2\u7edd\u5bf9\u65b9\u52a0\u5165\u6307\u5b9a\u7fa4\u7ec4\u7684\u9080\u8bf7. Parameters: Name Type Description Default message str \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". '' Raises: Type Description LookupError \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/event/mirai.py 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 async def reject ( self , message : str = \"\" ) -> None : \"\"\"\u62d2\u7edd\u5bf9\u65b9\u52a0\u5165\u6307\u5b9a\u7fa4\u7ec4\u7684\u9080\u8bf7. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 1 , message ) BotJoinGroupEvent \ud83d\udd17 Bases: GroupEvent , BotEvent Bot \u8d26\u53f7\u52a0\u5165\u6307\u5b9a\u7fa4\u7ec4 Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Member (annotation, optional): \u9080\u8bf7\u8005, \u53ef\u4ee5\u4e3a None Source code in graia/ariadne/event/mirai.py 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 class BotJoinGroupEvent ( GroupEvent , BotEvent ): \"\"\"Bot \u8d26\u53f7\u52a0\u5165\u6307\u5b9a\u7fa4\u7ec4 Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b - Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 - Member (annotation, optional): \u9080\u8bf7\u8005, \u53ef\u4ee5\u4e3a None \"\"\" type = \"BotJoinGroupEvent\" group : Group \"\"\"Bot \u65b0\u52a0\u5165\u7fa4\u7684\u4fe1\u606f\"\"\" inviter : Optional [ Member ] = Field ( ... , alias = \"invitor\" ) \"\"\"\u5982\u679c\u88ab\u9080\u8bf7\u5165\u7fa4\u5219\u4e3a\u9080\u8bf7\u4eba\u7684 Member \u5bf9\u8c61\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , BotJoinGroupEvent ): if generic_issubclass ( Member , interface . annotation ): return interface . event . inviter if generic_issubclass ( Group , interface . annotation ): return interface . event . group group class-attribute \ud83d\udd17 group : Group = None Bot \u65b0\u52a0\u5165\u7fa4\u7684\u4fe1\u606f inviter class-attribute \ud83d\udd17 inviter : Optional [ Member ] = Field ( Ellipsis , alias = 'invitor' ) \u5982\u679c\u88ab\u9080\u8bf7\u5165\u7fa4\u5219\u4e3a\u9080\u8bf7\u4eba\u7684 Member \u5bf9\u8c61 BotLeaveEventActive \ud83d\udd17 Bases: GroupEvent , BotEvent Bot \u8d26\u53f7\u4e3b\u52a8\u9000\u51fa\u4e86\u67d0\u7fa4\u7ec4. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Source code in graia/ariadne/event/mirai.py 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 class BotLeaveEventActive ( GroupEvent , BotEvent ): \"\"\"Bot \u8d26\u53f7\u4e3b\u52a8\u9000\u51fa\u4e86\u67d0\u7fa4\u7ec4. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b - Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 \"\"\" type : str = \"BotLeaveEventActive\" group : Group \"\"\"Bot \u9000\u51fa\u7684\u7fa4\u7684\u4fe1\u606f\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , BotLeaveEventActive ) and generic_issubclass ( Group , interface . annotation ): return interface . event . group group class-attribute \ud83d\udd17 group : Group = None Bot \u9000\u51fa\u7684\u7fa4\u7684\u4fe1\u606f BotLeaveEventKick \ud83d\udd17 Bases: GroupEvent , BotEvent Bot \u8d26\u53f7\u88ab\u67d0\u7fa4\u7ec4\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b\u4ece\u8be5\u7fa4\u7ec4\u4e2d\u5220\u9664. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Source code in graia/ariadne/event/mirai.py 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 class BotLeaveEventKick ( GroupEvent , BotEvent ): \"\"\"Bot \u8d26\u53f7\u88ab\u67d0\u7fa4\u7ec4\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b\u4ece\u8be5\u7fa4\u7ec4\u4e2d\u5220\u9664. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b - Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 \"\"\" type : str = \"BotLeaveEventKick\" group : Group \"\"\"Bot \u88ab\u8e22\u51fa\u7684\u7fa4\u7684\u4fe1\u606f\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , BotLeaveEventKick ) and generic_issubclass ( Group , interface . annotation ): return interface . event . group group class-attribute \ud83d\udd17 group : Group = None Bot \u88ab\u8e22\u51fa\u7684\u7fa4\u7684\u4fe1\u606f BotMuteEvent \ud83d\udd17 Bases: GroupEvent , BotEvent Bot \u8d26\u53f7\u5728\u4e00\u7279\u5b9a\u7fa4\u7ec4\u5185\u88ab\u7ba1\u7406\u5458/\u7fa4\u4e3b\u7981\u8a00 Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Member (annotation): \u6267\u884c\u7981\u8a00\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Source code in graia/ariadne/event/mirai.py 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 class BotMuteEvent ( GroupEvent , BotEvent ): \"\"\"Bot \u8d26\u53f7\u5728\u4e00\u7279\u5b9a\u7fa4\u7ec4\u5185\u88ab\u7ba1\u7406\u5458/\u7fa4\u4e3b\u7981\u8a00 Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b - Member (annotation): \u6267\u884c\u7981\u8a00\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b - Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 \"\"\" type = \"BotMuteEvent\" durationSeconds : int \"\"\"\u7981\u8a00\u65f6\u957f, \u5355\u4f4d\u4e3a\u79d2\"\"\" operator : Member \"\"\"\u6267\u884c\u7981\u8a00\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , BotMuteEvent ): if generic_issubclass ( Member , interface . annotation ): return interface . event . operator if generic_issubclass ( Group , interface . annotation ): return interface . event . operator . group durationSeconds class-attribute \ud83d\udd17 durationSeconds : int = None \u7981\u8a00\u65f6\u957f, \u5355\u4f4d\u4e3a\u79d2 operator class-attribute \ud83d\udd17 operator : Member = None \u6267\u884c\u7981\u8a00\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b BotOfflineEventActive \ud83d\udd17 Bases: BotEvent Bot \u8d26\u53f7\u4e3b\u52a8\u79bb\u7ebf Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Source code in graia/ariadne/event/mirai.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 class BotOfflineEventActive ( BotEvent ): \"\"\"Bot \u8d26\u53f7\u4e3b\u52a8\u79bb\u7ebf Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \"\"\" type = \"BotOfflineEventActive\" qq : int \"\"\"\u4e3b\u52a8\u79bb\u7ebf\u7684 Bot \u7684 QQ \u53f7\"\"\" qq class-attribute \ud83d\udd17 qq : int = None \u4e3b\u52a8\u79bb\u7ebf\u7684 Bot \u7684 QQ \u53f7 BotOfflineEventDropped \ud83d\udd17 Bases: BotEvent Bot \u8d26\u53f7\u4e0e\u670d\u52a1\u5668\u7684\u8fde\u63a5\u88ab\u670d\u52a1\u5668\u4e3b\u52a8\u65ad\u5f00, \u6216\u56e0\u7f51\u7edc\u539f\u56e0\u79bb\u7ebf Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Source code in graia/ariadne/event/mirai.py 88 89 90 91 92 93 94 95 96 97 98 99 100 101 class BotOfflineEventDropped ( BotEvent ): \"\"\"Bot \u8d26\u53f7\u4e0e\u670d\u52a1\u5668\u7684\u8fde\u63a5\u88ab\u670d\u52a1\u5668\u4e3b\u52a8\u65ad\u5f00, \u6216\u56e0\u7f51\u7edc\u539f\u56e0\u79bb\u7ebf Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \"\"\" type = \"BotOfflineEventDropped\" qq : int \"\"\"\u88ab\u670d\u52a1\u5668\u65ad\u5f00\u6216\u56e0\u7f51\u7edc\u95ee\u9898\u800c\u6389\u7ebf\u7684 Bot \u7684 QQ \u53f7\"\"\" qq class-attribute \ud83d\udd17 qq : int = None \u88ab\u670d\u52a1\u5668\u65ad\u5f00\u6216\u56e0\u7f51\u7edc\u95ee\u9898\u800c\u6389\u7ebf\u7684 Bot \u7684 QQ \u53f7 BotOfflineEventForce \ud83d\udd17 Bases: BotEvent Bot \u8d26\u53f7\u88ab\u8feb\u79bb\u7ebf Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Source code in graia/ariadne/event/mirai.py 72 73 74 75 76 77 78 79 80 81 82 83 84 85 class BotOfflineEventForce ( BotEvent ): \"\"\"Bot \u8d26\u53f7\u88ab\u8feb\u79bb\u7ebf Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \"\"\" type = \"BotOfflineEventForce\" qq : int \"\"\"\u88ab\u6324\u4e0b\u7ebf\u7684 Bot \u7684 QQ \u53f7\"\"\" qq class-attribute \ud83d\udd17 qq : int = None \u88ab\u6324\u4e0b\u7ebf\u7684 Bot \u7684 QQ \u53f7 BotOnlineEvent \ud83d\udd17 Bases: BotEvent Bot \u8d26\u53f7\u767b\u5f55\u6210\u529f Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \u63d0\u793a \u53ea\u6709\u4f7f\u7528 ReverseAdapter \u65f6\u624d\u6709\u53ef\u80fd\u63a5\u53d7\u5230\u6b64\u4e8b\u4ef6 Source code in graia/ariadne/event/mirai.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 class BotOnlineEvent ( BotEvent ): \"\"\"Bot \u8d26\u53f7\u767b\u5f55\u6210\u529f Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Note: \u63d0\u793a \u53ea\u6709\u4f7f\u7528 ReverseAdapter \u65f6\u624d\u6709\u53ef\u80fd\u63a5\u53d7\u5230\u6b64\u4e8b\u4ef6 \"\"\" type = \"BotOnlineEvent\" qq : int \"\"\"\u767b\u5f55\u6210\u529f\u7684 Bot \u7684 QQ \u53f7\"\"\" qq class-attribute \ud83d\udd17 qq : int = None \u767b\u5f55\u6210\u529f\u7684 Bot \u7684 QQ \u53f7 BotReloginEvent \ud83d\udd17 Bases: BotEvent Bot \u8d26\u53f7\u6b63\u5c1d\u8bd5\u91cd\u65b0\u767b\u5f55 Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Source code in graia/ariadne/event/mirai.py 104 105 106 107 108 109 110 111 112 113 114 115 116 117 class BotReloginEvent ( BotEvent ): \"\"\"Bot \u8d26\u53f7\u6b63\u5c1d\u8bd5\u91cd\u65b0\u767b\u5f55 Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \"\"\" type = \"BotReloginEvent\" qq : int \"\"\"\u4e3b\u52a8\u91cd\u65b0\u767b\u5f55\u7684 Bot \u7684 QQ \u53f7\"\"\" qq class-attribute \ud83d\udd17 qq : int = None \u4e3b\u52a8\u91cd\u65b0\u767b\u5f55\u7684 Bot \u7684 QQ \u53f7 BotUnmuteEvent \ud83d\udd17 Bases: GroupEvent , BotEvent Bot \u8d26\u53f7\u5728\u4e00\u7279\u5b9a\u7fa4\u7ec4\u5185\u88ab\u7ba1\u7406\u5458/\u7fa4\u4e3b\u89e3\u9664\u7981\u8a00 Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Member (annotation): \u6267\u884c\u89e3\u9664\u7981\u8a00\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Source code in graia/ariadne/event/mirai.py 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 class BotUnmuteEvent ( GroupEvent , BotEvent ): \"\"\"Bot \u8d26\u53f7\u5728\u4e00\u7279\u5b9a\u7fa4\u7ec4\u5185\u88ab\u7ba1\u7406\u5458/\u7fa4\u4e3b\u89e3\u9664\u7981\u8a00 Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b - Member (annotation): \u6267\u884c\u89e3\u9664\u7981\u8a00\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c - Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 \"\"\" type = \"BotUnmuteEvent\" operator : Member \"\"\"\u64cd\u4f5c\u7684\u7ba1\u7406\u5458\u6216\u7fa4\u4e3b\u4fe1\u606f\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , BotUnmuteEvent ): if generic_issubclass ( Member , interface . annotation ): return interface . event . operator if generic_issubclass ( Group , interface . annotation ): return interface . event . operator . group operator class-attribute \ud83d\udd17 operator : Member = None \u64cd\u4f5c\u7684\u7ba1\u7406\u5458\u6216\u7fa4\u4e3b\u4fe1\u606f ClientKind \ud83d\udd17 Bases: int , Enum \u8be6\u7ec6\u8bbe\u5907\u7c7b\u578b\u3002 Source code in graia/ariadne/event/mirai.py 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 class ClientKind ( int , Enum ): \"\"\"\u8be6\u7ec6\u8bbe\u5907\u7c7b\u578b\u3002\"\"\" ANDROID_PAD = 68104 AOL_CHAOJIHUIYUAN = 73730 AOL_HUIYUAN = 73474 AOL_SQQ = 69378 CAR = 65806 HRTX_IPHONE = 66566 HRTX_PC = 66561 MC_3G = 65795 MISRO_MSG = 69634 MOBILE_ANDROID = 65799 MOBILE_ANDROID_NEW = 72450 MOBILE_HD = 65805 MOBILE_HD_NEW = 71426 MOBILE_IPAD = 68361 MOBILE_IPAD_NEW = 72194 MOBILE_IPHONE = 67586 MOBILE_OTHER = 65794 MOBILE_PC_QQ = 65793 MOBILE_PC_TIM = 77313 MOBILE_WINPHONE_NEW = 72706 QQ_FORELDER = 70922 QQ_SERVICE = 71170 TV_QQ = 69130 WIN8 = 69899 WINPHONE = 65804 CommandExecutedEvent \ud83d\udd17 Bases: MiraiEvent \u6709\u4e00\u6761\u547d\u4ee4\u88ab\u6267\u884c Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Source code in graia/ariadne/event/mirai.py 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 class CommandExecutedEvent ( MiraiEvent ): \"\"\"\u6709\u4e00\u6761\u547d\u4ee4\u88ab\u6267\u884c Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \"\"\" type = \"CommandExecutedEvent\" name : str \"\"\"\u547d\u4ee4\u540d\u79f0\"\"\" friend : Optional [ Friend ] \"\"\"\u53d1\u9001\u547d\u4ee4\u7684\u597d\u53cb, \u4ece\u63a7\u5236\u53f0\u53d1\u9001\u4e3a None\"\"\" member : Optional [ Member ] \"\"\"\u53d1\u9001\u547d\u4ee4\u7684\u7fa4\u6210\u5458, \u4ece\u63a7\u5236\u53f0\u53d1\u9001\u4e3a None\"\"\" args : List [ Element ] \"\"\"\u6307\u4ee4\u7684\u53c2\u6570, \u4ee5\u6d88\u606f\u5143\u7d20\u7c7b\u578b\u4f20\u9012\"\"\" def __init__ ( self , * args , ** kwargs ): if \"args\" in kwargs : kwargs [ \"args\" ] = MessageChain . build_chain ( kwargs [ \"args\" ]) super () . __init__ ( * args , ** kwargs ) args class-attribute \ud83d\udd17 args : List [ Element ] = None \u6307\u4ee4\u7684\u53c2\u6570, \u4ee5\u6d88\u606f\u5143\u7d20\u7c7b\u578b\u4f20\u9012 friend class-attribute \ud83d\udd17 friend : Optional [ Friend ] = None \u53d1\u9001\u547d\u4ee4\u7684\u597d\u53cb, \u4ece\u63a7\u5236\u53f0\u53d1\u9001\u4e3a None member class-attribute \ud83d\udd17 member : Optional [ Member ] = None \u53d1\u9001\u547d\u4ee4\u7684\u7fa4\u6210\u5458, \u4ece\u63a7\u5236\u53f0\u53d1\u9001\u4e3a None name class-attribute \ud83d\udd17 name : str = None \u547d\u4ee4\u540d\u79f0 FriendEvent \ud83d\udd17 Bases: MiraiEvent \u6307\u793a\u6709\u5173\u597d\u53cb\u7684\u4e8b\u4ef6. Source code in graia/ariadne/event/mirai.py 25 26 27 28 class FriendEvent ( MiraiEvent ): \"\"\" \u6307\u793a\u6709\u5173\u597d\u53cb\u7684\u4e8b\u4ef6. \"\"\" FriendInputStatusChangedEvent \ud83d\udd17 Bases: FriendEvent Bot \u8d26\u53f7\u7684\u67d0\u4e00\u597d\u53cb\u8f93\u5165\u72b6\u6001\u6539\u53d8. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Source code in graia/ariadne/event/mirai.py 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 class FriendInputStatusChangedEvent ( FriendEvent ): \"\"\"Bot \u8d26\u53f7\u7684\u67d0\u4e00\u597d\u53cb\u8f93\u5165\u72b6\u6001\u6539\u53d8. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \"\"\" type = \"FriendInputStatusChangedEvent\" friend : Friend \"\"\"\u597d\u53cb\u4fe1\u606f\"\"\" inputting : bool \"\"\"\u662f\u5426\u6b63\u5728\u8f93\u5165\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , FriendInputStatusChangedEvent ) and generic_issubclass ( Friend , interface . annotation ): return interface . event . friend friend class-attribute \ud83d\udd17 friend : Friend = None \u597d\u53cb\u4fe1\u606f inputting class-attribute \ud83d\udd17 inputting : bool = None \u662f\u5426\u6b63\u5728\u8f93\u5165 FriendNickChangedEvent \ud83d\udd17 Bases: FriendEvent Bot \u8d26\u53f7\u7684\u67d0\u4e00\u597d\u53cb\u66f4\u6539\u4e86\u6635\u79f0. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Friend (annotation): \u66f4\u6539\u540d\u79f0\u7684\u597d\u53cb Source code in graia/ariadne/event/mirai.py 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 class FriendNickChangedEvent ( FriendEvent ): \"\"\"Bot \u8d26\u53f7\u7684\u67d0\u4e00\u597d\u53cb\u66f4\u6539\u4e86\u6635\u79f0. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b - Friend (annotation): \u66f4\u6539\u540d\u79f0\u7684\u597d\u53cb \"\"\" type = \"FriendNickChangedEvent\" friend : Friend \"\"\"\u597d\u53cb\u4fe1\u606f (nickname \u503c) \u4e0d\u786e\u5b9a\"\"\" from_name : str = Field ( ... , alias = \"from\" ) \"\"\"\u539f\u6635\u79f0\"\"\" to_name : str = Field ( ... , alias = \"to\" ) \"\"\"\u65b0\u6635\u79f0\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , FriendNickChangedEvent ) and generic_issubclass ( Friend , interface . annotation ): return interface . event . friend friend class-attribute \ud83d\udd17 friend : Friend = None \u597d\u53cb\u4fe1\u606f (nickname \u503c) \u4e0d\u786e\u5b9a from_name class-attribute \ud83d\udd17 from_name : str = Field ( Ellipsis , alias = 'from' ) \u539f\u6635\u79f0 to_name class-attribute \ud83d\udd17 to_name : str = Field ( Ellipsis , alias = 'to' ) \u65b0\u6635\u79f0 FriendRecallEvent \ud83d\udd17 Bases: FriendEvent \u6709\u4e00\u4f4d\u4e0e Bot \u8d26\u53f7\u4e3a\u597d\u53cb\u5173\u7cfb\u7684\u7528\u6237\u64a4\u56de\u4e86\u4e00\u6761\u6d88\u606f Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Source code in graia/ariadne/event/mirai.py 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 class FriendRecallEvent ( FriendEvent ): \"\"\"\u6709\u4e00\u4f4d\u4e0e Bot \u8d26\u53f7\u4e3a\u597d\u53cb\u5173\u7cfb\u7684\u7528\u6237\u64a4\u56de\u4e86\u4e00\u6761\u6d88\u606f Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \"\"\" type = \"FriendRecallEvent\" authorId : int \"\"\"\u64a4\u56de\u6d88\u606f\u7684\u53d1\u9001\u8005\u7684 QQ \u53f7\"\"\" messageId : int \"\"\"\u64a4\u56de\u6d88\u606f\u7684 ID\"\"\" time : datetime \"\"\"\u539f\u6d88\u606f\u53d1\u9001\u65f6\u95f4\"\"\" operator : int \"\"\"\u64a4\u56de\u6d88\u606f\u8005\u7684 QQ \u53f7\"\"\" authorId class-attribute \ud83d\udd17 authorId : int = None \u64a4\u56de\u6d88\u606f\u7684\u53d1\u9001\u8005\u7684 QQ \u53f7 messageId class-attribute \ud83d\udd17 messageId : int = None \u64a4\u56de\u6d88\u606f\u7684 ID operator class-attribute \ud83d\udd17 operator : int = None \u64a4\u56de\u6d88\u606f\u8005\u7684 QQ \u53f7 time class-attribute \ud83d\udd17 time : datetime = None \u539f\u6d88\u606f\u53d1\u9001\u65f6\u95f4 GroupAllowAnonymousChatEvent \ud83d\udd17 Bases: GroupEvent \u6709\u4e00\u7fa4\u7ec4\u4fee\u6539\u4e86\u6709\u5173\u533f\u540d\u804a\u5929\u7684\u76f8\u5173\u8bbe\u5b9a Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4 Member (annotation, optional = None): \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c Source code in graia/ariadne/event/mirai.py 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 class GroupAllowAnonymousChatEvent ( GroupEvent ): \"\"\"\u6709\u4e00\u7fa4\u7ec4\u4fee\u6539\u4e86\u6709\u5173\u533f\u540d\u804a\u5929\u7684\u76f8\u5173\u8bbe\u5b9a Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b - Group (annotation): \u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4 - Member (annotation, optional = None): \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c \"\"\" type = \"GroupAllowAnonymousChatEvent\" origin : bool \"\"\"\u539f\u59cb\u8bbe\u5b9a\"\"\" current : bool \"\"\"\u5f53\u524d\u8bbe\u5b9a\"\"\" group : Group \"\"\"\u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4\"\"\" operator : Optional [ Member ] \"\"\"\u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , GroupAllowAnonymousChatEvent ): if generic_issubclass ( Member , interface . annotation ): return interface . event . operator if generic_issubclass ( Group , interface . annotation ): return interface . event . group current class-attribute \ud83d\udd17 current : bool = None \u5f53\u524d\u8bbe\u5b9a group class-attribute \ud83d\udd17 group : Group = None \u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4 operator class-attribute \ud83d\udd17 operator : Optional [ Member ] = None \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c origin class-attribute \ud83d\udd17 origin : bool = None \u539f\u59cb\u8bbe\u5b9a GroupAllowConfessTalkEvent \ud83d\udd17 Bases: GroupEvent \u6709\u4e00\u7fa4\u7ec4\u4fee\u6539\u4e86\u6709\u5173\u5766\u767d\u8bf4\u7684\u76f8\u5173\u8bbe\u5b9a Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4 Member (annotation, optional = None): \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c Source code in graia/ariadne/event/mirai.py 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 class GroupAllowConfessTalkEvent ( GroupEvent ): \"\"\"\u6709\u4e00\u7fa4\u7ec4\u4fee\u6539\u4e86\u6709\u5173\u5766\u767d\u8bf4\u7684\u76f8\u5173\u8bbe\u5b9a Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b - Group (annotation): \u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4 - Member (annotation, optional = None): \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c \"\"\" type = \"GroupAllowConfessTalkEvent\" origin : bool \"\"\"\u539f\u59cb\u8bbe\u5b9a\"\"\" current : bool \"\"\"\u5f53\u524d\u8bbe\u5b9a\"\"\" group : Group \"\"\"\u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4\"\"\" operator : Optional [ Member ] \"\"\"\u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , GroupAllowConfessTalkEvent ): if generic_issubclass ( Member , interface . annotation ): return interface . event . operator if generic_issubclass ( Group , interface . annotation ): return interface . event . group current class-attribute \ud83d\udd17 current : bool = None \u5f53\u524d\u8bbe\u5b9a group class-attribute \ud83d\udd17 group : Group = None \u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4 operator class-attribute \ud83d\udd17 operator : Optional [ Member ] = None \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c origin class-attribute \ud83d\udd17 origin : bool = None \u539f\u59cb\u8bbe\u5b9a GroupAllowMemberInviteEvent \ud83d\udd17 Bases: GroupEvent \u6709\u4e00\u7fa4\u7ec4\u4fee\u6539\u4e86\u6709\u5173\u662f\u5426\u5141\u8bb8\u5df2\u6709\u6210\u5458\u9080\u8bf7\u5176\u4ed6\u7528\u6237\u52a0\u5165\u7fa4\u7ec4\u7684\u76f8\u5173\u8bbe\u5b9a Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4 Member (annotation, optional = None): \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c Source code in graia/ariadne/event/mirai.py 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 class GroupAllowMemberInviteEvent ( GroupEvent ): \"\"\"\u6709\u4e00\u7fa4\u7ec4\u4fee\u6539\u4e86\u6709\u5173\u662f\u5426\u5141\u8bb8\u5df2\u6709\u6210\u5458\u9080\u8bf7\u5176\u4ed6\u7528\u6237\u52a0\u5165\u7fa4\u7ec4\u7684\u76f8\u5173\u8bbe\u5b9a Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b - Group (annotation): \u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4 - Member (annotation, optional = None): \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c \"\"\" type = \"GroupAllowMemberInviteEvent\" origin : bool \"\"\"\u539f\u59cb\u8bbe\u5b9a\"\"\" current : bool \"\"\"\u5f53\u524d\u8bbe\u5b9a\"\"\" group : Group \"\"\"\u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4\"\"\" operator : Optional [ Member ] \"\"\"\u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , GroupAllowMemberInviteEvent ): if generic_issubclass ( Member , interface . annotation ): return interface . event . operator if generic_issubclass ( Group , interface . annotation ): return interface . event . group current class-attribute \ud83d\udd17 current : bool = None \u5f53\u524d\u8bbe\u5b9a group class-attribute \ud83d\udd17 group : Group = None \u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4 operator class-attribute \ud83d\udd17 operator : Optional [ Member ] = None \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c origin class-attribute \ud83d\udd17 origin : bool = None \u539f\u59cb\u8bbe\u5b9a GroupEntranceAnnouncementChangeEvent \ud83d\udd17 Bases: GroupEvent \u6709\u4e00\u7fa4\u7ec4\u88ab\u4fee\u6539\u4e86\u5165\u7fa4\u516c\u544a Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u88ab\u4fee\u6539\u4e86\u5165\u7fa4\u516c\u544a\u7684\u7fa4\u7ec4 Member (annotation, optional): \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c Source code in graia/ariadne/event/mirai.py 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 class GroupEntranceAnnouncementChangeEvent ( GroupEvent ): \"\"\"\u6709\u4e00\u7fa4\u7ec4\u88ab\u4fee\u6539\u4e86\u5165\u7fa4\u516c\u544a Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b - Group (annotation): \u88ab\u4fee\u6539\u4e86\u5165\u7fa4\u516c\u544a\u7684\u7fa4\u7ec4 - Member (annotation, optional): \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c \"\"\" type = \"GroupEntranceAnnouncementChangeEvent\" origin : str \"\"\"\u539f\u59cb\u8bbe\u5b9a\"\"\" current : str \"\"\"\u5f53\u524d\u8bbe\u5b9a\"\"\" group : Group \"\"\"\u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4\"\"\" operator : Optional [ Member ] \"\"\"\u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , GroupEntranceAnnouncementChangeEvent ): if generic_issubclass ( Member , interface . annotation ): return interface . event . operator if generic_issubclass ( Group , interface . annotation ): return interface . event . group current class-attribute \ud83d\udd17 current : str = None \u5f53\u524d\u8bbe\u5b9a group class-attribute \ud83d\udd17 group : Group = None \u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4 operator class-attribute \ud83d\udd17 operator : Optional [ Member ] = None \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c origin class-attribute \ud83d\udd17 origin : str = None \u539f\u59cb\u8bbe\u5b9a GroupEvent \ud83d\udd17 Bases: MiraiEvent \u6307\u793a\u6709\u5173\u7fa4\u7ec4\u7684\u4e8b\u4ef6. Source code in graia/ariadne/event/mirai.py 31 32 33 34 class GroupEvent ( MiraiEvent ): \"\"\" \u6307\u793a\u6709\u5173\u7fa4\u7ec4\u7684\u4e8b\u4ef6. \"\"\" GroupMuteAllEvent \ud83d\udd17 Bases: GroupEvent \u6709\u4e00\u7fa4\u7ec4\u5f00\u542f\u4e86\u5168\u4f53\u7981\u8a00 Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u5f00\u542f\u4e86\u5168\u4f53\u7981\u8a00\u7684\u7fa4\u7ec4 Member (annotation, optional): \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c Source code in graia/ariadne/event/mirai.py 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 class GroupMuteAllEvent ( GroupEvent ): \"\"\"\u6709\u4e00\u7fa4\u7ec4\u5f00\u542f\u4e86\u5168\u4f53\u7981\u8a00 Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b - Group (annotation): \u5f00\u542f\u4e86\u5168\u4f53\u7981\u8a00\u7684\u7fa4\u7ec4 - Member (annotation, optional): \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c \"\"\" type = \"GroupMuteAllEvent\" origin : bool \"\"\"\u539f\u59cb\u8bbe\u5b9a\"\"\" current : bool \"\"\"\u5f53\u524d\u8bbe\u5b9a\"\"\" group : Group \"\"\"\u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4\"\"\" operator : Optional [ Member ] \"\"\"\u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , GroupMuteAllEvent ): if generic_issubclass ( Member , interface . annotation ): return interface . event . operator if generic_issubclass ( Group , interface . annotation ): return interface . event . group current class-attribute \ud83d\udd17 current : bool = None \u5f53\u524d\u8bbe\u5b9a group class-attribute \ud83d\udd17 group : Group = None \u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4 operator class-attribute \ud83d\udd17 operator : Optional [ Member ] = None \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c origin class-attribute \ud83d\udd17 origin : bool = None \u539f\u59cb\u8bbe\u5b9a GroupNameChangeEvent \ud83d\udd17 Bases: GroupEvent \u6709\u4e00\u7fa4\u7ec4\u88ab\u4fee\u6539\u4e86\u7fa4\u540d\u79f0 Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u88ab\u4fee\u6539\u4e86\u7fa4\u540d\u79f0\u7684\u7fa4\u7ec4 Member (annotation): \u66f4\u6539\u7fa4\u540d\u79f0\u7684\u6210\u5458, \u6743\u9650\u5fc5\u5b9a\u4e3a\u7ba1\u7406\u5458\u6216\u662f\u7fa4\u4e3b Source code in graia/ariadne/event/mirai.py 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 class GroupNameChangeEvent ( GroupEvent ): \"\"\"\u6709\u4e00\u7fa4\u7ec4\u88ab\u4fee\u6539\u4e86\u7fa4\u540d\u79f0 Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b - Group (annotation): \u88ab\u4fee\u6539\u4e86\u7fa4\u540d\u79f0\u7684\u7fa4\u7ec4 - Member (annotation): \u66f4\u6539\u7fa4\u540d\u79f0\u7684\u6210\u5458, \u6743\u9650\u5fc5\u5b9a\u4e3a\u7ba1\u7406\u5458\u6216\u662f\u7fa4\u4e3b \"\"\" type = \"GroupNameChangeEvent\" origin : str \"\"\"\u539f\u59cb\u8bbe\u5b9a\"\"\" current : str \"\"\"\u5f53\u524d\u8bbe\u5b9a\"\"\" group : Group \"\"\"\u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4\"\"\" operator : Optional [ Member ] \"\"\"\u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , GroupNameChangeEvent ): if generic_issubclass ( Member , interface . annotation ): return interface . event . operator if generic_issubclass ( Group , interface . annotation ): return interface . event . group current class-attribute \ud83d\udd17 current : str = None \u5f53\u524d\u8bbe\u5b9a group class-attribute \ud83d\udd17 group : Group = None \u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4 operator class-attribute \ud83d\udd17 operator : Optional [ Member ] = None \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c origin class-attribute \ud83d\udd17 origin : str = None \u539f\u59cb\u8bbe\u5b9a GroupRecallEvent \ud83d\udd17 Bases: GroupEvent \u6709\u7fa4\u6210\u5458\u5728\u6307\u5b9a\u7fa4\u7ec4\u64a4\u56de\u4e86\u4e00\u6761\u6d88\u606f, \u6ce8\u610f, \u8fd9\u91cc\u7684\u7fa4\u6210\u5458\u82e5\u5177\u6709\u7ba1\u7406\u5458/\u7fa4\u4e3b\u6743\u9650, \u5219\u4ed6\u4eec\u53ef\u4ee5\u64a4\u56de\u5176\u4ed6\u666e\u901a\u7fa4\u5458\u7684\u6d88\u606f, \u4e14\u4e0d\u53d7\u53d1\u51fa\u65f6\u95f4\u9650\u5236. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Member (annotation, optional): \u6267\u884c\u672c\u64cd\u4f5c\u7684\u7fa4\u6210\u5458, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Source code in graia/ariadne/event/mirai.py 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 class GroupRecallEvent ( GroupEvent ): \"\"\"\u6709\u7fa4\u6210\u5458\u5728\u6307\u5b9a\u7fa4\u7ec4\u64a4\u56de\u4e86\u4e00\u6761\u6d88\u606f, \u6ce8\u610f, \u8fd9\u91cc\u7684\u7fa4\u6210\u5458\u82e5\u5177\u6709\u7ba1\u7406\u5458/\u7fa4\u4e3b\u6743\u9650, \u5219\u4ed6\u4eec\u53ef\u4ee5\u64a4\u56de\u5176\u4ed6\u666e\u901a\u7fa4\u5458\u7684\u6d88\u606f, \u4e14\u4e0d\u53d7\u53d1\u51fa\u65f6\u95f4\u9650\u5236. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b - Member (annotation, optional): \u6267\u884c\u672c\u64cd\u4f5c\u7684\u7fa4\u6210\u5458, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c - Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 \"\"\" type = \"GroupRecallEvent\" authorId : int \"\"\"\u539f\u6d88\u606f\u53d1\u9001\u8005\u7684 QQ \u53f7\"\"\" messageId : int \"\"\"\u539f\u6d88\u606f\u7684 ID\"\"\" time : datetime \"\"\"\u539f\u6d88\u606f\u53d1\u9001\u65f6\u95f4\"\"\" group : Group \"\"\"\u6d88\u606f\u64a4\u56de\u6240\u5728\u7684\u7fa4\"\"\" operator : Optional [ Member ] \"\"\"\u64a4\u56de\u6d88\u606f\u7684\u7fa4\u6210\u5458, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , GroupRecallEvent ): if generic_issubclass ( Member , interface . annotation ): return interface . event . operator if generic_issubclass ( Group , interface . annotation ): return interface . event . group authorId class-attribute \ud83d\udd17 authorId : int = None \u539f\u6d88\u606f\u53d1\u9001\u8005\u7684 QQ \u53f7 group class-attribute \ud83d\udd17 group : Group = None \u6d88\u606f\u64a4\u56de\u6240\u5728\u7684\u7fa4 messageId class-attribute \ud83d\udd17 messageId : int = None \u539f\u6d88\u606f\u7684 ID operator class-attribute \ud83d\udd17 operator : Optional [ Member ] = None \u64a4\u56de\u6d88\u606f\u7684\u7fa4\u6210\u5458, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c time class-attribute \ud83d\udd17 time : datetime = None \u539f\u6d88\u606f\u53d1\u9001\u65f6\u95f4 MemberCardChangeEvent \ud83d\udd17 Bases: GroupEvent \u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u7684\u7fa4\u540d\u7247\u88ab\u66f4\u6539, \u6267\u884c\u8005\u53ef\u80fd\u662f\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u8be5\u6210\u5458\u81ea\u5df1, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7(\u8fd9\u65f6, operator \u4e3a None ). Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Member (annotation): - \"target\" (default, const, str): \u88ab\u66f4\u6539\u7fa4\u540d\u7247\u7684\u6210\u5458 - \"operator\" (default, const, Optional[str]): \u8be5\u64cd\u4f5c\u7684\u6267\u884c\u8005, \u53ef\u80fd\u662f\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u8be5\u6210\u5458\u81ea\u5df1, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7(\u8fd9\u65f6, operator \u4e3a None ). Source code in graia/ariadne/event/mirai.py 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 class MemberCardChangeEvent ( GroupEvent ): \"\"\"\u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u7684\u7fa4\u540d\u7247\u88ab\u66f4\u6539, \u6267\u884c\u8005\u53ef\u80fd\u662f\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u8be5\u6210\u5458\u81ea\u5df1, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7(\u8fd9\u65f6, `operator` \u4e3a `None`). Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Member (annotation): - `\"target\"` (default, const, str): \u88ab\u66f4\u6539\u7fa4\u540d\u7247\u7684\u6210\u5458 - `\"operator\"` (default, const, Optional[str]): \u8be5\u64cd\u4f5c\u7684\u6267\u884c\u8005, \u53ef\u80fd\u662f\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u8be5\u6210\u5458\u81ea\u5df1, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7(\u8fd9\u65f6, `operator` \u4e3a `None`). \"\"\" type = \"MemberCardChangeEvent\" origin : str \"\"\"\u539f\u59cb\u7fa4\u540d\u7247\"\"\" current : str \"\"\"\u73b0\u5728\u7684\u7fa4\u540d\u7247\"\"\" member : Member \"\"\"\u88ab\u66f4\u6539\u7fa4\u540d\u7247\u7684\u6210\u5458\"\"\" operator : Optional [ Member ] \"\"\"\u66f4\u6539\u7fa4\u540d\u7247\u7684\u64cd\u4f5c\u8005, \u53ef\u80fd\u662f\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u8be5\u6210\u5458\u81ea\u5df1, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7(\u8fd9\u65f6, `operator` \u4e3a `None`).\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , MemberCardChangeEvent ): if interface . name == \"operator\" and generic_issubclass ( Member , interface . annotation ): return interface . event . operator if generic_issubclass ( Member , interface . annotation ): return interface . event . member if generic_issubclass ( Group , interface . annotation ): return interface . event . member . group current class-attribute \ud83d\udd17 current : str = None \u73b0\u5728\u7684\u7fa4\u540d\u7247 member class-attribute \ud83d\udd17 member : Member = None \u88ab\u66f4\u6539\u7fa4\u540d\u7247\u7684\u6210\u5458 operator class-attribute \ud83d\udd17 operator : Optional [ Member ] = None \u66f4\u6539\u7fa4\u540d\u7247\u7684\u64cd\u4f5c\u8005, \u53ef\u80fd\u662f\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u8be5\u6210\u5458\u81ea\u5df1, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7(\u8fd9\u65f6, operator \u4e3a None ). origin class-attribute \ud83d\udd17 origin : str = None \u539f\u59cb\u7fa4\u540d\u7247 MemberHonorChangeEvent \ud83d\udd17 Bases: GroupEvent \u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u83b7\u5f97/\u5931\u53bb\u4e86\u67d0\u4e2a\u8363\u8a89. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Member (annotation): \u83b7\u5f97/\u5931\u53bb\u8363\u8a89\u7684\u6210\u5458 Source code in graia/ariadne/event/mirai.py 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 class MemberHonorChangeEvent ( GroupEvent ): \"\"\"\u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u83b7\u5f97/\u5931\u53bb\u4e86\u67d0\u4e2a\u8363\u8a89. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Member (annotation): \u83b7\u5f97/\u5931\u53bb\u8363\u8a89\u7684\u6210\u5458 \"\"\" type = \"MemberHonorChangeEvent\" member : Member \"\"\"\u83b7\u5f97/\u5931\u53bb\u8363\u8a89\u7684\u6210\u5458\"\"\" action : str \"\"\"\u5bf9\u5e94\u7684\u64cd\u4f5c, \u53ef\u80fd\u662f `\"achieve\"` \u6216 `\"lose\"`\"\"\" honor : str \"\"\"\u83b7\u5f97/\u5931\u53bb\u7684\u8363\u8a89\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , MemberHonorChangeEvent ): if generic_issubclass ( Member , interface . annotation ): return interface . event . member if generic_issubclass ( Group , interface . annotation ): return interface . event . member . group action class-attribute \ud83d\udd17 action : str = None \u5bf9\u5e94\u7684\u64cd\u4f5c, \u53ef\u80fd\u662f \"achieve\" \u6216 \"lose\" honor class-attribute \ud83d\udd17 honor : str = None \u83b7\u5f97/\u5931\u53bb\u7684\u8363\u8a89 member class-attribute \ud83d\udd17 member : Member = None \u83b7\u5f97/\u5931\u53bb\u8363\u8a89\u7684\u6210\u5458 MemberJoinEvent \ud83d\udd17 Bases: GroupEvent \u6709\u4e00\u65b0\u6210\u5458\u52a0\u5165\u4e86\u4e00\u7279\u5b9a\u7fa4\u7ec4 Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u8be5\u7528\u6237\u52a0\u5165\u7684\u7fa4\u7ec4 Member (annotation): \u5173\u4e8e\u8be5\u7528\u6237\u7684\u6210\u5458\u5b9e\u4f8b Source code in graia/ariadne/event/mirai.py 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 class MemberJoinEvent ( GroupEvent ): \"\"\"\u6709\u4e00\u65b0\u6210\u5458\u52a0\u5165\u4e86\u4e00\u7279\u5b9a\u7fa4\u7ec4 Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b - Group (annotation): \u8be5\u7528\u6237\u52a0\u5165\u7684\u7fa4\u7ec4 - Member (annotation): \u5173\u4e8e\u8be5\u7528\u6237\u7684\u6210\u5458\u5b9e\u4f8b \"\"\" type = \"MemberJoinEvent\" member : Member \"\"\"\u52a0\u5165\u7684\u6210\u5458\"\"\" inviter : Optional [ Member ] = Field ( ... , alias = \"invitor\" ) \"\"\"\u9080\u8bf7\u8be5\u6210\u5458\u7684\u6210\u5458, \u53ef\u4e3a None\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , MemberJoinEvent ): if interface . name == \"inviter\" and generic_issubclass ( Member , interface . annotation ): return interface . event . inviter if generic_issubclass ( Member , interface . annotation ): return interface . event . member if generic_issubclass ( Group , interface . annotation ): return interface . event . member . group inviter class-attribute \ud83d\udd17 inviter : Optional [ Member ] = Field ( Ellipsis , alias = 'invitor' ) \u9080\u8bf7\u8be5\u6210\u5458\u7684\u6210\u5458, \u53ef\u4e3a None member class-attribute \ud83d\udd17 member : Member = None \u52a0\u5165\u7684\u6210\u5458 MemberJoinRequestEvent \ud83d\udd17 Bases: RequestEvent , GroupEvent \u6709\u4e00\u7528\u6237\u5411\u673a\u5668\u4eba\u4f5c\u4e3a\u7ba1\u7406\u5458/\u7fa4\u4e3b\u7684\u7fa4\u7ec4\u7533\u8bf7\u52a0\u5165\u7fa4\u7ec4. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \u4e8b\u4ef6\u62d3\u5c55\u652f\u6301 \u8be5\u4e8b\u4ef6\u7684\u5904\u7406\u9700\u8981\u4f60\u83b7\u53d6\u539f\u59cb\u4e8b\u4ef6\u5b9e\u4f8b. \u540c\u610f\u8bf7\u6c42: await event.accept() , \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. \u62d2\u7edd\u8bf7\u6c42: await event.reject() , \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. \u5ffd\u7565\u8bf7\u6c42: await event.ignore() , \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. \u62d2\u7edd\u5e76\u4e0d\u518d\u63a5\u53d7\u6765\u81ea\u5bf9\u65b9\u7684\u8bf7\u6c42: await event.rejectAndBlock() , \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. \u5ffd\u7565\u5e76\u4e0d\u518d\u63a5\u53d7\u6765\u81ea\u5bf9\u65b9\u7684\u8bf7\u6c42: await event.ignoreAndBlock() , \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. Source code in graia/ariadne/event/mirai.py 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 class MemberJoinRequestEvent ( RequestEvent , GroupEvent ): \"\"\"\u6709\u4e00\u7528\u6237\u5411\u673a\u5668\u4eba\u4f5c\u4e3a\u7ba1\u7406\u5458/\u7fa4\u4e3b\u7684\u7fa4\u7ec4\u7533\u8bf7\u52a0\u5165\u7fa4\u7ec4. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \u4e8b\u4ef6\u62d3\u5c55\u652f\u6301: \u8be5\u4e8b\u4ef6\u7684\u5904\u7406\u9700\u8981\u4f60\u83b7\u53d6\u539f\u59cb\u4e8b\u4ef6\u5b9e\u4f8b. 1. \u540c\u610f\u8bf7\u6c42: `await event.accept()`, \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. 2. \u62d2\u7edd\u8bf7\u6c42: `await event.reject()`, \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. 3. \u5ffd\u7565\u8bf7\u6c42: `await event.ignore()`, \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. 4. \u62d2\u7edd\u5e76\u4e0d\u518d\u63a5\u53d7\u6765\u81ea\u5bf9\u65b9\u7684\u8bf7\u6c42: `await event.rejectAndBlock()`, \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. 5. \u5ffd\u7565\u5e76\u4e0d\u518d\u63a5\u53d7\u6765\u81ea\u5bf9\u65b9\u7684\u8bf7\u6c42: `await event.ignoreAndBlock()`, \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. \"\"\" type = \"MemberJoinRequestEvent\" requestId : int = Field ( ... , alias = \"eventId\" ) \"\"\"\u4e8b\u4ef6\u6807\u8bc6\uff0c\u54cd\u5e94\u8be5\u4e8b\u4ef6\u65f6\u7684\u6807\u8bc6\"\"\" supplicant : int = Field ( ... , alias = \"fromId\" ) \"\"\"\u7533\u8bf7\u4ebaQQ\u53f7\"\"\" nickname : str = Field ( ... , alias = \"nick\" ) \"\"\"\u7533\u8bf7\u4eba\u7684\u6635\u79f0\u6216\u7fa4\u540d\u7247\"\"\" message : str \"\"\"\u7533\u8bf7\u6d88\u606f\"\"\" sourceGroup : int = Field ( ... , alias = \"groupId\" ) \"\"\"\u7533\u8bf7\u4eba\u7533\u8bf7\u5165\u7fa4\u7684\u7fa4\u53f7\"\"\" groupName : str \"\"\"\u7533\u8bf7\u4eba\u7533\u8bf7\u5165\u7fa4\u7684\u7fa4\u540d\u79f0\"\"\" async def accept ( self , message : str = \"\" ) -> None : \"\"\"\u540c\u610f\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 0 , message ) async def reject ( self , message : str = \"\" ) -> None : \"\"\"\u62d2\u7edd\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 1 , message ) async def ignore ( self , message : str = \"\" ) -> None : \"\"\"\u5ffd\u7565\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4\u7684\u8bf7\u6c42. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 2 , message ) async def rejectAndBlock ( self , message : str = \"\" ) -> None : \"\"\"\u62d2\u7edd\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4\u7684\u8bf7\u6c42, \u5e76\u4e0d\u518d\u63a5\u53d7\u6765\u81ea\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4\u7684\u8bf7\u6c42. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 3 , message ) async def ignoreAndBlock ( self , message : str = \"\" ) -> None : \"\"\"\u5ffd\u7565\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4\u7684\u8bf7\u6c42, \u5e76\u4e0d\u518d\u63a5\u53d7\u6765\u81ea\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4\u7684\u8bf7\u6c42. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 4 , message ) groupName class-attribute \ud83d\udd17 groupName : str = None \u7533\u8bf7\u4eba\u7533\u8bf7\u5165\u7fa4\u7684\u7fa4\u540d\u79f0 message class-attribute \ud83d\udd17 message : str = None \u7533\u8bf7\u6d88\u606f nickname class-attribute \ud83d\udd17 nickname : str = Field ( Ellipsis , alias = 'nick' ) \u7533\u8bf7\u4eba\u7684\u6635\u79f0\u6216\u7fa4\u540d\u7247 requestId class-attribute \ud83d\udd17 requestId : int = Field ( Ellipsis , alias = 'eventId' ) \u4e8b\u4ef6\u6807\u8bc6\uff0c\u54cd\u5e94\u8be5\u4e8b\u4ef6\u65f6\u7684\u6807\u8bc6 sourceGroup class-attribute \ud83d\udd17 sourceGroup : int = Field ( Ellipsis , alias = 'groupId' ) \u7533\u8bf7\u4eba\u7533\u8bf7\u5165\u7fa4\u7684\u7fa4\u53f7 supplicant class-attribute \ud83d\udd17 supplicant : int = Field ( Ellipsis , alias = 'fromId' ) \u7533\u8bf7\u4ebaQQ\u53f7 accept async \ud83d\udd17 accept ( message : str = '' ) -> None \u540c\u610f\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4. Parameters: Name Type Description Default message str \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". '' Raises: Type Description LookupError \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/event/mirai.py 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 async def accept ( self , message : str = \"\" ) -> None : \"\"\"\u540c\u610f\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 0 , message ) ignore async \ud83d\udd17 ignore ( message : str = '' ) -> None \u5ffd\u7565\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4\u7684\u8bf7\u6c42. Parameters: Name Type Description Default message str \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". '' Raises: Type Description LookupError \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/event/mirai.py 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 async def ignore ( self , message : str = \"\" ) -> None : \"\"\"\u5ffd\u7565\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4\u7684\u8bf7\u6c42. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 2 , message ) ignoreAndBlock async \ud83d\udd17 ignoreAndBlock ( message : str = '' ) -> None \u5ffd\u7565\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4\u7684\u8bf7\u6c42, \u5e76\u4e0d\u518d\u63a5\u53d7\u6765\u81ea\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4\u7684\u8bf7\u6c42. Parameters: Name Type Description Default message str \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". '' Raises: Type Description LookupError \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/event/mirai.py 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 async def ignoreAndBlock ( self , message : str = \"\" ) -> None : \"\"\"\u5ffd\u7565\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4\u7684\u8bf7\u6c42, \u5e76\u4e0d\u518d\u63a5\u53d7\u6765\u81ea\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4\u7684\u8bf7\u6c42. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 4 , message ) reject async \ud83d\udd17 reject ( message : str = '' ) -> None \u62d2\u7edd\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4. Parameters: Name Type Description Default message str \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". '' Raises: Type Description LookupError \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/event/mirai.py 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 async def reject ( self , message : str = \"\" ) -> None : \"\"\"\u62d2\u7edd\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 1 , message ) rejectAndBlock async \ud83d\udd17 rejectAndBlock ( message : str = '' ) -> None \u62d2\u7edd\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4\u7684\u8bf7\u6c42, \u5e76\u4e0d\u518d\u63a5\u53d7\u6765\u81ea\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4\u7684\u8bf7\u6c42. Parameters: Name Type Description Default message str \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". '' Raises: Type Description LookupError \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/event/mirai.py 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 async def rejectAndBlock ( self , message : str = \"\" ) -> None : \"\"\"\u62d2\u7edd\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4\u7684\u8bf7\u6c42, \u5e76\u4e0d\u518d\u63a5\u53d7\u6765\u81ea\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4\u7684\u8bf7\u6c42. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 3 , message ) MemberLeaveEventKick \ud83d\udd17 Bases: GroupEvent \u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u88ab\u7ba1\u7406\u5458/\u7fa4\u4e3b\u4ece\u7fa4\u7ec4\u4e2d\u5220\u9664, \u5f53 operator \u4e3a None \u65f6, \u6267\u884c\u8005\u4e3a Bot \u8d26\u53f7. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u6307\u5b9a\u7684\u7fa4\u7ec4 Member (annotation): - \"target\" (default, const, str): \u88ab\u4ece\u7fa4\u7ec4\u5220\u9664\u7684\u6210\u5458 - \"operator\" (default, const, str, optional = None): \u6267\u884c\u4e86\u8be5\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7. Source code in graia/ariadne/event/mirai.py 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 class MemberLeaveEventKick ( GroupEvent ): \"\"\"\u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u88ab\u7ba1\u7406\u5458/\u7fa4\u4e3b\u4ece\u7fa4\u7ec4\u4e2d\u5220\u9664, \u5f53 `operator` \u4e3a `None` \u65f6, \u6267\u884c\u8005\u4e3a Bot \u8d26\u53f7. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u6307\u5b9a\u7684\u7fa4\u7ec4 Member (annotation): - `\"target\"` (default, const, str): \u88ab\u4ece\u7fa4\u7ec4\u5220\u9664\u7684\u6210\u5458 - `\"operator\"` (default, const, str, optional = None): \u6267\u884c\u4e86\u8be5\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7. \"\"\" type = \"MemberLeaveEventKick\" member : Member \"\"\"\u88ab\u4ece\u7fa4\u7ec4\u5220\u9664\u7684\u6210\u5458\"\"\" operator : Optional [ Member ] \"\"\"\u6267\u884c\u4e86\u8be5\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , MemberLeaveEventKick ): if interface . name == \"operator\" and generic_issubclass ( Member , interface . annotation ): return interface . event . operator if generic_issubclass ( Member , interface . annotation ): return interface . event . member if generic_issubclass ( Group , interface . annotation ): return interface . event . member . group member class-attribute \ud83d\udd17 member : Member = None \u88ab\u4ece\u7fa4\u7ec4\u5220\u9664\u7684\u6210\u5458 operator class-attribute \ud83d\udd17 operator : Optional [ Member ] = None \u6267\u884c\u4e86\u8be5\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7 MemberLeaveEventQuit \ud83d\udd17 Bases: GroupEvent \u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u4e3b\u52a8\u9000\u51fa\u7fa4\u7ec4. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u672c\u4e8b\u4ef6\u7684\u7fa4\u7ec4, \u901a\u5e38\u7684, \u5728\u672c\u4e8b\u4ef6\u53d1\u751f\u540e\u672c\u7fa4\u7ec4\u6210\u5458\u6570\u91cf\u5c11\u4e8e\u4e4b\u524d Member (annotation): \u4e3b\u52a8\u9000\u51fa\u7fa4\u7ec4\u7684\u6210\u5458 Source code in graia/ariadne/event/mirai.py 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 class MemberLeaveEventQuit ( GroupEvent ): \"\"\"\u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u4e3b\u52a8\u9000\u51fa\u7fa4\u7ec4. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u672c\u4e8b\u4ef6\u7684\u7fa4\u7ec4, \u901a\u5e38\u7684, \u5728\u672c\u4e8b\u4ef6\u53d1\u751f\u540e\u672c\u7fa4\u7ec4\u6210\u5458\u6570\u91cf\u5c11\u4e8e\u4e4b\u524d Member (annotation): \u4e3b\u52a8\u9000\u51fa\u7fa4\u7ec4\u7684\u6210\u5458 \"\"\" type = \"MemberLeaveEventQuit\" member : Member \"\"\"\u4e3b\u52a8\u9000\u51fa\u7fa4\u7ec4\u7684\u6210\u5458\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , MemberLeaveEventQuit ): if generic_issubclass ( Member , interface . annotation ): return interface . event . member if generic_issubclass ( Group , interface . annotation ): return interface . event . member . group member class-attribute \ud83d\udd17 member : Member = None \u4e3b\u52a8\u9000\u51fa\u7fa4\u7ec4\u7684\u6210\u5458 MemberMuteEvent \ud83d\udd17 Bases: GroupEvent \u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u88ab\u7ba1\u7406\u5458/\u7fa4\u7ec4\u7981\u8a00, \u5f53 operator \u4e3a None \u65f6\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Member (annotation): - \"target\" (default, const, str): \u88ab\u7981\u8a00\u7684\u6210\u5458 - \"operator\" (default, const, str, optional = None): \u8be5\u64cd\u4f5c\u7684\u6267\u884c\u8005, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7. \u9ed8\u8ba4\u8fd4\u56de target . Source code in graia/ariadne/event/mirai.py 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 class MemberMuteEvent ( GroupEvent ): \"\"\"\u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u88ab\u7ba1\u7406\u5458/\u7fa4\u7ec4\u7981\u8a00, \u5f53 `operator` \u4e3a `None` \u65f6\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Member (annotation): - `\"target\"` (default, const, str): \u88ab\u7981\u8a00\u7684\u6210\u5458 - `\"operator\"` (default, const, str, optional = None): \u8be5\u64cd\u4f5c\u7684\u6267\u884c\u8005, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7. \u9ed8\u8ba4\u8fd4\u56de `target`. \"\"\" type = \"MemberMuteEvent\" durationSeconds : int \"\"\"\u7981\u8a00\u65f6\u957f, \u5355\u4f4d\u4e3a\u79d2\"\"\" member : Member \"\"\"\u88ab\u7981\u8a00\u7684\u6210\u5458\"\"\" operator : Optional [ Member ] \"\"\"\u8be5\u64cd\u4f5c\u7684\u6267\u884c\u8005, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , MemberMuteEvent ): if interface . name == \"operator\" and generic_issubclass ( Member , interface . annotation ): return interface . event . operator if generic_issubclass ( Member , interface . annotation ): return interface . event . member if generic_issubclass ( Group , interface . annotation ): return interface . event . member . group durationSeconds class-attribute \ud83d\udd17 durationSeconds : int = None \u7981\u8a00\u65f6\u957f, \u5355\u4f4d\u4e3a\u79d2 member class-attribute \ud83d\udd17 member : Member = None \u88ab\u7981\u8a00\u7684\u6210\u5458 operator class-attribute \ud83d\udd17 operator : Optional [ Member ] = None \u8be5\u64cd\u4f5c\u7684\u6267\u884c\u8005, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7 MemberPermissionChangeEvent \ud83d\udd17 Bases: GroupEvent \u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u7684\u6743\u9650\u88ab\u66f4\u6539/\u8c03\u6574, \u6267\u884c\u8005\u53ea\u53ef\u80fd\u662f\u7fa4\u7ec4\u7684\u7fa4\u4e3b. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Member (annotation): \u88ab\u8c03\u6574\u6743\u9650\u7684\u7fa4\u7ec4\u6210\u5458 Source code in graia/ariadne/event/mirai.py 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 class MemberPermissionChangeEvent ( GroupEvent ): \"\"\"\u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u7684\u6743\u9650\u88ab\u66f4\u6539/\u8c03\u6574, \u6267\u884c\u8005\u53ea\u53ef\u80fd\u662f\u7fa4\u7ec4\u7684\u7fa4\u4e3b. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Member (annotation): \u88ab\u8c03\u6574\u6743\u9650\u7684\u7fa4\u7ec4\u6210\u5458 \"\"\" type = \"MemberPermissionChangeEvent\" origin : MemberPerm \"\"\"\u539f\u6765\u7684\u6743\u9650\"\"\" current : MemberPerm \"\"\"\u73b0\u5728\u7684\u6743\u9650\"\"\" member : Member \"\"\"\u6743\u9650\u6539\u52a8\u7684\u7fa4\u5458\u7684\u4fe1\u606f\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , MemberPermissionChangeEvent ): if generic_issubclass ( Member , interface . annotation ): return interface . event . member if generic_issubclass ( Group , interface . annotation ): return interface . event . member . group current class-attribute \ud83d\udd17 current : MemberPerm = None \u73b0\u5728\u7684\u6743\u9650 member class-attribute \ud83d\udd17 member : Member = None \u6743\u9650\u6539\u52a8\u7684\u7fa4\u5458\u7684\u4fe1\u606f origin class-attribute \ud83d\udd17 origin : MemberPerm = None \u539f\u6765\u7684\u6743\u9650 MemberSpecialTitleChangeEvent \ud83d\udd17 Bases: GroupEvent \u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u7684\u7fa4\u5934\u8854\u88ab\u66f4\u6539, \u6267\u884c\u8005\u53ea\u53ef\u80fd\u662f\u7fa4\u7ec4\u7684\u7fa4\u4e3b. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Member (annotation): \u88ab\u66f4\u6539\u7fa4\u5934\u8854\u7684\u7fa4\u7ec4\u6210\u5458 Source code in graia/ariadne/event/mirai.py 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 class MemberSpecialTitleChangeEvent ( GroupEvent ): \"\"\"\u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u7684\u7fa4\u5934\u8854\u88ab\u66f4\u6539, \u6267\u884c\u8005\u53ea\u53ef\u80fd\u662f\u7fa4\u7ec4\u7684\u7fa4\u4e3b. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Member (annotation): \u88ab\u66f4\u6539\u7fa4\u5934\u8854\u7684\u7fa4\u7ec4\u6210\u5458 \"\"\" type = \"MemberSpecialTitleChangeEvent\" origin : str \"\"\"\u539f\u6765\u7684\u5934\u8854\"\"\" current : str \"\"\"\u73b0\u5728\u7684\u5934\u8854\"\"\" member : Member \"\"\"\u88ab\u66f4\u6539\u5934\u8854\u7684\u7fa4\u7ec4\u6210\u5458\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , MemberSpecialTitleChangeEvent ): if generic_issubclass ( Member , interface . annotation ): return interface . event . member if generic_issubclass ( Group , interface . annotation ): return interface . event . member . group current class-attribute \ud83d\udd17 current : str = None \u73b0\u5728\u7684\u5934\u8854 member class-attribute \ud83d\udd17 member : Member = None \u88ab\u66f4\u6539\u5934\u8854\u7684\u7fa4\u7ec4\u6210\u5458 origin class-attribute \ud83d\udd17 origin : str = None \u539f\u6765\u7684\u5934\u8854 MemberUnmuteEvent \ud83d\udd17 Bases: GroupEvent \u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u88ab\u7ba1\u7406\u5458/\u7fa4\u7ec4\u89e3\u9664\u7981\u8a00, \u5f53 operator \u4e3a None \u65f6\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Member (annotation): - \"target\" (default, const, str): \u88ab\u7981\u8a00\u7684\u6210\u5458 - \"operator\" (default, const, str, optional = None): \u8be5\u64cd\u4f5c\u7684\u6267\u884c\u8005, \u53ef\u80fd\u662f\u7ba1\u7406\u5458\u6216\u662f\u7fa4\u4e3b, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7. \u9ed8\u8ba4\u8fd4\u56de target . Source code in graia/ariadne/event/mirai.py 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 class MemberUnmuteEvent ( GroupEvent ): \"\"\"\u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u88ab\u7ba1\u7406\u5458/\u7fa4\u7ec4\u89e3\u9664\u7981\u8a00, \u5f53 `operator` \u4e3a `None` \u65f6\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Member (annotation): - `\"target\"` (default, const, str): \u88ab\u7981\u8a00\u7684\u6210\u5458 - `\"operator\"` (default, const, str, optional = None): \u8be5\u64cd\u4f5c\u7684\u6267\u884c\u8005, \u53ef\u80fd\u662f\u7ba1\u7406\u5458\u6216\u662f\u7fa4\u4e3b, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7. \u9ed8\u8ba4\u8fd4\u56de `target`. \"\"\" type = \"MemberUnmuteEvent\" member : Member \"\"\"\u88ab\u7981\u8a00\u7684\u7fa4\u5458\"\"\" operator : Optional [ Member ] \"\"\"\u64cd\u4f5c\u6267\u884c\u8005, \u53ef\u80fd\u662f\u7ba1\u7406\u5458\u6216\u662f\u7fa4\u4e3b, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , MemberUnmuteEvent ): if interface . name == \"operator\" and generic_issubclass ( Member , interface . annotation ): return interface . event . operator if generic_issubclass ( Member , interface . annotation ): return interface . event . member if generic_issubclass ( Group , interface . annotation ): return interface . event . member . group member class-attribute \ud83d\udd17 member : Member = None \u88ab\u7981\u8a00\u7684\u7fa4\u5458 operator class-attribute \ud83d\udd17 operator : Optional [ Member ] = None \u64cd\u4f5c\u6267\u884c\u8005, \u53ef\u80fd\u662f\u7ba1\u7406\u5458\u6216\u662f\u7fa4\u4e3b, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7 NewFriendRequestEvent \ud83d\udd17 Bases: RequestEvent , FriendEvent \u6709\u4e00\u7528\u6237\u5411\u673a\u5668\u4eba\u63d0\u8d77\u597d\u53cb\u8bf7\u6c42. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \u4e8b\u4ef6\u62d3\u5c55\u652f\u6301 \u8be5\u4e8b\u4ef6\u7684\u5904\u7406\u9700\u8981\u4f60\u83b7\u53d6\u539f\u59cb\u4e8b\u4ef6\u5b9e\u4f8b. \u540c\u610f\u8bf7\u6c42: await event.accept() , \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. \u62d2\u7edd\u8bf7\u6c42: await event.reject() , \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. \u62d2\u7edd\u5e76\u4e0d\u518d\u63a5\u53d7\u6765\u81ea\u5bf9\u65b9\u7684\u8bf7\u6c42: await event.rejectAndBlock() , \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. Source code in graia/ariadne/event/mirai.py 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 class NewFriendRequestEvent ( RequestEvent , FriendEvent ): \"\"\"\u6709\u4e00\u7528\u6237\u5411\u673a\u5668\u4eba\u63d0\u8d77\u597d\u53cb\u8bf7\u6c42. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \u4e8b\u4ef6\u62d3\u5c55\u652f\u6301: \u8be5\u4e8b\u4ef6\u7684\u5904\u7406\u9700\u8981\u4f60\u83b7\u53d6\u539f\u59cb\u4e8b\u4ef6\u5b9e\u4f8b. 1. \u540c\u610f\u8bf7\u6c42: `await event.accept()`, \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. 2. \u62d2\u7edd\u8bf7\u6c42: `await event.reject()`, \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. 3. \u62d2\u7edd\u5e76\u4e0d\u518d\u63a5\u53d7\u6765\u81ea\u5bf9\u65b9\u7684\u8bf7\u6c42: `await event.rejectAndBlock()`, \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. \"\"\" type = \"NewFriendRequestEvent\" requestId : int = Field ( ... , alias = \"eventId\" ) \"\"\"\u4e8b\u4ef6\u6807\u8bc6\uff0c\u54cd\u5e94\u8be5\u4e8b\u4ef6\u65f6\u7684\u6807\u8bc6\"\"\" supplicant : int = Field ( ... , alias = \"fromId\" ) \"\"\"\u7533\u8bf7\u4ebaQQ\u53f7\"\"\" nickname : str = Field ( ... , alias = \"nick\" ) \"\"\"\u7533\u8bf7\u4eba\u7684\u6635\u79f0\u6216\u7fa4\u540d\u7247\"\"\" message : str \"\"\"\u7533\u8bf7\u6d88\u606f\"\"\" sourceGroup : int = Field ( ... , alias = \"groupId\" ) \"\"\"\u7533\u8bf7\u4eba\u5982\u679c\u901a\u8fc7\u67d0\u4e2a\u7fa4\u6dfb\u52a0\u597d\u53cb, \u8be5\u9879\u4e3a\u8be5\u7fa4\u7fa4\u53f7, \u5426\u5219\u4e3a0\"\"\" async def accept ( self , message : str = \"\" ) -> None : \"\"\"\u540c\u610f\u5bf9\u65b9\u7684\u52a0\u597d\u53cb\u8bf7\u6c42. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 0 , message ) async def reject ( self , message : str = \"\" ) -> None : \"\"\"\u62d2\u7edd\u5bf9\u65b9\u7684\u52a0\u597d\u53cb\u8bf7\u6c42. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 1 , message ) async def rejectAndBlock ( self , message : str = \"\" ) -> None : \"\"\"\u62d2\u7edd\u5bf9\u65b9\u7684\u52a0\u597d\u53cb\u8bf7\u6c42, \u5e76\u4e0d\u518d\u63a5\u53d7\u6765\u81ea\u5bf9\u65b9\u7684\u52a0\u597d\u53cb\u8bf7\u6c42. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 2 , message ) message class-attribute \ud83d\udd17 message : str = None \u7533\u8bf7\u6d88\u606f nickname class-attribute \ud83d\udd17 nickname : str = Field ( Ellipsis , alias = 'nick' ) \u7533\u8bf7\u4eba\u7684\u6635\u79f0\u6216\u7fa4\u540d\u7247 requestId class-attribute \ud83d\udd17 requestId : int = Field ( Ellipsis , alias = 'eventId' ) \u4e8b\u4ef6\u6807\u8bc6\uff0c\u54cd\u5e94\u8be5\u4e8b\u4ef6\u65f6\u7684\u6807\u8bc6 sourceGroup class-attribute \ud83d\udd17 sourceGroup : int = Field ( Ellipsis , alias = 'groupId' ) \u7533\u8bf7\u4eba\u5982\u679c\u901a\u8fc7\u67d0\u4e2a\u7fa4\u6dfb\u52a0\u597d\u53cb, \u8be5\u9879\u4e3a\u8be5\u7fa4\u7fa4\u53f7, \u5426\u5219\u4e3a0 supplicant class-attribute \ud83d\udd17 supplicant : int = Field ( Ellipsis , alias = 'fromId' ) \u7533\u8bf7\u4ebaQQ\u53f7 accept async \ud83d\udd17 accept ( message : str = '' ) -> None \u540c\u610f\u5bf9\u65b9\u7684\u52a0\u597d\u53cb\u8bf7\u6c42. Parameters: Name Type Description Default message str \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". '' Raises: Type Description LookupError \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/event/mirai.py 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 async def accept ( self , message : str = \"\" ) -> None : \"\"\"\u540c\u610f\u5bf9\u65b9\u7684\u52a0\u597d\u53cb\u8bf7\u6c42. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 0 , message ) reject async \ud83d\udd17 reject ( message : str = '' ) -> None \u62d2\u7edd\u5bf9\u65b9\u7684\u52a0\u597d\u53cb\u8bf7\u6c42. Parameters: Name Type Description Default message str \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". '' Raises: Type Description LookupError \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/event/mirai.py 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 async def reject ( self , message : str = \"\" ) -> None : \"\"\"\u62d2\u7edd\u5bf9\u65b9\u7684\u52a0\u597d\u53cb\u8bf7\u6c42. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 1 , message ) rejectAndBlock async \ud83d\udd17 rejectAndBlock ( message : str = '' ) -> None \u62d2\u7edd\u5bf9\u65b9\u7684\u52a0\u597d\u53cb\u8bf7\u6c42, \u5e76\u4e0d\u518d\u63a5\u53d7\u6765\u81ea\u5bf9\u65b9\u7684\u52a0\u597d\u53cb\u8bf7\u6c42. Parameters: Name Type Description Default message str \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". '' Raises: Type Description LookupError \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/event/mirai.py 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 async def rejectAndBlock ( self , message : str = \"\" ) -> None : \"\"\"\u62d2\u7edd\u5bf9\u65b9\u7684\u52a0\u597d\u53cb\u8bf7\u6c42, \u5e76\u4e0d\u518d\u63a5\u53d7\u6765\u81ea\u5bf9\u65b9\u7684\u52a0\u597d\u53cb\u8bf7\u6c42. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 2 , message ) NudgeEvent \ud83d\udd17 Bases: MiraiEvent Bot \u8d26\u53f7\u88ab\u67d0\u4e2a\u8d26\u53f7\u5728\u76f8\u5e94\u4e0a\u4e0b\u6587\u533a\u57df\u8fdb\u884c \"\u6233\u4e00\u6233\"(Nudge) \u7684\u884c\u4e3a. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Source code in graia/ariadne/event/mirai.py 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 class NudgeEvent ( MiraiEvent ): \"\"\"Bot \u8d26\u53f7\u88ab\u67d0\u4e2a\u8d26\u53f7\u5728\u76f8\u5e94\u4e0a\u4e0b\u6587\u533a\u57df\u8fdb\u884c \"\u6233\u4e00\u6233\"(Nudge) \u7684\u884c\u4e3a. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \"\"\" type : str = \"NudgeEvent\" context_type : Literal [ \"friend\" , \"group\" ] \"\"\"\u6233\u4e00\u6233\u7684\u4f4d\u7f6e\"\"\" supplicant : int = Field ( ... , alias = \"fromId\" ) \"\"\"\u52a8\u4f5c\u53d1\u51fa\u8005\u7684 QQ \u53f7\"\"\" target : int \"\"\"\u52a8\u4f5c\u76ee\u6807\u7684 QQ \u53f7\"\"\" msg_action : str = Field ( ... , alias = \"action\" ) \"\"\"\u52a8\u4f5c\u7c7b\u578b\"\"\" msg_suffix : str = Field ( ... , alias = \"suffix\" ) \"\"\"\u81ea\u5b9a\u4e49\u52a8\u4f5c\u5185\u5bb9\"\"\" origin_subject_info : Dict [ str , Any ] = Field ( ... , alias = \"subject\" ) \"\"\"\u539f\u59cb\u6765\u6e90\"\"\" friend_id : Optional [ int ] = None \"\"\"\u597d\u53cb QQ \u53f7, \u5982\u679c\u4e3a\u597d\u53cb\u95f4\u6233\u4e00\u6233\"\"\" group_id : Optional [ int ] = None \"\"\"\u7fa4\u7ec4 QQ \u53f7, \u5982\u679c\u4e3a\u7fa4\u5185\u6233\u4e00\u6233\"\"\" def __init__ ( self , ** data : Any ) -> None : ctx_type = data [ \"context_type\" ] = str . lower ( data [ \"subject\" ][ \"kind\" ]) if ctx_type == \"group\" : data [ \"group_id\" ] = data [ \"subject\" ][ \"id\" ] else : data [ \"friend_id\" ] = data [ \"subject\" ][ \"id\" ] super () . __init__ ( ** data ) class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): from .. import get_running ev = interface . event if isinstance ( ev , NudgeEvent ): if generic_issubclass ( Group , interface . annotation ) and ev . group_id is not None : return await get_running () . getGroup ( ev . group_id ) if generic_issubclass ( Friend , interface . annotation ) and ev . friend_id is not None : return await get_running () . getFriend ( ev . friend_id ) context_type class-attribute \ud83d\udd17 context_type : Literal [ 'friend' , 'group' ] = None \u6233\u4e00\u6233\u7684\u4f4d\u7f6e friend_id class-attribute \ud83d\udd17 friend_id : Optional [ int ] = None \u597d\u53cb QQ \u53f7, \u5982\u679c\u4e3a\u597d\u53cb\u95f4\u6233\u4e00\u6233 group_id class-attribute \ud83d\udd17 group_id : Optional [ int ] = None \u7fa4\u7ec4 QQ \u53f7, \u5982\u679c\u4e3a\u7fa4\u5185\u6233\u4e00\u6233 msg_action class-attribute \ud83d\udd17 msg_action : str = Field ( Ellipsis , alias = 'action' ) \u52a8\u4f5c\u7c7b\u578b msg_suffix class-attribute \ud83d\udd17 msg_suffix : str = Field ( Ellipsis , alias = 'suffix' ) \u81ea\u5b9a\u4e49\u52a8\u4f5c\u5185\u5bb9 origin_subject_info class-attribute \ud83d\udd17 origin_subject_info : Dict [ str , Any ] = Field ( Ellipsis , alias = 'subject' ) \u539f\u59cb\u6765\u6e90 supplicant class-attribute \ud83d\udd17 supplicant : int = Field ( Ellipsis , alias = 'fromId' ) \u52a8\u4f5c\u53d1\u51fa\u8005\u7684 QQ \u53f7 target class-attribute \ud83d\udd17 target : int = None \u52a8\u4f5c\u76ee\u6807\u7684 QQ \u53f7 OtherClientOfflineEvent \ud83d\udd17 Bases: MiraiEvent Bot \u8d26\u53f7\u5728\u5176\u4ed6\u5ba2\u6237\u7aef\u4e0b\u7ebf. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Source code in graia/ariadne/event/mirai.py 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 class OtherClientOfflineEvent ( MiraiEvent ): \"\"\"Bot \u8d26\u53f7\u5728\u5176\u4ed6\u5ba2\u6237\u7aef\u4e0b\u7ebf. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \"\"\" type = \"OtherClientOfflineEvent\" client : Client \"\"\"\u4e0b\u7ebf\u7684\u5ba2\u6237\u7aef\"\"\" client class-attribute \ud83d\udd17 client : Client = None \u4e0b\u7ebf\u7684\u5ba2\u6237\u7aef OtherClientOnlineEvent \ud83d\udd17 Bases: MiraiEvent Bot \u8d26\u53f7\u5728\u5176\u4ed6\u5ba2\u6237\u7aef\u4e0a\u7ebf. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Source code in graia/ariadne/event/mirai.py 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 class OtherClientOnlineEvent ( MiraiEvent ): \"\"\"Bot \u8d26\u53f7\u5728\u5176\u4ed6\u5ba2\u6237\u7aef\u4e0a\u7ebf. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \"\"\" type = \"OtherClientOnlineEvent\" client : Client \"\"\"\u4e0a\u7ebf\u7684\u5ba2\u6237\u7aef\"\"\" kind : Optional [ ClientKind ] \"\"\"\u5ba2\u6237\u7aef\u7c7b\u578b\"\"\" client class-attribute \ud83d\udd17 client : Client = None \u4e0a\u7ebf\u7684\u5ba2\u6237\u7aef kind class-attribute \ud83d\udd17 kind : Optional [ ClientKind ] = None \u5ba2\u6237\u7aef\u7c7b\u578b RequestEvent \ud83d\udd17 Bases: MiraiEvent \u5404\u79cd\u7533\u8bf7\u4e8b\u4ef6\u7684\u57fa\u7c7b. Source code in graia/ariadne/event/mirai.py 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 class RequestEvent ( MiraiEvent ): \"\"\" \u5404\u79cd\u7533\u8bf7\u4e8b\u4ef6\u7684\u57fa\u7c7b. \"\"\" type : str requestId : int = Field ( ... , alias = \"eventId\" ) \"\"\"\u4e8b\u4ef6\u6807\u8bc6\uff0c\u54cd\u5e94\u8be5\u4e8b\u4ef6\u65f6\u7684\u6807\u8bc6\"\"\" supplicant : int = Field ( ... , alias = \"fromId\" ) \"\"\"\u7533\u8bf7\u4ebaQQ\u53f7\"\"\" sourceGroup : int = Field ( ... , alias = \"groupId\" ) nickname : str = Field ( ... , alias = \"nick\" ) \"\"\"\u7533\u8bf7\u4eba\u7684\u6635\u79f0\u6216\u7fa4\u540d\u7247\"\"\" message : str \"\"\"\u7533\u8bf7\u6d88\u606f\"\"\" async def _operate ( self , operation : int , msg : str = \"\" ) -> None : \"\"\" \u5185\u90e8\u63a5\u53e3, \u7528\u4e8e\u5185\u90e8\u4fbf\u6377\u53d1\u9001\u76f8\u5e94\u64cd\u4f5c. \"\"\" from .. import get_running from ..adapter import Adapter adapter = get_running ( Adapter ) if not adapter . mirai_session . session_key : raise InvalidSession ( \"you must authenticate before this.\" ) api_route = self . type [ 0 ] . lower () + self . type [ 1 :] await adapter . call_api ( f \"resp/ { api_route } \" , CallMethod . POST , { \"sessionKey\" : adapter . mirai_session . session_key , \"eventId\" : self . requestId , \"fromId\" : self . supplicant , \"groupId\" : self . sourceGroup , \"operate\" : operation , \"message\" : msg , }, ) message class-attribute \ud83d\udd17 message : str = None \u7533\u8bf7\u6d88\u606f nickname class-attribute \ud83d\udd17 nickname : str = Field ( Ellipsis , alias = 'nick' ) \u7533\u8bf7\u4eba\u7684\u6635\u79f0\u6216\u7fa4\u540d\u7247 requestId class-attribute \ud83d\udd17 requestId : int = Field ( Ellipsis , alias = 'eventId' ) \u4e8b\u4ef6\u6807\u8bc6\uff0c\u54cd\u5e94\u8be5\u4e8b\u4ef6\u65f6\u7684\u6807\u8bc6 supplicant class-attribute \ud83d\udd17 supplicant : int = Field ( Ellipsis , alias = 'fromId' ) \u7533\u8bf7\u4ebaQQ\u53f7 _operate async \ud83d\udd17 _operate ( operation : int , msg : str = '' ) -> None \u5185\u90e8\u63a5\u53e3, \u7528\u4e8e\u5185\u90e8\u4fbf\u6377\u53d1\u9001\u76f8\u5e94\u64cd\u4f5c. Source code in graia/ariadne/event/mirai.py 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 async def _operate ( self , operation : int , msg : str = \"\" ) -> None : \"\"\" \u5185\u90e8\u63a5\u53e3, \u7528\u4e8e\u5185\u90e8\u4fbf\u6377\u53d1\u9001\u76f8\u5e94\u64cd\u4f5c. \"\"\" from .. import get_running from ..adapter import Adapter adapter = get_running ( Adapter ) if not adapter . mirai_session . session_key : raise InvalidSession ( \"you must authenticate before this.\" ) api_route = self . type [ 0 ] . lower () + self . type [ 1 :] await adapter . call_api ( f \"resp/ { api_route } \" , CallMethod . POST , { \"sessionKey\" : adapter . mirai_session . session_key , \"eventId\" : self . requestId , \"fromId\" : self . supplicant , \"groupId\" : self . sourceGroup , \"operate\" : operation , \"message\" : msg , }, )","title":"mirai"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotEvent","text":"Bases: MiraiEvent \u6307\u793a\u6709\u5173 Bot \u672c\u8eab\u7684\u4e8b\u4ef6. Source code in graia/ariadne/event/mirai.py 19 20 21 22 class BotEvent ( MiraiEvent ): \"\"\" \u6307\u793a\u6709\u5173 Bot \u672c\u8eab\u7684\u4e8b\u4ef6. \"\"\"","title":"BotEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotGroupPermissionChangeEvent","text":"Bases: GroupEvent , BotEvent Bot \u8d26\u53f7\u5728\u4e00\u7279\u5b9a\u7fa4\u7ec4\u5185\u6240\u5177\u6709\u7684\u6743\u9650\u53d1\u751f\u53d8\u5316 Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Source code in graia/ariadne/event/mirai.py 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 class BotGroupPermissionChangeEvent ( GroupEvent , BotEvent ): \"\"\"Bot \u8d26\u53f7\u5728\u4e00\u7279\u5b9a\u7fa4\u7ec4\u5185\u6240\u5177\u6709\u7684\u6743\u9650\u53d1\u751f\u53d8\u5316 Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b - Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 \"\"\" type = \"BotGroupPermissionChangeEvent\" origin : MemberPerm \"\"\"\u539f\u59cb\u6743\u9650\"\"\" current : MemberPerm \"\"\"\u5f53\u524d\u6743\u9650\"\"\" group : Group \"\"\"\u6743\u9650\u6539\u53d8\u6240\u5728\u7684\u7fa4\u4fe1\u606f\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , BotGroupPermissionChangeEvent ) and generic_issubclass ( Group , interface . annotation ): return interface . event . group","title":"BotGroupPermissionChangeEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotGroupPermissionChangeEvent.current","text":"current : MemberPerm = None \u5f53\u524d\u6743\u9650","title":"current"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotGroupPermissionChangeEvent.group","text":"group : Group = None \u6743\u9650\u6539\u53d8\u6240\u5728\u7684\u7fa4\u4fe1\u606f","title":"group"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotGroupPermissionChangeEvent.origin","text":"origin : MemberPerm = None \u539f\u59cb\u6743\u9650","title":"origin"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotInvitedJoinGroupRequestEvent","text":"Bases: RequestEvent , BotEvent , GroupEvent Bot \u8d26\u53f7\u63a5\u53d7\u5230\u6765\u81ea\u67d0\u4e2a\u8d26\u53f7\u7684\u9080\u8bf7\u52a0\u5165\u67d0\u4e2a\u7fa4\u7ec4\u7684\u8bf7\u6c42. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \u4e8b\u4ef6\u62d3\u5c55\u652f\u6301 \u8be5\u4e8b\u4ef6\u7684\u5904\u7406\u9700\u8981\u4f60\u83b7\u53d6\u539f\u59cb\u4e8b\u4ef6\u5b9e\u4f8b. \u540c\u610f\u8bf7\u6c42: await event.accept() , \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. \u62d2\u7edd\u8bf7\u6c42: await event.reject() , \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. Source code in graia/ariadne/event/mirai.py 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 class BotInvitedJoinGroupRequestEvent ( RequestEvent , BotEvent , GroupEvent ): \"\"\"Bot \u8d26\u53f7\u63a5\u53d7\u5230\u6765\u81ea\u67d0\u4e2a\u8d26\u53f7\u7684\u9080\u8bf7\u52a0\u5165\u67d0\u4e2a\u7fa4\u7ec4\u7684\u8bf7\u6c42. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \u4e8b\u4ef6\u62d3\u5c55\u652f\u6301: \u8be5\u4e8b\u4ef6\u7684\u5904\u7406\u9700\u8981\u4f60\u83b7\u53d6\u539f\u59cb\u4e8b\u4ef6\u5b9e\u4f8b. 1. \u540c\u610f\u8bf7\u6c42: `await event.accept()`, \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. 2. \u62d2\u7edd\u8bf7\u6c42: `await event.reject()`, \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. \"\"\" type = \"BotInvitedJoinGroupRequestEvent\" requestId : int = Field ( ... , alias = \"eventId\" ) \"\"\"\u4e8b\u4ef6\u6807\u8bc6\uff0c\u54cd\u5e94\u8be5\u4e8b\u4ef6\u65f6\u7684\u6807\u8bc6\"\"\" supplicant : int = Field ( ... , alias = \"fromId\" ) \"\"\"\u9080\u8bf7\u4eba (\u597d\u53cb) \u7684QQ\u53f7\"\"\" nickname : str = Field ( ... , alias = \"nick\" ) \"\"\"\u7533\u8bf7\u4eba\u7684\u6635\u79f0\u6216\u7fa4\u540d\u7247\"\"\" message : str \"\"\"\u7533\u8bf7\u6d88\u606f\"\"\" sourceGroup : int = Field ( ... , alias = \"groupId\" ) \"\"\"\u88ab\u9080\u8bf7\u8fdb\u5165\u7fa4\u7684\u7fa4\u53f7\"\"\" groupName : str \"\"\"\u88ab\u9080\u8bf7\u8fdb\u5165\u7fa4\u7684\u7fa4\u540d\u79f0\"\"\" async def accept ( self , message : str = \"\" ) -> None : \"\"\"\u63a5\u53d7\u9080\u8bf7\u5e76\u52a0\u5165\u7fa4\u7ec4/\u53d1\u8d77\u5bf9\u6307\u5b9a\u7fa4\u7ec4\u7684\u52a0\u5165\u7533\u8bf7. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 0 , message ) async def reject ( self , message : str = \"\" ) -> None : \"\"\"\u62d2\u7edd\u5bf9\u65b9\u52a0\u5165\u6307\u5b9a\u7fa4\u7ec4\u7684\u9080\u8bf7. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 1 , message )","title":"BotInvitedJoinGroupRequestEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotInvitedJoinGroupRequestEvent.groupName","text":"groupName : str = None \u88ab\u9080\u8bf7\u8fdb\u5165\u7fa4\u7684\u7fa4\u540d\u79f0","title":"groupName"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotInvitedJoinGroupRequestEvent.message","text":"message : str = None \u7533\u8bf7\u6d88\u606f","title":"message"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotInvitedJoinGroupRequestEvent.nickname","text":"nickname : str = Field ( Ellipsis , alias = 'nick' ) \u7533\u8bf7\u4eba\u7684\u6635\u79f0\u6216\u7fa4\u540d\u7247","title":"nickname"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotInvitedJoinGroupRequestEvent.requestId","text":"requestId : int = Field ( Ellipsis , alias = 'eventId' ) \u4e8b\u4ef6\u6807\u8bc6\uff0c\u54cd\u5e94\u8be5\u4e8b\u4ef6\u65f6\u7684\u6807\u8bc6","title":"requestId"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotInvitedJoinGroupRequestEvent.sourceGroup","text":"sourceGroup : int = Field ( Ellipsis , alias = 'groupId' ) \u88ab\u9080\u8bf7\u8fdb\u5165\u7fa4\u7684\u7fa4\u53f7","title":"sourceGroup"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotInvitedJoinGroupRequestEvent.supplicant","text":"supplicant : int = Field ( Ellipsis , alias = 'fromId' ) \u9080\u8bf7\u4eba (\u597d\u53cb) \u7684QQ\u53f7","title":"supplicant"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotInvitedJoinGroupRequestEvent.accept","text":"accept ( message : str = '' ) -> None \u63a5\u53d7\u9080\u8bf7\u5e76\u52a0\u5165\u7fa4\u7ec4/\u53d1\u8d77\u5bf9\u6307\u5b9a\u7fa4\u7ec4\u7684\u52a0\u5165\u7533\u8bf7. Parameters: Name Type Description Default message str \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". '' Raises: Type Description LookupError \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/event/mirai.py 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 async def accept ( self , message : str = \"\" ) -> None : \"\"\"\u63a5\u53d7\u9080\u8bf7\u5e76\u52a0\u5165\u7fa4\u7ec4/\u53d1\u8d77\u5bf9\u6307\u5b9a\u7fa4\u7ec4\u7684\u52a0\u5165\u7533\u8bf7. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 0 , message )","title":"accept()"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotInvitedJoinGroupRequestEvent.reject","text":"reject ( message : str = '' ) -> None \u62d2\u7edd\u5bf9\u65b9\u52a0\u5165\u6307\u5b9a\u7fa4\u7ec4\u7684\u9080\u8bf7. Parameters: Name Type Description Default message str \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". '' Raises: Type Description LookupError \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/event/mirai.py 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 async def reject ( self , message : str = \"\" ) -> None : \"\"\"\u62d2\u7edd\u5bf9\u65b9\u52a0\u5165\u6307\u5b9a\u7fa4\u7ec4\u7684\u9080\u8bf7. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 1 , message )","title":"reject()"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotJoinGroupEvent","text":"Bases: GroupEvent , BotEvent Bot \u8d26\u53f7\u52a0\u5165\u6307\u5b9a\u7fa4\u7ec4 Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Member (annotation, optional): \u9080\u8bf7\u8005, \u53ef\u4ee5\u4e3a None Source code in graia/ariadne/event/mirai.py 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 class BotJoinGroupEvent ( GroupEvent , BotEvent ): \"\"\"Bot \u8d26\u53f7\u52a0\u5165\u6307\u5b9a\u7fa4\u7ec4 Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b - Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 - Member (annotation, optional): \u9080\u8bf7\u8005, \u53ef\u4ee5\u4e3a None \"\"\" type = \"BotJoinGroupEvent\" group : Group \"\"\"Bot \u65b0\u52a0\u5165\u7fa4\u7684\u4fe1\u606f\"\"\" inviter : Optional [ Member ] = Field ( ... , alias = \"invitor\" ) \"\"\"\u5982\u679c\u88ab\u9080\u8bf7\u5165\u7fa4\u5219\u4e3a\u9080\u8bf7\u4eba\u7684 Member \u5bf9\u8c61\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , BotJoinGroupEvent ): if generic_issubclass ( Member , interface . annotation ): return interface . event . inviter if generic_issubclass ( Group , interface . annotation ): return interface . event . group","title":"BotJoinGroupEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotJoinGroupEvent.group","text":"group : Group = None Bot \u65b0\u52a0\u5165\u7fa4\u7684\u4fe1\u606f","title":"group"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotJoinGroupEvent.inviter","text":"inviter : Optional [ Member ] = Field ( Ellipsis , alias = 'invitor' ) \u5982\u679c\u88ab\u9080\u8bf7\u5165\u7fa4\u5219\u4e3a\u9080\u8bf7\u4eba\u7684 Member \u5bf9\u8c61","title":"inviter"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotLeaveEventActive","text":"Bases: GroupEvent , BotEvent Bot \u8d26\u53f7\u4e3b\u52a8\u9000\u51fa\u4e86\u67d0\u7fa4\u7ec4. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Source code in graia/ariadne/event/mirai.py 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 class BotLeaveEventActive ( GroupEvent , BotEvent ): \"\"\"Bot \u8d26\u53f7\u4e3b\u52a8\u9000\u51fa\u4e86\u67d0\u7fa4\u7ec4. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b - Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 \"\"\" type : str = \"BotLeaveEventActive\" group : Group \"\"\"Bot \u9000\u51fa\u7684\u7fa4\u7684\u4fe1\u606f\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , BotLeaveEventActive ) and generic_issubclass ( Group , interface . annotation ): return interface . event . group","title":"BotLeaveEventActive"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotLeaveEventActive.group","text":"group : Group = None Bot \u9000\u51fa\u7684\u7fa4\u7684\u4fe1\u606f","title":"group"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotLeaveEventKick","text":"Bases: GroupEvent , BotEvent Bot \u8d26\u53f7\u88ab\u67d0\u7fa4\u7ec4\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b\u4ece\u8be5\u7fa4\u7ec4\u4e2d\u5220\u9664. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Source code in graia/ariadne/event/mirai.py 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 class BotLeaveEventKick ( GroupEvent , BotEvent ): \"\"\"Bot \u8d26\u53f7\u88ab\u67d0\u7fa4\u7ec4\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b\u4ece\u8be5\u7fa4\u7ec4\u4e2d\u5220\u9664. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b - Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 \"\"\" type : str = \"BotLeaveEventKick\" group : Group \"\"\"Bot \u88ab\u8e22\u51fa\u7684\u7fa4\u7684\u4fe1\u606f\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , BotLeaveEventKick ) and generic_issubclass ( Group , interface . annotation ): return interface . event . group","title":"BotLeaveEventKick"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotLeaveEventKick.group","text":"group : Group = None Bot \u88ab\u8e22\u51fa\u7684\u7fa4\u7684\u4fe1\u606f","title":"group"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotMuteEvent","text":"Bases: GroupEvent , BotEvent Bot \u8d26\u53f7\u5728\u4e00\u7279\u5b9a\u7fa4\u7ec4\u5185\u88ab\u7ba1\u7406\u5458/\u7fa4\u4e3b\u7981\u8a00 Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Member (annotation): \u6267\u884c\u7981\u8a00\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Source code in graia/ariadne/event/mirai.py 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 class BotMuteEvent ( GroupEvent , BotEvent ): \"\"\"Bot \u8d26\u53f7\u5728\u4e00\u7279\u5b9a\u7fa4\u7ec4\u5185\u88ab\u7ba1\u7406\u5458/\u7fa4\u4e3b\u7981\u8a00 Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b - Member (annotation): \u6267\u884c\u7981\u8a00\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b - Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 \"\"\" type = \"BotMuteEvent\" durationSeconds : int \"\"\"\u7981\u8a00\u65f6\u957f, \u5355\u4f4d\u4e3a\u79d2\"\"\" operator : Member \"\"\"\u6267\u884c\u7981\u8a00\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , BotMuteEvent ): if generic_issubclass ( Member , interface . annotation ): return interface . event . operator if generic_issubclass ( Group , interface . annotation ): return interface . event . operator . group","title":"BotMuteEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotMuteEvent.durationSeconds","text":"durationSeconds : int = None \u7981\u8a00\u65f6\u957f, \u5355\u4f4d\u4e3a\u79d2","title":"durationSeconds"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotMuteEvent.operator","text":"operator : Member = None \u6267\u884c\u7981\u8a00\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b","title":"operator"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotOfflineEventActive","text":"Bases: BotEvent Bot \u8d26\u53f7\u4e3b\u52a8\u79bb\u7ebf Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Source code in graia/ariadne/event/mirai.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 class BotOfflineEventActive ( BotEvent ): \"\"\"Bot \u8d26\u53f7\u4e3b\u52a8\u79bb\u7ebf Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \"\"\" type = \"BotOfflineEventActive\" qq : int \"\"\"\u4e3b\u52a8\u79bb\u7ebf\u7684 Bot \u7684 QQ \u53f7\"\"\"","title":"BotOfflineEventActive"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotOfflineEventActive.qq","text":"qq : int = None \u4e3b\u52a8\u79bb\u7ebf\u7684 Bot \u7684 QQ \u53f7","title":"qq"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotOfflineEventDropped","text":"Bases: BotEvent Bot \u8d26\u53f7\u4e0e\u670d\u52a1\u5668\u7684\u8fde\u63a5\u88ab\u670d\u52a1\u5668\u4e3b\u52a8\u65ad\u5f00, \u6216\u56e0\u7f51\u7edc\u539f\u56e0\u79bb\u7ebf Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Source code in graia/ariadne/event/mirai.py 88 89 90 91 92 93 94 95 96 97 98 99 100 101 class BotOfflineEventDropped ( BotEvent ): \"\"\"Bot \u8d26\u53f7\u4e0e\u670d\u52a1\u5668\u7684\u8fde\u63a5\u88ab\u670d\u52a1\u5668\u4e3b\u52a8\u65ad\u5f00, \u6216\u56e0\u7f51\u7edc\u539f\u56e0\u79bb\u7ebf Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \"\"\" type = \"BotOfflineEventDropped\" qq : int \"\"\"\u88ab\u670d\u52a1\u5668\u65ad\u5f00\u6216\u56e0\u7f51\u7edc\u95ee\u9898\u800c\u6389\u7ebf\u7684 Bot \u7684 QQ \u53f7\"\"\"","title":"BotOfflineEventDropped"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotOfflineEventDropped.qq","text":"qq : int = None \u88ab\u670d\u52a1\u5668\u65ad\u5f00\u6216\u56e0\u7f51\u7edc\u95ee\u9898\u800c\u6389\u7ebf\u7684 Bot \u7684 QQ \u53f7","title":"qq"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotOfflineEventForce","text":"Bases: BotEvent Bot \u8d26\u53f7\u88ab\u8feb\u79bb\u7ebf Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Source code in graia/ariadne/event/mirai.py 72 73 74 75 76 77 78 79 80 81 82 83 84 85 class BotOfflineEventForce ( BotEvent ): \"\"\"Bot \u8d26\u53f7\u88ab\u8feb\u79bb\u7ebf Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \"\"\" type = \"BotOfflineEventForce\" qq : int \"\"\"\u88ab\u6324\u4e0b\u7ebf\u7684 Bot \u7684 QQ \u53f7\"\"\"","title":"BotOfflineEventForce"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotOfflineEventForce.qq","text":"qq : int = None \u88ab\u6324\u4e0b\u7ebf\u7684 Bot \u7684 QQ \u53f7","title":"qq"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotOnlineEvent","text":"Bases: BotEvent Bot \u8d26\u53f7\u767b\u5f55\u6210\u529f Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \u63d0\u793a \u53ea\u6709\u4f7f\u7528 ReverseAdapter \u65f6\u624d\u6709\u53ef\u80fd\u63a5\u53d7\u5230\u6b64\u4e8b\u4ef6 Source code in graia/ariadne/event/mirai.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 class BotOnlineEvent ( BotEvent ): \"\"\"Bot \u8d26\u53f7\u767b\u5f55\u6210\u529f Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Note: \u63d0\u793a \u53ea\u6709\u4f7f\u7528 ReverseAdapter \u65f6\u624d\u6709\u53ef\u80fd\u63a5\u53d7\u5230\u6b64\u4e8b\u4ef6 \"\"\" type = \"BotOnlineEvent\" qq : int \"\"\"\u767b\u5f55\u6210\u529f\u7684 Bot \u7684 QQ \u53f7\"\"\"","title":"BotOnlineEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotOnlineEvent.qq","text":"qq : int = None \u767b\u5f55\u6210\u529f\u7684 Bot \u7684 QQ \u53f7","title":"qq"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotReloginEvent","text":"Bases: BotEvent Bot \u8d26\u53f7\u6b63\u5c1d\u8bd5\u91cd\u65b0\u767b\u5f55 Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Source code in graia/ariadne/event/mirai.py 104 105 106 107 108 109 110 111 112 113 114 115 116 117 class BotReloginEvent ( BotEvent ): \"\"\"Bot \u8d26\u53f7\u6b63\u5c1d\u8bd5\u91cd\u65b0\u767b\u5f55 Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \"\"\" type = \"BotReloginEvent\" qq : int \"\"\"\u4e3b\u52a8\u91cd\u65b0\u767b\u5f55\u7684 Bot \u7684 QQ \u53f7\"\"\"","title":"BotReloginEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotReloginEvent.qq","text":"qq : int = None \u4e3b\u52a8\u91cd\u65b0\u767b\u5f55\u7684 Bot \u7684 QQ \u53f7","title":"qq"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotUnmuteEvent","text":"Bases: GroupEvent , BotEvent Bot \u8d26\u53f7\u5728\u4e00\u7279\u5b9a\u7fa4\u7ec4\u5185\u88ab\u7ba1\u7406\u5458/\u7fa4\u4e3b\u89e3\u9664\u7981\u8a00 Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Member (annotation): \u6267\u884c\u89e3\u9664\u7981\u8a00\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Source code in graia/ariadne/event/mirai.py 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 class BotUnmuteEvent ( GroupEvent , BotEvent ): \"\"\"Bot \u8d26\u53f7\u5728\u4e00\u7279\u5b9a\u7fa4\u7ec4\u5185\u88ab\u7ba1\u7406\u5458/\u7fa4\u4e3b\u89e3\u9664\u7981\u8a00 Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b - Member (annotation): \u6267\u884c\u89e3\u9664\u7981\u8a00\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c - Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 \"\"\" type = \"BotUnmuteEvent\" operator : Member \"\"\"\u64cd\u4f5c\u7684\u7ba1\u7406\u5458\u6216\u7fa4\u4e3b\u4fe1\u606f\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , BotUnmuteEvent ): if generic_issubclass ( Member , interface . annotation ): return interface . event . operator if generic_issubclass ( Group , interface . annotation ): return interface . event . operator . group","title":"BotUnmuteEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.BotUnmuteEvent.operator","text":"operator : Member = None \u64cd\u4f5c\u7684\u7ba1\u7406\u5458\u6216\u7fa4\u4e3b\u4fe1\u606f","title":"operator"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.ClientKind","text":"Bases: int , Enum \u8be6\u7ec6\u8bbe\u5907\u7c7b\u578b\u3002 Source code in graia/ariadne/event/mirai.py 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 class ClientKind ( int , Enum ): \"\"\"\u8be6\u7ec6\u8bbe\u5907\u7c7b\u578b\u3002\"\"\" ANDROID_PAD = 68104 AOL_CHAOJIHUIYUAN = 73730 AOL_HUIYUAN = 73474 AOL_SQQ = 69378 CAR = 65806 HRTX_IPHONE = 66566 HRTX_PC = 66561 MC_3G = 65795 MISRO_MSG = 69634 MOBILE_ANDROID = 65799 MOBILE_ANDROID_NEW = 72450 MOBILE_HD = 65805 MOBILE_HD_NEW = 71426 MOBILE_IPAD = 68361 MOBILE_IPAD_NEW = 72194 MOBILE_IPHONE = 67586 MOBILE_OTHER = 65794 MOBILE_PC_QQ = 65793 MOBILE_PC_TIM = 77313 MOBILE_WINPHONE_NEW = 72706 QQ_FORELDER = 70922 QQ_SERVICE = 71170 TV_QQ = 69130 WIN8 = 69899 WINPHONE = 65804","title":"ClientKind"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.CommandExecutedEvent","text":"Bases: MiraiEvent \u6709\u4e00\u6761\u547d\u4ee4\u88ab\u6267\u884c Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Source code in graia/ariadne/event/mirai.py 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 class CommandExecutedEvent ( MiraiEvent ): \"\"\"\u6709\u4e00\u6761\u547d\u4ee4\u88ab\u6267\u884c Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \"\"\" type = \"CommandExecutedEvent\" name : str \"\"\"\u547d\u4ee4\u540d\u79f0\"\"\" friend : Optional [ Friend ] \"\"\"\u53d1\u9001\u547d\u4ee4\u7684\u597d\u53cb, \u4ece\u63a7\u5236\u53f0\u53d1\u9001\u4e3a None\"\"\" member : Optional [ Member ] \"\"\"\u53d1\u9001\u547d\u4ee4\u7684\u7fa4\u6210\u5458, \u4ece\u63a7\u5236\u53f0\u53d1\u9001\u4e3a None\"\"\" args : List [ Element ] \"\"\"\u6307\u4ee4\u7684\u53c2\u6570, \u4ee5\u6d88\u606f\u5143\u7d20\u7c7b\u578b\u4f20\u9012\"\"\" def __init__ ( self , * args , ** kwargs ): if \"args\" in kwargs : kwargs [ \"args\" ] = MessageChain . build_chain ( kwargs [ \"args\" ]) super () . __init__ ( * args , ** kwargs )","title":"CommandExecutedEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.CommandExecutedEvent.args","text":"args : List [ Element ] = None \u6307\u4ee4\u7684\u53c2\u6570, \u4ee5\u6d88\u606f\u5143\u7d20\u7c7b\u578b\u4f20\u9012","title":"args"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.CommandExecutedEvent.friend","text":"friend : Optional [ Friend ] = None \u53d1\u9001\u547d\u4ee4\u7684\u597d\u53cb, \u4ece\u63a7\u5236\u53f0\u53d1\u9001\u4e3a None","title":"friend"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.CommandExecutedEvent.member","text":"member : Optional [ Member ] = None \u53d1\u9001\u547d\u4ee4\u7684\u7fa4\u6210\u5458, \u4ece\u63a7\u5236\u53f0\u53d1\u9001\u4e3a None","title":"member"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.CommandExecutedEvent.name","text":"name : str = None \u547d\u4ee4\u540d\u79f0","title":"name"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.FriendEvent","text":"Bases: MiraiEvent \u6307\u793a\u6709\u5173\u597d\u53cb\u7684\u4e8b\u4ef6. Source code in graia/ariadne/event/mirai.py 25 26 27 28 class FriendEvent ( MiraiEvent ): \"\"\" \u6307\u793a\u6709\u5173\u597d\u53cb\u7684\u4e8b\u4ef6. \"\"\"","title":"FriendEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.FriendInputStatusChangedEvent","text":"Bases: FriendEvent Bot \u8d26\u53f7\u7684\u67d0\u4e00\u597d\u53cb\u8f93\u5165\u72b6\u6001\u6539\u53d8. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Source code in graia/ariadne/event/mirai.py 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 class FriendInputStatusChangedEvent ( FriendEvent ): \"\"\"Bot \u8d26\u53f7\u7684\u67d0\u4e00\u597d\u53cb\u8f93\u5165\u72b6\u6001\u6539\u53d8. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \"\"\" type = \"FriendInputStatusChangedEvent\" friend : Friend \"\"\"\u597d\u53cb\u4fe1\u606f\"\"\" inputting : bool \"\"\"\u662f\u5426\u6b63\u5728\u8f93\u5165\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , FriendInputStatusChangedEvent ) and generic_issubclass ( Friend , interface . annotation ): return interface . event . friend","title":"FriendInputStatusChangedEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.FriendInputStatusChangedEvent.friend","text":"friend : Friend = None \u597d\u53cb\u4fe1\u606f","title":"friend"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.FriendInputStatusChangedEvent.inputting","text":"inputting : bool = None \u662f\u5426\u6b63\u5728\u8f93\u5165","title":"inputting"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.FriendNickChangedEvent","text":"Bases: FriendEvent Bot \u8d26\u53f7\u7684\u67d0\u4e00\u597d\u53cb\u66f4\u6539\u4e86\u6635\u79f0. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Friend (annotation): \u66f4\u6539\u540d\u79f0\u7684\u597d\u53cb Source code in graia/ariadne/event/mirai.py 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 class FriendNickChangedEvent ( FriendEvent ): \"\"\"Bot \u8d26\u53f7\u7684\u67d0\u4e00\u597d\u53cb\u66f4\u6539\u4e86\u6635\u79f0. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b - Friend (annotation): \u66f4\u6539\u540d\u79f0\u7684\u597d\u53cb \"\"\" type = \"FriendNickChangedEvent\" friend : Friend \"\"\"\u597d\u53cb\u4fe1\u606f (nickname \u503c) \u4e0d\u786e\u5b9a\"\"\" from_name : str = Field ( ... , alias = \"from\" ) \"\"\"\u539f\u6635\u79f0\"\"\" to_name : str = Field ( ... , alias = \"to\" ) \"\"\"\u65b0\u6635\u79f0\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , FriendNickChangedEvent ) and generic_issubclass ( Friend , interface . annotation ): return interface . event . friend","title":"FriendNickChangedEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.FriendNickChangedEvent.friend","text":"friend : Friend = None \u597d\u53cb\u4fe1\u606f (nickname \u503c) \u4e0d\u786e\u5b9a","title":"friend"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.FriendNickChangedEvent.from_name","text":"from_name : str = Field ( Ellipsis , alias = 'from' ) \u539f\u6635\u79f0","title":"from_name"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.FriendNickChangedEvent.to_name","text":"to_name : str = Field ( Ellipsis , alias = 'to' ) \u65b0\u6635\u79f0","title":"to_name"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.FriendRecallEvent","text":"Bases: FriendEvent \u6709\u4e00\u4f4d\u4e0e Bot \u8d26\u53f7\u4e3a\u597d\u53cb\u5173\u7cfb\u7684\u7528\u6237\u64a4\u56de\u4e86\u4e00\u6761\u6d88\u606f Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Source code in graia/ariadne/event/mirai.py 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 class FriendRecallEvent ( FriendEvent ): \"\"\"\u6709\u4e00\u4f4d\u4e0e Bot \u8d26\u53f7\u4e3a\u597d\u53cb\u5173\u7cfb\u7684\u7528\u6237\u64a4\u56de\u4e86\u4e00\u6761\u6d88\u606f Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \"\"\" type = \"FriendRecallEvent\" authorId : int \"\"\"\u64a4\u56de\u6d88\u606f\u7684\u53d1\u9001\u8005\u7684 QQ \u53f7\"\"\" messageId : int \"\"\"\u64a4\u56de\u6d88\u606f\u7684 ID\"\"\" time : datetime \"\"\"\u539f\u6d88\u606f\u53d1\u9001\u65f6\u95f4\"\"\" operator : int \"\"\"\u64a4\u56de\u6d88\u606f\u8005\u7684 QQ \u53f7\"\"\"","title":"FriendRecallEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.FriendRecallEvent.authorId","text":"authorId : int = None \u64a4\u56de\u6d88\u606f\u7684\u53d1\u9001\u8005\u7684 QQ \u53f7","title":"authorId"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.FriendRecallEvent.messageId","text":"messageId : int = None \u64a4\u56de\u6d88\u606f\u7684 ID","title":"messageId"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.FriendRecallEvent.operator","text":"operator : int = None \u64a4\u56de\u6d88\u606f\u8005\u7684 QQ \u53f7","title":"operator"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.FriendRecallEvent.time","text":"time : datetime = None \u539f\u6d88\u606f\u53d1\u9001\u65f6\u95f4","title":"time"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupAllowAnonymousChatEvent","text":"Bases: GroupEvent \u6709\u4e00\u7fa4\u7ec4\u4fee\u6539\u4e86\u6709\u5173\u533f\u540d\u804a\u5929\u7684\u76f8\u5173\u8bbe\u5b9a Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4 Member (annotation, optional = None): \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c Source code in graia/ariadne/event/mirai.py 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 class GroupAllowAnonymousChatEvent ( GroupEvent ): \"\"\"\u6709\u4e00\u7fa4\u7ec4\u4fee\u6539\u4e86\u6709\u5173\u533f\u540d\u804a\u5929\u7684\u76f8\u5173\u8bbe\u5b9a Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b - Group (annotation): \u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4 - Member (annotation, optional = None): \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c \"\"\" type = \"GroupAllowAnonymousChatEvent\" origin : bool \"\"\"\u539f\u59cb\u8bbe\u5b9a\"\"\" current : bool \"\"\"\u5f53\u524d\u8bbe\u5b9a\"\"\" group : Group \"\"\"\u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4\"\"\" operator : Optional [ Member ] \"\"\"\u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , GroupAllowAnonymousChatEvent ): if generic_issubclass ( Member , interface . annotation ): return interface . event . operator if generic_issubclass ( Group , interface . annotation ): return interface . event . group","title":"GroupAllowAnonymousChatEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupAllowAnonymousChatEvent.current","text":"current : bool = None \u5f53\u524d\u8bbe\u5b9a","title":"current"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupAllowAnonymousChatEvent.group","text":"group : Group = None \u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4","title":"group"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupAllowAnonymousChatEvent.operator","text":"operator : Optional [ Member ] = None \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c","title":"operator"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupAllowAnonymousChatEvent.origin","text":"origin : bool = None \u539f\u59cb\u8bbe\u5b9a","title":"origin"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupAllowConfessTalkEvent","text":"Bases: GroupEvent \u6709\u4e00\u7fa4\u7ec4\u4fee\u6539\u4e86\u6709\u5173\u5766\u767d\u8bf4\u7684\u76f8\u5173\u8bbe\u5b9a Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4 Member (annotation, optional = None): \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c Source code in graia/ariadne/event/mirai.py 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 class GroupAllowConfessTalkEvent ( GroupEvent ): \"\"\"\u6709\u4e00\u7fa4\u7ec4\u4fee\u6539\u4e86\u6709\u5173\u5766\u767d\u8bf4\u7684\u76f8\u5173\u8bbe\u5b9a Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b - Group (annotation): \u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4 - Member (annotation, optional = None): \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c \"\"\" type = \"GroupAllowConfessTalkEvent\" origin : bool \"\"\"\u539f\u59cb\u8bbe\u5b9a\"\"\" current : bool \"\"\"\u5f53\u524d\u8bbe\u5b9a\"\"\" group : Group \"\"\"\u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4\"\"\" operator : Optional [ Member ] \"\"\"\u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , GroupAllowConfessTalkEvent ): if generic_issubclass ( Member , interface . annotation ): return interface . event . operator if generic_issubclass ( Group , interface . annotation ): return interface . event . group","title":"GroupAllowConfessTalkEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupAllowConfessTalkEvent.current","text":"current : bool = None \u5f53\u524d\u8bbe\u5b9a","title":"current"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupAllowConfessTalkEvent.group","text":"group : Group = None \u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4","title":"group"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupAllowConfessTalkEvent.operator","text":"operator : Optional [ Member ] = None \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c","title":"operator"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupAllowConfessTalkEvent.origin","text":"origin : bool = None \u539f\u59cb\u8bbe\u5b9a","title":"origin"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupAllowMemberInviteEvent","text":"Bases: GroupEvent \u6709\u4e00\u7fa4\u7ec4\u4fee\u6539\u4e86\u6709\u5173\u662f\u5426\u5141\u8bb8\u5df2\u6709\u6210\u5458\u9080\u8bf7\u5176\u4ed6\u7528\u6237\u52a0\u5165\u7fa4\u7ec4\u7684\u76f8\u5173\u8bbe\u5b9a Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4 Member (annotation, optional = None): \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c Source code in graia/ariadne/event/mirai.py 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 class GroupAllowMemberInviteEvent ( GroupEvent ): \"\"\"\u6709\u4e00\u7fa4\u7ec4\u4fee\u6539\u4e86\u6709\u5173\u662f\u5426\u5141\u8bb8\u5df2\u6709\u6210\u5458\u9080\u8bf7\u5176\u4ed6\u7528\u6237\u52a0\u5165\u7fa4\u7ec4\u7684\u76f8\u5173\u8bbe\u5b9a Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b - Group (annotation): \u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4 - Member (annotation, optional = None): \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c \"\"\" type = \"GroupAllowMemberInviteEvent\" origin : bool \"\"\"\u539f\u59cb\u8bbe\u5b9a\"\"\" current : bool \"\"\"\u5f53\u524d\u8bbe\u5b9a\"\"\" group : Group \"\"\"\u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4\"\"\" operator : Optional [ Member ] \"\"\"\u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , GroupAllowMemberInviteEvent ): if generic_issubclass ( Member , interface . annotation ): return interface . event . operator if generic_issubclass ( Group , interface . annotation ): return interface . event . group","title":"GroupAllowMemberInviteEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupAllowMemberInviteEvent.current","text":"current : bool = None \u5f53\u524d\u8bbe\u5b9a","title":"current"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupAllowMemberInviteEvent.group","text":"group : Group = None \u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4","title":"group"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupAllowMemberInviteEvent.operator","text":"operator : Optional [ Member ] = None \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c","title":"operator"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupAllowMemberInviteEvent.origin","text":"origin : bool = None \u539f\u59cb\u8bbe\u5b9a","title":"origin"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupEntranceAnnouncementChangeEvent","text":"Bases: GroupEvent \u6709\u4e00\u7fa4\u7ec4\u88ab\u4fee\u6539\u4e86\u5165\u7fa4\u516c\u544a Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u88ab\u4fee\u6539\u4e86\u5165\u7fa4\u516c\u544a\u7684\u7fa4\u7ec4 Member (annotation, optional): \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c Source code in graia/ariadne/event/mirai.py 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 class GroupEntranceAnnouncementChangeEvent ( GroupEvent ): \"\"\"\u6709\u4e00\u7fa4\u7ec4\u88ab\u4fee\u6539\u4e86\u5165\u7fa4\u516c\u544a Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b - Group (annotation): \u88ab\u4fee\u6539\u4e86\u5165\u7fa4\u516c\u544a\u7684\u7fa4\u7ec4 - Member (annotation, optional): \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c \"\"\" type = \"GroupEntranceAnnouncementChangeEvent\" origin : str \"\"\"\u539f\u59cb\u8bbe\u5b9a\"\"\" current : str \"\"\"\u5f53\u524d\u8bbe\u5b9a\"\"\" group : Group \"\"\"\u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4\"\"\" operator : Optional [ Member ] \"\"\"\u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , GroupEntranceAnnouncementChangeEvent ): if generic_issubclass ( Member , interface . annotation ): return interface . event . operator if generic_issubclass ( Group , interface . annotation ): return interface . event . group","title":"GroupEntranceAnnouncementChangeEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupEntranceAnnouncementChangeEvent.current","text":"current : str = None \u5f53\u524d\u8bbe\u5b9a","title":"current"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupEntranceAnnouncementChangeEvent.group","text":"group : Group = None \u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4","title":"group"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupEntranceAnnouncementChangeEvent.operator","text":"operator : Optional [ Member ] = None \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c","title":"operator"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupEntranceAnnouncementChangeEvent.origin","text":"origin : str = None \u539f\u59cb\u8bbe\u5b9a","title":"origin"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupEvent","text":"Bases: MiraiEvent \u6307\u793a\u6709\u5173\u7fa4\u7ec4\u7684\u4e8b\u4ef6. Source code in graia/ariadne/event/mirai.py 31 32 33 34 class GroupEvent ( MiraiEvent ): \"\"\" \u6307\u793a\u6709\u5173\u7fa4\u7ec4\u7684\u4e8b\u4ef6. \"\"\"","title":"GroupEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupMuteAllEvent","text":"Bases: GroupEvent \u6709\u4e00\u7fa4\u7ec4\u5f00\u542f\u4e86\u5168\u4f53\u7981\u8a00 Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u5f00\u542f\u4e86\u5168\u4f53\u7981\u8a00\u7684\u7fa4\u7ec4 Member (annotation, optional): \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c Source code in graia/ariadne/event/mirai.py 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 class GroupMuteAllEvent ( GroupEvent ): \"\"\"\u6709\u4e00\u7fa4\u7ec4\u5f00\u542f\u4e86\u5168\u4f53\u7981\u8a00 Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b - Group (annotation): \u5f00\u542f\u4e86\u5168\u4f53\u7981\u8a00\u7684\u7fa4\u7ec4 - Member (annotation, optional): \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c \"\"\" type = \"GroupMuteAllEvent\" origin : bool \"\"\"\u539f\u59cb\u8bbe\u5b9a\"\"\" current : bool \"\"\"\u5f53\u524d\u8bbe\u5b9a\"\"\" group : Group \"\"\"\u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4\"\"\" operator : Optional [ Member ] \"\"\"\u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , GroupMuteAllEvent ): if generic_issubclass ( Member , interface . annotation ): return interface . event . operator if generic_issubclass ( Group , interface . annotation ): return interface . event . group","title":"GroupMuteAllEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupMuteAllEvent.current","text":"current : bool = None \u5f53\u524d\u8bbe\u5b9a","title":"current"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupMuteAllEvent.group","text":"group : Group = None \u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4","title":"group"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupMuteAllEvent.operator","text":"operator : Optional [ Member ] = None \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c","title":"operator"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupMuteAllEvent.origin","text":"origin : bool = None \u539f\u59cb\u8bbe\u5b9a","title":"origin"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupNameChangeEvent","text":"Bases: GroupEvent \u6709\u4e00\u7fa4\u7ec4\u88ab\u4fee\u6539\u4e86\u7fa4\u540d\u79f0 Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u88ab\u4fee\u6539\u4e86\u7fa4\u540d\u79f0\u7684\u7fa4\u7ec4 Member (annotation): \u66f4\u6539\u7fa4\u540d\u79f0\u7684\u6210\u5458, \u6743\u9650\u5fc5\u5b9a\u4e3a\u7ba1\u7406\u5458\u6216\u662f\u7fa4\u4e3b Source code in graia/ariadne/event/mirai.py 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 class GroupNameChangeEvent ( GroupEvent ): \"\"\"\u6709\u4e00\u7fa4\u7ec4\u88ab\u4fee\u6539\u4e86\u7fa4\u540d\u79f0 Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b - Group (annotation): \u88ab\u4fee\u6539\u4e86\u7fa4\u540d\u79f0\u7684\u7fa4\u7ec4 - Member (annotation): \u66f4\u6539\u7fa4\u540d\u79f0\u7684\u6210\u5458, \u6743\u9650\u5fc5\u5b9a\u4e3a\u7ba1\u7406\u5458\u6216\u662f\u7fa4\u4e3b \"\"\" type = \"GroupNameChangeEvent\" origin : str \"\"\"\u539f\u59cb\u8bbe\u5b9a\"\"\" current : str \"\"\"\u5f53\u524d\u8bbe\u5b9a\"\"\" group : Group \"\"\"\u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4\"\"\" operator : Optional [ Member ] \"\"\"\u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , GroupNameChangeEvent ): if generic_issubclass ( Member , interface . annotation ): return interface . event . operator if generic_issubclass ( Group , interface . annotation ): return interface . event . group","title":"GroupNameChangeEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupNameChangeEvent.current","text":"current : str = None \u5f53\u524d\u8bbe\u5b9a","title":"current"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupNameChangeEvent.group","text":"group : Group = None \u4fee\u6539\u4e86\u76f8\u5173\u8bbe\u5b9a\u7684\u7fa4\u7ec4","title":"group"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupNameChangeEvent.operator","text":"operator : Optional [ Member ] = None \u4f5c\u51fa\u6b64\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c","title":"operator"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupNameChangeEvent.origin","text":"origin : str = None \u539f\u59cb\u8bbe\u5b9a","title":"origin"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupRecallEvent","text":"Bases: GroupEvent \u6709\u7fa4\u6210\u5458\u5728\u6307\u5b9a\u7fa4\u7ec4\u64a4\u56de\u4e86\u4e00\u6761\u6d88\u606f, \u6ce8\u610f, \u8fd9\u91cc\u7684\u7fa4\u6210\u5458\u82e5\u5177\u6709\u7ba1\u7406\u5458/\u7fa4\u4e3b\u6743\u9650, \u5219\u4ed6\u4eec\u53ef\u4ee5\u64a4\u56de\u5176\u4ed6\u666e\u901a\u7fa4\u5458\u7684\u6d88\u606f, \u4e14\u4e0d\u53d7\u53d1\u51fa\u65f6\u95f4\u9650\u5236. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Member (annotation, optional): \u6267\u884c\u672c\u64cd\u4f5c\u7684\u7fa4\u6210\u5458, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Source code in graia/ariadne/event/mirai.py 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 class GroupRecallEvent ( GroupEvent ): \"\"\"\u6709\u7fa4\u6210\u5458\u5728\u6307\u5b9a\u7fa4\u7ec4\u64a4\u56de\u4e86\u4e00\u6761\u6d88\u606f, \u6ce8\u610f, \u8fd9\u91cc\u7684\u7fa4\u6210\u5458\u82e5\u5177\u6709\u7ba1\u7406\u5458/\u7fa4\u4e3b\u6743\u9650, \u5219\u4ed6\u4eec\u53ef\u4ee5\u64a4\u56de\u5176\u4ed6\u666e\u901a\u7fa4\u5458\u7684\u6d88\u606f, \u4e14\u4e0d\u53d7\u53d1\u51fa\u65f6\u95f4\u9650\u5236. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b - Member (annotation, optional): \u6267\u884c\u672c\u64cd\u4f5c\u7684\u7fa4\u6210\u5458, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c - Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 \"\"\" type = \"GroupRecallEvent\" authorId : int \"\"\"\u539f\u6d88\u606f\u53d1\u9001\u8005\u7684 QQ \u53f7\"\"\" messageId : int \"\"\"\u539f\u6d88\u606f\u7684 ID\"\"\" time : datetime \"\"\"\u539f\u6d88\u606f\u53d1\u9001\u65f6\u95f4\"\"\" group : Group \"\"\"\u6d88\u606f\u64a4\u56de\u6240\u5728\u7684\u7fa4\"\"\" operator : Optional [ Member ] \"\"\"\u64a4\u56de\u6d88\u606f\u7684\u7fa4\u6210\u5458, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , GroupRecallEvent ): if generic_issubclass ( Member , interface . annotation ): return interface . event . operator if generic_issubclass ( Group , interface . annotation ): return interface . event . group","title":"GroupRecallEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupRecallEvent.authorId","text":"authorId : int = None \u539f\u6d88\u606f\u53d1\u9001\u8005\u7684 QQ \u53f7","title":"authorId"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupRecallEvent.group","text":"group : Group = None \u6d88\u606f\u64a4\u56de\u6240\u5728\u7684\u7fa4","title":"group"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupRecallEvent.messageId","text":"messageId : int = None \u539f\u6d88\u606f\u7684 ID","title":"messageId"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupRecallEvent.operator","text":"operator : Optional [ Member ] = None \u64a4\u56de\u6d88\u606f\u7684\u7fa4\u6210\u5458, \u82e5\u4e3a None \u5219\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c","title":"operator"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.GroupRecallEvent.time","text":"time : datetime = None \u539f\u6d88\u606f\u53d1\u9001\u65f6\u95f4","title":"time"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberCardChangeEvent","text":"Bases: GroupEvent \u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u7684\u7fa4\u540d\u7247\u88ab\u66f4\u6539, \u6267\u884c\u8005\u53ef\u80fd\u662f\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u8be5\u6210\u5458\u81ea\u5df1, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7(\u8fd9\u65f6, operator \u4e3a None ). Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Member (annotation): - \"target\" (default, const, str): \u88ab\u66f4\u6539\u7fa4\u540d\u7247\u7684\u6210\u5458 - \"operator\" (default, const, Optional[str]): \u8be5\u64cd\u4f5c\u7684\u6267\u884c\u8005, \u53ef\u80fd\u662f\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u8be5\u6210\u5458\u81ea\u5df1, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7(\u8fd9\u65f6, operator \u4e3a None ). Source code in graia/ariadne/event/mirai.py 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 class MemberCardChangeEvent ( GroupEvent ): \"\"\"\u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u7684\u7fa4\u540d\u7247\u88ab\u66f4\u6539, \u6267\u884c\u8005\u53ef\u80fd\u662f\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u8be5\u6210\u5458\u81ea\u5df1, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7(\u8fd9\u65f6, `operator` \u4e3a `None`). Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Member (annotation): - `\"target\"` (default, const, str): \u88ab\u66f4\u6539\u7fa4\u540d\u7247\u7684\u6210\u5458 - `\"operator\"` (default, const, Optional[str]): \u8be5\u64cd\u4f5c\u7684\u6267\u884c\u8005, \u53ef\u80fd\u662f\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u8be5\u6210\u5458\u81ea\u5df1, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7(\u8fd9\u65f6, `operator` \u4e3a `None`). \"\"\" type = \"MemberCardChangeEvent\" origin : str \"\"\"\u539f\u59cb\u7fa4\u540d\u7247\"\"\" current : str \"\"\"\u73b0\u5728\u7684\u7fa4\u540d\u7247\"\"\" member : Member \"\"\"\u88ab\u66f4\u6539\u7fa4\u540d\u7247\u7684\u6210\u5458\"\"\" operator : Optional [ Member ] \"\"\"\u66f4\u6539\u7fa4\u540d\u7247\u7684\u64cd\u4f5c\u8005, \u53ef\u80fd\u662f\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u8be5\u6210\u5458\u81ea\u5df1, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7(\u8fd9\u65f6, `operator` \u4e3a `None`).\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , MemberCardChangeEvent ): if interface . name == \"operator\" and generic_issubclass ( Member , interface . annotation ): return interface . event . operator if generic_issubclass ( Member , interface . annotation ): return interface . event . member if generic_issubclass ( Group , interface . annotation ): return interface . event . member . group","title":"MemberCardChangeEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberCardChangeEvent.current","text":"current : str = None \u73b0\u5728\u7684\u7fa4\u540d\u7247","title":"current"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberCardChangeEvent.member","text":"member : Member = None \u88ab\u66f4\u6539\u7fa4\u540d\u7247\u7684\u6210\u5458","title":"member"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberCardChangeEvent.operator","text":"operator : Optional [ Member ] = None \u66f4\u6539\u7fa4\u540d\u7247\u7684\u64cd\u4f5c\u8005, \u53ef\u80fd\u662f\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u8be5\u6210\u5458\u81ea\u5df1, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7(\u8fd9\u65f6, operator \u4e3a None ).","title":"operator"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberCardChangeEvent.origin","text":"origin : str = None \u539f\u59cb\u7fa4\u540d\u7247","title":"origin"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberHonorChangeEvent","text":"Bases: GroupEvent \u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u83b7\u5f97/\u5931\u53bb\u4e86\u67d0\u4e2a\u8363\u8a89. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Member (annotation): \u83b7\u5f97/\u5931\u53bb\u8363\u8a89\u7684\u6210\u5458 Source code in graia/ariadne/event/mirai.py 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 class MemberHonorChangeEvent ( GroupEvent ): \"\"\"\u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u83b7\u5f97/\u5931\u53bb\u4e86\u67d0\u4e2a\u8363\u8a89. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Member (annotation): \u83b7\u5f97/\u5931\u53bb\u8363\u8a89\u7684\u6210\u5458 \"\"\" type = \"MemberHonorChangeEvent\" member : Member \"\"\"\u83b7\u5f97/\u5931\u53bb\u8363\u8a89\u7684\u6210\u5458\"\"\" action : str \"\"\"\u5bf9\u5e94\u7684\u64cd\u4f5c, \u53ef\u80fd\u662f `\"achieve\"` \u6216 `\"lose\"`\"\"\" honor : str \"\"\"\u83b7\u5f97/\u5931\u53bb\u7684\u8363\u8a89\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , MemberHonorChangeEvent ): if generic_issubclass ( Member , interface . annotation ): return interface . event . member if generic_issubclass ( Group , interface . annotation ): return interface . event . member . group","title":"MemberHonorChangeEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberHonorChangeEvent.action","text":"action : str = None \u5bf9\u5e94\u7684\u64cd\u4f5c, \u53ef\u80fd\u662f \"achieve\" \u6216 \"lose\"","title":"action"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberHonorChangeEvent.honor","text":"honor : str = None \u83b7\u5f97/\u5931\u53bb\u7684\u8363\u8a89","title":"honor"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberHonorChangeEvent.member","text":"member : Member = None \u83b7\u5f97/\u5931\u53bb\u8363\u8a89\u7684\u6210\u5458","title":"member"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberJoinEvent","text":"Bases: GroupEvent \u6709\u4e00\u65b0\u6210\u5458\u52a0\u5165\u4e86\u4e00\u7279\u5b9a\u7fa4\u7ec4 Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u8be5\u7528\u6237\u52a0\u5165\u7684\u7fa4\u7ec4 Member (annotation): \u5173\u4e8e\u8be5\u7528\u6237\u7684\u6210\u5458\u5b9e\u4f8b Source code in graia/ariadne/event/mirai.py 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 class MemberJoinEvent ( GroupEvent ): \"\"\"\u6709\u4e00\u65b0\u6210\u5458\u52a0\u5165\u4e86\u4e00\u7279\u5b9a\u7fa4\u7ec4 Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b - Group (annotation): \u8be5\u7528\u6237\u52a0\u5165\u7684\u7fa4\u7ec4 - Member (annotation): \u5173\u4e8e\u8be5\u7528\u6237\u7684\u6210\u5458\u5b9e\u4f8b \"\"\" type = \"MemberJoinEvent\" member : Member \"\"\"\u52a0\u5165\u7684\u6210\u5458\"\"\" inviter : Optional [ Member ] = Field ( ... , alias = \"invitor\" ) \"\"\"\u9080\u8bf7\u8be5\u6210\u5458\u7684\u6210\u5458, \u53ef\u4e3a None\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , MemberJoinEvent ): if interface . name == \"inviter\" and generic_issubclass ( Member , interface . annotation ): return interface . event . inviter if generic_issubclass ( Member , interface . annotation ): return interface . event . member if generic_issubclass ( Group , interface . annotation ): return interface . event . member . group","title":"MemberJoinEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberJoinEvent.inviter","text":"inviter : Optional [ Member ] = Field ( Ellipsis , alias = 'invitor' ) \u9080\u8bf7\u8be5\u6210\u5458\u7684\u6210\u5458, \u53ef\u4e3a None","title":"inviter"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberJoinEvent.member","text":"member : Member = None \u52a0\u5165\u7684\u6210\u5458","title":"member"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberJoinRequestEvent","text":"Bases: RequestEvent , GroupEvent \u6709\u4e00\u7528\u6237\u5411\u673a\u5668\u4eba\u4f5c\u4e3a\u7ba1\u7406\u5458/\u7fa4\u4e3b\u7684\u7fa4\u7ec4\u7533\u8bf7\u52a0\u5165\u7fa4\u7ec4. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \u4e8b\u4ef6\u62d3\u5c55\u652f\u6301 \u8be5\u4e8b\u4ef6\u7684\u5904\u7406\u9700\u8981\u4f60\u83b7\u53d6\u539f\u59cb\u4e8b\u4ef6\u5b9e\u4f8b. \u540c\u610f\u8bf7\u6c42: await event.accept() , \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. \u62d2\u7edd\u8bf7\u6c42: await event.reject() , \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. \u5ffd\u7565\u8bf7\u6c42: await event.ignore() , \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. \u62d2\u7edd\u5e76\u4e0d\u518d\u63a5\u53d7\u6765\u81ea\u5bf9\u65b9\u7684\u8bf7\u6c42: await event.rejectAndBlock() , \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. \u5ffd\u7565\u5e76\u4e0d\u518d\u63a5\u53d7\u6765\u81ea\u5bf9\u65b9\u7684\u8bf7\u6c42: await event.ignoreAndBlock() , \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. Source code in graia/ariadne/event/mirai.py 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 class MemberJoinRequestEvent ( RequestEvent , GroupEvent ): \"\"\"\u6709\u4e00\u7528\u6237\u5411\u673a\u5668\u4eba\u4f5c\u4e3a\u7ba1\u7406\u5458/\u7fa4\u4e3b\u7684\u7fa4\u7ec4\u7533\u8bf7\u52a0\u5165\u7fa4\u7ec4. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \u4e8b\u4ef6\u62d3\u5c55\u652f\u6301: \u8be5\u4e8b\u4ef6\u7684\u5904\u7406\u9700\u8981\u4f60\u83b7\u53d6\u539f\u59cb\u4e8b\u4ef6\u5b9e\u4f8b. 1. \u540c\u610f\u8bf7\u6c42: `await event.accept()`, \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. 2. \u62d2\u7edd\u8bf7\u6c42: `await event.reject()`, \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. 3. \u5ffd\u7565\u8bf7\u6c42: `await event.ignore()`, \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. 4. \u62d2\u7edd\u5e76\u4e0d\u518d\u63a5\u53d7\u6765\u81ea\u5bf9\u65b9\u7684\u8bf7\u6c42: `await event.rejectAndBlock()`, \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. 5. \u5ffd\u7565\u5e76\u4e0d\u518d\u63a5\u53d7\u6765\u81ea\u5bf9\u65b9\u7684\u8bf7\u6c42: `await event.ignoreAndBlock()`, \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. \"\"\" type = \"MemberJoinRequestEvent\" requestId : int = Field ( ... , alias = \"eventId\" ) \"\"\"\u4e8b\u4ef6\u6807\u8bc6\uff0c\u54cd\u5e94\u8be5\u4e8b\u4ef6\u65f6\u7684\u6807\u8bc6\"\"\" supplicant : int = Field ( ... , alias = \"fromId\" ) \"\"\"\u7533\u8bf7\u4ebaQQ\u53f7\"\"\" nickname : str = Field ( ... , alias = \"nick\" ) \"\"\"\u7533\u8bf7\u4eba\u7684\u6635\u79f0\u6216\u7fa4\u540d\u7247\"\"\" message : str \"\"\"\u7533\u8bf7\u6d88\u606f\"\"\" sourceGroup : int = Field ( ... , alias = \"groupId\" ) \"\"\"\u7533\u8bf7\u4eba\u7533\u8bf7\u5165\u7fa4\u7684\u7fa4\u53f7\"\"\" groupName : str \"\"\"\u7533\u8bf7\u4eba\u7533\u8bf7\u5165\u7fa4\u7684\u7fa4\u540d\u79f0\"\"\" async def accept ( self , message : str = \"\" ) -> None : \"\"\"\u540c\u610f\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 0 , message ) async def reject ( self , message : str = \"\" ) -> None : \"\"\"\u62d2\u7edd\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 1 , message ) async def ignore ( self , message : str = \"\" ) -> None : \"\"\"\u5ffd\u7565\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4\u7684\u8bf7\u6c42. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 2 , message ) async def rejectAndBlock ( self , message : str = \"\" ) -> None : \"\"\"\u62d2\u7edd\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4\u7684\u8bf7\u6c42, \u5e76\u4e0d\u518d\u63a5\u53d7\u6765\u81ea\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4\u7684\u8bf7\u6c42. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 3 , message ) async def ignoreAndBlock ( self , message : str = \"\" ) -> None : \"\"\"\u5ffd\u7565\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4\u7684\u8bf7\u6c42, \u5e76\u4e0d\u518d\u63a5\u53d7\u6765\u81ea\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4\u7684\u8bf7\u6c42. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 4 , message )","title":"MemberJoinRequestEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberJoinRequestEvent.groupName","text":"groupName : str = None \u7533\u8bf7\u4eba\u7533\u8bf7\u5165\u7fa4\u7684\u7fa4\u540d\u79f0","title":"groupName"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberJoinRequestEvent.message","text":"message : str = None \u7533\u8bf7\u6d88\u606f","title":"message"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberJoinRequestEvent.nickname","text":"nickname : str = Field ( Ellipsis , alias = 'nick' ) \u7533\u8bf7\u4eba\u7684\u6635\u79f0\u6216\u7fa4\u540d\u7247","title":"nickname"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberJoinRequestEvent.requestId","text":"requestId : int = Field ( Ellipsis , alias = 'eventId' ) \u4e8b\u4ef6\u6807\u8bc6\uff0c\u54cd\u5e94\u8be5\u4e8b\u4ef6\u65f6\u7684\u6807\u8bc6","title":"requestId"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberJoinRequestEvent.sourceGroup","text":"sourceGroup : int = Field ( Ellipsis , alias = 'groupId' ) \u7533\u8bf7\u4eba\u7533\u8bf7\u5165\u7fa4\u7684\u7fa4\u53f7","title":"sourceGroup"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberJoinRequestEvent.supplicant","text":"supplicant : int = Field ( Ellipsis , alias = 'fromId' ) \u7533\u8bf7\u4ebaQQ\u53f7","title":"supplicant"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberJoinRequestEvent.accept","text":"accept ( message : str = '' ) -> None \u540c\u610f\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4. Parameters: Name Type Description Default message str \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". '' Raises: Type Description LookupError \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/event/mirai.py 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 async def accept ( self , message : str = \"\" ) -> None : \"\"\"\u540c\u610f\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 0 , message )","title":"accept()"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberJoinRequestEvent.ignore","text":"ignore ( message : str = '' ) -> None \u5ffd\u7565\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4\u7684\u8bf7\u6c42. Parameters: Name Type Description Default message str \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". '' Raises: Type Description LookupError \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/event/mirai.py 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 async def ignore ( self , message : str = \"\" ) -> None : \"\"\"\u5ffd\u7565\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4\u7684\u8bf7\u6c42. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 2 , message )","title":"ignore()"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberJoinRequestEvent.ignoreAndBlock","text":"ignoreAndBlock ( message : str = '' ) -> None \u5ffd\u7565\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4\u7684\u8bf7\u6c42, \u5e76\u4e0d\u518d\u63a5\u53d7\u6765\u81ea\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4\u7684\u8bf7\u6c42. Parameters: Name Type Description Default message str \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". '' Raises: Type Description LookupError \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/event/mirai.py 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 async def ignoreAndBlock ( self , message : str = \"\" ) -> None : \"\"\"\u5ffd\u7565\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4\u7684\u8bf7\u6c42, \u5e76\u4e0d\u518d\u63a5\u53d7\u6765\u81ea\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4\u7684\u8bf7\u6c42. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 4 , message )","title":"ignoreAndBlock()"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberJoinRequestEvent.reject","text":"reject ( message : str = '' ) -> None \u62d2\u7edd\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4. Parameters: Name Type Description Default message str \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". '' Raises: Type Description LookupError \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/event/mirai.py 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 async def reject ( self , message : str = \"\" ) -> None : \"\"\"\u62d2\u7edd\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 1 , message )","title":"reject()"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberJoinRequestEvent.rejectAndBlock","text":"rejectAndBlock ( message : str = '' ) -> None \u62d2\u7edd\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4\u7684\u8bf7\u6c42, \u5e76\u4e0d\u518d\u63a5\u53d7\u6765\u81ea\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4\u7684\u8bf7\u6c42. Parameters: Name Type Description Default message str \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". '' Raises: Type Description LookupError \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/event/mirai.py 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 async def rejectAndBlock ( self , message : str = \"\" ) -> None : \"\"\"\u62d2\u7edd\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4\u7684\u8bf7\u6c42, \u5e76\u4e0d\u518d\u63a5\u53d7\u6765\u81ea\u5bf9\u65b9\u52a0\u5165\u7fa4\u7ec4\u7684\u8bf7\u6c42. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 3 , message )","title":"rejectAndBlock()"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberLeaveEventKick","text":"Bases: GroupEvent \u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u88ab\u7ba1\u7406\u5458/\u7fa4\u4e3b\u4ece\u7fa4\u7ec4\u4e2d\u5220\u9664, \u5f53 operator \u4e3a None \u65f6, \u6267\u884c\u8005\u4e3a Bot \u8d26\u53f7. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u6307\u5b9a\u7684\u7fa4\u7ec4 Member (annotation): - \"target\" (default, const, str): \u88ab\u4ece\u7fa4\u7ec4\u5220\u9664\u7684\u6210\u5458 - \"operator\" (default, const, str, optional = None): \u6267\u884c\u4e86\u8be5\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7. Source code in graia/ariadne/event/mirai.py 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 class MemberLeaveEventKick ( GroupEvent ): \"\"\"\u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u88ab\u7ba1\u7406\u5458/\u7fa4\u4e3b\u4ece\u7fa4\u7ec4\u4e2d\u5220\u9664, \u5f53 `operator` \u4e3a `None` \u65f6, \u6267\u884c\u8005\u4e3a Bot \u8d26\u53f7. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u6307\u5b9a\u7684\u7fa4\u7ec4 Member (annotation): - `\"target\"` (default, const, str): \u88ab\u4ece\u7fa4\u7ec4\u5220\u9664\u7684\u6210\u5458 - `\"operator\"` (default, const, str, optional = None): \u6267\u884c\u4e86\u8be5\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7. \"\"\" type = \"MemberLeaveEventKick\" member : Member \"\"\"\u88ab\u4ece\u7fa4\u7ec4\u5220\u9664\u7684\u6210\u5458\"\"\" operator : Optional [ Member ] \"\"\"\u6267\u884c\u4e86\u8be5\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , MemberLeaveEventKick ): if interface . name == \"operator\" and generic_issubclass ( Member , interface . annotation ): return interface . event . operator if generic_issubclass ( Member , interface . annotation ): return interface . event . member if generic_issubclass ( Group , interface . annotation ): return interface . event . member . group","title":"MemberLeaveEventKick"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberLeaveEventKick.member","text":"member : Member = None \u88ab\u4ece\u7fa4\u7ec4\u5220\u9664\u7684\u6210\u5458","title":"member"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberLeaveEventKick.operator","text":"operator : Optional [ Member ] = None \u6267\u884c\u4e86\u8be5\u64cd\u4f5c\u7684\u7ba1\u7406\u5458/\u7fa4\u4e3b, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7","title":"operator"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberLeaveEventQuit","text":"Bases: GroupEvent \u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u4e3b\u52a8\u9000\u51fa\u7fa4\u7ec4. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u672c\u4e8b\u4ef6\u7684\u7fa4\u7ec4, \u901a\u5e38\u7684, \u5728\u672c\u4e8b\u4ef6\u53d1\u751f\u540e\u672c\u7fa4\u7ec4\u6210\u5458\u6570\u91cf\u5c11\u4e8e\u4e4b\u524d Member (annotation): \u4e3b\u52a8\u9000\u51fa\u7fa4\u7ec4\u7684\u6210\u5458 Source code in graia/ariadne/event/mirai.py 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 class MemberLeaveEventQuit ( GroupEvent ): \"\"\"\u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u4e3b\u52a8\u9000\u51fa\u7fa4\u7ec4. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u672c\u4e8b\u4ef6\u7684\u7fa4\u7ec4, \u901a\u5e38\u7684, \u5728\u672c\u4e8b\u4ef6\u53d1\u751f\u540e\u672c\u7fa4\u7ec4\u6210\u5458\u6570\u91cf\u5c11\u4e8e\u4e4b\u524d Member (annotation): \u4e3b\u52a8\u9000\u51fa\u7fa4\u7ec4\u7684\u6210\u5458 \"\"\" type = \"MemberLeaveEventQuit\" member : Member \"\"\"\u4e3b\u52a8\u9000\u51fa\u7fa4\u7ec4\u7684\u6210\u5458\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , MemberLeaveEventQuit ): if generic_issubclass ( Member , interface . annotation ): return interface . event . member if generic_issubclass ( Group , interface . annotation ): return interface . event . member . group","title":"MemberLeaveEventQuit"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberLeaveEventQuit.member","text":"member : Member = None \u4e3b\u52a8\u9000\u51fa\u7fa4\u7ec4\u7684\u6210\u5458","title":"member"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberMuteEvent","text":"Bases: GroupEvent \u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u88ab\u7ba1\u7406\u5458/\u7fa4\u7ec4\u7981\u8a00, \u5f53 operator \u4e3a None \u65f6\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Member (annotation): - \"target\" (default, const, str): \u88ab\u7981\u8a00\u7684\u6210\u5458 - \"operator\" (default, const, str, optional = None): \u8be5\u64cd\u4f5c\u7684\u6267\u884c\u8005, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7. \u9ed8\u8ba4\u8fd4\u56de target . Source code in graia/ariadne/event/mirai.py 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 class MemberMuteEvent ( GroupEvent ): \"\"\"\u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u88ab\u7ba1\u7406\u5458/\u7fa4\u7ec4\u7981\u8a00, \u5f53 `operator` \u4e3a `None` \u65f6\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Member (annotation): - `\"target\"` (default, const, str): \u88ab\u7981\u8a00\u7684\u6210\u5458 - `\"operator\"` (default, const, str, optional = None): \u8be5\u64cd\u4f5c\u7684\u6267\u884c\u8005, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7. \u9ed8\u8ba4\u8fd4\u56de `target`. \"\"\" type = \"MemberMuteEvent\" durationSeconds : int \"\"\"\u7981\u8a00\u65f6\u957f, \u5355\u4f4d\u4e3a\u79d2\"\"\" member : Member \"\"\"\u88ab\u7981\u8a00\u7684\u6210\u5458\"\"\" operator : Optional [ Member ] \"\"\"\u8be5\u64cd\u4f5c\u7684\u6267\u884c\u8005, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , MemberMuteEvent ): if interface . name == \"operator\" and generic_issubclass ( Member , interface . annotation ): return interface . event . operator if generic_issubclass ( Member , interface . annotation ): return interface . event . member if generic_issubclass ( Group , interface . annotation ): return interface . event . member . group","title":"MemberMuteEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberMuteEvent.durationSeconds","text":"durationSeconds : int = None \u7981\u8a00\u65f6\u957f, \u5355\u4f4d\u4e3a\u79d2","title":"durationSeconds"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberMuteEvent.member","text":"member : Member = None \u88ab\u7981\u8a00\u7684\u6210\u5458","title":"member"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberMuteEvent.operator","text":"operator : Optional [ Member ] = None \u8be5\u64cd\u4f5c\u7684\u6267\u884c\u8005, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7","title":"operator"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberPermissionChangeEvent","text":"Bases: GroupEvent \u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u7684\u6743\u9650\u88ab\u66f4\u6539/\u8c03\u6574, \u6267\u884c\u8005\u53ea\u53ef\u80fd\u662f\u7fa4\u7ec4\u7684\u7fa4\u4e3b. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Member (annotation): \u88ab\u8c03\u6574\u6743\u9650\u7684\u7fa4\u7ec4\u6210\u5458 Source code in graia/ariadne/event/mirai.py 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 class MemberPermissionChangeEvent ( GroupEvent ): \"\"\"\u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u7684\u6743\u9650\u88ab\u66f4\u6539/\u8c03\u6574, \u6267\u884c\u8005\u53ea\u53ef\u80fd\u662f\u7fa4\u7ec4\u7684\u7fa4\u4e3b. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Member (annotation): \u88ab\u8c03\u6574\u6743\u9650\u7684\u7fa4\u7ec4\u6210\u5458 \"\"\" type = \"MemberPermissionChangeEvent\" origin : MemberPerm \"\"\"\u539f\u6765\u7684\u6743\u9650\"\"\" current : MemberPerm \"\"\"\u73b0\u5728\u7684\u6743\u9650\"\"\" member : Member \"\"\"\u6743\u9650\u6539\u52a8\u7684\u7fa4\u5458\u7684\u4fe1\u606f\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , MemberPermissionChangeEvent ): if generic_issubclass ( Member , interface . annotation ): return interface . event . member if generic_issubclass ( Group , interface . annotation ): return interface . event . member . group","title":"MemberPermissionChangeEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberPermissionChangeEvent.current","text":"current : MemberPerm = None \u73b0\u5728\u7684\u6743\u9650","title":"current"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberPermissionChangeEvent.member","text":"member : Member = None \u6743\u9650\u6539\u52a8\u7684\u7fa4\u5458\u7684\u4fe1\u606f","title":"member"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberPermissionChangeEvent.origin","text":"origin : MemberPerm = None \u539f\u6765\u7684\u6743\u9650","title":"origin"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberSpecialTitleChangeEvent","text":"Bases: GroupEvent \u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u7684\u7fa4\u5934\u8854\u88ab\u66f4\u6539, \u6267\u884c\u8005\u53ea\u53ef\u80fd\u662f\u7fa4\u7ec4\u7684\u7fa4\u4e3b. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Member (annotation): \u88ab\u66f4\u6539\u7fa4\u5934\u8854\u7684\u7fa4\u7ec4\u6210\u5458 Source code in graia/ariadne/event/mirai.py 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 class MemberSpecialTitleChangeEvent ( GroupEvent ): \"\"\"\u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u7684\u7fa4\u5934\u8854\u88ab\u66f4\u6539, \u6267\u884c\u8005\u53ea\u53ef\u80fd\u662f\u7fa4\u7ec4\u7684\u7fa4\u4e3b. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Member (annotation): \u88ab\u66f4\u6539\u7fa4\u5934\u8854\u7684\u7fa4\u7ec4\u6210\u5458 \"\"\" type = \"MemberSpecialTitleChangeEvent\" origin : str \"\"\"\u539f\u6765\u7684\u5934\u8854\"\"\" current : str \"\"\"\u73b0\u5728\u7684\u5934\u8854\"\"\" member : Member \"\"\"\u88ab\u66f4\u6539\u5934\u8854\u7684\u7fa4\u7ec4\u6210\u5458\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , MemberSpecialTitleChangeEvent ): if generic_issubclass ( Member , interface . annotation ): return interface . event . member if generic_issubclass ( Group , interface . annotation ): return interface . event . member . group","title":"MemberSpecialTitleChangeEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberSpecialTitleChangeEvent.current","text":"current : str = None \u73b0\u5728\u7684\u5934\u8854","title":"current"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberSpecialTitleChangeEvent.member","text":"member : Member = None \u88ab\u66f4\u6539\u5934\u8854\u7684\u7fa4\u7ec4\u6210\u5458","title":"member"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberSpecialTitleChangeEvent.origin","text":"origin : str = None \u539f\u6765\u7684\u5934\u8854","title":"origin"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberUnmuteEvent","text":"Bases: GroupEvent \u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u88ab\u7ba1\u7406\u5458/\u7fa4\u7ec4\u89e3\u9664\u7981\u8a00, \u5f53 operator \u4e3a None \u65f6\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Member (annotation): - \"target\" (default, const, str): \u88ab\u7981\u8a00\u7684\u6210\u5458 - \"operator\" (default, const, str, optional = None): \u8be5\u64cd\u4f5c\u7684\u6267\u884c\u8005, \u53ef\u80fd\u662f\u7ba1\u7406\u5458\u6216\u662f\u7fa4\u4e3b, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7. \u9ed8\u8ba4\u8fd4\u56de target . Source code in graia/ariadne/event/mirai.py 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 class MemberUnmuteEvent ( GroupEvent ): \"\"\"\u6709\u4e00\u7fa4\u7ec4\u6210\u5458\u88ab\u7ba1\u7406\u5458/\u7fa4\u7ec4\u89e3\u9664\u7981\u8a00, \u5f53 `operator` \u4e3a `None` \u65f6\u4e3a Bot \u8d26\u53f7\u64cd\u4f5c. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Group (annotation): \u53d1\u751f\u8be5\u4e8b\u4ef6\u7684\u7fa4\u7ec4 Member (annotation): - `\"target\"` (default, const, str): \u88ab\u7981\u8a00\u7684\u6210\u5458 - `\"operator\"` (default, const, str, optional = None): \u8be5\u64cd\u4f5c\u7684\u6267\u884c\u8005, \u53ef\u80fd\u662f\u7ba1\u7406\u5458\u6216\u662f\u7fa4\u4e3b, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7. \u9ed8\u8ba4\u8fd4\u56de `target`. \"\"\" type = \"MemberUnmuteEvent\" member : Member \"\"\"\u88ab\u7981\u8a00\u7684\u7fa4\u5458\"\"\" operator : Optional [ Member ] \"\"\"\u64cd\u4f5c\u6267\u884c\u8005, \u53ef\u80fd\u662f\u7ba1\u7406\u5458\u6216\u662f\u7fa4\u4e3b, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7\"\"\" class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): if isinstance ( interface . event , MemberUnmuteEvent ): if interface . name == \"operator\" and generic_issubclass ( Member , interface . annotation ): return interface . event . operator if generic_issubclass ( Member , interface . annotation ): return interface . event . member if generic_issubclass ( Group , interface . annotation ): return interface . event . member . group","title":"MemberUnmuteEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberUnmuteEvent.member","text":"member : Member = None \u88ab\u7981\u8a00\u7684\u7fa4\u5458","title":"member"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.MemberUnmuteEvent.operator","text":"operator : Optional [ Member ] = None \u64cd\u4f5c\u6267\u884c\u8005, \u53ef\u80fd\u662f\u7ba1\u7406\u5458\u6216\u662f\u7fa4\u4e3b, \u4e5f\u53ef\u80fd\u662f Bot \u8d26\u53f7","title":"operator"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.NewFriendRequestEvent","text":"Bases: RequestEvent , FriendEvent \u6709\u4e00\u7528\u6237\u5411\u673a\u5668\u4eba\u63d0\u8d77\u597d\u53cb\u8bf7\u6c42. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \u4e8b\u4ef6\u62d3\u5c55\u652f\u6301 \u8be5\u4e8b\u4ef6\u7684\u5904\u7406\u9700\u8981\u4f60\u83b7\u53d6\u539f\u59cb\u4e8b\u4ef6\u5b9e\u4f8b. \u540c\u610f\u8bf7\u6c42: await event.accept() , \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. \u62d2\u7edd\u8bf7\u6c42: await event.reject() , \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. \u62d2\u7edd\u5e76\u4e0d\u518d\u63a5\u53d7\u6765\u81ea\u5bf9\u65b9\u7684\u8bf7\u6c42: await event.rejectAndBlock() , \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. Source code in graia/ariadne/event/mirai.py 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 class NewFriendRequestEvent ( RequestEvent , FriendEvent ): \"\"\"\u6709\u4e00\u7528\u6237\u5411\u673a\u5668\u4eba\u63d0\u8d77\u597d\u53cb\u8bf7\u6c42. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \u4e8b\u4ef6\u62d3\u5c55\u652f\u6301: \u8be5\u4e8b\u4ef6\u7684\u5904\u7406\u9700\u8981\u4f60\u83b7\u53d6\u539f\u59cb\u4e8b\u4ef6\u5b9e\u4f8b. 1. \u540c\u610f\u8bf7\u6c42: `await event.accept()`, \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. 2. \u62d2\u7edd\u8bf7\u6c42: `await event.reject()`, \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. 3. \u62d2\u7edd\u5e76\u4e0d\u518d\u63a5\u53d7\u6765\u81ea\u5bf9\u65b9\u7684\u8bf7\u6c42: `await event.rejectAndBlock()`, \u5177\u4f53\u67e5\u770b\u8be5\u65b9\u6cd5\u6240\u9644\u5e26\u7684\u8bf4\u660e. \"\"\" type = \"NewFriendRequestEvent\" requestId : int = Field ( ... , alias = \"eventId\" ) \"\"\"\u4e8b\u4ef6\u6807\u8bc6\uff0c\u54cd\u5e94\u8be5\u4e8b\u4ef6\u65f6\u7684\u6807\u8bc6\"\"\" supplicant : int = Field ( ... , alias = \"fromId\" ) \"\"\"\u7533\u8bf7\u4ebaQQ\u53f7\"\"\" nickname : str = Field ( ... , alias = \"nick\" ) \"\"\"\u7533\u8bf7\u4eba\u7684\u6635\u79f0\u6216\u7fa4\u540d\u7247\"\"\" message : str \"\"\"\u7533\u8bf7\u6d88\u606f\"\"\" sourceGroup : int = Field ( ... , alias = \"groupId\" ) \"\"\"\u7533\u8bf7\u4eba\u5982\u679c\u901a\u8fc7\u67d0\u4e2a\u7fa4\u6dfb\u52a0\u597d\u53cb, \u8be5\u9879\u4e3a\u8be5\u7fa4\u7fa4\u53f7, \u5426\u5219\u4e3a0\"\"\" async def accept ( self , message : str = \"\" ) -> None : \"\"\"\u540c\u610f\u5bf9\u65b9\u7684\u52a0\u597d\u53cb\u8bf7\u6c42. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 0 , message ) async def reject ( self , message : str = \"\" ) -> None : \"\"\"\u62d2\u7edd\u5bf9\u65b9\u7684\u52a0\u597d\u53cb\u8bf7\u6c42. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 1 , message ) async def rejectAndBlock ( self , message : str = \"\" ) -> None : \"\"\"\u62d2\u7edd\u5bf9\u65b9\u7684\u52a0\u597d\u53cb\u8bf7\u6c42, \u5e76\u4e0d\u518d\u63a5\u53d7\u6765\u81ea\u5bf9\u65b9\u7684\u52a0\u597d\u53cb\u8bf7\u6c42. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 2 , message )","title":"NewFriendRequestEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.NewFriendRequestEvent.message","text":"message : str = None \u7533\u8bf7\u6d88\u606f","title":"message"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.NewFriendRequestEvent.nickname","text":"nickname : str = Field ( Ellipsis , alias = 'nick' ) \u7533\u8bf7\u4eba\u7684\u6635\u79f0\u6216\u7fa4\u540d\u7247","title":"nickname"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.NewFriendRequestEvent.requestId","text":"requestId : int = Field ( Ellipsis , alias = 'eventId' ) \u4e8b\u4ef6\u6807\u8bc6\uff0c\u54cd\u5e94\u8be5\u4e8b\u4ef6\u65f6\u7684\u6807\u8bc6","title":"requestId"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.NewFriendRequestEvent.sourceGroup","text":"sourceGroup : int = Field ( Ellipsis , alias = 'groupId' ) \u7533\u8bf7\u4eba\u5982\u679c\u901a\u8fc7\u67d0\u4e2a\u7fa4\u6dfb\u52a0\u597d\u53cb, \u8be5\u9879\u4e3a\u8be5\u7fa4\u7fa4\u53f7, \u5426\u5219\u4e3a0","title":"sourceGroup"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.NewFriendRequestEvent.supplicant","text":"supplicant : int = Field ( Ellipsis , alias = 'fromId' ) \u7533\u8bf7\u4ebaQQ\u53f7","title":"supplicant"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.NewFriendRequestEvent.accept","text":"accept ( message : str = '' ) -> None \u540c\u610f\u5bf9\u65b9\u7684\u52a0\u597d\u53cb\u8bf7\u6c42. Parameters: Name Type Description Default message str \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". '' Raises: Type Description LookupError \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/event/mirai.py 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 async def accept ( self , message : str = \"\" ) -> None : \"\"\"\u540c\u610f\u5bf9\u65b9\u7684\u52a0\u597d\u53cb\u8bf7\u6c42. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 0 , message )","title":"accept()"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.NewFriendRequestEvent.reject","text":"reject ( message : str = '' ) -> None \u62d2\u7edd\u5bf9\u65b9\u7684\u52a0\u597d\u53cb\u8bf7\u6c42. Parameters: Name Type Description Default message str \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". '' Raises: Type Description LookupError \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/event/mirai.py 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 async def reject ( self , message : str = \"\" ) -> None : \"\"\"\u62d2\u7edd\u5bf9\u65b9\u7684\u52a0\u597d\u53cb\u8bf7\u6c42. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 1 , message )","title":"reject()"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.NewFriendRequestEvent.rejectAndBlock","text":"rejectAndBlock ( message : str = '' ) -> None \u62d2\u7edd\u5bf9\u65b9\u7684\u52a0\u597d\u53cb\u8bf7\u6c42, \u5e76\u4e0d\u518d\u63a5\u53d7\u6765\u81ea\u5bf9\u65b9\u7684\u52a0\u597d\u53cb\u8bf7\u6c42. Parameters: Name Type Description Default message str \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". '' Raises: Type Description LookupError \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: Name Type Description None None \u6ca1\u6709\u8fd4\u56de. Source code in graia/ariadne/event/mirai.py 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 async def rejectAndBlock ( self , message : str = \"\" ) -> None : \"\"\"\u62d2\u7edd\u5bf9\u65b9\u7684\u52a0\u597d\u53cb\u8bf7\u6c42, \u5e76\u4e0d\u518d\u63a5\u53d7\u6765\u81ea\u5bf9\u65b9\u7684\u52a0\u597d\u53cb\u8bf7\u6c42. Args: message (str, optional): \u9644\u5e26\u7ed9\u5bf9\u65b9\u7684\u6d88\u606f. \u9ed8\u8ba4\u4e3a \"\". Raises: LookupError: \u5c1d\u8bd5\u4e0a\u4e0b\u6587\u5916\u5904\u7406\u4e8b\u4ef6. InvalidSession: \u5e94\u7528\u5b9e\u4f8b\u6ca1\u51c6\u5907\u597d! Returns: None: \u6ca1\u6709\u8fd4\u56de. \"\"\" await self . _operate ( 2 , message )","title":"rejectAndBlock()"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.NudgeEvent","text":"Bases: MiraiEvent Bot \u8d26\u53f7\u88ab\u67d0\u4e2a\u8d26\u53f7\u5728\u76f8\u5e94\u4e0a\u4e0b\u6587\u533a\u57df\u8fdb\u884c \"\u6233\u4e00\u6233\"(Nudge) \u7684\u884c\u4e3a. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Source code in graia/ariadne/event/mirai.py 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 class NudgeEvent ( MiraiEvent ): \"\"\"Bot \u8d26\u53f7\u88ab\u67d0\u4e2a\u8d26\u53f7\u5728\u76f8\u5e94\u4e0a\u4e0b\u6587\u533a\u57df\u8fdb\u884c \"\u6233\u4e00\u6233\"(Nudge) \u7684\u884c\u4e3a. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: - Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \"\"\" type : str = \"NudgeEvent\" context_type : Literal [ \"friend\" , \"group\" ] \"\"\"\u6233\u4e00\u6233\u7684\u4f4d\u7f6e\"\"\" supplicant : int = Field ( ... , alias = \"fromId\" ) \"\"\"\u52a8\u4f5c\u53d1\u51fa\u8005\u7684 QQ \u53f7\"\"\" target : int \"\"\"\u52a8\u4f5c\u76ee\u6807\u7684 QQ \u53f7\"\"\" msg_action : str = Field ( ... , alias = \"action\" ) \"\"\"\u52a8\u4f5c\u7c7b\u578b\"\"\" msg_suffix : str = Field ( ... , alias = \"suffix\" ) \"\"\"\u81ea\u5b9a\u4e49\u52a8\u4f5c\u5185\u5bb9\"\"\" origin_subject_info : Dict [ str , Any ] = Field ( ... , alias = \"subject\" ) \"\"\"\u539f\u59cb\u6765\u6e90\"\"\" friend_id : Optional [ int ] = None \"\"\"\u597d\u53cb QQ \u53f7, \u5982\u679c\u4e3a\u597d\u53cb\u95f4\u6233\u4e00\u6233\"\"\" group_id : Optional [ int ] = None \"\"\"\u7fa4\u7ec4 QQ \u53f7, \u5982\u679c\u4e3a\u7fa4\u5185\u6233\u4e00\u6233\"\"\" def __init__ ( self , ** data : Any ) -> None : ctx_type = data [ \"context_type\" ] = str . lower ( data [ \"subject\" ][ \"kind\" ]) if ctx_type == \"group\" : data [ \"group_id\" ] = data [ \"subject\" ][ \"id\" ] else : data [ \"friend_id\" ] = data [ \"subject\" ][ \"id\" ] super () . __init__ ( ** data ) class Dispatcher ( BaseDispatcher ): @staticmethod async def catch ( interface : DispatcherInterface ): from .. import get_running ev = interface . event if isinstance ( ev , NudgeEvent ): if generic_issubclass ( Group , interface . annotation ) and ev . group_id is not None : return await get_running () . getGroup ( ev . group_id ) if generic_issubclass ( Friend , interface . annotation ) and ev . friend_id is not None : return await get_running () . getFriend ( ev . friend_id )","title":"NudgeEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.NudgeEvent.context_type","text":"context_type : Literal [ 'friend' , 'group' ] = None \u6233\u4e00\u6233\u7684\u4f4d\u7f6e","title":"context_type"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.NudgeEvent.friend_id","text":"friend_id : Optional [ int ] = None \u597d\u53cb QQ \u53f7, \u5982\u679c\u4e3a\u597d\u53cb\u95f4\u6233\u4e00\u6233","title":"friend_id"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.NudgeEvent.group_id","text":"group_id : Optional [ int ] = None \u7fa4\u7ec4 QQ \u53f7, \u5982\u679c\u4e3a\u7fa4\u5185\u6233\u4e00\u6233","title":"group_id"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.NudgeEvent.msg_action","text":"msg_action : str = Field ( Ellipsis , alias = 'action' ) \u52a8\u4f5c\u7c7b\u578b","title":"msg_action"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.NudgeEvent.msg_suffix","text":"msg_suffix : str = Field ( Ellipsis , alias = 'suffix' ) \u81ea\u5b9a\u4e49\u52a8\u4f5c\u5185\u5bb9","title":"msg_suffix"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.NudgeEvent.origin_subject_info","text":"origin_subject_info : Dict [ str , Any ] = Field ( Ellipsis , alias = 'subject' ) \u539f\u59cb\u6765\u6e90","title":"origin_subject_info"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.NudgeEvent.supplicant","text":"supplicant : int = Field ( Ellipsis , alias = 'fromId' ) \u52a8\u4f5c\u53d1\u51fa\u8005\u7684 QQ \u53f7","title":"supplicant"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.NudgeEvent.target","text":"target : int = None \u52a8\u4f5c\u76ee\u6807\u7684 QQ \u53f7","title":"target"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.OtherClientOfflineEvent","text":"Bases: MiraiEvent Bot \u8d26\u53f7\u5728\u5176\u4ed6\u5ba2\u6237\u7aef\u4e0b\u7ebf. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Source code in graia/ariadne/event/mirai.py 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 class OtherClientOfflineEvent ( MiraiEvent ): \"\"\"Bot \u8d26\u53f7\u5728\u5176\u4ed6\u5ba2\u6237\u7aef\u4e0b\u7ebf. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \"\"\" type = \"OtherClientOfflineEvent\" client : Client \"\"\"\u4e0b\u7ebf\u7684\u5ba2\u6237\u7aef\"\"\"","title":"OtherClientOfflineEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.OtherClientOfflineEvent.client","text":"client : Client = None \u4e0b\u7ebf\u7684\u5ba2\u6237\u7aef","title":"client"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.OtherClientOnlineEvent","text":"Bases: MiraiEvent Bot \u8d26\u53f7\u5728\u5176\u4ed6\u5ba2\u6237\u7aef\u4e0a\u7ebf. Tip \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301 Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b Source code in graia/ariadne/event/mirai.py 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 class OtherClientOnlineEvent ( MiraiEvent ): \"\"\"Bot \u8d26\u53f7\u5728\u5176\u4ed6\u5ba2\u6237\u7aef\u4e0a\u7ebf. Tip: \u5f53\u76d1\u542c\u8be5\u4e8b\u4ef6\u6216\u8be5\u7c7b\u4e8b\u4ef6\u65f6, \u8bf7\u4f18\u5148\u8003\u8651\u4f7f\u7528\u539f\u59cb\u4e8b\u4ef6\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3, \u4ee5\u6b64\u83b7\u5f97\u4e8b\u4ef6\u7c7b\u5b9e\u4f8b, \u4fbf\u4e8e\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f! \u63d0\u4f9b\u7684\u989d\u5916\u6ce8\u89e3\u652f\u6301: Ariadne (annotation): \u53d1\u5e03\u4e8b\u4ef6\u7684\u5e94\u7528\u5b9e\u4f8b \"\"\" type = \"OtherClientOnlineEvent\" client : Client \"\"\"\u4e0a\u7ebf\u7684\u5ba2\u6237\u7aef\"\"\" kind : Optional [ ClientKind ] \"\"\"\u5ba2\u6237\u7aef\u7c7b\u578b\"\"\"","title":"OtherClientOnlineEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.OtherClientOnlineEvent.client","text":"client : Client = None \u4e0a\u7ebf\u7684\u5ba2\u6237\u7aef","title":"client"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.OtherClientOnlineEvent.kind","text":"kind : Optional [ ClientKind ] = None \u5ba2\u6237\u7aef\u7c7b\u578b","title":"kind"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.RequestEvent","text":"Bases: MiraiEvent \u5404\u79cd\u7533\u8bf7\u4e8b\u4ef6\u7684\u57fa\u7c7b. Source code in graia/ariadne/event/mirai.py 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 class RequestEvent ( MiraiEvent ): \"\"\" \u5404\u79cd\u7533\u8bf7\u4e8b\u4ef6\u7684\u57fa\u7c7b. \"\"\" type : str requestId : int = Field ( ... , alias = \"eventId\" ) \"\"\"\u4e8b\u4ef6\u6807\u8bc6\uff0c\u54cd\u5e94\u8be5\u4e8b\u4ef6\u65f6\u7684\u6807\u8bc6\"\"\" supplicant : int = Field ( ... , alias = \"fromId\" ) \"\"\"\u7533\u8bf7\u4ebaQQ\u53f7\"\"\" sourceGroup : int = Field ( ... , alias = \"groupId\" ) nickname : str = Field ( ... , alias = \"nick\" ) \"\"\"\u7533\u8bf7\u4eba\u7684\u6635\u79f0\u6216\u7fa4\u540d\u7247\"\"\" message : str \"\"\"\u7533\u8bf7\u6d88\u606f\"\"\" async def _operate ( self , operation : int , msg : str = \"\" ) -> None : \"\"\" \u5185\u90e8\u63a5\u53e3, \u7528\u4e8e\u5185\u90e8\u4fbf\u6377\u53d1\u9001\u76f8\u5e94\u64cd\u4f5c. \"\"\" from .. import get_running from ..adapter import Adapter adapter = get_running ( Adapter ) if not adapter . mirai_session . session_key : raise InvalidSession ( \"you must authenticate before this.\" ) api_route = self . type [ 0 ] . lower () + self . type [ 1 :] await adapter . call_api ( f \"resp/ { api_route } \" , CallMethod . POST , { \"sessionKey\" : adapter . mirai_session . session_key , \"eventId\" : self . requestId , \"fromId\" : self . supplicant , \"groupId\" : self . sourceGroup , \"operate\" : operation , \"message\" : msg , }, )","title":"RequestEvent"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.RequestEvent.message","text":"message : str = None \u7533\u8bf7\u6d88\u606f","title":"message"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.RequestEvent.nickname","text":"nickname : str = Field ( Ellipsis , alias = 'nick' ) \u7533\u8bf7\u4eba\u7684\u6635\u79f0\u6216\u7fa4\u540d\u7247","title":"nickname"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.RequestEvent.requestId","text":"requestId : int = Field ( Ellipsis , alias = 'eventId' ) \u4e8b\u4ef6\u6807\u8bc6\uff0c\u54cd\u5e94\u8be5\u4e8b\u4ef6\u65f6\u7684\u6807\u8bc6","title":"requestId"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.RequestEvent.supplicant","text":"supplicant : int = Field ( Ellipsis , alias = 'fromId' ) \u7533\u8bf7\u4ebaQQ\u53f7","title":"supplicant"},{"location":"refs/graia/ariadne/event/mirai/#graia.ariadne.event.mirai.RequestEvent._operate","text":"_operate ( operation : int , msg : str = '' ) -> None \u5185\u90e8\u63a5\u53e3, \u7528\u4e8e\u5185\u90e8\u4fbf\u6377\u53d1\u9001\u76f8\u5e94\u64cd\u4f5c. Source code in graia/ariadne/event/mirai.py 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 async def _operate ( self , operation : int , msg : str = \"\" ) -> None : \"\"\" \u5185\u90e8\u63a5\u53e3, \u7528\u4e8e\u5185\u90e8\u4fbf\u6377\u53d1\u9001\u76f8\u5e94\u64cd\u4f5c. \"\"\" from .. import get_running from ..adapter import Adapter adapter = get_running ( Adapter ) if not adapter . mirai_session . session_key : raise InvalidSession ( \"you must authenticate before this.\" ) api_route = self . type [ 0 ] . lower () + self . type [ 1 :] await adapter . call_api ( f \"resp/ { api_route } \" , CallMethod . POST , { \"sessionKey\" : adapter . mirai_session . session_key , \"eventId\" : self . requestId , \"fromId\" : self . supplicant , \"groupId\" : self . sourceGroup , \"operate\" : operation , \"message\" : msg , }, )","title":"_operate()"},{"location":"refs/graia/ariadne/message/","text":"\u672c\u6a21\u5757\u63d0\u4f9b Ariadne \u6d88\u606f\u76f8\u5173\u90e8\u4ef6.","title":"message"},{"location":"refs/graia/ariadne/message/chain/","text":"Ariadne \u6d88\u606f\u94fe\u7684\u5b9e\u73b0 MessageChain \ud83d\udd17 Bases: AriadneBaseModel \u5373 \"\u6d88\u606f\u94fe\", \u88ab\u7528\u4e8e\u627f\u8f7d\u6574\u4e2a\u6d88\u606f\u5185\u5bb9\u7684\u6570\u636e\u7ed3\u6784, \u5305\u542b\u6709\u4e00\u6709\u5e8f\u5217\u8868, \u5305\u542b\u6709\u5143\u7d20\u5b9e\u4f8b. Source code in graia/ariadne/message/chain.pyclass MessageChain ( AriadneBaseModel ): \"\"\" \u5373 \"\u6d88\u606f\u94fe\", \u88ab\u7528\u4e8e\u627f\u8f7d\u6574\u4e2a\u6d88\u606f\u5185\u5bb9\u7684\u6570\u636e\u7ed3\u6784, \u5305\u542b\u6709\u4e00\u6709\u5e8f\u5217\u8868, \u5305\u542b\u6709\u5143\u7d20\u5b9e\u4f8b. \"\"\" __root__ : List [ Element ] \"\"\"\u5e95\u5c42\u5143\u7d20\u5217\u8868\"\"\" @staticmethod def build_chain ( obj : Iterable [ Union [ dict , Element , str ]]) -> List [ Element ]: \"\"\"\u5185\u90e8\u63a5\u53e3, \u4f1a\u81ea\u52a8\u53cd\u5e8f\u5217\u5316\u5bf9\u8c61\u5e76\u751f\u6210. Args: obj (Iterable[Union[dict, Element, str]]): \u9700\u8981\u53cd\u5e8f\u5217\u5316\u7684\u5bf9\u8c61 Returns: List[Element]: \u5185\u90e8\u627f\u8f7d\u6709\u5c3d\u91cf\u6709\u6548\u7684\u6d88\u606f\u5143\u7d20\u7684\u5217\u8868 \"\"\" element_list : List [ Element ] = [] for i in obj : if isinstance ( i , Element ): element_list . append ( i ) elif isinstance ( i , dict ) and \"type\" in i : for element_cls in gen_subclass ( Element ): if element_cls . __name__ == i [ \"type\" ]: element_list . append ( element_cls . parse_obj ( i )) break elif isinstance ( i , str ): element_list . append ( Plain ( i )) return element_list @classmethod def parse_obj ( cls : Type [ \"MessageChain\" ], obj : List [ Union [ dict , Element ]]) -> \"MessageChain\" : \"\"\"\u5185\u90e8\u63a5\u53e3, \u4f1a\u81ea\u52a8\u5c06\u4f5c\u4e3a\u5916\u90e8\u6001\u7684\u6d88\u606f\u5143\u7d20\u8f6c\u4e3a\u5185\u90e8\u6001. Args: obj (List[T]): \u9700\u8981\u53cd\u5e8f\u5217\u5316\u7684\u5bf9\u8c61 Returns: MessageChain: \u5185\u90e8\u627f\u8f7d\u6709\u5c3d\u91cf\u6709\u6548\u7684\u6d88\u606f\u5143\u7d20\u7684\u6d88\u606f\u94fe \"\"\" return cls ( __root__ = cls . build_chain ( obj )) # type: ignore def __init__ ( self , __root__ : Iterable [ Union [ Element , str ]], inline : bool = False , ) -> None : if not inline : super () . __init__ ( __root__ = self . build_chain ( __root__ )) # type: ignore else : super () . __init__ ( __root__ = __root__ ) # type: ignore @classmethod def create ( cls , * elements : Union [ Iterable [ Element ], Element , str ]) -> \"MessageChain\" : \"\"\" \u521b\u5efa\u6d88\u606f\u94fe. \u6bd4\u8d77\u76f4\u63a5\u5b9e\u4f8b\u5316, \u672c\u65b9\u6cd5\u62e5\u6709\u66f4\u4e30\u5bcc\u7684\u8f93\u5165\u5b9e\u4f8b\u7c7b\u578b\u652f\u6301. Args: *elements (Union[Iterable[Element], Element, str]): \\ \u5143\u7d20\u7684\u5bb9\u5668, \u4e3a\u627f\u8f7d\u5143\u7d20\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61/\u5355\u5143\u7d20\u5b9e\u4f8b, \\ \u5b57\u7b26\u4e32\u4f1a\u88ab\u81ea\u52a8\u4e0d\u53ef\u9006\u7684\u8f6c\u6362\u4e3a `Plain` Returns: MessageChain: \u521b\u5efa\u7684\u6d88\u606f\u94fe \"\"\" element_list = [] for i in elements : if isinstance ( i , Element ): element_list . append ( i ) elif isinstance ( i , str ): element_list . append ( Plain ( i )) else : element_list . extend ( cls . build_chain ( i )) return cls ( __root__ = element_list , inline = True ) def prepare ( self , copy : bool = False ) -> \"MessageChain\" : \"\"\" \u5bf9\u6d88\u606f\u94fe\u4e2d\u6240\u6709\u5143\u7d20\u8fdb\u884c\u5904\u7406. Returns: MessageChain: copy = True \u65f6\u8fd4\u56de\u526f\u672c, \u5426\u5219\u8fd4\u56de\u81ea\u5df1\u7684\u5f15\u7528. \"\"\" chain_ref = self . copy () if copy else self chain_ref . merge () for i in chain_ref . __root__ [:]: try : i . prepare () except NotSendableElement : chain_ref . __root__ . remove ( i ) return chain_ref def unzip ( self ) -> List [ Union [ str , Element ]]: \"\"\"\u89e3\u538b\u6d88\u606f\u94fe\u4e3a\u5143\u7d20/\u5355\u5b57\u7b26\u5217\u8868. Return: List[Union[str, Element]]: \u89e3\u538b\u540e\u7684\u5143\u7d20/\u5b57\u7b26\u5217\u8868. \"\"\" unzipped : List [ Union [ str , Element ]] = [] for e in self . __root__ : if isinstance ( e , Plain ): unzipped . extend ( e . text ) else : unzipped . append ( e ) return unzipped def has ( self , item : Union [ Element , Type [ Element ], \"MessageChain\" , str ]) -> bool : \"\"\" \u5224\u65ad\u6d88\u606f\u94fe\u4e2d\u662f\u5426\u542b\u6709\u7279\u5b9a\u7684\u5143\u7d20/\u5143\u7d20\u7c7b\u578b/\u6d88\u606f\u94fe/\u5b57\u7b26\u4e32. Args: item (Union[Element_T, Type[Element_T], \"MessageChain\"]): \u9700\u8981\u5224\u65ad\u7684\u5143\u7d20/\u5143\u7d20\u7c7b\u578b/\u6d88\u606f\u94fe/\u5b57\u7b26\u4e32. Returns: bool: \u5224\u65ad\u7ed3\u679c \"\"\" if isinstance ( item , str ): return bool ( self . findSubChain ( MessageChain ([ Plain ( item )], inline = True ))) if isinstance ( item , Element ): return item in self . merge ( copy = True ) . __root__ if isinstance ( item , type ): return item in [ type ( i ) for i in self . __root__ ] if isinstance ( item , MessageChain ): return bool ( self . findSubChain ( item )) raise ValueError ( f \" { item } is not an acceptable argument!\" ) def get ( self , element_class : Type [ Element_T ], count : int = - 1 ) -> List [ Element_T ]: \"\"\" \u83b7\u53d6\u6d88\u606f\u94fe\u4e2d\u6240\u6709\u7279\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u5143\u7d20 Args: element_class (T): \u6307\u5b9a\u7684\u6d88\u606f\u5143\u7d20\u7684\u7c7b\u578b, \u4f8b\u5982 \"Plain\", \"At\", \"Image\" \u7b49. Returns: List[T]: \u83b7\u53d6\u5230\u7684\u7b26\u5408\u8981\u6c42\u7684\u6240\u6709\u6d88\u606f\u5143\u7d20; \u53e6: \u53ef\u80fd\u662f\u7a7a\u5217\u8868([]). \"\"\" if count == - 1 : count = len ( self . __root__ ) return [ i for i in self . __root__ if isinstance ( i , element_class )][: count ] def getOne ( self , element_class : Type [ Element_T ], index : int ) -> Element_T : \"\"\" \u83b7\u53d6\u6d88\u606f\u94fe\u4e2d\u7b2c index + 1 \u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u5143\u7d20 Args: element_class (Type[Element_T]): \u6307\u5b9a\u7684\u6d88\u606f\u5143\u7d20\u7684\u7c7b\u578b, \u4f8b\u5982 \"Plain\", \"At\", \"Image\" \u7b49. index (int): \u7d22\u5f15, \u4ece 0 \u5f00\u59cb\u6570 Returns: Element_T: \u6d88\u606f\u94fe\u7b2c index + 1 \u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u5143\u7d20 \"\"\" return self . get ( element_class )[ index ] def getFirst ( self , element_class : Type [ Element_T ]) -> Element_T : \"\"\" \u83b7\u53d6\u6d88\u606f\u94fe\u4e2d\u7b2c 1 \u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u5143\u7d20 Args: element_class (Type[Element_T]): \u6307\u5b9a\u7684\u6d88\u606f\u5143\u7d20\u7684\u7c7b\u578b, \u4f8b\u5982 \"Plain\", \"At\", \"Image\" \u7b49. Returns: Element_T: \u6d88\u606f\u94fe\u7b2c 1 \u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u5143\u7d20 \"\"\" return self . getOne ( element_class , 0 ) def asDisplay ( self ) -> str : \"\"\" \u83b7\u53d6\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8868\u793a\u7684\u6d88\u606f\u94fe, \u4e14\u8d8b\u4e8e\u901a\u5e38\u4f60\u89c1\u5230\u7684\u6837\u5b50. Returns: str: \u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8868\u793a\u7684\u6d88\u606f\u94fe \"\"\" return \"\" . join ( i . asDisplay () for i in self . __root__ ) def __str__ ( self ) -> str : return self . asDisplay () def __repr_args__ ( self ) -> \"ReprArgs\" : return [( None , list ( self . __root__ ))] def __contains__ ( self , item : Union [ \"MessageChain\" , Type [ Element_T ], Element_T , str ]) -> bool : \"\"\" \u662f\u5426\u5305\u542b\u7279\u5b9a\u5bf9\u8c61 \"\"\" return self . has ( item ) @overload def __getitem__ ( self , item : Tuple [ Type [ Element_T ], int ]) -> List [ Element_T ]: ... @overload def __getitem__ ( self , item : Type [ Element_T ]) -> List [ Element_T ]: ... @overload def __getitem__ ( self , item : int ) -> Element : ... @overload def __getitem__ ( self , item : slice ) -> \"MessageChain\" : ... def __getitem__ ( # type: ignore self , item : Union [ Tuple [ Type [ Element_T ], int ], Type [ Element_T ], int , slice ] ) -> Union [ List [ Element ], Element , \"MessageChain\" ]: \"\"\" \u53ef\u901a\u8fc7\u5207\u7247\u53d6\u51fa\u5b50\u6d88\u606f\u94fe, \u6216\u5143\u7d20. \u901a\u8fc7 `type, count` \u578b\u5143\u7ec4\u53d6\u51fa\u524d `count` \u4e2a `type` \u5143\u7d20\u7ec4\u6210\u7684\u5217\u8868 \u901a\u8fc7 `type` \u53d6\u51fa\u5c5e\u4e8e `type` \u7684\u5143\u7d20\u5217\u8868 \u901a\u8fc7 `int` \u53d6\u51fa\u5bf9\u5e94\u4f4d\u7f6e\u5143\u7d20. Args: item (Union[Tuple[Type[Element], int], Type[Element], int, slice]): \u7d22\u5f15\u9879 Returns: Union[List[Element], Element, MessageChain]: \u7d22\u5f15\u7ed3\u679c. \"\"\" if isinstance ( item , type ) and issubclass ( item , Element ): return self . get ( item ) if isinstance ( item , tuple ): return self . get ( * item ) if isinstance ( item , int ): return self . __root__ [ item ] if isinstance ( item , slice ): return MessageChain ( self . __root__ [ item ], inline = True ) raise NotImplementedError ( f \" { item } is not allowed for item getting\" ) def findSubChain ( self , subchain : Union [ \"MessageChain\" , List [ Element ]]) -> List [ int ]: \"\"\"\u5224\u65ad\u6d88\u606f\u94fe\u662f\u5426\u542b\u6709\u5b50\u94fe. \u4f7f\u7528 KMP \u7b97\u6cd5. Args: subchain (Union[MessageChain, List[Element]]): \u8981\u5224\u65ad\u7684\u5b50\u94fe. Returns: List[int]: \u6240\u6709\u627e\u5230\u7684\u4e0b\u6807. \"\"\" pattern : List [ Union [ str , Element ]] = ( subchain . unzip () if isinstance ( subchain , MessageChain ) else MessageChain ( subchain , inline = True ) . unzip () ) match_target : List [ Union [ str , Element ]] = self . unzip () if len ( match_target ) < len ( pattern ): return [] fallback : List [ int ] = [ 0 for _ in pattern ] current_fb : int = 0 # current fallback index for i in range ( 1 , len ( pattern )): while current_fb and pattern [ i ] != pattern [ current_fb ]: current_fb = fallback [ current_fb - 1 ] if pattern [ i ] == pattern [ current_fb ]: current_fb += 1 fallback [ i ] = current_fb match_index : List [ int ] = [] ptr = 0 for i , e in enumerate ( match_target ): while ptr and e != pattern [ ptr ]: ptr = fallback [ ptr - 1 ] if e == pattern [ ptr ]: ptr += 1 if ptr == len ( pattern ): match_index . append ( i - ptr + 1 ) ptr = fallback [ ptr - 1 ] return match_index def exclude ( self , * types : Type [ Element ]) -> \"MessageChain\" : \"\"\"\u5c06\u9664\u4e86\u5728\u7ed9\u51fa\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b\u4e2d\u7b26\u5408\u7684\u6d88\u606f\u5143\u7d20\u91cd\u65b0\u5305\u88c5\u4e3a\u4e00\u4e2a\u65b0\u7684\u6d88\u606f\u94fe Args: *types (Type[Element]): \u5c06\u6392\u9664\u5728\u5916\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b Returns: MessageChain: \u8fd4\u56de\u7684\u6d88\u606f\u94fe\u4e2d\u4e0d\u5305\u542b\u53c2\u6570\u4e2d\u7ed9\u51fa\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b \"\"\" return MessageChain ([ i for i in self . copy () . __root__ if type ( i ) not in types ], inline = True ) def include ( self , * types : Type [ Element ]) -> \"MessageChain\" : \"\"\"\u5c06\u53ea\u5728\u7ed9\u51fa\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b\u4e2d\u7b26\u5408\u7684\u6d88\u606f\u5143\u7d20\u91cd\u65b0\u5305\u88c5\u4e3a\u4e00\u4e2a\u65b0\u7684\u6d88\u606f\u94fe Args: *types (Type[Un]): \u5c06\u53ea\u5305\u542b\u5728\u5185\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b Returns: MessageChain: \u8fd4\u56de\u7684\u6d88\u606f\u94fe\u4e2d\u53ea\u5305\u542b\u53c2\u6570\u4e2d\u7ed9\u51fa\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b \"\"\" return MessageChain ([ i for i in self . copy () . __root__ if type ( i ) in types ], inline = True ) def split ( self , pattern : str = \" \" , raw_string : bool = False ) -> List [ \"MessageChain\" ]: \"\"\"\u548c `str.split` \u5dee\u4e0d\u591a, \u63d0\u4f9b\u4e00\u4e2a\u5b57\u7b26\u4e32, \u7136\u540e\u8fd4\u56de\u5206\u5272\u7ed3\u679c. Args: pattern (str): \u5206\u9694\u7b26. \u9ed8\u8ba4\u4e3a\u5355\u4e2a\u7a7a\u683c. raw_string (bool): \u662f\u5426\u8981\u5305\u542b \"\u7a7a\" \u7684\u6587\u672c\u5143\u7d20. Returns: List[\"MessageChain\"]: \u5206\u5272\u7ed3\u679c, \u884c\u4e3a\u548c `str.split` \u5dee\u4e0d\u591a. \"\"\" result : List [ \"MessageChain\" ] = [] tmp = [] for element in self . __root__ : if isinstance ( element , Plain ): split_result = element . text . split ( pattern ) for index , split_str in enumerate ( split_result ): if tmp and index > 0 : result . append ( MessageChain ( tmp , inline = True )) tmp = [] if split_str or raw_string : tmp . append ( Plain ( split_str )) else : tmp . append ( element ) if tmp : result . append ( MessageChain ( tmp , inline = True )) tmp = [] return result def __iter__ ( self ) -> Iterator [ Element ]: return iter ( self . __root__ ) def startswith ( self , string : str , ignore_header : bool = True ) -> bool : \"\"\" \u5224\u5b9a\u6d88\u606f\u94fe\u662f\u5426\u4ee5\u76f8\u5e94\u5b57\u7b26\u4e32\u5f00\u5934 Args: string (str): \u9700\u8981\u5224\u65ad\u7684\u5b57\u7b26\u4e32 ignore_header (bool, optional): \u662f\u5426\u5ffd\u7565\u5143\u6570\u636e, \u9ed8\u8ba4\u4e3a True Returns: bool: \u662f\u5426\u4ee5\u6b64\u5b57\u7b26\u4e32\u5f00\u5934 \"\"\" ref_root = self . asSendable () . __root__ if ignore_header else self . __root__ if not ref_root or not isinstance ( ref_root [ 0 ], Plain ): return False return ref_root [ 0 ] . text . startswith ( string ) def endswith ( self , string : str ) -> bool : \"\"\" \u5224\u5b9a\u6d88\u606f\u94fe\u662f\u5426\u4ee5\u76f8\u5e94\u5b57\u7b26\u4e32\u7ed3\u5c3e Args: string (str): \u9700\u8981\u5224\u65ad\u7684\u5b57\u7b26\u4e32 Returns: bool: \u662f\u5426\u4ee5\u6b64\u5b57\u7b26\u4e32\u7ed3\u5c3e \"\"\" if not self . __root__ or not isinstance ( self . __root__ [ - 1 ], Plain ): return False last_element : Plain = self . __root__ [ - 1 ] return last_element . text . endswith ( string ) def onlyContains ( self , * types : Type [ Element ]) -> bool : \"\"\"\u5224\u65ad\u6d88\u606f\u94fe\u4e2d\u662f\u5426\u53ea\u542b\u6709\u7279\u5b9a\u7c7b\u578b\u5143\u7d20. Returns: bool: \u5224\u65ad\u7ed3\u679c \"\"\" return all ( isinstance ( i , types ) for i in self . __root__ ) def merge ( self , copy : bool = False ) -> \"MessageChain\" : \"\"\" \u5728\u5b9e\u4f8b\u5185\u5408\u5e76\u76f8\u90bb\u7684 Plain \u9879 copy (bool): \u662f\u5426\u8981\u5728\u526f\u672c\u4e0a\u4fee\u6539. Returns: MessageChain: copy = True \u65f6\u8fd4\u56de\u526f\u672c, \u5426\u5219\u8fd4\u56de\u81ea\u5df1\u7684\u5f15\u7528. \"\"\" result = [] plain = [] for i in self . __root__ : if not isinstance ( i , Plain ): if plain : result . append ( Plain ( \"\" . join ( plain ))) plain . clear () # \u6e05\u7a7a\u7f13\u5b58 result . append ( deepcopy ( i ) if copy else i ) else : plain . append ( i . text ) if plain : result . append ( Plain ( \"\" . join ( plain ))) plain . clear () if not copy : self . __root__ = result return self return MessageChain ( result , inline = True ) def append ( self , element : Union [ Element , str ], copy : bool = False ) -> \"MessageChain\" : \"\"\" \u5411\u6d88\u606f\u94fe\u6700\u540e\u8ffd\u52a0\u5355\u4e2a\u5143\u7d20 Args: element (Element): \u8981\u6dfb\u52a0\u7684\u5143\u7d20 copy (bool): \u662f\u5426\u8981\u5728\u526f\u672c\u4e0a\u4fee\u6539. Returns: MessageChain: copy = True \u65f6\u8fd4\u56de\u526f\u672c, \u5426\u5219\u8fd4\u56de\u81ea\u5df1\u7684\u5f15\u7528. \"\"\" chain_ref = self . copy () if copy else self if isinstance ( element , str ): element = Plain ( element ) chain_ref . __root__ . append ( element ) return chain_ref def extend ( self , * content : Union [ \"MessageChain\" , Element , List [ Union [ Element , str ]]], copy : bool = False , ) -> \"MessageChain\" : \"\"\" \u5411\u6d88\u606f\u94fe\u6700\u540e\u6dfb\u52a0\u5143\u7d20/\u5143\u7d20\u5217\u8868/\u6d88\u606f\u94fe Args: *content (Union[MessageChain, Element, List[Element]]): \u8981\u6dfb\u52a0\u7684\u5143\u7d20/\u5143\u7d20\u5bb9\u5668. copy (bool): \u662f\u5426\u8981\u5728\u526f\u672c\u4e0a\u4fee\u6539. Returns: MessageChain: copy = True \u65f6\u8fd4\u56de\u526f\u672c, \u5426\u5219\u8fd4\u56de\u81ea\u5df1\u7684\u5f15\u7528. \"\"\" result = [] for i in content : if isinstance ( i , Element ): result . append ( i ) elif isinstance ( i , str ): result . append ( Plain ( i )) elif isinstance ( i , MessageChain ): result . extend ( i . __root__ ) else : for e in i : if isinstance ( e , str ): result . append ( Plain ( e )) else : result . append ( e ) if copy : return MessageChain ( deepcopy ( self . __root__ ) + result , inline = True ) self . __root__ . extend ( result ) return self def copy ( self ) -> \"MessageChain\" : \"\"\" \u62f7\u8d1d\u672c\u6d88\u606f\u94fe. Returns: MessageChain: \u62f7\u8d1d\u7684\u526f\u672c. \"\"\" return MessageChain ( deepcopy ( self . __root__ ), inline = True ) def index ( self , element_type : Type [ Element_T ]) -> Union [ int , None ]: \"\"\" \u5bfb\u627e\u7b2c\u4e00\u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u5143\u7d20, \u5e76\u8fd4\u56de\u5176\u4e0b\u6807. Args: element_type (Type[Element]): \u5143\u7d20\u6216\u5143\u7d20\u7c7b\u578b Returns: Optional[int]: \u5143\u7d20\u4e0b\u6807, \u82e5\u672a\u627e\u5230\u5219\u4e3a None. \"\"\" return next ( ( i for i , e in enumerate ( self . __root__ ) if isinstance ( e , element_type )), None , ) def count ( self , element : Union [ Type [ Element_T ], Element_T ]) -> int : \"\"\" \u7edf\u8ba1\u5171\u6709\u591a\u5c11\u4e2a\u6307\u5b9a\u7684\u5143\u7d20. Args: element (Type[Element] | Element): \u5143\u7d20\u6216\u5143\u7d20\u7c7b\u578b Returns: int: \u5143\u7d20\u6570\u91cf \"\"\" if isinstance ( element , Element ): return sum ( i == element for i in self . __root__ ) return sum ( isinstance ( i , element ) for i in self . __root__ ) def asSendable ( self ) -> \"MessageChain\" : \"\"\"\u5c06\u6d88\u606f\u94fe\u8f6c\u6362\u4e3a\u53ef\u53d1\u9001\u5f62\u5f0f (\u53bb\u9664 Source, Quote, File) Returns: MessageChain: \u8f6c\u6362\u540e\u7684\u6d88\u606f\u94fe. \"\"\" return self . exclude ( Source , Quote , File ) def __eq__ ( self , other : Union [ List [ Union [ Element , str ]], \"MessageChain\" ]) -> bool : if not isinstance ( other , ( list , MessageChain )): return False if isinstance ( other , list ): other = MessageChain ( other ) return other . asSendable () . __root__ == self . asSendable () . __root__ def __add__ ( self , content : Union [ \"MessageChain\" , List [ Element ], Element , str ]) -> \"MessageChain\" : if isinstance ( content , str ): content = Plain ( content ) if isinstance ( content , Element ): content = [ content ] if isinstance ( content , MessageChain ): content = content . __root__ return MessageChain ( self . __root__ + content , inline = True ) def __radd__ ( self , content : Union [ \"MessageChain\" , List [ Element ], Element , str ]) -> \"MessageChain\" : if isinstance ( content , str ): content = Plain ( content ) if isinstance ( content , Element ): content = [ content ] if isinstance ( content , MessageChain ): content = content . __root__ return MessageChain ( content + self . __root__ , inline = True ) def __iadd__ ( self , content : Union [ \"MessageChain\" , List [ Element ], Element , str ]) -> \"MessageChain\" : if isinstance ( content , str ): content = Plain ( content ) if isinstance ( content , Element ): content = [ content ] if isinstance ( content , MessageChain ): content = content . __root__ self . __root__ . extend ( content ) return self def __mul__ ( self , time : int ) -> \"MessageChain\" : result = [] for _ in range ( time ): result . extend ( deepcopy ( self . __root__ )) return MessageChain ( result , inline = True ) def __imul__ ( self , time : int ) -> \"MessageChain\" : self . __root__ = self . __mul__ ( time ) . __root__ return self def __len__ ( self ) -> int : return len ( self . __root__ ) def asPersistentString ( self , * , binary : bool = True , include : Iterable [ Type [ Element ]] = (), exclude : Iterable [ Type [ Element ]] = (), ) -> str : \"\"\"\u8f6c\u6362\u4e3a\u6301\u4e45\u5316\u5b57\u7b26\u4e32. Args: binary (bool, optional): \u662f\u5426\u9644\u5e26\u56fe\u7247\u6216\u58f0\u97f3\u7684\u4e8c\u8fdb\u5236. \u9ed8\u8ba4\u4e3a True. include (Iterable[Type[Element]], optional): \u7b5b\u9009, \u53ea\u5305\u542b\u672c\u53c2\u6570\u63d0\u4f9b\u7684\u5143\u7d20\u7c7b\u578b. exclude (Iterable[Type[Element]], optional): \u7b5b\u9009, \u6392\u9664\u672c\u53c2\u6570\u63d0\u4f9b\u7684\u5143\u7d20\u7c7b\u578b. Raises: ValueError: \u540c\u65f6\u63d0\u4f9b include \u4e0e exclude Returns: str: \u6301\u4e45\u5316\u5b57\u7b26\u4e32. \u4e0d\u662f Mirai Code. \"\"\" string_list = [] include = tuple ( include ) exclude = tuple ( exclude ) if include and exclude : raise ValueError ( \"Can not present include and exclude at same time!\" ) for i in self . __root__ : if ( ( include and isinstance ( i , include )) or ( exclude and not isinstance ( i , exclude )) or not ( include or exclude ) ): if isinstance ( i , Plain ): string_list . append ( i . asPersistentString () . replace ( \"[\" , \"[_\" )) elif not isinstance ( i , MultimediaElement ) or binary : string_list . append ( i . asPersistentString ()) else : string_list . append ( i . asNoBinaryPersistentString ()) return \"\" . join ( string_list ) async def download_binary ( self ) -> Self : \"\"\"\u4e0b\u8f7d\u6d88\u606f\u4e2d\u6240\u6709\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u5e76\u4fdd\u5b58\u5728\u5143\u7d20\u5b9e\u4f8b\u5185\"\"\" for elem in self . __root__ : if isinstance ( elem , MultimediaElement ): await elem . get_bytes () return self @classmethod def fromPersistentString ( cls , string : str ) -> \"MessageChain\" : \"\"\"\u4ece\u6301\u4e45\u5316\u5b57\u7b26\u4e32\u751f\u6210\u6d88\u606f\u94fe. Returns: MessageChain: \u8fd8\u539f\u7684\u6d88\u606f\u94fe. \"\"\" result = [] for match in re . split ( r \"(\\[mirai:.+?\\])\" , string ): if mirai := re . fullmatch ( r \"\\[mirai:(.+?)(:(.+?))\\]\" , match ): j_string = mirai . group ( 3 ) element_cls = ELEMENT_MAPPING [ mirai . group ( 1 )] result . append ( element_cls . parse_obj ( json . loads ( j_string ))) elif match : result . append ( Plain ( match . replace ( \"[_\" , \"[\" ))) return MessageChain . create ( result ) def _to_mapping_str ( self , * , remove_source : bool = True , remove_quote : bool = True , remove_extra_space : bool = False , ) -> Tuple [ str , Dict [ str , Element ]]: \"\"\"\u8f6c\u6362\u6d88\u606f\u94fe\u4e3a\u6620\u5c04\u5b57\u7b26\u4e32\u4e0e\u6620\u5c04\u5b57\u5178\u7684\u5143\u7ec4. Args: remove_source (bool, optional): \u662f\u5426\u79fb\u9664\u6d88\u606f\u94fe\u4e2d\u7684 Source \u5143\u7d20. \u9ed8\u8ba4\u4e3a True. remove_quote (bool, optional): \u662f\u5426\u79fb\u9664\u6d88\u606f\u94fe\u4e2d\u7684 Quote \u5143\u7d20. \u9ed8\u8ba4\u4e3a True. remove_extra_space (bool, optional): \u662f\u5426\u79fb\u9664 Quote At AtAll \u7684\u591a\u4f59\u7a7a\u683c. \u9ed8\u8ba4\u4e3a False. Returns: Tuple[str, Dict[str, Element]]: \u751f\u6210\u7684\u6620\u5c04\u5b57\u7b26\u4e32\u4e0e\u6620\u5c04\u5b57\u5178\u7684\u5143\u7ec4 \"\"\" elem_mapping : Dict [ str , Element ] = {} elem_str_list : List [ str ] = [] for i , elem in enumerate ( self . __root__ ): if not isinstance ( elem , Plain ): if remove_quote and isinstance ( elem , Quote ): continue if remove_source and isinstance ( elem , Source ): continue elem_mapping [ str ( i )] = elem elem_str_list . append ( f \" \\x02 { i } _ { elem . type } \\x03 \" ) elif ( remove_extra_space and i # not first element and isinstance ( self . __root__ [ i - 1 ], ( Quote , At , AtAll ) ) # following elements which have an dumb trailing space and elem . text . startswith ( \" \" ) # extra space (count >= 2) ): elem_str_list . append ( elem . text [ 1 :]) else : elem_str_list . append ( elem . text ) return \"\" . join ( elem_str_list ), elem_mapping @classmethod def _from_mapping_string ( cls , string : str , mapping : Dict [ str , Element ]) -> \"MessageChain\" : \"\"\"\u4ece\u6620\u5c04\u5b57\u7b26\u4e32\u4e0e\u6620\u5c04\u5b57\u5178\u7684\u5143\u7ec4\u8fd8\u539f\u6d88\u606f\u94fe. Args: string (str): \u6620\u5c04\u5b57\u7b26\u4e32 mapping (Dict[int, Element]): \u6620\u5c04\u5b57\u5178. Returns: MessageChain: \u6784\u5efa\u7684\u6d88\u606f\u94fe \"\"\" elements : List [ Element ] = [] for x in re . split ( \"( \\x02\\\\ d+_ \\\\ w+ \\x03 )\" , string ): if x : if x [ 0 ] == \" \\x02 \" and x [ - 1 ] == \" \\x03 \" : index , class_name = x [ 1 : - 1 ] . split ( \"_\" ) if not isinstance ( mapping [ index ], ELEMENT_MAPPING [ class_name ]): raise ValueError ( \"Validation failed: not matching element type!\" ) elements . append ( mapping [ index ]) else : elements . append ( Plain ( x )) chain = cls ([], inline = True ) chain . __root__ = elements return chain def removeprefix ( self , prefix : str , * , copy : bool = True , skip_header : bool = True ) -> \"MessageChain\" : \"\"\"\u79fb\u9664\u6d88\u606f\u94fe\u524d\u7f00. Args: prefix (str): \u8981\u79fb\u9664\u7684\u524d\u7f00. copy (bool, optional): \u662f\u5426\u5728\u526f\u672c\u4e0a\u4fee\u6539, \u9ed8\u8ba4\u4e3a True. skip_header (bool, optional): \u662f\u5426\u8981\u5ffd\u7565 Source \u4e0e Quote \u7c7b\u578b\u67e5\u627e, \u9ed8\u8ba4\u4e3a True. (\u79fb\u9664\u540e\u4ecd\u4f1a\u5e26\u4e0a Source \u4e0e Quote) Returns: MessageChain: \u4fee\u6539\u540e\u7684\u6d88\u606f\u94fe, \u82e5\u672a\u79fb\u9664\u5219\u539f\u6837\u8fd4\u56de. \"\"\" header = [] elements = [] if not skip_header : elements = self . __root__ [:] else : for element in self . __root__ : if isinstance ( element , ( Quote , Source )): header . append ( element ) else : elements . append ( element ) if copy : header = deepcopy ( header ) elements = deepcopy ( elements ) if not elements or not isinstance ( elements [ 0 ], Plain ): return self . copy () if copy else self if elements [ 0 ] . text . startswith ( prefix ): elements [ 0 ] . text = elements [ 0 ] . text [ len ( prefix ) :] if copy : return MessageChain ( header + elements , inline = True ) self . __root__ = header + elements return self def removesuffix ( self , suffix : str , * , copy : bool = True ) -> \"MessageChain\" : \"\"\"\u79fb\u9664\u6d88\u606f\u94fe\u540e\u7f00. Args: suffix (str): \u8981\u79fb\u9664\u7684\u540e\u7f00. copy (bool, optional): \u662f\u5426\u5728\u526f\u672c\u4e0a\u4fee\u6539, \u9ed8\u8ba4\u4e3a True. Returns: MessageChain: \u4fee\u6539\u540e\u7684\u6d88\u606f\u94fe, \u82e5\u672a\u79fb\u9664\u5219\u539f\u6837\u8fd4\u56de. \"\"\" elements = deepcopy ( self . __root__ ) if copy else self . __root__ if not elements or not isinstance ( elements [ - 1 ], Plain ): return self . copy () if copy else self last_elem : Plain = elements [ - 1 ] if last_elem . text . endswith ( suffix ): last_elem . text = last_elem . text [: - len ( suffix )] if copy : return MessageChain ( elements , inline = True ) self . __root__ = elements return self def join ( self , * chains : Union [ \"MessageChain\" , Iterable [ \"MessageChain\" ]], merge : bool = True ) -> \"MessageChain\" : \"\"\"\u5c06\u591a\u4e2a\u6d88\u606f\u94fe\u8fde\u63a5\u8d77\u6765, \u5e76\u5728\u5176\u4e2d\u63d2\u5165\u81ea\u8eab. Args: *chains (Iterable[MessageChain]): \u8981\u8fde\u63a5\u7684\u6d88\u606f\u94fe. merge (bool, optional): \u662f\u5426\u5408\u5e76\u6d88\u606f\u94fe\u6587\u672c, \u9ed8\u8ba4\u4e3a True. Returns: MessageChain: \u8fde\u63a5\u540e\u7684\u6d88\u606f\u94fe. \"\"\" result : List [ Element ] = [] list_chains : List [ MessageChain ] = [] for chain in chains : if isinstance ( chain , MessageChain ): list_chains . append ( chain ) else : list_chains . extend ( chain ) for chain in list_chains : if chain is not chains [ 0 ]: result . extend ( deepcopy ( self . __root__ )) result . extend ( deepcopy ( chain . __root__ )) return MessageChain ( result , inline = True ) . merge () if merge else MessageChain ( result , inline = True ) def replace ( self , old : \"MessageChain | Iterable[Element] | Element\" , new : \"MessageChain | Iterable[Element] | Element\" , ) -> \"MessageChain\" : \"\"\"\u66ff\u6362\u6d88\u606f\u94fe\u4e2d\u7684\u4e00\u90e8\u5206. (\u5728\u526f\u672c\u4e0a\u64cd\u4f5c) Args: old (MessageChain): \u8981\u66ff\u6362\u7684\u6d88\u606f\u94fe. new (MessageChain): \u66ff\u6362\u540e\u7684\u6d88\u606f\u94fe. Returns: MessageChain: \u4fee\u6539\u540e\u7684\u6d88\u606f\u94fe, \u82e5\u672a\u66ff\u6362\u5219\u539f\u6837\u8fd4\u56de. \"\"\" if not isinstance ( old , MessageChain ): old = MessageChain . create ( old ) if not isinstance ( new , MessageChain ): new = MessageChain . create ( new ) index_list : List [ int ] = self . findSubChain ( old ) unzipped_new : List [ Union [ str , Element ]] = new . unzip () unzipped_old : List [ Union [ str , Element ]] = old . unzip () unzipped_self : List [ Union [ str , Element ]] = self . unzip () unzipped_result : List [ Union [ str , Element ]] = [] last_end : int = 0 for start in index_list : unzipped_result . extend ( unzipped_self [ last_end : start ]) last_end = start + len ( unzipped_old ) unzipped_result . extend ( unzipped_new ) unzipped_result . extend ( unzipped_self [ last_end :]) # Merge result result_list : List [ Element ] = [] char_stk : List [ str ] = [] for v in unzipped_result : if isinstance ( v , str ): char_stk . append ( v ) else : result_list . append ( Plain ( \"\" . join ( char_stk ))) char_stk = [] result_list . append ( v ) if char_stk : result_list . append ( Plain ( \"\" . join ( char_stk ))) return MessageChain ( result_list , inline = True ) __root__ class-attribute \ud83d\udd17 __root__ : List [ Element ] = None \u5e95\u5c42\u5143\u7d20\u5217\u8868 __contains__ \ud83d\udd17 __contains__ ( item : Union [ 'MessageChain' , Type [ Element_T ], Element_T , str ]) -> bool \u662f\u5426\u5305\u542b\u7279\u5b9a\u5bf9\u8c61 Source code in graia/ariadne/message/chain.py 228 229 230 231 232 def __contains__ ( self , item : Union [ \"MessageChain\" , Type [ Element_T ], Element_T , str ]) -> bool : \"\"\" \u662f\u5426\u5305\u542b\u7279\u5b9a\u5bf9\u8c61 \"\"\" return self . has ( item ) __getitem__ \ud83d\udd17 __getitem__ ( item : Union [ Tuple [ Type [ Element_T ], int ], Type [ Element_T ], int , slice ]) -> Union [ List [ Element ], Element , 'MessageChain' ] \u53ef\u901a\u8fc7\u5207\u7247\u53d6\u51fa\u5b50\u6d88\u606f\u94fe, \u6216\u5143\u7d20. \u901a\u8fc7 type, count \u578b\u5143\u7ec4\u53d6\u51fa\u524d count \u4e2a type \u5143\u7d20\u7ec4\u6210\u7684\u5217\u8868 \u901a\u8fc7 type \u53d6\u51fa\u5c5e\u4e8e type \u7684\u5143\u7d20\u5217\u8868 \u901a\u8fc7 int \u53d6\u51fa\u5bf9\u5e94\u4f4d\u7f6e\u5143\u7d20. Parameters: Name Type Description Default item Union [ Tuple [ Type [ Element ], int ], Type [ Element ], int , slice ] \u7d22\u5f15\u9879 required Returns: Type Description Union [ List [ Element ], Element , 'MessageChain'] Union[List[Element], Element, MessageChain]: \u7d22\u5f15\u7ed3\u679c. Source code in graia/ariadne/message/chain.py 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 def __getitem__ ( # type: ignore self , item : Union [ Tuple [ Type [ Element_T ], int ], Type [ Element_T ], int , slice ] ) -> Union [ List [ Element ], Element , \"MessageChain\" ]: \"\"\" \u53ef\u901a\u8fc7\u5207\u7247\u53d6\u51fa\u5b50\u6d88\u606f\u94fe, \u6216\u5143\u7d20. \u901a\u8fc7 `type, count` \u578b\u5143\u7ec4\u53d6\u51fa\u524d `count` \u4e2a `type` \u5143\u7d20\u7ec4\u6210\u7684\u5217\u8868 \u901a\u8fc7 `type` \u53d6\u51fa\u5c5e\u4e8e `type` \u7684\u5143\u7d20\u5217\u8868 \u901a\u8fc7 `int` \u53d6\u51fa\u5bf9\u5e94\u4f4d\u7f6e\u5143\u7d20. Args: item (Union[Tuple[Type[Element], int], Type[Element], int, slice]): \u7d22\u5f15\u9879 Returns: Union[List[Element], Element, MessageChain]: \u7d22\u5f15\u7ed3\u679c. \"\"\" if isinstance ( item , type ) and issubclass ( item , Element ): return self . get ( item ) if isinstance ( item , tuple ): return self . get ( * item ) if isinstance ( item , int ): return self . __root__ [ item ] if isinstance ( item , slice ): return MessageChain ( self . __root__ [ item ], inline = True ) raise NotImplementedError ( f \" { item } is not allowed for item getting\" ) _from_mapping_string classmethod \ud83d\udd17 _from_mapping_string ( string : str , mapping : Dict [ str , Element ]) -> 'MessageChain' \u4ece\u6620\u5c04\u5b57\u7b26\u4e32\u4e0e\u6620\u5c04\u5b57\u5178\u7684\u5143\u7ec4\u8fd8\u539f\u6d88\u606f\u94fe. Parameters: Name Type Description Default string str \u6620\u5c04\u5b57\u7b26\u4e32 required mapping Dict [ int , Element ] \u6620\u5c04\u5b57\u5178. required Returns: Name Type Description MessageChain 'MessageChain' \u6784\u5efa\u7684\u6d88\u606f\u94fe Source code in graia/ariadne/message/chain.py 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 @classmethod def _from_mapping_string ( cls , string : str , mapping : Dict [ str , Element ]) -> \"MessageChain\" : \"\"\"\u4ece\u6620\u5c04\u5b57\u7b26\u4e32\u4e0e\u6620\u5c04\u5b57\u5178\u7684\u5143\u7ec4\u8fd8\u539f\u6d88\u606f\u94fe. Args: string (str): \u6620\u5c04\u5b57\u7b26\u4e32 mapping (Dict[int, Element]): \u6620\u5c04\u5b57\u5178. Returns: MessageChain: \u6784\u5efa\u7684\u6d88\u606f\u94fe \"\"\" elements : List [ Element ] = [] for x in re . split ( \"( \\x02\\\\ d+_ \\\\ w+ \\x03 )\" , string ): if x : if x [ 0 ] == \" \\x02 \" and x [ - 1 ] == \" \\x03 \" : index , class_name = x [ 1 : - 1 ] . split ( \"_\" ) if not isinstance ( mapping [ index ], ELEMENT_MAPPING [ class_name ]): raise ValueError ( \"Validation failed: not matching element type!\" ) elements . append ( mapping [ index ]) else : elements . append ( Plain ( x )) chain = cls ([], inline = True ) chain . __root__ = elements return chain _to_mapping_str \ud83d\udd17 _to_mapping_str ( * , remove_source : bool = True , remove_quote : bool = True , remove_extra_space : bool = False ) -> Tuple [ str , Dict [ str , Element ]] \u8f6c\u6362\u6d88\u606f\u94fe\u4e3a\u6620\u5c04\u5b57\u7b26\u4e32\u4e0e\u6620\u5c04\u5b57\u5178\u7684\u5143\u7ec4. Parameters: Name Type Description Default remove_source bool \u662f\u5426\u79fb\u9664\u6d88\u606f\u94fe\u4e2d\u7684 Source \u5143\u7d20. \u9ed8\u8ba4\u4e3a True. True remove_quote bool \u662f\u5426\u79fb\u9664\u6d88\u606f\u94fe\u4e2d\u7684 Quote \u5143\u7d20. \u9ed8\u8ba4\u4e3a True. True remove_extra_space bool \u662f\u5426\u79fb\u9664 Quote At AtAll \u7684\u591a\u4f59\u7a7a\u683c. \u9ed8\u8ba4\u4e3a False. False Returns: Type Description Tuple [ str , Dict [ str , Element ]] Tuple[str, Dict[str, Element]]: \u751f\u6210\u7684\u6620\u5c04\u5b57\u7b26\u4e32\u4e0e\u6620\u5c04\u5b57\u5178\u7684\u5143\u7ec4 Source code in graia/ariadne/message/chain.py 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 def _to_mapping_str ( self , * , remove_source : bool = True , remove_quote : bool = True , remove_extra_space : bool = False , ) -> Tuple [ str , Dict [ str , Element ]]: \"\"\"\u8f6c\u6362\u6d88\u606f\u94fe\u4e3a\u6620\u5c04\u5b57\u7b26\u4e32\u4e0e\u6620\u5c04\u5b57\u5178\u7684\u5143\u7ec4. Args: remove_source (bool, optional): \u662f\u5426\u79fb\u9664\u6d88\u606f\u94fe\u4e2d\u7684 Source \u5143\u7d20. \u9ed8\u8ba4\u4e3a True. remove_quote (bool, optional): \u662f\u5426\u79fb\u9664\u6d88\u606f\u94fe\u4e2d\u7684 Quote \u5143\u7d20. \u9ed8\u8ba4\u4e3a True. remove_extra_space (bool, optional): \u662f\u5426\u79fb\u9664 Quote At AtAll \u7684\u591a\u4f59\u7a7a\u683c. \u9ed8\u8ba4\u4e3a False. Returns: Tuple[str, Dict[str, Element]]: \u751f\u6210\u7684\u6620\u5c04\u5b57\u7b26\u4e32\u4e0e\u6620\u5c04\u5b57\u5178\u7684\u5143\u7ec4 \"\"\" elem_mapping : Dict [ str , Element ] = {} elem_str_list : List [ str ] = [] for i , elem in enumerate ( self . __root__ ): if not isinstance ( elem , Plain ): if remove_quote and isinstance ( elem , Quote ): continue if remove_source and isinstance ( elem , Source ): continue elem_mapping [ str ( i )] = elem elem_str_list . append ( f \" \\x02 { i } _ { elem . type } \\x03 \" ) elif ( remove_extra_space and i # not first element and isinstance ( self . __root__ [ i - 1 ], ( Quote , At , AtAll ) ) # following elements which have an dumb trailing space and elem . text . startswith ( \" \" ) # extra space (count >= 2) ): elem_str_list . append ( elem . text [ 1 :]) else : elem_str_list . append ( elem . text ) return \"\" . join ( elem_str_list ), elem_mapping append \ud83d\udd17 append ( element : Union [ Element , str ], copy : bool = False ) -> 'MessageChain' \u5411\u6d88\u606f\u94fe\u6700\u540e\u8ffd\u52a0\u5355\u4e2a\u5143\u7d20 Parameters: Name Type Description Default element Element \u8981\u6dfb\u52a0\u7684\u5143\u7d20 required copy bool \u662f\u5426\u8981\u5728\u526f\u672c\u4e0a\u4fee\u6539. False Returns: Name Type Description MessageChain 'MessageChain' copy = True \u65f6\u8fd4\u56de\u526f\u672c, \u5426\u5219\u8fd4\u56de\u81ea\u5df1\u7684\u5f15\u7528. Source code in graia/ariadne/message/chain.py 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 def append ( self , element : Union [ Element , str ], copy : bool = False ) -> \"MessageChain\" : \"\"\" \u5411\u6d88\u606f\u94fe\u6700\u540e\u8ffd\u52a0\u5355\u4e2a\u5143\u7d20 Args: element (Element): \u8981\u6dfb\u52a0\u7684\u5143\u7d20 copy (bool): \u662f\u5426\u8981\u5728\u526f\u672c\u4e0a\u4fee\u6539. Returns: MessageChain: copy = True \u65f6\u8fd4\u56de\u526f\u672c, \u5426\u5219\u8fd4\u56de\u81ea\u5df1\u7684\u5f15\u7528. \"\"\" chain_ref = self . copy () if copy else self if isinstance ( element , str ): element = Plain ( element ) chain_ref . __root__ . append ( element ) return chain_ref asDisplay \ud83d\udd17 asDisplay () -> str \u83b7\u53d6\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8868\u793a\u7684\u6d88\u606f\u94fe, \u4e14\u8d8b\u4e8e\u901a\u5e38\u4f60\u89c1\u5230\u7684\u6837\u5b50. Returns: Name Type Description str str \u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8868\u793a\u7684\u6d88\u606f\u94fe Source code in graia/ariadne/message/chain.py 213 214 215 216 217 218 219 220 def asDisplay ( self ) -> str : \"\"\" \u83b7\u53d6\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8868\u793a\u7684\u6d88\u606f\u94fe, \u4e14\u8d8b\u4e8e\u901a\u5e38\u4f60\u89c1\u5230\u7684\u6837\u5b50. Returns: str: \u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8868\u793a\u7684\u6d88\u606f\u94fe \"\"\" return \"\" . join ( i . asDisplay () for i in self . __root__ ) asPersistentString \ud83d\udd17 asPersistentString ( * , binary : bool = True , include : Iterable [ Type [ Element ]] = (), exclude : Iterable [ Type [ Element ]] = ()) -> str \u8f6c\u6362\u4e3a\u6301\u4e45\u5316\u5b57\u7b26\u4e32. Parameters: Name Type Description Default binary bool \u662f\u5426\u9644\u5e26\u56fe\u7247\u6216\u58f0\u97f3\u7684\u4e8c\u8fdb\u5236. \u9ed8\u8ba4\u4e3a True. True include Iterable [ Type [ Element ]] \u7b5b\u9009, \u53ea\u5305\u542b\u672c\u53c2\u6570\u63d0\u4f9b\u7684\u5143\u7d20\u7c7b\u578b. () exclude Iterable [ Type [ Element ]] \u7b5b\u9009, \u6392\u9664\u672c\u53c2\u6570\u63d0\u4f9b\u7684\u5143\u7d20\u7c7b\u578b. () Raises: Type Description ValueError \u540c\u65f6\u63d0\u4f9b include \u4e0e exclude Returns: Name Type Description str str \u6301\u4e45\u5316\u5b57\u7b26\u4e32. \u4e0d\u662f Mirai Code. Source code in graia/ariadne/message/chain.py 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 def asPersistentString ( self , * , binary : bool = True , include : Iterable [ Type [ Element ]] = (), exclude : Iterable [ Type [ Element ]] = (), ) -> str : \"\"\"\u8f6c\u6362\u4e3a\u6301\u4e45\u5316\u5b57\u7b26\u4e32. Args: binary (bool, optional): \u662f\u5426\u9644\u5e26\u56fe\u7247\u6216\u58f0\u97f3\u7684\u4e8c\u8fdb\u5236. \u9ed8\u8ba4\u4e3a True. include (Iterable[Type[Element]], optional): \u7b5b\u9009, \u53ea\u5305\u542b\u672c\u53c2\u6570\u63d0\u4f9b\u7684\u5143\u7d20\u7c7b\u578b. exclude (Iterable[Type[Element]], optional): \u7b5b\u9009, \u6392\u9664\u672c\u53c2\u6570\u63d0\u4f9b\u7684\u5143\u7d20\u7c7b\u578b. Raises: ValueError: \u540c\u65f6\u63d0\u4f9b include \u4e0e exclude Returns: str: \u6301\u4e45\u5316\u5b57\u7b26\u4e32. \u4e0d\u662f Mirai Code. \"\"\" string_list = [] include = tuple ( include ) exclude = tuple ( exclude ) if include and exclude : raise ValueError ( \"Can not present include and exclude at same time!\" ) for i in self . __root__ : if ( ( include and isinstance ( i , include )) or ( exclude and not isinstance ( i , exclude )) or not ( include or exclude ) ): if isinstance ( i , Plain ): string_list . append ( i . asPersistentString () . replace ( \"[\" , \"[_\" )) elif not isinstance ( i , MultimediaElement ) or binary : string_list . append ( i . asPersistentString ()) else : string_list . append ( i . asNoBinaryPersistentString ()) return \"\" . join ( string_list ) asSendable \ud83d\udd17 asSendable () -> 'MessageChain' \u5c06\u6d88\u606f\u94fe\u8f6c\u6362\u4e3a\u53ef\u53d1\u9001\u5f62\u5f0f (\u53bb\u9664 Source, Quote, File) Returns: Name Type Description MessageChain 'MessageChain' \u8f6c\u6362\u540e\u7684\u6d88\u606f\u94fe. Source code in graia/ariadne/message/chain.py 536 537 538 539 540 541 542 def asSendable ( self ) -> \"MessageChain\" : \"\"\"\u5c06\u6d88\u606f\u94fe\u8f6c\u6362\u4e3a\u53ef\u53d1\u9001\u5f62\u5f0f (\u53bb\u9664 Source, Quote, File) Returns: MessageChain: \u8f6c\u6362\u540e\u7684\u6d88\u606f\u94fe. \"\"\" return self . exclude ( Source , Quote , File ) build_chain staticmethod \ud83d\udd17 build_chain ( obj : Iterable [ Union [ dict , Element , str ]]) -> List [ Element ] \u5185\u90e8\u63a5\u53e3, \u4f1a\u81ea\u52a8\u53cd\u5e8f\u5217\u5316\u5bf9\u8c61\u5e76\u751f\u6210. Parameters: Name Type Description Default obj Iterable [ Union [ dict , Element , str ]] \u9700\u8981\u53cd\u5e8f\u5217\u5316\u7684\u5bf9\u8c61 required Returns: Type Description List [ Element ] List[Element]: \u5185\u90e8\u627f\u8f7d\u6709\u5c3d\u91cf\u6709\u6548\u7684\u6d88\u606f\u5143\u7d20\u7684\u5217\u8868 Source code in graia/ariadne/message/chain.py 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 @staticmethod def build_chain ( obj : Iterable [ Union [ dict , Element , str ]]) -> List [ Element ]: \"\"\"\u5185\u90e8\u63a5\u53e3, \u4f1a\u81ea\u52a8\u53cd\u5e8f\u5217\u5316\u5bf9\u8c61\u5e76\u751f\u6210. Args: obj (Iterable[Union[dict, Element, str]]): \u9700\u8981\u53cd\u5e8f\u5217\u5316\u7684\u5bf9\u8c61 Returns: List[Element]: \u5185\u90e8\u627f\u8f7d\u6709\u5c3d\u91cf\u6709\u6548\u7684\u6d88\u606f\u5143\u7d20\u7684\u5217\u8868 \"\"\" element_list : List [ Element ] = [] for i in obj : if isinstance ( i , Element ): element_list . append ( i ) elif isinstance ( i , dict ) and \"type\" in i : for element_cls in gen_subclass ( Element ): if element_cls . __name__ == i [ \"type\" ]: element_list . append ( element_cls . parse_obj ( i )) break elif isinstance ( i , str ): element_list . append ( Plain ( i )) return element_list copy \ud83d\udd17 copy () -> 'MessageChain' \u62f7\u8d1d\u672c\u6d88\u606f\u94fe. Returns: Name Type Description MessageChain 'MessageChain' \u62f7\u8d1d\u7684\u526f\u672c. Source code in graia/ariadne/message/chain.py 497 498 499 500 501 502 503 504 def copy ( self ) -> \"MessageChain\" : \"\"\" \u62f7\u8d1d\u672c\u6d88\u606f\u94fe. Returns: MessageChain: \u62f7\u8d1d\u7684\u526f\u672c. \"\"\" return MessageChain ( deepcopy ( self . __root__ ), inline = True ) count \ud83d\udd17 count ( element : Union [ Type [ Element_T ], Element_T ]) -> int \u7edf\u8ba1\u5171\u6709\u591a\u5c11\u4e2a\u6307\u5b9a\u7684\u5143\u7d20. Parameters: Name Type Description Default element Type [ Element ] | Element \u5143\u7d20\u6216\u5143\u7d20\u7c7b\u578b required Returns: Name Type Description int int \u5143\u7d20\u6570\u91cf Source code in graia/ariadne/message/chain.py 522 523 524 525 526 527 528 529 530 531 532 533 534 def count ( self , element : Union [ Type [ Element_T ], Element_T ]) -> int : \"\"\" \u7edf\u8ba1\u5171\u6709\u591a\u5c11\u4e2a\u6307\u5b9a\u7684\u5143\u7d20. Args: element (Type[Element] | Element): \u5143\u7d20\u6216\u5143\u7d20\u7c7b\u578b Returns: int: \u5143\u7d20\u6570\u91cf \"\"\" if isinstance ( element , Element ): return sum ( i == element for i in self . __root__ ) return sum ( isinstance ( i , element ) for i in self . __root__ ) create classmethod \ud83d\udd17 create ( * elements : Union [ Iterable [ Element ], Element , str ]) -> 'MessageChain' \u521b\u5efa\u6d88\u606f\u94fe. \u6bd4\u8d77\u76f4\u63a5\u5b9e\u4f8b\u5316, \u672c\u65b9\u6cd5\u62e5\u6709\u66f4\u4e30\u5bcc\u7684\u8f93\u5165\u5b9e\u4f8b\u7c7b\u578b\u652f\u6301. Parameters: Name Type Description Default *elements Union [ Iterable [ Element ], Element , str ] \u5143\u7d20\u7684\u5bb9\u5668, \u4e3a\u627f\u8f7d\u5143\u7d20\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61/\u5355\u5143\u7d20\u5b9e\u4f8b, \u5b57\u7b26\u4e32\u4f1a\u88ab\u81ea\u52a8\u4e0d\u53ef\u9006\u7684\u8f6c\u6362\u4e3a Plain () Returns: Name Type Description MessageChain 'MessageChain' \u521b\u5efa\u7684\u6d88\u606f\u94fe Source code in graia/ariadne/message/chain.py 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 @classmethod def create ( cls , * elements : Union [ Iterable [ Element ], Element , str ]) -> \"MessageChain\" : \"\"\" \u521b\u5efa\u6d88\u606f\u94fe. \u6bd4\u8d77\u76f4\u63a5\u5b9e\u4f8b\u5316, \u672c\u65b9\u6cd5\u62e5\u6709\u66f4\u4e30\u5bcc\u7684\u8f93\u5165\u5b9e\u4f8b\u7c7b\u578b\u652f\u6301. Args: *elements (Union[Iterable[Element], Element, str]): \\ \u5143\u7d20\u7684\u5bb9\u5668, \u4e3a\u627f\u8f7d\u5143\u7d20\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61/\u5355\u5143\u7d20\u5b9e\u4f8b, \\ \u5b57\u7b26\u4e32\u4f1a\u88ab\u81ea\u52a8\u4e0d\u53ef\u9006\u7684\u8f6c\u6362\u4e3a `Plain` Returns: MessageChain: \u521b\u5efa\u7684\u6d88\u606f\u94fe \"\"\" element_list = [] for i in elements : if isinstance ( i , Element ): element_list . append ( i ) elif isinstance ( i , str ): element_list . append ( Plain ( i )) else : element_list . extend ( cls . build_chain ( i )) return cls ( __root__ = element_list , inline = True ) download_binary async \ud83d\udd17 download_binary () -> Self \u4e0b\u8f7d\u6d88\u606f\u4e2d\u6240\u6709\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u5e76\u4fdd\u5b58\u5728\u5143\u7d20\u5b9e\u4f8b\u5185 Source code in graia/ariadne/message/chain.py 631 632 633 634 635 636 async def download_binary ( self ) -> Self : \"\"\"\u4e0b\u8f7d\u6d88\u606f\u4e2d\u6240\u6709\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u5e76\u4fdd\u5b58\u5728\u5143\u7d20\u5b9e\u4f8b\u5185\"\"\" for elem in self . __root__ : if isinstance ( elem , MultimediaElement ): await elem . get_bytes () return self endswith \ud83d\udd17 endswith ( string : str ) -> bool \u5224\u5b9a\u6d88\u606f\u94fe\u662f\u5426\u4ee5\u76f8\u5e94\u5b57\u7b26\u4e32\u7ed3\u5c3e Parameters: Name Type Description Default string str \u9700\u8981\u5224\u65ad\u7684\u5b57\u7b26\u4e32 required Returns: Name Type Description bool bool \u662f\u5426\u4ee5\u6b64\u5b57\u7b26\u4e32\u7ed3\u5c3e Source code in graia/ariadne/message/chain.py 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 def endswith ( self , string : str ) -> bool : \"\"\" \u5224\u5b9a\u6d88\u606f\u94fe\u662f\u5426\u4ee5\u76f8\u5e94\u5b57\u7b26\u4e32\u7ed3\u5c3e Args: string (str): \u9700\u8981\u5224\u65ad\u7684\u5b57\u7b26\u4e32 Returns: bool: \u662f\u5426\u4ee5\u6b64\u5b57\u7b26\u4e32\u7ed3\u5c3e \"\"\" if not self . __root__ or not isinstance ( self . __root__ [ - 1 ], Plain ): return False last_element : Plain = self . __root__ [ - 1 ] return last_element . text . endswith ( string ) exclude \ud83d\udd17 exclude ( * types : Type [ Element ]) -> 'MessageChain' \u5c06\u9664\u4e86\u5728\u7ed9\u51fa\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b\u4e2d\u7b26\u5408\u7684\u6d88\u606f\u5143\u7d20\u91cd\u65b0\u5305\u88c5\u4e3a\u4e00\u4e2a\u65b0\u7684\u6d88\u606f\u94fe Parameters: Name Type Description Default *types Type [ Element ] \u5c06\u6392\u9664\u5728\u5916\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b () Returns: Name Type Description MessageChain 'MessageChain' \u8fd4\u56de\u7684\u6d88\u606f\u94fe\u4e2d\u4e0d\u5305\u542b\u53c2\u6570\u4e2d\u7ed9\u51fa\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b Source code in graia/ariadne/message/chain.py 318 319 320 321 322 323 324 325 326 327 def exclude ( self , * types : Type [ Element ]) -> \"MessageChain\" : \"\"\"\u5c06\u9664\u4e86\u5728\u7ed9\u51fa\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b\u4e2d\u7b26\u5408\u7684\u6d88\u606f\u5143\u7d20\u91cd\u65b0\u5305\u88c5\u4e3a\u4e00\u4e2a\u65b0\u7684\u6d88\u606f\u94fe Args: *types (Type[Element]): \u5c06\u6392\u9664\u5728\u5916\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b Returns: MessageChain: \u8fd4\u56de\u7684\u6d88\u606f\u94fe\u4e2d\u4e0d\u5305\u542b\u53c2\u6570\u4e2d\u7ed9\u51fa\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b \"\"\" return MessageChain ([ i for i in self . copy () . __root__ if type ( i ) not in types ], inline = True ) extend \ud83d\udd17 extend ( * content : Union [ 'MessageChain' , Element , List [ Union [ Element , str ]]], copy : bool = False ) -> 'MessageChain' \u5411\u6d88\u606f\u94fe\u6700\u540e\u6dfb\u52a0\u5143\u7d20/\u5143\u7d20\u5217\u8868/\u6d88\u606f\u94fe Parameters: Name Type Description Default *content Union [ MessageChain , Element , List [ Element ]] \u8981\u6dfb\u52a0\u7684\u5143\u7d20/\u5143\u7d20\u5bb9\u5668. () copy bool \u662f\u5426\u8981\u5728\u526f\u672c\u4e0a\u4fee\u6539. False Returns: Name Type Description MessageChain 'MessageChain' copy = True \u65f6\u8fd4\u56de\u526f\u672c, \u5426\u5219\u8fd4\u56de\u81ea\u5df1\u7684\u5f15\u7528. Source code in graia/ariadne/message/chain.py 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 def extend ( self , * content : Union [ \"MessageChain\" , Element , List [ Union [ Element , str ]]], copy : bool = False , ) -> \"MessageChain\" : \"\"\" \u5411\u6d88\u606f\u94fe\u6700\u540e\u6dfb\u52a0\u5143\u7d20/\u5143\u7d20\u5217\u8868/\u6d88\u606f\u94fe Args: *content (Union[MessageChain, Element, List[Element]]): \u8981\u6dfb\u52a0\u7684\u5143\u7d20/\u5143\u7d20\u5bb9\u5668. copy (bool): \u662f\u5426\u8981\u5728\u526f\u672c\u4e0a\u4fee\u6539. Returns: MessageChain: copy = True \u65f6\u8fd4\u56de\u526f\u672c, \u5426\u5219\u8fd4\u56de\u81ea\u5df1\u7684\u5f15\u7528. \"\"\" result = [] for i in content : if isinstance ( i , Element ): result . append ( i ) elif isinstance ( i , str ): result . append ( Plain ( i )) elif isinstance ( i , MessageChain ): result . extend ( i . __root__ ) else : for e in i : if isinstance ( e , str ): result . append ( Plain ( e )) else : result . append ( e ) if copy : return MessageChain ( deepcopy ( self . __root__ ) + result , inline = True ) self . __root__ . extend ( result ) return self findSubChain \ud83d\udd17 findSubChain ( subchain : Union [ 'MessageChain' , List [ Element ]]) -> List [ int ] \u5224\u65ad\u6d88\u606f\u94fe\u662f\u5426\u542b\u6709\u5b50\u94fe. \u4f7f\u7528 KMP \u7b97\u6cd5. Parameters: Name Type Description Default subchain Union [ MessageChain , List [ Element ]] \u8981\u5224\u65ad\u7684\u5b50\u94fe. required Returns: Type Description List [ int ] List[int]: \u6240\u6709\u627e\u5230\u7684\u4e0b\u6807. Source code in graia/ariadne/message/chain.py 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 def findSubChain ( self , subchain : Union [ \"MessageChain\" , List [ Element ]]) -> List [ int ]: \"\"\"\u5224\u65ad\u6d88\u606f\u94fe\u662f\u5426\u542b\u6709\u5b50\u94fe. \u4f7f\u7528 KMP \u7b97\u6cd5. Args: subchain (Union[MessageChain, List[Element]]): \u8981\u5224\u65ad\u7684\u5b50\u94fe. Returns: List[int]: \u6240\u6709\u627e\u5230\u7684\u4e0b\u6807. \"\"\" pattern : List [ Union [ str , Element ]] = ( subchain . unzip () if isinstance ( subchain , MessageChain ) else MessageChain ( subchain , inline = True ) . unzip () ) match_target : List [ Union [ str , Element ]] = self . unzip () if len ( match_target ) < len ( pattern ): return [] fallback : List [ int ] = [ 0 for _ in pattern ] current_fb : int = 0 # current fallback index for i in range ( 1 , len ( pattern )): while current_fb and pattern [ i ] != pattern [ current_fb ]: current_fb = fallback [ current_fb - 1 ] if pattern [ i ] == pattern [ current_fb ]: current_fb += 1 fallback [ i ] = current_fb match_index : List [ int ] = [] ptr = 0 for i , e in enumerate ( match_target ): while ptr and e != pattern [ ptr ]: ptr = fallback [ ptr - 1 ] if e == pattern [ ptr ]: ptr += 1 if ptr == len ( pattern ): match_index . append ( i - ptr + 1 ) ptr = fallback [ ptr - 1 ] return match_index fromPersistentString classmethod \ud83d\udd17 fromPersistentString ( string : str ) -> 'MessageChain' \u4ece\u6301\u4e45\u5316\u5b57\u7b26\u4e32\u751f\u6210\u6d88\u606f\u94fe. Returns: Name Type Description MessageChain 'MessageChain' \u8fd8\u539f\u7684\u6d88\u606f\u94fe. Source code in graia/ariadne/message/chain.py 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 @classmethod def fromPersistentString ( cls , string : str ) -> \"MessageChain\" : \"\"\"\u4ece\u6301\u4e45\u5316\u5b57\u7b26\u4e32\u751f\u6210\u6d88\u606f\u94fe. Returns: MessageChain: \u8fd8\u539f\u7684\u6d88\u606f\u94fe. \"\"\" result = [] for match in re . split ( r \"(\\[mirai:.+?\\])\" , string ): if mirai := re . fullmatch ( r \"\\[mirai:(.+?)(:(.+?))\\]\" , match ): j_string = mirai . group ( 3 ) element_cls = ELEMENT_MAPPING [ mirai . group ( 1 )] result . append ( element_cls . parse_obj ( json . loads ( j_string ))) elif match : result . append ( Plain ( match . replace ( \"[_\" , \"[\" ))) return MessageChain . create ( result ) get \ud83d\udd17 get ( element_class : Type [ Element_T ], count : int = - 1 ) -> List [ Element_T ] \u83b7\u53d6\u6d88\u606f\u94fe\u4e2d\u6240\u6709\u7279\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u5143\u7d20 Parameters: Name Type Description Default element_class T \u6307\u5b9a\u7684\u6d88\u606f\u5143\u7d20\u7684\u7c7b\u578b, \u4f8b\u5982 \"Plain\", \"At\", \"Image\" \u7b49. required Returns: Type Description List [ Element_T ] List[T]: \u83b7\u53d6\u5230\u7684\u7b26\u5408\u8981\u6c42\u7684\u6240\u6709\u6d88\u606f\u5143\u7d20; \u53e6: \u53ef\u80fd\u662f\u7a7a\u5217\u8868([]). Source code in graia/ariadne/message/chain.py 174 175 176 177 178 179 180 181 182 183 184 185 186 def get ( self , element_class : Type [ Element_T ], count : int = - 1 ) -> List [ Element_T ]: \"\"\" \u83b7\u53d6\u6d88\u606f\u94fe\u4e2d\u6240\u6709\u7279\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u5143\u7d20 Args: element_class (T): \u6307\u5b9a\u7684\u6d88\u606f\u5143\u7d20\u7684\u7c7b\u578b, \u4f8b\u5982 \"Plain\", \"At\", \"Image\" \u7b49. Returns: List[T]: \u83b7\u53d6\u5230\u7684\u7b26\u5408\u8981\u6c42\u7684\u6240\u6709\u6d88\u606f\u5143\u7d20; \u53e6: \u53ef\u80fd\u662f\u7a7a\u5217\u8868([]). \"\"\" if count == - 1 : count = len ( self . __root__ ) return [ i for i in self . __root__ if isinstance ( i , element_class )][: count ] getFirst \ud83d\udd17 getFirst ( element_class : Type [ Element_T ]) -> Element_T \u83b7\u53d6\u6d88\u606f\u94fe\u4e2d\u7b2c 1 \u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u5143\u7d20 Parameters: Name Type Description Default element_class Type [ Element_T ] \u6307\u5b9a\u7684\u6d88\u606f\u5143\u7d20\u7684\u7c7b\u578b, \u4f8b\u5982 \"Plain\", \"At\", \"Image\" \u7b49. required Returns: Name Type Description Element_T Element_T \u6d88\u606f\u94fe\u7b2c 1 \u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u5143\u7d20 Source code in graia/ariadne/message/chain.py 201 202 203 204 205 206 207 208 209 210 211 def getFirst ( self , element_class : Type [ Element_T ]) -> Element_T : \"\"\" \u83b7\u53d6\u6d88\u606f\u94fe\u4e2d\u7b2c 1 \u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u5143\u7d20 Args: element_class (Type[Element_T]): \u6307\u5b9a\u7684\u6d88\u606f\u5143\u7d20\u7684\u7c7b\u578b, \u4f8b\u5982 \"Plain\", \"At\", \"Image\" \u7b49. Returns: Element_T: \u6d88\u606f\u94fe\u7b2c 1 \u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u5143\u7d20 \"\"\" return self . getOne ( element_class , 0 ) getOne \ud83d\udd17 getOne ( element_class : Type [ Element_T ], index : int ) -> Element_T \u83b7\u53d6\u6d88\u606f\u94fe\u4e2d\u7b2c index + 1 \u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u5143\u7d20 Parameters: Name Type Description Default element_class Type [ Element_T ] \u6307\u5b9a\u7684\u6d88\u606f\u5143\u7d20\u7684\u7c7b\u578b, \u4f8b\u5982 \"Plain\", \"At\", \"Image\" \u7b49. required index int \u7d22\u5f15, \u4ece 0 \u5f00\u59cb\u6570 required Returns: Name Type Description Element_T Element_T \u6d88\u606f\u94fe\u7b2c index + 1 \u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u5143\u7d20 Source code in graia/ariadne/message/chain.py 188 189 190 191 192 193 194 195 196 197 198 199 def getOne ( self , element_class : Type [ Element_T ], index : int ) -> Element_T : \"\"\" \u83b7\u53d6\u6d88\u606f\u94fe\u4e2d\u7b2c index + 1 \u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u5143\u7d20 Args: element_class (Type[Element_T]): \u6307\u5b9a\u7684\u6d88\u606f\u5143\u7d20\u7684\u7c7b\u578b, \u4f8b\u5982 \"Plain\", \"At\", \"Image\" \u7b49. index (int): \u7d22\u5f15, \u4ece 0 \u5f00\u59cb\u6570 Returns: Element_T: \u6d88\u606f\u94fe\u7b2c index + 1 \u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u5143\u7d20 \"\"\" return self . get ( element_class )[ index ] has \ud83d\udd17 has ( item : Union [ Element , Type [ Element ], 'MessageChain' , str ]) -> bool \u5224\u65ad\u6d88\u606f\u94fe\u4e2d\u662f\u5426\u542b\u6709\u7279\u5b9a\u7684\u5143\u7d20/\u5143\u7d20\u7c7b\u578b/\u6d88\u606f\u94fe/\u5b57\u7b26\u4e32. Parameters: Name Type Description Default item Union [ Element_T , Type [ Element_T ], 'MessageChain'] \u9700\u8981\u5224\u65ad\u7684\u5143\u7d20/\u5143\u7d20\u7c7b\u578b/\u6d88\u606f\u94fe/\u5b57\u7b26\u4e32. required Returns: Name Type Description bool bool \u5224\u65ad\u7ed3\u679c Source code in graia/ariadne/message/chain.py 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 def has ( self , item : Union [ Element , Type [ Element ], \"MessageChain\" , str ]) -> bool : \"\"\" \u5224\u65ad\u6d88\u606f\u94fe\u4e2d\u662f\u5426\u542b\u6709\u7279\u5b9a\u7684\u5143\u7d20/\u5143\u7d20\u7c7b\u578b/\u6d88\u606f\u94fe/\u5b57\u7b26\u4e32. Args: item (Union[Element_T, Type[Element_T], \"MessageChain\"]): \u9700\u8981\u5224\u65ad\u7684\u5143\u7d20/\u5143\u7d20\u7c7b\u578b/\u6d88\u606f\u94fe/\u5b57\u7b26\u4e32. Returns: bool: \u5224\u65ad\u7ed3\u679c \"\"\" if isinstance ( item , str ): return bool ( self . findSubChain ( MessageChain ([ Plain ( item )], inline = True ))) if isinstance ( item , Element ): return item in self . merge ( copy = True ) . __root__ if isinstance ( item , type ): return item in [ type ( i ) for i in self . __root__ ] if isinstance ( item , MessageChain ): return bool ( self . findSubChain ( item )) raise ValueError ( f \" { item } is not an acceptable argument!\" ) include \ud83d\udd17 include ( * types : Type [ Element ]) -> 'MessageChain' \u5c06\u53ea\u5728\u7ed9\u51fa\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b\u4e2d\u7b26\u5408\u7684\u6d88\u606f\u5143\u7d20\u91cd\u65b0\u5305\u88c5\u4e3a\u4e00\u4e2a\u65b0\u7684\u6d88\u606f\u94fe Parameters: Name Type Description Default *types Type [ Un ] \u5c06\u53ea\u5305\u542b\u5728\u5185\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b () Returns: Name Type Description MessageChain 'MessageChain' \u8fd4\u56de\u7684\u6d88\u606f\u94fe\u4e2d\u53ea\u5305\u542b\u53c2\u6570\u4e2d\u7ed9\u51fa\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b Source code in graia/ariadne/message/chain.py 329 330 331 332 333 334 335 336 337 338 def include ( self , * types : Type [ Element ]) -> \"MessageChain\" : \"\"\"\u5c06\u53ea\u5728\u7ed9\u51fa\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b\u4e2d\u7b26\u5408\u7684\u6d88\u606f\u5143\u7d20\u91cd\u65b0\u5305\u88c5\u4e3a\u4e00\u4e2a\u65b0\u7684\u6d88\u606f\u94fe Args: *types (Type[Un]): \u5c06\u53ea\u5305\u542b\u5728\u5185\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b Returns: MessageChain: \u8fd4\u56de\u7684\u6d88\u606f\u94fe\u4e2d\u53ea\u5305\u542b\u53c2\u6570\u4e2d\u7ed9\u51fa\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b \"\"\" return MessageChain ([ i for i in self . copy () . __root__ if type ( i ) in types ], inline = True ) index \ud83d\udd17 index ( element_type : Type [ Element_T ]) -> Union [ int , None ] \u5bfb\u627e\u7b2c\u4e00\u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u5143\u7d20, \u5e76\u8fd4\u56de\u5176\u4e0b\u6807. Parameters: Name Type Description Default element_type Type [ Element ] \u5143\u7d20\u6216\u5143\u7d20\u7c7b\u578b required Returns: Type Description Union [ int , None] Optional[int]: \u5143\u7d20\u4e0b\u6807, \u82e5\u672a\u627e\u5230\u5219\u4e3a None. Source code in graia/ariadne/message/chain.py 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 def index ( self , element_type : Type [ Element_T ]) -> Union [ int , None ]: \"\"\" \u5bfb\u627e\u7b2c\u4e00\u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u5143\u7d20, \u5e76\u8fd4\u56de\u5176\u4e0b\u6807. Args: element_type (Type[Element]): \u5143\u7d20\u6216\u5143\u7d20\u7c7b\u578b Returns: Optional[int]: \u5143\u7d20\u4e0b\u6807, \u82e5\u672a\u627e\u5230\u5219\u4e3a None. \"\"\" return next ( ( i for i , e in enumerate ( self . __root__ ) if isinstance ( e , element_type )), None , ) join \ud83d\udd17 join ( * chains : Union [ 'MessageChain' , Iterable [ 'MessageChain' ]], merge : bool = True ) -> 'MessageChain' \u5c06\u591a\u4e2a\u6d88\u606f\u94fe\u8fde\u63a5\u8d77\u6765, \u5e76\u5728\u5176\u4e2d\u63d2\u5165\u81ea\u8eab. Parameters: Name Type Description Default *chains Iterable [ MessageChain ] \u8981\u8fde\u63a5\u7684\u6d88\u606f\u94fe. () merge bool \u662f\u5426\u5408\u5e76\u6d88\u606f\u94fe\u6587\u672c, \u9ed8\u8ba4\u4e3a True. True Returns: Name Type Description MessageChain 'MessageChain' \u8fde\u63a5\u540e\u7684\u6d88\u606f\u94fe. Source code in graia/ariadne/message/chain.py 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 def join ( self , * chains : Union [ \"MessageChain\" , Iterable [ \"MessageChain\" ]], merge : bool = True ) -> \"MessageChain\" : \"\"\"\u5c06\u591a\u4e2a\u6d88\u606f\u94fe\u8fde\u63a5\u8d77\u6765, \u5e76\u5728\u5176\u4e2d\u63d2\u5165\u81ea\u8eab. Args: *chains (Iterable[MessageChain]): \u8981\u8fde\u63a5\u7684\u6d88\u606f\u94fe. merge (bool, optional): \u662f\u5426\u5408\u5e76\u6d88\u606f\u94fe\u6587\u672c, \u9ed8\u8ba4\u4e3a True. Returns: MessageChain: \u8fde\u63a5\u540e\u7684\u6d88\u606f\u94fe. \"\"\" result : List [ Element ] = [] list_chains : List [ MessageChain ] = [] for chain in chains : if isinstance ( chain , MessageChain ): list_chains . append ( chain ) else : list_chains . extend ( chain ) for chain in list_chains : if chain is not chains [ 0 ]: result . extend ( deepcopy ( self . __root__ )) result . extend ( deepcopy ( chain . __root__ )) return MessageChain ( result , inline = True ) . merge () if merge else MessageChain ( result , inline = True ) merge \ud83d\udd17 merge ( copy : bool = False ) -> 'MessageChain' \u5728\u5b9e\u4f8b\u5185\u5408\u5e76\u76f8\u90bb\u7684 Plain \u9879 copy (bool): \u662f\u5426\u8981\u5728\u526f\u672c\u4e0a\u4fee\u6539. Returns: Name Type Description MessageChain 'MessageChain' copy = True \u65f6\u8fd4\u56de\u526f\u672c, \u5426\u5219\u8fd4\u56de\u81ea\u5df1\u7684\u5f15\u7528. Source code in graia/ariadne/message/chain.py 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 def merge ( self , copy : bool = False ) -> \"MessageChain\" : \"\"\" \u5728\u5b9e\u4f8b\u5185\u5408\u5e76\u76f8\u90bb\u7684 Plain \u9879 copy (bool): \u662f\u5426\u8981\u5728\u526f\u672c\u4e0a\u4fee\u6539. Returns: MessageChain: copy = True \u65f6\u8fd4\u56de\u526f\u672c, \u5426\u5219\u8fd4\u56de\u81ea\u5df1\u7684\u5f15\u7528. \"\"\" result = [] plain = [] for i in self . __root__ : if not isinstance ( i , Plain ): if plain : result . append ( Plain ( \"\" . join ( plain ))) plain . clear () # \u6e05\u7a7a\u7f13\u5b58 result . append ( deepcopy ( i ) if copy else i ) else : plain . append ( i . text ) if plain : result . append ( Plain ( \"\" . join ( plain ))) plain . clear () if not copy : self . __root__ = result return self return MessageChain ( result , inline = True ) onlyContains \ud83d\udd17 onlyContains ( * types : Type [ Element ]) -> bool \u5224\u65ad\u6d88\u606f\u94fe\u4e2d\u662f\u5426\u53ea\u542b\u6709\u7279\u5b9a\u7c7b\u578b\u5143\u7d20. Returns: Name Type Description bool bool \u5224\u65ad\u7ed3\u679c Source code in graia/ariadne/message/chain.py 408 409 410 411 412 413 414 def onlyContains ( self , * types : Type [ Element ]) -> bool : \"\"\"\u5224\u65ad\u6d88\u606f\u94fe\u4e2d\u662f\u5426\u53ea\u542b\u6709\u7279\u5b9a\u7c7b\u578b\u5143\u7d20. Returns: bool: \u5224\u65ad\u7ed3\u679c \"\"\" return all ( isinstance ( i , types ) for i in self . __root__ ) parse_obj classmethod \ud83d\udd17 parse_obj ( obj : List [ Union [ dict , Element ]]) -> 'MessageChain' \u5185\u90e8\u63a5\u53e3, \u4f1a\u81ea\u52a8\u5c06\u4f5c\u4e3a\u5916\u90e8\u6001\u7684\u6d88\u606f\u5143\u7d20\u8f6c\u4e3a\u5185\u90e8\u6001. Parameters: Name Type Description Default obj List [ T ] \u9700\u8981\u53cd\u5e8f\u5217\u5316\u7684\u5bf9\u8c61 required Returns: Name Type Description MessageChain 'MessageChain' \u5185\u90e8\u627f\u8f7d\u6709\u5c3d\u91cf\u6709\u6548\u7684\u6d88\u606f\u5143\u7d20\u7684\u6d88\u606f\u94fe Source code in graia/ariadne/message/chain.py 77 78 79 80 81 82 83 84 85 86 87 @classmethod def parse_obj ( cls : Type [ \"MessageChain\" ], obj : List [ Union [ dict , Element ]]) -> \"MessageChain\" : \"\"\"\u5185\u90e8\u63a5\u53e3, \u4f1a\u81ea\u52a8\u5c06\u4f5c\u4e3a\u5916\u90e8\u6001\u7684\u6d88\u606f\u5143\u7d20\u8f6c\u4e3a\u5185\u90e8\u6001. Args: obj (List[T]): \u9700\u8981\u53cd\u5e8f\u5217\u5316\u7684\u5bf9\u8c61 Returns: MessageChain: \u5185\u90e8\u627f\u8f7d\u6709\u5c3d\u91cf\u6709\u6548\u7684\u6d88\u606f\u5143\u7d20\u7684\u6d88\u606f\u94fe \"\"\" return cls ( __root__ = cls . build_chain ( obj )) # type: ignore prepare \ud83d\udd17 prepare ( copy : bool = False ) -> 'MessageChain' \u5bf9\u6d88\u606f\u94fe\u4e2d\u6240\u6709\u5143\u7d20\u8fdb\u884c\u5904\u7406. Returns: Name Type Description MessageChain 'MessageChain' copy = True \u65f6\u8fd4\u56de\u526f\u672c, \u5426\u5219\u8fd4\u56de\u81ea\u5df1\u7684\u5f15\u7528. Source code in graia/ariadne/message/chain.py 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 def prepare ( self , copy : bool = False ) -> \"MessageChain\" : \"\"\" \u5bf9\u6d88\u606f\u94fe\u4e2d\u6240\u6709\u5143\u7d20\u8fdb\u884c\u5904\u7406. Returns: MessageChain: copy = True \u65f6\u8fd4\u56de\u526f\u672c, \u5426\u5219\u8fd4\u56de\u81ea\u5df1\u7684\u5f15\u7528. \"\"\" chain_ref = self . copy () if copy else self chain_ref . merge () for i in chain_ref . __root__ [:]: try : i . prepare () except NotSendableElement : chain_ref . __root__ . remove ( i ) return chain_ref removeprefix \ud83d\udd17 removeprefix ( prefix : str , * , copy : bool = True , skip_header : bool = True ) -> 'MessageChain' \u79fb\u9664\u6d88\u606f\u94fe\u524d\u7f00. Parameters: Name Type Description Default prefix str \u8981\u79fb\u9664\u7684\u524d\u7f00. required copy bool \u662f\u5426\u5728\u526f\u672c\u4e0a\u4fee\u6539, \u9ed8\u8ba4\u4e3a True. True skip_header bool \u662f\u5426\u8981\u5ffd\u7565 Source \u4e0e Quote \u7c7b\u578b\u67e5\u627e, \u9ed8\u8ba4\u4e3a True. (\u79fb\u9664\u540e\u4ecd\u4f1a\u5e26\u4e0a Source \u4e0e Quote) True Returns: Name Type Description MessageChain 'MessageChain' \u4fee\u6539\u540e\u7684\u6d88\u606f\u94fe, \u82e5\u672a\u79fb\u9664\u5219\u539f\u6837\u8fd4\u56de. Source code in graia/ariadne/message/chain.py 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 def removeprefix ( self , prefix : str , * , copy : bool = True , skip_header : bool = True ) -> \"MessageChain\" : \"\"\"\u79fb\u9664\u6d88\u606f\u94fe\u524d\u7f00. Args: prefix (str): \u8981\u79fb\u9664\u7684\u524d\u7f00. copy (bool, optional): \u662f\u5426\u5728\u526f\u672c\u4e0a\u4fee\u6539, \u9ed8\u8ba4\u4e3a True. skip_header (bool, optional): \u662f\u5426\u8981\u5ffd\u7565 Source \u4e0e Quote \u7c7b\u578b\u67e5\u627e, \u9ed8\u8ba4\u4e3a True. (\u79fb\u9664\u540e\u4ecd\u4f1a\u5e26\u4e0a Source \u4e0e Quote) Returns: MessageChain: \u4fee\u6539\u540e\u7684\u6d88\u606f\u94fe, \u82e5\u672a\u79fb\u9664\u5219\u539f\u6837\u8fd4\u56de. \"\"\" header = [] elements = [] if not skip_header : elements = self . __root__ [:] else : for element in self . __root__ : if isinstance ( element , ( Quote , Source )): header . append ( element ) else : elements . append ( element ) if copy : header = deepcopy ( header ) elements = deepcopy ( elements ) if not elements or not isinstance ( elements [ 0 ], Plain ): return self . copy () if copy else self if elements [ 0 ] . text . startswith ( prefix ): elements [ 0 ] . text = elements [ 0 ] . text [ len ( prefix ) :] if copy : return MessageChain ( header + elements , inline = True ) self . __root__ = header + elements return self removesuffix \ud83d\udd17 removesuffix ( suffix : str , * , copy : bool = True ) -> 'MessageChain' \u79fb\u9664\u6d88\u606f\u94fe\u540e\u7f00. Parameters: Name Type Description Default suffix str \u8981\u79fb\u9664\u7684\u540e\u7f00. required copy bool \u662f\u5426\u5728\u526f\u672c\u4e0a\u4fee\u6539, \u9ed8\u8ba4\u4e3a True. True Returns: Name Type Description MessageChain 'MessageChain' \u4fee\u6539\u540e\u7684\u6d88\u606f\u94fe, \u82e5\u672a\u79fb\u9664\u5219\u539f\u6837\u8fd4\u56de. Source code in graia/ariadne/message/chain.py 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 def removesuffix ( self , suffix : str , * , copy : bool = True ) -> \"MessageChain\" : \"\"\"\u79fb\u9664\u6d88\u606f\u94fe\u540e\u7f00. Args: suffix (str): \u8981\u79fb\u9664\u7684\u540e\u7f00. copy (bool, optional): \u662f\u5426\u5728\u526f\u672c\u4e0a\u4fee\u6539, \u9ed8\u8ba4\u4e3a True. Returns: MessageChain: \u4fee\u6539\u540e\u7684\u6d88\u606f\u94fe, \u82e5\u672a\u79fb\u9664\u5219\u539f\u6837\u8fd4\u56de. \"\"\" elements = deepcopy ( self . __root__ ) if copy else self . __root__ if not elements or not isinstance ( elements [ - 1 ], Plain ): return self . copy () if copy else self last_elem : Plain = elements [ - 1 ] if last_elem . text . endswith ( suffix ): last_elem . text = last_elem . text [: - len ( suffix )] if copy : return MessageChain ( elements , inline = True ) self . __root__ = elements return self replace \ud83d\udd17 replace ( old : 'MessageChain | Iterable[Element] | Element' , new : 'MessageChain | Iterable[Element] | Element' ) -> 'MessageChain' \u66ff\u6362\u6d88\u606f\u94fe\u4e2d\u7684\u4e00\u90e8\u5206. (\u5728\u526f\u672c\u4e0a\u64cd\u4f5c) Parameters: Name Type Description Default old MessageChain \u8981\u66ff\u6362\u7684\u6d88\u606f\u94fe. required new MessageChain \u66ff\u6362\u540e\u7684\u6d88\u606f\u94fe. required Returns: Name Type Description MessageChain 'MessageChain' \u4fee\u6539\u540e\u7684\u6d88\u606f\u94fe, \u82e5\u672a\u66ff\u6362\u5219\u539f\u6837\u8fd4\u56de. Source code in graia/ariadne/message/chain.py 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 def replace ( self , old : \"MessageChain | Iterable[Element] | Element\" , new : \"MessageChain | Iterable[Element] | Element\" , ) -> \"MessageChain\" : \"\"\"\u66ff\u6362\u6d88\u606f\u94fe\u4e2d\u7684\u4e00\u90e8\u5206. (\u5728\u526f\u672c\u4e0a\u64cd\u4f5c) Args: old (MessageChain): \u8981\u66ff\u6362\u7684\u6d88\u606f\u94fe. new (MessageChain): \u66ff\u6362\u540e\u7684\u6d88\u606f\u94fe. Returns: MessageChain: \u4fee\u6539\u540e\u7684\u6d88\u606f\u94fe, \u82e5\u672a\u66ff\u6362\u5219\u539f\u6837\u8fd4\u56de. \"\"\" if not isinstance ( old , MessageChain ): old = MessageChain . create ( old ) if not isinstance ( new , MessageChain ): new = MessageChain . create ( new ) index_list : List [ int ] = self . findSubChain ( old ) unzipped_new : List [ Union [ str , Element ]] = new . unzip () unzipped_old : List [ Union [ str , Element ]] = old . unzip () unzipped_self : List [ Union [ str , Element ]] = self . unzip () unzipped_result : List [ Union [ str , Element ]] = [] last_end : int = 0 for start in index_list : unzipped_result . extend ( unzipped_self [ last_end : start ]) last_end = start + len ( unzipped_old ) unzipped_result . extend ( unzipped_new ) unzipped_result . extend ( unzipped_self [ last_end :]) # Merge result result_list : List [ Element ] = [] char_stk : List [ str ] = [] for v in unzipped_result : if isinstance ( v , str ): char_stk . append ( v ) else : result_list . append ( Plain ( \"\" . join ( char_stk ))) char_stk = [] result_list . append ( v ) if char_stk : result_list . append ( Plain ( \"\" . join ( char_stk ))) return MessageChain ( result_list , inline = True ) split \ud83d\udd17 split ( pattern : str = ' ' , raw_string : bool = False ) -> List [ 'MessageChain' ] \u548c str.split \u5dee\u4e0d\u591a, \u63d0\u4f9b\u4e00\u4e2a\u5b57\u7b26\u4e32, \u7136\u540e\u8fd4\u56de\u5206\u5272\u7ed3\u679c. Parameters: Name Type Description Default pattern str \u5206\u9694\u7b26. \u9ed8\u8ba4\u4e3a\u5355\u4e2a\u7a7a\u683c. ' ' raw_string bool \u662f\u5426\u8981\u5305\u542b \"\u7a7a\" \u7684\u6587\u672c\u5143\u7d20. False Returns: Type Description List ['MessageChain'] List[\"MessageChain\"]: \u5206\u5272\u7ed3\u679c, \u884c\u4e3a\u548c str.split \u5dee\u4e0d\u591a. Source code in graia/ariadne/message/chain.py 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 def split ( self , pattern : str = \" \" , raw_string : bool = False ) -> List [ \"MessageChain\" ]: \"\"\"\u548c `str.split` \u5dee\u4e0d\u591a, \u63d0\u4f9b\u4e00\u4e2a\u5b57\u7b26\u4e32, \u7136\u540e\u8fd4\u56de\u5206\u5272\u7ed3\u679c. Args: pattern (str): \u5206\u9694\u7b26. \u9ed8\u8ba4\u4e3a\u5355\u4e2a\u7a7a\u683c. raw_string (bool): \u662f\u5426\u8981\u5305\u542b \"\u7a7a\" \u7684\u6587\u672c\u5143\u7d20. Returns: List[\"MessageChain\"]: \u5206\u5272\u7ed3\u679c, \u884c\u4e3a\u548c `str.split` \u5dee\u4e0d\u591a. \"\"\" result : List [ \"MessageChain\" ] = [] tmp = [] for element in self . __root__ : if isinstance ( element , Plain ): split_result = element . text . split ( pattern ) for index , split_str in enumerate ( split_result ): if tmp and index > 0 : result . append ( MessageChain ( tmp , inline = True )) tmp = [] if split_str or raw_string : tmp . append ( Plain ( split_str )) else : tmp . append ( element ) if tmp : result . append ( MessageChain ( tmp , inline = True )) tmp = [] return result startswith \ud83d\udd17 startswith ( string : str , ignore_header : bool = True ) -> bool \u5224\u5b9a\u6d88\u606f\u94fe\u662f\u5426\u4ee5\u76f8\u5e94\u5b57\u7b26\u4e32\u5f00\u5934 Parameters: Name Type Description Default string str \u9700\u8981\u5224\u65ad\u7684\u5b57\u7b26\u4e32 required ignore_header bool \u662f\u5426\u5ffd\u7565\u5143\u6570\u636e, \u9ed8\u8ba4\u4e3a True True Returns: Name Type Description bool bool \u662f\u5426\u4ee5\u6b64\u5b57\u7b26\u4e32\u5f00\u5934 Source code in graia/ariadne/message/chain.py 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 def startswith ( self , string : str , ignore_header : bool = True ) -> bool : \"\"\" \u5224\u5b9a\u6d88\u606f\u94fe\u662f\u5426\u4ee5\u76f8\u5e94\u5b57\u7b26\u4e32\u5f00\u5934 Args: string (str): \u9700\u8981\u5224\u65ad\u7684\u5b57\u7b26\u4e32 ignore_header (bool, optional): \u662f\u5426\u5ffd\u7565\u5143\u6570\u636e, \u9ed8\u8ba4\u4e3a True Returns: bool: \u662f\u5426\u4ee5\u6b64\u5b57\u7b26\u4e32\u5f00\u5934 \"\"\" ref_root = self . asSendable () . __root__ if ignore_header else self . __root__ if not ref_root or not isinstance ( ref_root [ 0 ], Plain ): return False return ref_root [ 0 ] . text . startswith ( string ) unzip \ud83d\udd17 unzip () -> List [ Union [ str , Element ]] \u89e3\u538b\u6d88\u606f\u94fe\u4e3a\u5143\u7d20/\u5355\u5b57\u7b26\u5217\u8868. Return List[Union[str, Element]]: \u89e3\u538b\u540e\u7684\u5143\u7d20/\u5b57\u7b26\u5217\u8868. Source code in graia/ariadne/message/chain.py 140 141 142 143 144 145 146 147 148 149 150 151 152 def unzip ( self ) -> List [ Union [ str , Element ]]: \"\"\"\u89e3\u538b\u6d88\u606f\u94fe\u4e3a\u5143\u7d20/\u5355\u5b57\u7b26\u5217\u8868. Return: List[Union[str, Element]]: \u89e3\u538b\u540e\u7684\u5143\u7d20/\u5b57\u7b26\u5217\u8868. \"\"\" unzipped : List [ Union [ str , Element ]] = [] for e in self . __root__ : if isinstance ( e , Plain ): unzipped . extend ( e . text ) else : unzipped . append ( e ) return unzipped","title":"chain"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain","text":"Bases: AriadneBaseModel \u5373 \"\u6d88\u606f\u94fe\", \u88ab\u7528\u4e8e\u627f\u8f7d\u6574\u4e2a\u6d88\u606f\u5185\u5bb9\u7684\u6570\u636e\u7ed3\u6784, \u5305\u542b\u6709\u4e00\u6709\u5e8f\u5217\u8868, \u5305\u542b\u6709\u5143\u7d20\u5b9e\u4f8b. Source code in graia/ariadne/message/chain.pyclass MessageChain ( AriadneBaseModel ): \"\"\" \u5373 \"\u6d88\u606f\u94fe\", \u88ab\u7528\u4e8e\u627f\u8f7d\u6574\u4e2a\u6d88\u606f\u5185\u5bb9\u7684\u6570\u636e\u7ed3\u6784, \u5305\u542b\u6709\u4e00\u6709\u5e8f\u5217\u8868, \u5305\u542b\u6709\u5143\u7d20\u5b9e\u4f8b. \"\"\" __root__ : List [ Element ] \"\"\"\u5e95\u5c42\u5143\u7d20\u5217\u8868\"\"\" @staticmethod def build_chain ( obj : Iterable [ Union [ dict , Element , str ]]) -> List [ Element ]: \"\"\"\u5185\u90e8\u63a5\u53e3, \u4f1a\u81ea\u52a8\u53cd\u5e8f\u5217\u5316\u5bf9\u8c61\u5e76\u751f\u6210. Args: obj (Iterable[Union[dict, Element, str]]): \u9700\u8981\u53cd\u5e8f\u5217\u5316\u7684\u5bf9\u8c61 Returns: List[Element]: \u5185\u90e8\u627f\u8f7d\u6709\u5c3d\u91cf\u6709\u6548\u7684\u6d88\u606f\u5143\u7d20\u7684\u5217\u8868 \"\"\" element_list : List [ Element ] = [] for i in obj : if isinstance ( i , Element ): element_list . append ( i ) elif isinstance ( i , dict ) and \"type\" in i : for element_cls in gen_subclass ( Element ): if element_cls . __name__ == i [ \"type\" ]: element_list . append ( element_cls . parse_obj ( i )) break elif isinstance ( i , str ): element_list . append ( Plain ( i )) return element_list @classmethod def parse_obj ( cls : Type [ \"MessageChain\" ], obj : List [ Union [ dict , Element ]]) -> \"MessageChain\" : \"\"\"\u5185\u90e8\u63a5\u53e3, \u4f1a\u81ea\u52a8\u5c06\u4f5c\u4e3a\u5916\u90e8\u6001\u7684\u6d88\u606f\u5143\u7d20\u8f6c\u4e3a\u5185\u90e8\u6001. Args: obj (List[T]): \u9700\u8981\u53cd\u5e8f\u5217\u5316\u7684\u5bf9\u8c61 Returns: MessageChain: \u5185\u90e8\u627f\u8f7d\u6709\u5c3d\u91cf\u6709\u6548\u7684\u6d88\u606f\u5143\u7d20\u7684\u6d88\u606f\u94fe \"\"\" return cls ( __root__ = cls . build_chain ( obj )) # type: ignore def __init__ ( self , __root__ : Iterable [ Union [ Element , str ]], inline : bool = False , ) -> None : if not inline : super () . __init__ ( __root__ = self . build_chain ( __root__ )) # type: ignore else : super () . __init__ ( __root__ = __root__ ) # type: ignore @classmethod def create ( cls , * elements : Union [ Iterable [ Element ], Element , str ]) -> \"MessageChain\" : \"\"\" \u521b\u5efa\u6d88\u606f\u94fe. \u6bd4\u8d77\u76f4\u63a5\u5b9e\u4f8b\u5316, \u672c\u65b9\u6cd5\u62e5\u6709\u66f4\u4e30\u5bcc\u7684\u8f93\u5165\u5b9e\u4f8b\u7c7b\u578b\u652f\u6301. Args: *elements (Union[Iterable[Element], Element, str]): \\ \u5143\u7d20\u7684\u5bb9\u5668, \u4e3a\u627f\u8f7d\u5143\u7d20\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61/\u5355\u5143\u7d20\u5b9e\u4f8b, \\ \u5b57\u7b26\u4e32\u4f1a\u88ab\u81ea\u52a8\u4e0d\u53ef\u9006\u7684\u8f6c\u6362\u4e3a `Plain` Returns: MessageChain: \u521b\u5efa\u7684\u6d88\u606f\u94fe \"\"\" element_list = [] for i in elements : if isinstance ( i , Element ): element_list . append ( i ) elif isinstance ( i , str ): element_list . append ( Plain ( i )) else : element_list . extend ( cls . build_chain ( i )) return cls ( __root__ = element_list , inline = True ) def prepare ( self , copy : bool = False ) -> \"MessageChain\" : \"\"\" \u5bf9\u6d88\u606f\u94fe\u4e2d\u6240\u6709\u5143\u7d20\u8fdb\u884c\u5904\u7406. Returns: MessageChain: copy = True \u65f6\u8fd4\u56de\u526f\u672c, \u5426\u5219\u8fd4\u56de\u81ea\u5df1\u7684\u5f15\u7528. \"\"\" chain_ref = self . copy () if copy else self chain_ref . merge () for i in chain_ref . __root__ [:]: try : i . prepare () except NotSendableElement : chain_ref . __root__ . remove ( i ) return chain_ref def unzip ( self ) -> List [ Union [ str , Element ]]: \"\"\"\u89e3\u538b\u6d88\u606f\u94fe\u4e3a\u5143\u7d20/\u5355\u5b57\u7b26\u5217\u8868. Return: List[Union[str, Element]]: \u89e3\u538b\u540e\u7684\u5143\u7d20/\u5b57\u7b26\u5217\u8868. \"\"\" unzipped : List [ Union [ str , Element ]] = [] for e in self . __root__ : if isinstance ( e , Plain ): unzipped . extend ( e . text ) else : unzipped . append ( e ) return unzipped def has ( self , item : Union [ Element , Type [ Element ], \"MessageChain\" , str ]) -> bool : \"\"\" \u5224\u65ad\u6d88\u606f\u94fe\u4e2d\u662f\u5426\u542b\u6709\u7279\u5b9a\u7684\u5143\u7d20/\u5143\u7d20\u7c7b\u578b/\u6d88\u606f\u94fe/\u5b57\u7b26\u4e32. Args: item (Union[Element_T, Type[Element_T], \"MessageChain\"]): \u9700\u8981\u5224\u65ad\u7684\u5143\u7d20/\u5143\u7d20\u7c7b\u578b/\u6d88\u606f\u94fe/\u5b57\u7b26\u4e32. Returns: bool: \u5224\u65ad\u7ed3\u679c \"\"\" if isinstance ( item , str ): return bool ( self . findSubChain ( MessageChain ([ Plain ( item )], inline = True ))) if isinstance ( item , Element ): return item in self . merge ( copy = True ) . __root__ if isinstance ( item , type ): return item in [ type ( i ) for i in self . __root__ ] if isinstance ( item , MessageChain ): return bool ( self . findSubChain ( item )) raise ValueError ( f \" { item } is not an acceptable argument!\" ) def get ( self , element_class : Type [ Element_T ], count : int = - 1 ) -> List [ Element_T ]: \"\"\" \u83b7\u53d6\u6d88\u606f\u94fe\u4e2d\u6240\u6709\u7279\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u5143\u7d20 Args: element_class (T): \u6307\u5b9a\u7684\u6d88\u606f\u5143\u7d20\u7684\u7c7b\u578b, \u4f8b\u5982 \"Plain\", \"At\", \"Image\" \u7b49. Returns: List[T]: \u83b7\u53d6\u5230\u7684\u7b26\u5408\u8981\u6c42\u7684\u6240\u6709\u6d88\u606f\u5143\u7d20; \u53e6: \u53ef\u80fd\u662f\u7a7a\u5217\u8868([]). \"\"\" if count == - 1 : count = len ( self . __root__ ) return [ i for i in self . __root__ if isinstance ( i , element_class )][: count ] def getOne ( self , element_class : Type [ Element_T ], index : int ) -> Element_T : \"\"\" \u83b7\u53d6\u6d88\u606f\u94fe\u4e2d\u7b2c index + 1 \u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u5143\u7d20 Args: element_class (Type[Element_T]): \u6307\u5b9a\u7684\u6d88\u606f\u5143\u7d20\u7684\u7c7b\u578b, \u4f8b\u5982 \"Plain\", \"At\", \"Image\" \u7b49. index (int): \u7d22\u5f15, \u4ece 0 \u5f00\u59cb\u6570 Returns: Element_T: \u6d88\u606f\u94fe\u7b2c index + 1 \u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u5143\u7d20 \"\"\" return self . get ( element_class )[ index ] def getFirst ( self , element_class : Type [ Element_T ]) -> Element_T : \"\"\" \u83b7\u53d6\u6d88\u606f\u94fe\u4e2d\u7b2c 1 \u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u5143\u7d20 Args: element_class (Type[Element_T]): \u6307\u5b9a\u7684\u6d88\u606f\u5143\u7d20\u7684\u7c7b\u578b, \u4f8b\u5982 \"Plain\", \"At\", \"Image\" \u7b49. Returns: Element_T: \u6d88\u606f\u94fe\u7b2c 1 \u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u5143\u7d20 \"\"\" return self . getOne ( element_class , 0 ) def asDisplay ( self ) -> str : \"\"\" \u83b7\u53d6\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8868\u793a\u7684\u6d88\u606f\u94fe, \u4e14\u8d8b\u4e8e\u901a\u5e38\u4f60\u89c1\u5230\u7684\u6837\u5b50. Returns: str: \u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8868\u793a\u7684\u6d88\u606f\u94fe \"\"\" return \"\" . join ( i . asDisplay () for i in self . __root__ ) def __str__ ( self ) -> str : return self . asDisplay () def __repr_args__ ( self ) -> \"ReprArgs\" : return [( None , list ( self . __root__ ))] def __contains__ ( self , item : Union [ \"MessageChain\" , Type [ Element_T ], Element_T , str ]) -> bool : \"\"\" \u662f\u5426\u5305\u542b\u7279\u5b9a\u5bf9\u8c61 \"\"\" return self . has ( item ) @overload def __getitem__ ( self , item : Tuple [ Type [ Element_T ], int ]) -> List [ Element_T ]: ... @overload def __getitem__ ( self , item : Type [ Element_T ]) -> List [ Element_T ]: ... @overload def __getitem__ ( self , item : int ) -> Element : ... @overload def __getitem__ ( self , item : slice ) -> \"MessageChain\" : ... def __getitem__ ( # type: ignore self , item : Union [ Tuple [ Type [ Element_T ], int ], Type [ Element_T ], int , slice ] ) -> Union [ List [ Element ], Element , \"MessageChain\" ]: \"\"\" \u53ef\u901a\u8fc7\u5207\u7247\u53d6\u51fa\u5b50\u6d88\u606f\u94fe, \u6216\u5143\u7d20. \u901a\u8fc7 `type, count` \u578b\u5143\u7ec4\u53d6\u51fa\u524d `count` \u4e2a `type` \u5143\u7d20\u7ec4\u6210\u7684\u5217\u8868 \u901a\u8fc7 `type` \u53d6\u51fa\u5c5e\u4e8e `type` \u7684\u5143\u7d20\u5217\u8868 \u901a\u8fc7 `int` \u53d6\u51fa\u5bf9\u5e94\u4f4d\u7f6e\u5143\u7d20. Args: item (Union[Tuple[Type[Element], int], Type[Element], int, slice]): \u7d22\u5f15\u9879 Returns: Union[List[Element], Element, MessageChain]: \u7d22\u5f15\u7ed3\u679c. \"\"\" if isinstance ( item , type ) and issubclass ( item , Element ): return self . get ( item ) if isinstance ( item , tuple ): return self . get ( * item ) if isinstance ( item , int ): return self . __root__ [ item ] if isinstance ( item , slice ): return MessageChain ( self . __root__ [ item ], inline = True ) raise NotImplementedError ( f \" { item } is not allowed for item getting\" ) def findSubChain ( self , subchain : Union [ \"MessageChain\" , List [ Element ]]) -> List [ int ]: \"\"\"\u5224\u65ad\u6d88\u606f\u94fe\u662f\u5426\u542b\u6709\u5b50\u94fe. \u4f7f\u7528 KMP \u7b97\u6cd5. Args: subchain (Union[MessageChain, List[Element]]): \u8981\u5224\u65ad\u7684\u5b50\u94fe. Returns: List[int]: \u6240\u6709\u627e\u5230\u7684\u4e0b\u6807. \"\"\" pattern : List [ Union [ str , Element ]] = ( subchain . unzip () if isinstance ( subchain , MessageChain ) else MessageChain ( subchain , inline = True ) . unzip () ) match_target : List [ Union [ str , Element ]] = self . unzip () if len ( match_target ) < len ( pattern ): return [] fallback : List [ int ] = [ 0 for _ in pattern ] current_fb : int = 0 # current fallback index for i in range ( 1 , len ( pattern )): while current_fb and pattern [ i ] != pattern [ current_fb ]: current_fb = fallback [ current_fb - 1 ] if pattern [ i ] == pattern [ current_fb ]: current_fb += 1 fallback [ i ] = current_fb match_index : List [ int ] = [] ptr = 0 for i , e in enumerate ( match_target ): while ptr and e != pattern [ ptr ]: ptr = fallback [ ptr - 1 ] if e == pattern [ ptr ]: ptr += 1 if ptr == len ( pattern ): match_index . append ( i - ptr + 1 ) ptr = fallback [ ptr - 1 ] return match_index def exclude ( self , * types : Type [ Element ]) -> \"MessageChain\" : \"\"\"\u5c06\u9664\u4e86\u5728\u7ed9\u51fa\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b\u4e2d\u7b26\u5408\u7684\u6d88\u606f\u5143\u7d20\u91cd\u65b0\u5305\u88c5\u4e3a\u4e00\u4e2a\u65b0\u7684\u6d88\u606f\u94fe Args: *types (Type[Element]): \u5c06\u6392\u9664\u5728\u5916\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b Returns: MessageChain: \u8fd4\u56de\u7684\u6d88\u606f\u94fe\u4e2d\u4e0d\u5305\u542b\u53c2\u6570\u4e2d\u7ed9\u51fa\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b \"\"\" return MessageChain ([ i for i in self . copy () . __root__ if type ( i ) not in types ], inline = True ) def include ( self , * types : Type [ Element ]) -> \"MessageChain\" : \"\"\"\u5c06\u53ea\u5728\u7ed9\u51fa\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b\u4e2d\u7b26\u5408\u7684\u6d88\u606f\u5143\u7d20\u91cd\u65b0\u5305\u88c5\u4e3a\u4e00\u4e2a\u65b0\u7684\u6d88\u606f\u94fe Args: *types (Type[Un]): \u5c06\u53ea\u5305\u542b\u5728\u5185\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b Returns: MessageChain: \u8fd4\u56de\u7684\u6d88\u606f\u94fe\u4e2d\u53ea\u5305\u542b\u53c2\u6570\u4e2d\u7ed9\u51fa\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b \"\"\" return MessageChain ([ i for i in self . copy () . __root__ if type ( i ) in types ], inline = True ) def split ( self , pattern : str = \" \" , raw_string : bool = False ) -> List [ \"MessageChain\" ]: \"\"\"\u548c `str.split` \u5dee\u4e0d\u591a, \u63d0\u4f9b\u4e00\u4e2a\u5b57\u7b26\u4e32, \u7136\u540e\u8fd4\u56de\u5206\u5272\u7ed3\u679c. Args: pattern (str): \u5206\u9694\u7b26. \u9ed8\u8ba4\u4e3a\u5355\u4e2a\u7a7a\u683c. raw_string (bool): \u662f\u5426\u8981\u5305\u542b \"\u7a7a\" \u7684\u6587\u672c\u5143\u7d20. Returns: List[\"MessageChain\"]: \u5206\u5272\u7ed3\u679c, \u884c\u4e3a\u548c `str.split` \u5dee\u4e0d\u591a. \"\"\" result : List [ \"MessageChain\" ] = [] tmp = [] for element in self . __root__ : if isinstance ( element , Plain ): split_result = element . text . split ( pattern ) for index , split_str in enumerate ( split_result ): if tmp and index > 0 : result . append ( MessageChain ( tmp , inline = True )) tmp = [] if split_str or raw_string : tmp . append ( Plain ( split_str )) else : tmp . append ( element ) if tmp : result . append ( MessageChain ( tmp , inline = True )) tmp = [] return result def __iter__ ( self ) -> Iterator [ Element ]: return iter ( self . __root__ ) def startswith ( self , string : str , ignore_header : bool = True ) -> bool : \"\"\" \u5224\u5b9a\u6d88\u606f\u94fe\u662f\u5426\u4ee5\u76f8\u5e94\u5b57\u7b26\u4e32\u5f00\u5934 Args: string (str): \u9700\u8981\u5224\u65ad\u7684\u5b57\u7b26\u4e32 ignore_header (bool, optional): \u662f\u5426\u5ffd\u7565\u5143\u6570\u636e, \u9ed8\u8ba4\u4e3a True Returns: bool: \u662f\u5426\u4ee5\u6b64\u5b57\u7b26\u4e32\u5f00\u5934 \"\"\" ref_root = self . asSendable () . __root__ if ignore_header else self . __root__ if not ref_root or not isinstance ( ref_root [ 0 ], Plain ): return False return ref_root [ 0 ] . text . startswith ( string ) def endswith ( self , string : str ) -> bool : \"\"\" \u5224\u5b9a\u6d88\u606f\u94fe\u662f\u5426\u4ee5\u76f8\u5e94\u5b57\u7b26\u4e32\u7ed3\u5c3e Args: string (str): \u9700\u8981\u5224\u65ad\u7684\u5b57\u7b26\u4e32 Returns: bool: \u662f\u5426\u4ee5\u6b64\u5b57\u7b26\u4e32\u7ed3\u5c3e \"\"\" if not self . __root__ or not isinstance ( self . __root__ [ - 1 ], Plain ): return False last_element : Plain = self . __root__ [ - 1 ] return last_element . text . endswith ( string ) def onlyContains ( self , * types : Type [ Element ]) -> bool : \"\"\"\u5224\u65ad\u6d88\u606f\u94fe\u4e2d\u662f\u5426\u53ea\u542b\u6709\u7279\u5b9a\u7c7b\u578b\u5143\u7d20. Returns: bool: \u5224\u65ad\u7ed3\u679c \"\"\" return all ( isinstance ( i , types ) for i in self . __root__ ) def merge ( self , copy : bool = False ) -> \"MessageChain\" : \"\"\" \u5728\u5b9e\u4f8b\u5185\u5408\u5e76\u76f8\u90bb\u7684 Plain \u9879 copy (bool): \u662f\u5426\u8981\u5728\u526f\u672c\u4e0a\u4fee\u6539. Returns: MessageChain: copy = True \u65f6\u8fd4\u56de\u526f\u672c, \u5426\u5219\u8fd4\u56de\u81ea\u5df1\u7684\u5f15\u7528. \"\"\" result = [] plain = [] for i in self . __root__ : if not isinstance ( i , Plain ): if plain : result . append ( Plain ( \"\" . join ( plain ))) plain . clear () # \u6e05\u7a7a\u7f13\u5b58 result . append ( deepcopy ( i ) if copy else i ) else : plain . append ( i . text ) if plain : result . append ( Plain ( \"\" . join ( plain ))) plain . clear () if not copy : self . __root__ = result return self return MessageChain ( result , inline = True ) def append ( self , element : Union [ Element , str ], copy : bool = False ) -> \"MessageChain\" : \"\"\" \u5411\u6d88\u606f\u94fe\u6700\u540e\u8ffd\u52a0\u5355\u4e2a\u5143\u7d20 Args: element (Element): \u8981\u6dfb\u52a0\u7684\u5143\u7d20 copy (bool): \u662f\u5426\u8981\u5728\u526f\u672c\u4e0a\u4fee\u6539. Returns: MessageChain: copy = True \u65f6\u8fd4\u56de\u526f\u672c, \u5426\u5219\u8fd4\u56de\u81ea\u5df1\u7684\u5f15\u7528. \"\"\" chain_ref = self . copy () if copy else self if isinstance ( element , str ): element = Plain ( element ) chain_ref . __root__ . append ( element ) return chain_ref def extend ( self , * content : Union [ \"MessageChain\" , Element , List [ Union [ Element , str ]]], copy : bool = False , ) -> \"MessageChain\" : \"\"\" \u5411\u6d88\u606f\u94fe\u6700\u540e\u6dfb\u52a0\u5143\u7d20/\u5143\u7d20\u5217\u8868/\u6d88\u606f\u94fe Args: *content (Union[MessageChain, Element, List[Element]]): \u8981\u6dfb\u52a0\u7684\u5143\u7d20/\u5143\u7d20\u5bb9\u5668. copy (bool): \u662f\u5426\u8981\u5728\u526f\u672c\u4e0a\u4fee\u6539. Returns: MessageChain: copy = True \u65f6\u8fd4\u56de\u526f\u672c, \u5426\u5219\u8fd4\u56de\u81ea\u5df1\u7684\u5f15\u7528. \"\"\" result = [] for i in content : if isinstance ( i , Element ): result . append ( i ) elif isinstance ( i , str ): result . append ( Plain ( i )) elif isinstance ( i , MessageChain ): result . extend ( i . __root__ ) else : for e in i : if isinstance ( e , str ): result . append ( Plain ( e )) else : result . append ( e ) if copy : return MessageChain ( deepcopy ( self . __root__ ) + result , inline = True ) self . __root__ . extend ( result ) return self def copy ( self ) -> \"MessageChain\" : \"\"\" \u62f7\u8d1d\u672c\u6d88\u606f\u94fe. Returns: MessageChain: \u62f7\u8d1d\u7684\u526f\u672c. \"\"\" return MessageChain ( deepcopy ( self . __root__ ), inline = True ) def index ( self , element_type : Type [ Element_T ]) -> Union [ int , None ]: \"\"\" \u5bfb\u627e\u7b2c\u4e00\u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u5143\u7d20, \u5e76\u8fd4\u56de\u5176\u4e0b\u6807. Args: element_type (Type[Element]): \u5143\u7d20\u6216\u5143\u7d20\u7c7b\u578b Returns: Optional[int]: \u5143\u7d20\u4e0b\u6807, \u82e5\u672a\u627e\u5230\u5219\u4e3a None. \"\"\" return next ( ( i for i , e in enumerate ( self . __root__ ) if isinstance ( e , element_type )), None , ) def count ( self , element : Union [ Type [ Element_T ], Element_T ]) -> int : \"\"\" \u7edf\u8ba1\u5171\u6709\u591a\u5c11\u4e2a\u6307\u5b9a\u7684\u5143\u7d20. Args: element (Type[Element] | Element): \u5143\u7d20\u6216\u5143\u7d20\u7c7b\u578b Returns: int: \u5143\u7d20\u6570\u91cf \"\"\" if isinstance ( element , Element ): return sum ( i == element for i in self . __root__ ) return sum ( isinstance ( i , element ) for i in self . __root__ ) def asSendable ( self ) -> \"MessageChain\" : \"\"\"\u5c06\u6d88\u606f\u94fe\u8f6c\u6362\u4e3a\u53ef\u53d1\u9001\u5f62\u5f0f (\u53bb\u9664 Source, Quote, File) Returns: MessageChain: \u8f6c\u6362\u540e\u7684\u6d88\u606f\u94fe. \"\"\" return self . exclude ( Source , Quote , File ) def __eq__ ( self , other : Union [ List [ Union [ Element , str ]], \"MessageChain\" ]) -> bool : if not isinstance ( other , ( list , MessageChain )): return False if isinstance ( other , list ): other = MessageChain ( other ) return other . asSendable () . __root__ == self . asSendable () . __root__ def __add__ ( self , content : Union [ \"MessageChain\" , List [ Element ], Element , str ]) -> \"MessageChain\" : if isinstance ( content , str ): content = Plain ( content ) if isinstance ( content , Element ): content = [ content ] if isinstance ( content , MessageChain ): content = content . __root__ return MessageChain ( self . __root__ + content , inline = True ) def __radd__ ( self , content : Union [ \"MessageChain\" , List [ Element ], Element , str ]) -> \"MessageChain\" : if isinstance ( content , str ): content = Plain ( content ) if isinstance ( content , Element ): content = [ content ] if isinstance ( content , MessageChain ): content = content . __root__ return MessageChain ( content + self . __root__ , inline = True ) def __iadd__ ( self , content : Union [ \"MessageChain\" , List [ Element ], Element , str ]) -> \"MessageChain\" : if isinstance ( content , str ): content = Plain ( content ) if isinstance ( content , Element ): content = [ content ] if isinstance ( content , MessageChain ): content = content . __root__ self . __root__ . extend ( content ) return self def __mul__ ( self , time : int ) -> \"MessageChain\" : result = [] for _ in range ( time ): result . extend ( deepcopy ( self . __root__ )) return MessageChain ( result , inline = True ) def __imul__ ( self , time : int ) -> \"MessageChain\" : self . __root__ = self . __mul__ ( time ) . __root__ return self def __len__ ( self ) -> int : return len ( self . __root__ ) def asPersistentString ( self , * , binary : bool = True , include : Iterable [ Type [ Element ]] = (), exclude : Iterable [ Type [ Element ]] = (), ) -> str : \"\"\"\u8f6c\u6362\u4e3a\u6301\u4e45\u5316\u5b57\u7b26\u4e32. Args: binary (bool, optional): \u662f\u5426\u9644\u5e26\u56fe\u7247\u6216\u58f0\u97f3\u7684\u4e8c\u8fdb\u5236. \u9ed8\u8ba4\u4e3a True. include (Iterable[Type[Element]], optional): \u7b5b\u9009, \u53ea\u5305\u542b\u672c\u53c2\u6570\u63d0\u4f9b\u7684\u5143\u7d20\u7c7b\u578b. exclude (Iterable[Type[Element]], optional): \u7b5b\u9009, \u6392\u9664\u672c\u53c2\u6570\u63d0\u4f9b\u7684\u5143\u7d20\u7c7b\u578b. Raises: ValueError: \u540c\u65f6\u63d0\u4f9b include \u4e0e exclude Returns: str: \u6301\u4e45\u5316\u5b57\u7b26\u4e32. \u4e0d\u662f Mirai Code. \"\"\" string_list = [] include = tuple ( include ) exclude = tuple ( exclude ) if include and exclude : raise ValueError ( \"Can not present include and exclude at same time!\" ) for i in self . __root__ : if ( ( include and isinstance ( i , include )) or ( exclude and not isinstance ( i , exclude )) or not ( include or exclude ) ): if isinstance ( i , Plain ): string_list . append ( i . asPersistentString () . replace ( \"[\" , \"[_\" )) elif not isinstance ( i , MultimediaElement ) or binary : string_list . append ( i . asPersistentString ()) else : string_list . append ( i . asNoBinaryPersistentString ()) return \"\" . join ( string_list ) async def download_binary ( self ) -> Self : \"\"\"\u4e0b\u8f7d\u6d88\u606f\u4e2d\u6240\u6709\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u5e76\u4fdd\u5b58\u5728\u5143\u7d20\u5b9e\u4f8b\u5185\"\"\" for elem in self . __root__ : if isinstance ( elem , MultimediaElement ): await elem . get_bytes () return self @classmethod def fromPersistentString ( cls , string : str ) -> \"MessageChain\" : \"\"\"\u4ece\u6301\u4e45\u5316\u5b57\u7b26\u4e32\u751f\u6210\u6d88\u606f\u94fe. Returns: MessageChain: \u8fd8\u539f\u7684\u6d88\u606f\u94fe. \"\"\" result = [] for match in re . split ( r \"(\\[mirai:.+?\\])\" , string ): if mirai := re . fullmatch ( r \"\\[mirai:(.+?)(:(.+?))\\]\" , match ): j_string = mirai . group ( 3 ) element_cls = ELEMENT_MAPPING [ mirai . group ( 1 )] result . append ( element_cls . parse_obj ( json . loads ( j_string ))) elif match : result . append ( Plain ( match . replace ( \"[_\" , \"[\" ))) return MessageChain . create ( result ) def _to_mapping_str ( self , * , remove_source : bool = True , remove_quote : bool = True , remove_extra_space : bool = False , ) -> Tuple [ str , Dict [ str , Element ]]: \"\"\"\u8f6c\u6362\u6d88\u606f\u94fe\u4e3a\u6620\u5c04\u5b57\u7b26\u4e32\u4e0e\u6620\u5c04\u5b57\u5178\u7684\u5143\u7ec4. Args: remove_source (bool, optional): \u662f\u5426\u79fb\u9664\u6d88\u606f\u94fe\u4e2d\u7684 Source \u5143\u7d20. \u9ed8\u8ba4\u4e3a True. remove_quote (bool, optional): \u662f\u5426\u79fb\u9664\u6d88\u606f\u94fe\u4e2d\u7684 Quote \u5143\u7d20. \u9ed8\u8ba4\u4e3a True. remove_extra_space (bool, optional): \u662f\u5426\u79fb\u9664 Quote At AtAll \u7684\u591a\u4f59\u7a7a\u683c. \u9ed8\u8ba4\u4e3a False. Returns: Tuple[str, Dict[str, Element]]: \u751f\u6210\u7684\u6620\u5c04\u5b57\u7b26\u4e32\u4e0e\u6620\u5c04\u5b57\u5178\u7684\u5143\u7ec4 \"\"\" elem_mapping : Dict [ str , Element ] = {} elem_str_list : List [ str ] = [] for i , elem in enumerate ( self . __root__ ): if not isinstance ( elem , Plain ): if remove_quote and isinstance ( elem , Quote ): continue if remove_source and isinstance ( elem , Source ): continue elem_mapping [ str ( i )] = elem elem_str_list . append ( f \" \\x02 { i } _ { elem . type } \\x03 \" ) elif ( remove_extra_space and i # not first element and isinstance ( self . __root__ [ i - 1 ], ( Quote , At , AtAll ) ) # following elements which have an dumb trailing space and elem . text . startswith ( \" \" ) # extra space (count >= 2) ): elem_str_list . append ( elem . text [ 1 :]) else : elem_str_list . append ( elem . text ) return \"\" . join ( elem_str_list ), elem_mapping @classmethod def _from_mapping_string ( cls , string : str , mapping : Dict [ str , Element ]) -> \"MessageChain\" : \"\"\"\u4ece\u6620\u5c04\u5b57\u7b26\u4e32\u4e0e\u6620\u5c04\u5b57\u5178\u7684\u5143\u7ec4\u8fd8\u539f\u6d88\u606f\u94fe. Args: string (str): \u6620\u5c04\u5b57\u7b26\u4e32 mapping (Dict[int, Element]): \u6620\u5c04\u5b57\u5178. Returns: MessageChain: \u6784\u5efa\u7684\u6d88\u606f\u94fe \"\"\" elements : List [ Element ] = [] for x in re . split ( \"( \\x02\\\\ d+_ \\\\ w+ \\x03 )\" , string ): if x : if x [ 0 ] == \" \\x02 \" and x [ - 1 ] == \" \\x03 \" : index , class_name = x [ 1 : - 1 ] . split ( \"_\" ) if not isinstance ( mapping [ index ], ELEMENT_MAPPING [ class_name ]): raise ValueError ( \"Validation failed: not matching element type!\" ) elements . append ( mapping [ index ]) else : elements . append ( Plain ( x )) chain = cls ([], inline = True ) chain . __root__ = elements return chain def removeprefix ( self , prefix : str , * , copy : bool = True , skip_header : bool = True ) -> \"MessageChain\" : \"\"\"\u79fb\u9664\u6d88\u606f\u94fe\u524d\u7f00. Args: prefix (str): \u8981\u79fb\u9664\u7684\u524d\u7f00. copy (bool, optional): \u662f\u5426\u5728\u526f\u672c\u4e0a\u4fee\u6539, \u9ed8\u8ba4\u4e3a True. skip_header (bool, optional): \u662f\u5426\u8981\u5ffd\u7565 Source \u4e0e Quote \u7c7b\u578b\u67e5\u627e, \u9ed8\u8ba4\u4e3a True. (\u79fb\u9664\u540e\u4ecd\u4f1a\u5e26\u4e0a Source \u4e0e Quote) Returns: MessageChain: \u4fee\u6539\u540e\u7684\u6d88\u606f\u94fe, \u82e5\u672a\u79fb\u9664\u5219\u539f\u6837\u8fd4\u56de. \"\"\" header = [] elements = [] if not skip_header : elements = self . __root__ [:] else : for element in self . __root__ : if isinstance ( element , ( Quote , Source )): header . append ( element ) else : elements . append ( element ) if copy : header = deepcopy ( header ) elements = deepcopy ( elements ) if not elements or not isinstance ( elements [ 0 ], Plain ): return self . copy () if copy else self if elements [ 0 ] . text . startswith ( prefix ): elements [ 0 ] . text = elements [ 0 ] . text [ len ( prefix ) :] if copy : return MessageChain ( header + elements , inline = True ) self . __root__ = header + elements return self def removesuffix ( self , suffix : str , * , copy : bool = True ) -> \"MessageChain\" : \"\"\"\u79fb\u9664\u6d88\u606f\u94fe\u540e\u7f00. Args: suffix (str): \u8981\u79fb\u9664\u7684\u540e\u7f00. copy (bool, optional): \u662f\u5426\u5728\u526f\u672c\u4e0a\u4fee\u6539, \u9ed8\u8ba4\u4e3a True. Returns: MessageChain: \u4fee\u6539\u540e\u7684\u6d88\u606f\u94fe, \u82e5\u672a\u79fb\u9664\u5219\u539f\u6837\u8fd4\u56de. \"\"\" elements = deepcopy ( self . __root__ ) if copy else self . __root__ if not elements or not isinstance ( elements [ - 1 ], Plain ): return self . copy () if copy else self last_elem : Plain = elements [ - 1 ] if last_elem . text . endswith ( suffix ): last_elem . text = last_elem . text [: - len ( suffix )] if copy : return MessageChain ( elements , inline = True ) self . __root__ = elements return self def join ( self , * chains : Union [ \"MessageChain\" , Iterable [ \"MessageChain\" ]], merge : bool = True ) -> \"MessageChain\" : \"\"\"\u5c06\u591a\u4e2a\u6d88\u606f\u94fe\u8fde\u63a5\u8d77\u6765, \u5e76\u5728\u5176\u4e2d\u63d2\u5165\u81ea\u8eab. Args: *chains (Iterable[MessageChain]): \u8981\u8fde\u63a5\u7684\u6d88\u606f\u94fe. merge (bool, optional): \u662f\u5426\u5408\u5e76\u6d88\u606f\u94fe\u6587\u672c, \u9ed8\u8ba4\u4e3a True. Returns: MessageChain: \u8fde\u63a5\u540e\u7684\u6d88\u606f\u94fe. \"\"\" result : List [ Element ] = [] list_chains : List [ MessageChain ] = [] for chain in chains : if isinstance ( chain , MessageChain ): list_chains . append ( chain ) else : list_chains . extend ( chain ) for chain in list_chains : if chain is not chains [ 0 ]: result . extend ( deepcopy ( self . __root__ )) result . extend ( deepcopy ( chain . __root__ )) return MessageChain ( result , inline = True ) . merge () if merge else MessageChain ( result , inline = True ) def replace ( self , old : \"MessageChain | Iterable[Element] | Element\" , new : \"MessageChain | Iterable[Element] | Element\" , ) -> \"MessageChain\" : \"\"\"\u66ff\u6362\u6d88\u606f\u94fe\u4e2d\u7684\u4e00\u90e8\u5206. (\u5728\u526f\u672c\u4e0a\u64cd\u4f5c) Args: old (MessageChain): \u8981\u66ff\u6362\u7684\u6d88\u606f\u94fe. new (MessageChain): \u66ff\u6362\u540e\u7684\u6d88\u606f\u94fe. Returns: MessageChain: \u4fee\u6539\u540e\u7684\u6d88\u606f\u94fe, \u82e5\u672a\u66ff\u6362\u5219\u539f\u6837\u8fd4\u56de. \"\"\" if not isinstance ( old , MessageChain ): old = MessageChain . create ( old ) if not isinstance ( new , MessageChain ): new = MessageChain . create ( new ) index_list : List [ int ] = self . findSubChain ( old ) unzipped_new : List [ Union [ str , Element ]] = new . unzip () unzipped_old : List [ Union [ str , Element ]] = old . unzip () unzipped_self : List [ Union [ str , Element ]] = self . unzip () unzipped_result : List [ Union [ str , Element ]] = [] last_end : int = 0 for start in index_list : unzipped_result . extend ( unzipped_self [ last_end : start ]) last_end = start + len ( unzipped_old ) unzipped_result . extend ( unzipped_new ) unzipped_result . extend ( unzipped_self [ last_end :]) # Merge result result_list : List [ Element ] = [] char_stk : List [ str ] = [] for v in unzipped_result : if isinstance ( v , str ): char_stk . append ( v ) else : result_list . append ( Plain ( \"\" . join ( char_stk ))) char_stk = [] result_list . append ( v ) if char_stk : result_list . append ( Plain ( \"\" . join ( char_stk ))) return MessageChain ( result_list , inline = True )","title":"MessageChain"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.__root__","text":"__root__ : List [ Element ] = None \u5e95\u5c42\u5143\u7d20\u5217\u8868","title":"__root__"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.__contains__","text":"__contains__ ( item : Union [ 'MessageChain' , Type [ Element_T ], Element_T , str ]) -> bool \u662f\u5426\u5305\u542b\u7279\u5b9a\u5bf9\u8c61 Source code in graia/ariadne/message/chain.py 228 229 230 231 232 def __contains__ ( self , item : Union [ \"MessageChain\" , Type [ Element_T ], Element_T , str ]) -> bool : \"\"\" \u662f\u5426\u5305\u542b\u7279\u5b9a\u5bf9\u8c61 \"\"\" return self . has ( item )","title":"__contains__()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.__getitem__","text":"__getitem__ ( item : Union [ Tuple [ Type [ Element_T ], int ], Type [ Element_T ], int , slice ]) -> Union [ List [ Element ], Element , 'MessageChain' ] \u53ef\u901a\u8fc7\u5207\u7247\u53d6\u51fa\u5b50\u6d88\u606f\u94fe, \u6216\u5143\u7d20. \u901a\u8fc7 type, count \u578b\u5143\u7ec4\u53d6\u51fa\u524d count \u4e2a type \u5143\u7d20\u7ec4\u6210\u7684\u5217\u8868 \u901a\u8fc7 type \u53d6\u51fa\u5c5e\u4e8e type \u7684\u5143\u7d20\u5217\u8868 \u901a\u8fc7 int \u53d6\u51fa\u5bf9\u5e94\u4f4d\u7f6e\u5143\u7d20. Parameters: Name Type Description Default item Union [ Tuple [ Type [ Element ], int ], Type [ Element ], int , slice ] \u7d22\u5f15\u9879 required Returns: Type Description Union [ List [ Element ], Element , 'MessageChain'] Union[List[Element], Element, MessageChain]: \u7d22\u5f15\u7ed3\u679c. Source code in graia/ariadne/message/chain.py 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 def __getitem__ ( # type: ignore self , item : Union [ Tuple [ Type [ Element_T ], int ], Type [ Element_T ], int , slice ] ) -> Union [ List [ Element ], Element , \"MessageChain\" ]: \"\"\" \u53ef\u901a\u8fc7\u5207\u7247\u53d6\u51fa\u5b50\u6d88\u606f\u94fe, \u6216\u5143\u7d20. \u901a\u8fc7 `type, count` \u578b\u5143\u7ec4\u53d6\u51fa\u524d `count` \u4e2a `type` \u5143\u7d20\u7ec4\u6210\u7684\u5217\u8868 \u901a\u8fc7 `type` \u53d6\u51fa\u5c5e\u4e8e `type` \u7684\u5143\u7d20\u5217\u8868 \u901a\u8fc7 `int` \u53d6\u51fa\u5bf9\u5e94\u4f4d\u7f6e\u5143\u7d20. Args: item (Union[Tuple[Type[Element], int], Type[Element], int, slice]): \u7d22\u5f15\u9879 Returns: Union[List[Element], Element, MessageChain]: \u7d22\u5f15\u7ed3\u679c. \"\"\" if isinstance ( item , type ) and issubclass ( item , Element ): return self . get ( item ) if isinstance ( item , tuple ): return self . get ( * item ) if isinstance ( item , int ): return self . __root__ [ item ] if isinstance ( item , slice ): return MessageChain ( self . __root__ [ item ], inline = True ) raise NotImplementedError ( f \" { item } is not allowed for item getting\" )","title":"__getitem__()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain._from_mapping_string","text":"_from_mapping_string ( string : str , mapping : Dict [ str , Element ]) -> 'MessageChain' \u4ece\u6620\u5c04\u5b57\u7b26\u4e32\u4e0e\u6620\u5c04\u5b57\u5178\u7684\u5143\u7ec4\u8fd8\u539f\u6d88\u606f\u94fe. Parameters: Name Type Description Default string str \u6620\u5c04\u5b57\u7b26\u4e32 required mapping Dict [ int , Element ] \u6620\u5c04\u5b57\u5178. required Returns: Name Type Description MessageChain 'MessageChain' \u6784\u5efa\u7684\u6d88\u606f\u94fe Source code in graia/ariadne/message/chain.py 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 @classmethod def _from_mapping_string ( cls , string : str , mapping : Dict [ str , Element ]) -> \"MessageChain\" : \"\"\"\u4ece\u6620\u5c04\u5b57\u7b26\u4e32\u4e0e\u6620\u5c04\u5b57\u5178\u7684\u5143\u7ec4\u8fd8\u539f\u6d88\u606f\u94fe. Args: string (str): \u6620\u5c04\u5b57\u7b26\u4e32 mapping (Dict[int, Element]): \u6620\u5c04\u5b57\u5178. Returns: MessageChain: \u6784\u5efa\u7684\u6d88\u606f\u94fe \"\"\" elements : List [ Element ] = [] for x in re . split ( \"( \\x02\\\\ d+_ \\\\ w+ \\x03 )\" , string ): if x : if x [ 0 ] == \" \\x02 \" and x [ - 1 ] == \" \\x03 \" : index , class_name = x [ 1 : - 1 ] . split ( \"_\" ) if not isinstance ( mapping [ index ], ELEMENT_MAPPING [ class_name ]): raise ValueError ( \"Validation failed: not matching element type!\" ) elements . append ( mapping [ index ]) else : elements . append ( Plain ( x )) chain = cls ([], inline = True ) chain . __root__ = elements return chain","title":"_from_mapping_string()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain._to_mapping_str","text":"_to_mapping_str ( * , remove_source : bool = True , remove_quote : bool = True , remove_extra_space : bool = False ) -> Tuple [ str , Dict [ str , Element ]] \u8f6c\u6362\u6d88\u606f\u94fe\u4e3a\u6620\u5c04\u5b57\u7b26\u4e32\u4e0e\u6620\u5c04\u5b57\u5178\u7684\u5143\u7ec4. Parameters: Name Type Description Default remove_source bool \u662f\u5426\u79fb\u9664\u6d88\u606f\u94fe\u4e2d\u7684 Source \u5143\u7d20. \u9ed8\u8ba4\u4e3a True. True remove_quote bool \u662f\u5426\u79fb\u9664\u6d88\u606f\u94fe\u4e2d\u7684 Quote \u5143\u7d20. \u9ed8\u8ba4\u4e3a True. True remove_extra_space bool \u662f\u5426\u79fb\u9664 Quote At AtAll \u7684\u591a\u4f59\u7a7a\u683c. \u9ed8\u8ba4\u4e3a False. False Returns: Type Description Tuple [ str , Dict [ str , Element ]] Tuple[str, Dict[str, Element]]: \u751f\u6210\u7684\u6620\u5c04\u5b57\u7b26\u4e32\u4e0e\u6620\u5c04\u5b57\u5178\u7684\u5143\u7ec4 Source code in graia/ariadne/message/chain.py 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 def _to_mapping_str ( self , * , remove_source : bool = True , remove_quote : bool = True , remove_extra_space : bool = False , ) -> Tuple [ str , Dict [ str , Element ]]: \"\"\"\u8f6c\u6362\u6d88\u606f\u94fe\u4e3a\u6620\u5c04\u5b57\u7b26\u4e32\u4e0e\u6620\u5c04\u5b57\u5178\u7684\u5143\u7ec4. Args: remove_source (bool, optional): \u662f\u5426\u79fb\u9664\u6d88\u606f\u94fe\u4e2d\u7684 Source \u5143\u7d20. \u9ed8\u8ba4\u4e3a True. remove_quote (bool, optional): \u662f\u5426\u79fb\u9664\u6d88\u606f\u94fe\u4e2d\u7684 Quote \u5143\u7d20. \u9ed8\u8ba4\u4e3a True. remove_extra_space (bool, optional): \u662f\u5426\u79fb\u9664 Quote At AtAll \u7684\u591a\u4f59\u7a7a\u683c. \u9ed8\u8ba4\u4e3a False. Returns: Tuple[str, Dict[str, Element]]: \u751f\u6210\u7684\u6620\u5c04\u5b57\u7b26\u4e32\u4e0e\u6620\u5c04\u5b57\u5178\u7684\u5143\u7ec4 \"\"\" elem_mapping : Dict [ str , Element ] = {} elem_str_list : List [ str ] = [] for i , elem in enumerate ( self . __root__ ): if not isinstance ( elem , Plain ): if remove_quote and isinstance ( elem , Quote ): continue if remove_source and isinstance ( elem , Source ): continue elem_mapping [ str ( i )] = elem elem_str_list . append ( f \" \\x02 { i } _ { elem . type } \\x03 \" ) elif ( remove_extra_space and i # not first element and isinstance ( self . __root__ [ i - 1 ], ( Quote , At , AtAll ) ) # following elements which have an dumb trailing space and elem . text . startswith ( \" \" ) # extra space (count >= 2) ): elem_str_list . append ( elem . text [ 1 :]) else : elem_str_list . append ( elem . text ) return \"\" . join ( elem_str_list ), elem_mapping","title":"_to_mapping_str()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.append","text":"append ( element : Union [ Element , str ], copy : bool = False ) -> 'MessageChain' \u5411\u6d88\u606f\u94fe\u6700\u540e\u8ffd\u52a0\u5355\u4e2a\u5143\u7d20 Parameters: Name Type Description Default element Element \u8981\u6dfb\u52a0\u7684\u5143\u7d20 required copy bool \u662f\u5426\u8981\u5728\u526f\u672c\u4e0a\u4fee\u6539. False Returns: Name Type Description MessageChain 'MessageChain' copy = True \u65f6\u8fd4\u56de\u526f\u672c, \u5426\u5219\u8fd4\u56de\u81ea\u5df1\u7684\u5f15\u7528. Source code in graia/ariadne/message/chain.py 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 def append ( self , element : Union [ Element , str ], copy : bool = False ) -> \"MessageChain\" : \"\"\" \u5411\u6d88\u606f\u94fe\u6700\u540e\u8ffd\u52a0\u5355\u4e2a\u5143\u7d20 Args: element (Element): \u8981\u6dfb\u52a0\u7684\u5143\u7d20 copy (bool): \u662f\u5426\u8981\u5728\u526f\u672c\u4e0a\u4fee\u6539. Returns: MessageChain: copy = True \u65f6\u8fd4\u56de\u526f\u672c, \u5426\u5219\u8fd4\u56de\u81ea\u5df1\u7684\u5f15\u7528. \"\"\" chain_ref = self . copy () if copy else self if isinstance ( element , str ): element = Plain ( element ) chain_ref . __root__ . append ( element ) return chain_ref","title":"append()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.asDisplay","text":"asDisplay () -> str \u83b7\u53d6\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8868\u793a\u7684\u6d88\u606f\u94fe, \u4e14\u8d8b\u4e8e\u901a\u5e38\u4f60\u89c1\u5230\u7684\u6837\u5b50. Returns: Name Type Description str str \u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8868\u793a\u7684\u6d88\u606f\u94fe Source code in graia/ariadne/message/chain.py 213 214 215 216 217 218 219 220 def asDisplay ( self ) -> str : \"\"\" \u83b7\u53d6\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8868\u793a\u7684\u6d88\u606f\u94fe, \u4e14\u8d8b\u4e8e\u901a\u5e38\u4f60\u89c1\u5230\u7684\u6837\u5b50. Returns: str: \u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8868\u793a\u7684\u6d88\u606f\u94fe \"\"\" return \"\" . join ( i . asDisplay () for i in self . __root__ )","title":"asDisplay()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.asPersistentString","text":"asPersistentString ( * , binary : bool = True , include : Iterable [ Type [ Element ]] = (), exclude : Iterable [ Type [ Element ]] = ()) -> str \u8f6c\u6362\u4e3a\u6301\u4e45\u5316\u5b57\u7b26\u4e32. Parameters: Name Type Description Default binary bool \u662f\u5426\u9644\u5e26\u56fe\u7247\u6216\u58f0\u97f3\u7684\u4e8c\u8fdb\u5236. \u9ed8\u8ba4\u4e3a True. True include Iterable [ Type [ Element ]] \u7b5b\u9009, \u53ea\u5305\u542b\u672c\u53c2\u6570\u63d0\u4f9b\u7684\u5143\u7d20\u7c7b\u578b. () exclude Iterable [ Type [ Element ]] \u7b5b\u9009, \u6392\u9664\u672c\u53c2\u6570\u63d0\u4f9b\u7684\u5143\u7d20\u7c7b\u578b. () Raises: Type Description ValueError \u540c\u65f6\u63d0\u4f9b include \u4e0e exclude Returns: Name Type Description str str \u6301\u4e45\u5316\u5b57\u7b26\u4e32. \u4e0d\u662f Mirai Code. Source code in graia/ariadne/message/chain.py 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 def asPersistentString ( self , * , binary : bool = True , include : Iterable [ Type [ Element ]] = (), exclude : Iterable [ Type [ Element ]] = (), ) -> str : \"\"\"\u8f6c\u6362\u4e3a\u6301\u4e45\u5316\u5b57\u7b26\u4e32. Args: binary (bool, optional): \u662f\u5426\u9644\u5e26\u56fe\u7247\u6216\u58f0\u97f3\u7684\u4e8c\u8fdb\u5236. \u9ed8\u8ba4\u4e3a True. include (Iterable[Type[Element]], optional): \u7b5b\u9009, \u53ea\u5305\u542b\u672c\u53c2\u6570\u63d0\u4f9b\u7684\u5143\u7d20\u7c7b\u578b. exclude (Iterable[Type[Element]], optional): \u7b5b\u9009, \u6392\u9664\u672c\u53c2\u6570\u63d0\u4f9b\u7684\u5143\u7d20\u7c7b\u578b. Raises: ValueError: \u540c\u65f6\u63d0\u4f9b include \u4e0e exclude Returns: str: \u6301\u4e45\u5316\u5b57\u7b26\u4e32. \u4e0d\u662f Mirai Code. \"\"\" string_list = [] include = tuple ( include ) exclude = tuple ( exclude ) if include and exclude : raise ValueError ( \"Can not present include and exclude at same time!\" ) for i in self . __root__ : if ( ( include and isinstance ( i , include )) or ( exclude and not isinstance ( i , exclude )) or not ( include or exclude ) ): if isinstance ( i , Plain ): string_list . append ( i . asPersistentString () . replace ( \"[\" , \"[_\" )) elif not isinstance ( i , MultimediaElement ) or binary : string_list . append ( i . asPersistentString ()) else : string_list . append ( i . asNoBinaryPersistentString ()) return \"\" . join ( string_list )","title":"asPersistentString()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.asSendable","text":"asSendable () -> 'MessageChain' \u5c06\u6d88\u606f\u94fe\u8f6c\u6362\u4e3a\u53ef\u53d1\u9001\u5f62\u5f0f (\u53bb\u9664 Source, Quote, File) Returns: Name Type Description MessageChain 'MessageChain' \u8f6c\u6362\u540e\u7684\u6d88\u606f\u94fe. Source code in graia/ariadne/message/chain.py 536 537 538 539 540 541 542 def asSendable ( self ) -> \"MessageChain\" : \"\"\"\u5c06\u6d88\u606f\u94fe\u8f6c\u6362\u4e3a\u53ef\u53d1\u9001\u5f62\u5f0f (\u53bb\u9664 Source, Quote, File) Returns: MessageChain: \u8f6c\u6362\u540e\u7684\u6d88\u606f\u94fe. \"\"\" return self . exclude ( Source , Quote , File )","title":"asSendable()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.build_chain","text":"build_chain ( obj : Iterable [ Union [ dict , Element , str ]]) -> List [ Element ] \u5185\u90e8\u63a5\u53e3, \u4f1a\u81ea\u52a8\u53cd\u5e8f\u5217\u5316\u5bf9\u8c61\u5e76\u751f\u6210. Parameters: Name Type Description Default obj Iterable [ Union [ dict , Element , str ]] \u9700\u8981\u53cd\u5e8f\u5217\u5316\u7684\u5bf9\u8c61 required Returns: Type Description List [ Element ] List[Element]: \u5185\u90e8\u627f\u8f7d\u6709\u5c3d\u91cf\u6709\u6548\u7684\u6d88\u606f\u5143\u7d20\u7684\u5217\u8868 Source code in graia/ariadne/message/chain.py 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 @staticmethod def build_chain ( obj : Iterable [ Union [ dict , Element , str ]]) -> List [ Element ]: \"\"\"\u5185\u90e8\u63a5\u53e3, \u4f1a\u81ea\u52a8\u53cd\u5e8f\u5217\u5316\u5bf9\u8c61\u5e76\u751f\u6210. Args: obj (Iterable[Union[dict, Element, str]]): \u9700\u8981\u53cd\u5e8f\u5217\u5316\u7684\u5bf9\u8c61 Returns: List[Element]: \u5185\u90e8\u627f\u8f7d\u6709\u5c3d\u91cf\u6709\u6548\u7684\u6d88\u606f\u5143\u7d20\u7684\u5217\u8868 \"\"\" element_list : List [ Element ] = [] for i in obj : if isinstance ( i , Element ): element_list . append ( i ) elif isinstance ( i , dict ) and \"type\" in i : for element_cls in gen_subclass ( Element ): if element_cls . __name__ == i [ \"type\" ]: element_list . append ( element_cls . parse_obj ( i )) break elif isinstance ( i , str ): element_list . append ( Plain ( i )) return element_list","title":"build_chain()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.copy","text":"copy () -> 'MessageChain' \u62f7\u8d1d\u672c\u6d88\u606f\u94fe. Returns: Name Type Description MessageChain 'MessageChain' \u62f7\u8d1d\u7684\u526f\u672c. Source code in graia/ariadne/message/chain.py 497 498 499 500 501 502 503 504 def copy ( self ) -> \"MessageChain\" : \"\"\" \u62f7\u8d1d\u672c\u6d88\u606f\u94fe. Returns: MessageChain: \u62f7\u8d1d\u7684\u526f\u672c. \"\"\" return MessageChain ( deepcopy ( self . __root__ ), inline = True )","title":"copy()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.count","text":"count ( element : Union [ Type [ Element_T ], Element_T ]) -> int \u7edf\u8ba1\u5171\u6709\u591a\u5c11\u4e2a\u6307\u5b9a\u7684\u5143\u7d20. Parameters: Name Type Description Default element Type [ Element ] | Element \u5143\u7d20\u6216\u5143\u7d20\u7c7b\u578b required Returns: Name Type Description int int \u5143\u7d20\u6570\u91cf Source code in graia/ariadne/message/chain.py 522 523 524 525 526 527 528 529 530 531 532 533 534 def count ( self , element : Union [ Type [ Element_T ], Element_T ]) -> int : \"\"\" \u7edf\u8ba1\u5171\u6709\u591a\u5c11\u4e2a\u6307\u5b9a\u7684\u5143\u7d20. Args: element (Type[Element] | Element): \u5143\u7d20\u6216\u5143\u7d20\u7c7b\u578b Returns: int: \u5143\u7d20\u6570\u91cf \"\"\" if isinstance ( element , Element ): return sum ( i == element for i in self . __root__ ) return sum ( isinstance ( i , element ) for i in self . __root__ )","title":"count()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.create","text":"create ( * elements : Union [ Iterable [ Element ], Element , str ]) -> 'MessageChain' \u521b\u5efa\u6d88\u606f\u94fe. \u6bd4\u8d77\u76f4\u63a5\u5b9e\u4f8b\u5316, \u672c\u65b9\u6cd5\u62e5\u6709\u66f4\u4e30\u5bcc\u7684\u8f93\u5165\u5b9e\u4f8b\u7c7b\u578b\u652f\u6301. Parameters: Name Type Description Default *elements Union [ Iterable [ Element ], Element , str ] \u5143\u7d20\u7684\u5bb9\u5668, \u4e3a\u627f\u8f7d\u5143\u7d20\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61/\u5355\u5143\u7d20\u5b9e\u4f8b, \u5b57\u7b26\u4e32\u4f1a\u88ab\u81ea\u52a8\u4e0d\u53ef\u9006\u7684\u8f6c\u6362\u4e3a Plain () Returns: Name Type Description MessageChain 'MessageChain' \u521b\u5efa\u7684\u6d88\u606f\u94fe Source code in graia/ariadne/message/chain.py 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 @classmethod def create ( cls , * elements : Union [ Iterable [ Element ], Element , str ]) -> \"MessageChain\" : \"\"\" \u521b\u5efa\u6d88\u606f\u94fe. \u6bd4\u8d77\u76f4\u63a5\u5b9e\u4f8b\u5316, \u672c\u65b9\u6cd5\u62e5\u6709\u66f4\u4e30\u5bcc\u7684\u8f93\u5165\u5b9e\u4f8b\u7c7b\u578b\u652f\u6301. Args: *elements (Union[Iterable[Element], Element, str]): \\ \u5143\u7d20\u7684\u5bb9\u5668, \u4e3a\u627f\u8f7d\u5143\u7d20\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61/\u5355\u5143\u7d20\u5b9e\u4f8b, \\ \u5b57\u7b26\u4e32\u4f1a\u88ab\u81ea\u52a8\u4e0d\u53ef\u9006\u7684\u8f6c\u6362\u4e3a `Plain` Returns: MessageChain: \u521b\u5efa\u7684\u6d88\u606f\u94fe \"\"\" element_list = [] for i in elements : if isinstance ( i , Element ): element_list . append ( i ) elif isinstance ( i , str ): element_list . append ( Plain ( i )) else : element_list . extend ( cls . build_chain ( i )) return cls ( __root__ = element_list , inline = True )","title":"create()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.download_binary","text":"download_binary () -> Self \u4e0b\u8f7d\u6d88\u606f\u4e2d\u6240\u6709\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u5e76\u4fdd\u5b58\u5728\u5143\u7d20\u5b9e\u4f8b\u5185 Source code in graia/ariadne/message/chain.py 631 632 633 634 635 636 async def download_binary ( self ) -> Self : \"\"\"\u4e0b\u8f7d\u6d88\u606f\u4e2d\u6240\u6709\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u5e76\u4fdd\u5b58\u5728\u5143\u7d20\u5b9e\u4f8b\u5185\"\"\" for elem in self . __root__ : if isinstance ( elem , MultimediaElement ): await elem . get_bytes () return self","title":"download_binary()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.endswith","text":"endswith ( string : str ) -> bool \u5224\u5b9a\u6d88\u606f\u94fe\u662f\u5426\u4ee5\u76f8\u5e94\u5b57\u7b26\u4e32\u7ed3\u5c3e Parameters: Name Type Description Default string str \u9700\u8981\u5224\u65ad\u7684\u5b57\u7b26\u4e32 required Returns: Name Type Description bool bool \u662f\u5426\u4ee5\u6b64\u5b57\u7b26\u4e32\u7ed3\u5c3e Source code in graia/ariadne/message/chain.py 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 def endswith ( self , string : str ) -> bool : \"\"\" \u5224\u5b9a\u6d88\u606f\u94fe\u662f\u5426\u4ee5\u76f8\u5e94\u5b57\u7b26\u4e32\u7ed3\u5c3e Args: string (str): \u9700\u8981\u5224\u65ad\u7684\u5b57\u7b26\u4e32 Returns: bool: \u662f\u5426\u4ee5\u6b64\u5b57\u7b26\u4e32\u7ed3\u5c3e \"\"\" if not self . __root__ or not isinstance ( self . __root__ [ - 1 ], Plain ): return False last_element : Plain = self . __root__ [ - 1 ] return last_element . text . endswith ( string )","title":"endswith()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.exclude","text":"exclude ( * types : Type [ Element ]) -> 'MessageChain' \u5c06\u9664\u4e86\u5728\u7ed9\u51fa\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b\u4e2d\u7b26\u5408\u7684\u6d88\u606f\u5143\u7d20\u91cd\u65b0\u5305\u88c5\u4e3a\u4e00\u4e2a\u65b0\u7684\u6d88\u606f\u94fe Parameters: Name Type Description Default *types Type [ Element ] \u5c06\u6392\u9664\u5728\u5916\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b () Returns: Name Type Description MessageChain 'MessageChain' \u8fd4\u56de\u7684\u6d88\u606f\u94fe\u4e2d\u4e0d\u5305\u542b\u53c2\u6570\u4e2d\u7ed9\u51fa\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b Source code in graia/ariadne/message/chain.py 318 319 320 321 322 323 324 325 326 327 def exclude ( self , * types : Type [ Element ]) -> \"MessageChain\" : \"\"\"\u5c06\u9664\u4e86\u5728\u7ed9\u51fa\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b\u4e2d\u7b26\u5408\u7684\u6d88\u606f\u5143\u7d20\u91cd\u65b0\u5305\u88c5\u4e3a\u4e00\u4e2a\u65b0\u7684\u6d88\u606f\u94fe Args: *types (Type[Element]): \u5c06\u6392\u9664\u5728\u5916\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b Returns: MessageChain: \u8fd4\u56de\u7684\u6d88\u606f\u94fe\u4e2d\u4e0d\u5305\u542b\u53c2\u6570\u4e2d\u7ed9\u51fa\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b \"\"\" return MessageChain ([ i for i in self . copy () . __root__ if type ( i ) not in types ], inline = True )","title":"exclude()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.extend","text":"extend ( * content : Union [ 'MessageChain' , Element , List [ Union [ Element , str ]]], copy : bool = False ) -> 'MessageChain' \u5411\u6d88\u606f\u94fe\u6700\u540e\u6dfb\u52a0\u5143\u7d20/\u5143\u7d20\u5217\u8868/\u6d88\u606f\u94fe Parameters: Name Type Description Default *content Union [ MessageChain , Element , List [ Element ]] \u8981\u6dfb\u52a0\u7684\u5143\u7d20/\u5143\u7d20\u5bb9\u5668. () copy bool \u662f\u5426\u8981\u5728\u526f\u672c\u4e0a\u4fee\u6539. False Returns: Name Type Description MessageChain 'MessageChain' copy = True \u65f6\u8fd4\u56de\u526f\u672c, \u5426\u5219\u8fd4\u56de\u81ea\u5df1\u7684\u5f15\u7528. Source code in graia/ariadne/message/chain.py 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 def extend ( self , * content : Union [ \"MessageChain\" , Element , List [ Union [ Element , str ]]], copy : bool = False , ) -> \"MessageChain\" : \"\"\" \u5411\u6d88\u606f\u94fe\u6700\u540e\u6dfb\u52a0\u5143\u7d20/\u5143\u7d20\u5217\u8868/\u6d88\u606f\u94fe Args: *content (Union[MessageChain, Element, List[Element]]): \u8981\u6dfb\u52a0\u7684\u5143\u7d20/\u5143\u7d20\u5bb9\u5668. copy (bool): \u662f\u5426\u8981\u5728\u526f\u672c\u4e0a\u4fee\u6539. Returns: MessageChain: copy = True \u65f6\u8fd4\u56de\u526f\u672c, \u5426\u5219\u8fd4\u56de\u81ea\u5df1\u7684\u5f15\u7528. \"\"\" result = [] for i in content : if isinstance ( i , Element ): result . append ( i ) elif isinstance ( i , str ): result . append ( Plain ( i )) elif isinstance ( i , MessageChain ): result . extend ( i . __root__ ) else : for e in i : if isinstance ( e , str ): result . append ( Plain ( e )) else : result . append ( e ) if copy : return MessageChain ( deepcopy ( self . __root__ ) + result , inline = True ) self . __root__ . extend ( result ) return self","title":"extend()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.findSubChain","text":"findSubChain ( subchain : Union [ 'MessageChain' , List [ Element ]]) -> List [ int ] \u5224\u65ad\u6d88\u606f\u94fe\u662f\u5426\u542b\u6709\u5b50\u94fe. \u4f7f\u7528 KMP \u7b97\u6cd5. Parameters: Name Type Description Default subchain Union [ MessageChain , List [ Element ]] \u8981\u5224\u65ad\u7684\u5b50\u94fe. required Returns: Type Description List [ int ] List[int]: \u6240\u6709\u627e\u5230\u7684\u4e0b\u6807. Source code in graia/ariadne/message/chain.py 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 def findSubChain ( self , subchain : Union [ \"MessageChain\" , List [ Element ]]) -> List [ int ]: \"\"\"\u5224\u65ad\u6d88\u606f\u94fe\u662f\u5426\u542b\u6709\u5b50\u94fe. \u4f7f\u7528 KMP \u7b97\u6cd5. Args: subchain (Union[MessageChain, List[Element]]): \u8981\u5224\u65ad\u7684\u5b50\u94fe. Returns: List[int]: \u6240\u6709\u627e\u5230\u7684\u4e0b\u6807. \"\"\" pattern : List [ Union [ str , Element ]] = ( subchain . unzip () if isinstance ( subchain , MessageChain ) else MessageChain ( subchain , inline = True ) . unzip () ) match_target : List [ Union [ str , Element ]] = self . unzip () if len ( match_target ) < len ( pattern ): return [] fallback : List [ int ] = [ 0 for _ in pattern ] current_fb : int = 0 # current fallback index for i in range ( 1 , len ( pattern )): while current_fb and pattern [ i ] != pattern [ current_fb ]: current_fb = fallback [ current_fb - 1 ] if pattern [ i ] == pattern [ current_fb ]: current_fb += 1 fallback [ i ] = current_fb match_index : List [ int ] = [] ptr = 0 for i , e in enumerate ( match_target ): while ptr and e != pattern [ ptr ]: ptr = fallback [ ptr - 1 ] if e == pattern [ ptr ]: ptr += 1 if ptr == len ( pattern ): match_index . append ( i - ptr + 1 ) ptr = fallback [ ptr - 1 ] return match_index","title":"findSubChain()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.fromPersistentString","text":"fromPersistentString ( string : str ) -> 'MessageChain' \u4ece\u6301\u4e45\u5316\u5b57\u7b26\u4e32\u751f\u6210\u6d88\u606f\u94fe. Returns: Name Type Description MessageChain 'MessageChain' \u8fd8\u539f\u7684\u6d88\u606f\u94fe. Source code in graia/ariadne/message/chain.py 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 @classmethod def fromPersistentString ( cls , string : str ) -> \"MessageChain\" : \"\"\"\u4ece\u6301\u4e45\u5316\u5b57\u7b26\u4e32\u751f\u6210\u6d88\u606f\u94fe. Returns: MessageChain: \u8fd8\u539f\u7684\u6d88\u606f\u94fe. \"\"\" result = [] for match in re . split ( r \"(\\[mirai:.+?\\])\" , string ): if mirai := re . fullmatch ( r \"\\[mirai:(.+?)(:(.+?))\\]\" , match ): j_string = mirai . group ( 3 ) element_cls = ELEMENT_MAPPING [ mirai . group ( 1 )] result . append ( element_cls . parse_obj ( json . loads ( j_string ))) elif match : result . append ( Plain ( match . replace ( \"[_\" , \"[\" ))) return MessageChain . create ( result )","title":"fromPersistentString()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.get","text":"get ( element_class : Type [ Element_T ], count : int = - 1 ) -> List [ Element_T ] \u83b7\u53d6\u6d88\u606f\u94fe\u4e2d\u6240\u6709\u7279\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u5143\u7d20 Parameters: Name Type Description Default element_class T \u6307\u5b9a\u7684\u6d88\u606f\u5143\u7d20\u7684\u7c7b\u578b, \u4f8b\u5982 \"Plain\", \"At\", \"Image\" \u7b49. required Returns: Type Description List [ Element_T ] List[T]: \u83b7\u53d6\u5230\u7684\u7b26\u5408\u8981\u6c42\u7684\u6240\u6709\u6d88\u606f\u5143\u7d20; \u53e6: \u53ef\u80fd\u662f\u7a7a\u5217\u8868([]). Source code in graia/ariadne/message/chain.py 174 175 176 177 178 179 180 181 182 183 184 185 186 def get ( self , element_class : Type [ Element_T ], count : int = - 1 ) -> List [ Element_T ]: \"\"\" \u83b7\u53d6\u6d88\u606f\u94fe\u4e2d\u6240\u6709\u7279\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u5143\u7d20 Args: element_class (T): \u6307\u5b9a\u7684\u6d88\u606f\u5143\u7d20\u7684\u7c7b\u578b, \u4f8b\u5982 \"Plain\", \"At\", \"Image\" \u7b49. Returns: List[T]: \u83b7\u53d6\u5230\u7684\u7b26\u5408\u8981\u6c42\u7684\u6240\u6709\u6d88\u606f\u5143\u7d20; \u53e6: \u53ef\u80fd\u662f\u7a7a\u5217\u8868([]). \"\"\" if count == - 1 : count = len ( self . __root__ ) return [ i for i in self . __root__ if isinstance ( i , element_class )][: count ]","title":"get()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.getFirst","text":"getFirst ( element_class : Type [ Element_T ]) -> Element_T \u83b7\u53d6\u6d88\u606f\u94fe\u4e2d\u7b2c 1 \u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u5143\u7d20 Parameters: Name Type Description Default element_class Type [ Element_T ] \u6307\u5b9a\u7684\u6d88\u606f\u5143\u7d20\u7684\u7c7b\u578b, \u4f8b\u5982 \"Plain\", \"At\", \"Image\" \u7b49. required Returns: Name Type Description Element_T Element_T \u6d88\u606f\u94fe\u7b2c 1 \u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u5143\u7d20 Source code in graia/ariadne/message/chain.py 201 202 203 204 205 206 207 208 209 210 211 def getFirst ( self , element_class : Type [ Element_T ]) -> Element_T : \"\"\" \u83b7\u53d6\u6d88\u606f\u94fe\u4e2d\u7b2c 1 \u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u5143\u7d20 Args: element_class (Type[Element_T]): \u6307\u5b9a\u7684\u6d88\u606f\u5143\u7d20\u7684\u7c7b\u578b, \u4f8b\u5982 \"Plain\", \"At\", \"Image\" \u7b49. Returns: Element_T: \u6d88\u606f\u94fe\u7b2c 1 \u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u5143\u7d20 \"\"\" return self . getOne ( element_class , 0 )","title":"getFirst()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.getOne","text":"getOne ( element_class : Type [ Element_T ], index : int ) -> Element_T \u83b7\u53d6\u6d88\u606f\u94fe\u4e2d\u7b2c index + 1 \u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u5143\u7d20 Parameters: Name Type Description Default element_class Type [ Element_T ] \u6307\u5b9a\u7684\u6d88\u606f\u5143\u7d20\u7684\u7c7b\u578b, \u4f8b\u5982 \"Plain\", \"At\", \"Image\" \u7b49. required index int \u7d22\u5f15, \u4ece 0 \u5f00\u59cb\u6570 required Returns: Name Type Description Element_T Element_T \u6d88\u606f\u94fe\u7b2c index + 1 \u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u5143\u7d20 Source code in graia/ariadne/message/chain.py 188 189 190 191 192 193 194 195 196 197 198 199 def getOne ( self , element_class : Type [ Element_T ], index : int ) -> Element_T : \"\"\" \u83b7\u53d6\u6d88\u606f\u94fe\u4e2d\u7b2c index + 1 \u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u5143\u7d20 Args: element_class (Type[Element_T]): \u6307\u5b9a\u7684\u6d88\u606f\u5143\u7d20\u7684\u7c7b\u578b, \u4f8b\u5982 \"Plain\", \"At\", \"Image\" \u7b49. index (int): \u7d22\u5f15, \u4ece 0 \u5f00\u59cb\u6570 Returns: Element_T: \u6d88\u606f\u94fe\u7b2c index + 1 \u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u5143\u7d20 \"\"\" return self . get ( element_class )[ index ]","title":"getOne()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.has","text":"has ( item : Union [ Element , Type [ Element ], 'MessageChain' , str ]) -> bool \u5224\u65ad\u6d88\u606f\u94fe\u4e2d\u662f\u5426\u542b\u6709\u7279\u5b9a\u7684\u5143\u7d20/\u5143\u7d20\u7c7b\u578b/\u6d88\u606f\u94fe/\u5b57\u7b26\u4e32. Parameters: Name Type Description Default item Union [ Element_T , Type [ Element_T ], 'MessageChain'] \u9700\u8981\u5224\u65ad\u7684\u5143\u7d20/\u5143\u7d20\u7c7b\u578b/\u6d88\u606f\u94fe/\u5b57\u7b26\u4e32. required Returns: Name Type Description bool bool \u5224\u65ad\u7ed3\u679c Source code in graia/ariadne/message/chain.py 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 def has ( self , item : Union [ Element , Type [ Element ], \"MessageChain\" , str ]) -> bool : \"\"\" \u5224\u65ad\u6d88\u606f\u94fe\u4e2d\u662f\u5426\u542b\u6709\u7279\u5b9a\u7684\u5143\u7d20/\u5143\u7d20\u7c7b\u578b/\u6d88\u606f\u94fe/\u5b57\u7b26\u4e32. Args: item (Union[Element_T, Type[Element_T], \"MessageChain\"]): \u9700\u8981\u5224\u65ad\u7684\u5143\u7d20/\u5143\u7d20\u7c7b\u578b/\u6d88\u606f\u94fe/\u5b57\u7b26\u4e32. Returns: bool: \u5224\u65ad\u7ed3\u679c \"\"\" if isinstance ( item , str ): return bool ( self . findSubChain ( MessageChain ([ Plain ( item )], inline = True ))) if isinstance ( item , Element ): return item in self . merge ( copy = True ) . __root__ if isinstance ( item , type ): return item in [ type ( i ) for i in self . __root__ ] if isinstance ( item , MessageChain ): return bool ( self . findSubChain ( item )) raise ValueError ( f \" { item } is not an acceptable argument!\" )","title":"has()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.include","text":"include ( * types : Type [ Element ]) -> 'MessageChain' \u5c06\u53ea\u5728\u7ed9\u51fa\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b\u4e2d\u7b26\u5408\u7684\u6d88\u606f\u5143\u7d20\u91cd\u65b0\u5305\u88c5\u4e3a\u4e00\u4e2a\u65b0\u7684\u6d88\u606f\u94fe Parameters: Name Type Description Default *types Type [ Un ] \u5c06\u53ea\u5305\u542b\u5728\u5185\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b () Returns: Name Type Description MessageChain 'MessageChain' \u8fd4\u56de\u7684\u6d88\u606f\u94fe\u4e2d\u53ea\u5305\u542b\u53c2\u6570\u4e2d\u7ed9\u51fa\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b Source code in graia/ariadne/message/chain.py 329 330 331 332 333 334 335 336 337 338 def include ( self , * types : Type [ Element ]) -> \"MessageChain\" : \"\"\"\u5c06\u53ea\u5728\u7ed9\u51fa\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b\u4e2d\u7b26\u5408\u7684\u6d88\u606f\u5143\u7d20\u91cd\u65b0\u5305\u88c5\u4e3a\u4e00\u4e2a\u65b0\u7684\u6d88\u606f\u94fe Args: *types (Type[Un]): \u5c06\u53ea\u5305\u542b\u5728\u5185\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b Returns: MessageChain: \u8fd4\u56de\u7684\u6d88\u606f\u94fe\u4e2d\u53ea\u5305\u542b\u53c2\u6570\u4e2d\u7ed9\u51fa\u7684\u6d88\u606f\u5143\u7d20\u7c7b\u578b \"\"\" return MessageChain ([ i for i in self . copy () . __root__ if type ( i ) in types ], inline = True )","title":"include()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.index","text":"index ( element_type : Type [ Element_T ]) -> Union [ int , None ] \u5bfb\u627e\u7b2c\u4e00\u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u5143\u7d20, \u5e76\u8fd4\u56de\u5176\u4e0b\u6807. Parameters: Name Type Description Default element_type Type [ Element ] \u5143\u7d20\u6216\u5143\u7d20\u7c7b\u578b required Returns: Type Description Union [ int , None] Optional[int]: \u5143\u7d20\u4e0b\u6807, \u82e5\u672a\u627e\u5230\u5219\u4e3a None. Source code in graia/ariadne/message/chain.py 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 def index ( self , element_type : Type [ Element_T ]) -> Union [ int , None ]: \"\"\" \u5bfb\u627e\u7b2c\u4e00\u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u5143\u7d20, \u5e76\u8fd4\u56de\u5176\u4e0b\u6807. Args: element_type (Type[Element]): \u5143\u7d20\u6216\u5143\u7d20\u7c7b\u578b Returns: Optional[int]: \u5143\u7d20\u4e0b\u6807, \u82e5\u672a\u627e\u5230\u5219\u4e3a None. \"\"\" return next ( ( i for i , e in enumerate ( self . __root__ ) if isinstance ( e , element_type )), None , )","title":"index()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.join","text":"join ( * chains : Union [ 'MessageChain' , Iterable [ 'MessageChain' ]], merge : bool = True ) -> 'MessageChain' \u5c06\u591a\u4e2a\u6d88\u606f\u94fe\u8fde\u63a5\u8d77\u6765, \u5e76\u5728\u5176\u4e2d\u63d2\u5165\u81ea\u8eab. Parameters: Name Type Description Default *chains Iterable [ MessageChain ] \u8981\u8fde\u63a5\u7684\u6d88\u606f\u94fe. () merge bool \u662f\u5426\u5408\u5e76\u6d88\u606f\u94fe\u6587\u672c, \u9ed8\u8ba4\u4e3a True. True Returns: Name Type Description MessageChain 'MessageChain' \u8fde\u63a5\u540e\u7684\u6d88\u606f\u94fe. Source code in graia/ariadne/message/chain.py 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 def join ( self , * chains : Union [ \"MessageChain\" , Iterable [ \"MessageChain\" ]], merge : bool = True ) -> \"MessageChain\" : \"\"\"\u5c06\u591a\u4e2a\u6d88\u606f\u94fe\u8fde\u63a5\u8d77\u6765, \u5e76\u5728\u5176\u4e2d\u63d2\u5165\u81ea\u8eab. Args: *chains (Iterable[MessageChain]): \u8981\u8fde\u63a5\u7684\u6d88\u606f\u94fe. merge (bool, optional): \u662f\u5426\u5408\u5e76\u6d88\u606f\u94fe\u6587\u672c, \u9ed8\u8ba4\u4e3a True. Returns: MessageChain: \u8fde\u63a5\u540e\u7684\u6d88\u606f\u94fe. \"\"\" result : List [ Element ] = [] list_chains : List [ MessageChain ] = [] for chain in chains : if isinstance ( chain , MessageChain ): list_chains . append ( chain ) else : list_chains . extend ( chain ) for chain in list_chains : if chain is not chains [ 0 ]: result . extend ( deepcopy ( self . __root__ )) result . extend ( deepcopy ( chain . __root__ )) return MessageChain ( result , inline = True ) . merge () if merge else MessageChain ( result , inline = True )","title":"join()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.merge","text":"merge ( copy : bool = False ) -> 'MessageChain' \u5728\u5b9e\u4f8b\u5185\u5408\u5e76\u76f8\u90bb\u7684 Plain \u9879 copy (bool): \u662f\u5426\u8981\u5728\u526f\u672c\u4e0a\u4fee\u6539. Returns: Name Type Description MessageChain 'MessageChain' copy = True \u65f6\u8fd4\u56de\u526f\u672c, \u5426\u5219\u8fd4\u56de\u81ea\u5df1\u7684\u5f15\u7528. Source code in graia/ariadne/message/chain.py 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 def merge ( self , copy : bool = False ) -> \"MessageChain\" : \"\"\" \u5728\u5b9e\u4f8b\u5185\u5408\u5e76\u76f8\u90bb\u7684 Plain \u9879 copy (bool): \u662f\u5426\u8981\u5728\u526f\u672c\u4e0a\u4fee\u6539. Returns: MessageChain: copy = True \u65f6\u8fd4\u56de\u526f\u672c, \u5426\u5219\u8fd4\u56de\u81ea\u5df1\u7684\u5f15\u7528. \"\"\" result = [] plain = [] for i in self . __root__ : if not isinstance ( i , Plain ): if plain : result . append ( Plain ( \"\" . join ( plain ))) plain . clear () # \u6e05\u7a7a\u7f13\u5b58 result . append ( deepcopy ( i ) if copy else i ) else : plain . append ( i . text ) if plain : result . append ( Plain ( \"\" . join ( plain ))) plain . clear () if not copy : self . __root__ = result return self return MessageChain ( result , inline = True )","title":"merge()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.onlyContains","text":"onlyContains ( * types : Type [ Element ]) -> bool \u5224\u65ad\u6d88\u606f\u94fe\u4e2d\u662f\u5426\u53ea\u542b\u6709\u7279\u5b9a\u7c7b\u578b\u5143\u7d20. Returns: Name Type Description bool bool \u5224\u65ad\u7ed3\u679c Source code in graia/ariadne/message/chain.py 408 409 410 411 412 413 414 def onlyContains ( self , * types : Type [ Element ]) -> bool : \"\"\"\u5224\u65ad\u6d88\u606f\u94fe\u4e2d\u662f\u5426\u53ea\u542b\u6709\u7279\u5b9a\u7c7b\u578b\u5143\u7d20. Returns: bool: \u5224\u65ad\u7ed3\u679c \"\"\" return all ( isinstance ( i , types ) for i in self . __root__ )","title":"onlyContains()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.parse_obj","text":"parse_obj ( obj : List [ Union [ dict , Element ]]) -> 'MessageChain' \u5185\u90e8\u63a5\u53e3, \u4f1a\u81ea\u52a8\u5c06\u4f5c\u4e3a\u5916\u90e8\u6001\u7684\u6d88\u606f\u5143\u7d20\u8f6c\u4e3a\u5185\u90e8\u6001. Parameters: Name Type Description Default obj List [ T ] \u9700\u8981\u53cd\u5e8f\u5217\u5316\u7684\u5bf9\u8c61 required Returns: Name Type Description MessageChain 'MessageChain' \u5185\u90e8\u627f\u8f7d\u6709\u5c3d\u91cf\u6709\u6548\u7684\u6d88\u606f\u5143\u7d20\u7684\u6d88\u606f\u94fe Source code in graia/ariadne/message/chain.py 77 78 79 80 81 82 83 84 85 86 87 @classmethod def parse_obj ( cls : Type [ \"MessageChain\" ], obj : List [ Union [ dict , Element ]]) -> \"MessageChain\" : \"\"\"\u5185\u90e8\u63a5\u53e3, \u4f1a\u81ea\u52a8\u5c06\u4f5c\u4e3a\u5916\u90e8\u6001\u7684\u6d88\u606f\u5143\u7d20\u8f6c\u4e3a\u5185\u90e8\u6001. Args: obj (List[T]): \u9700\u8981\u53cd\u5e8f\u5217\u5316\u7684\u5bf9\u8c61 Returns: MessageChain: \u5185\u90e8\u627f\u8f7d\u6709\u5c3d\u91cf\u6709\u6548\u7684\u6d88\u606f\u5143\u7d20\u7684\u6d88\u606f\u94fe \"\"\" return cls ( __root__ = cls . build_chain ( obj )) # type: ignore","title":"parse_obj()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.prepare","text":"prepare ( copy : bool = False ) -> 'MessageChain' \u5bf9\u6d88\u606f\u94fe\u4e2d\u6240\u6709\u5143\u7d20\u8fdb\u884c\u5904\u7406. Returns: Name Type Description MessageChain 'MessageChain' copy = True \u65f6\u8fd4\u56de\u526f\u672c, \u5426\u5219\u8fd4\u56de\u81ea\u5df1\u7684\u5f15\u7528. Source code in graia/ariadne/message/chain.py 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 def prepare ( self , copy : bool = False ) -> \"MessageChain\" : \"\"\" \u5bf9\u6d88\u606f\u94fe\u4e2d\u6240\u6709\u5143\u7d20\u8fdb\u884c\u5904\u7406. Returns: MessageChain: copy = True \u65f6\u8fd4\u56de\u526f\u672c, \u5426\u5219\u8fd4\u56de\u81ea\u5df1\u7684\u5f15\u7528. \"\"\" chain_ref = self . copy () if copy else self chain_ref . merge () for i in chain_ref . __root__ [:]: try : i . prepare () except NotSendableElement : chain_ref . __root__ . remove ( i ) return chain_ref","title":"prepare()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.removeprefix","text":"removeprefix ( prefix : str , * , copy : bool = True , skip_header : bool = True ) -> 'MessageChain' \u79fb\u9664\u6d88\u606f\u94fe\u524d\u7f00. Parameters: Name Type Description Default prefix str \u8981\u79fb\u9664\u7684\u524d\u7f00. required copy bool \u662f\u5426\u5728\u526f\u672c\u4e0a\u4fee\u6539, \u9ed8\u8ba4\u4e3a True. True skip_header bool \u662f\u5426\u8981\u5ffd\u7565 Source \u4e0e Quote \u7c7b\u578b\u67e5\u627e, \u9ed8\u8ba4\u4e3a True. (\u79fb\u9664\u540e\u4ecd\u4f1a\u5e26\u4e0a Source \u4e0e Quote) True Returns: Name Type Description MessageChain 'MessageChain' \u4fee\u6539\u540e\u7684\u6d88\u606f\u94fe, \u82e5\u672a\u79fb\u9664\u5219\u539f\u6837\u8fd4\u56de. Source code in graia/ariadne/message/chain.py 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 def removeprefix ( self , prefix : str , * , copy : bool = True , skip_header : bool = True ) -> \"MessageChain\" : \"\"\"\u79fb\u9664\u6d88\u606f\u94fe\u524d\u7f00. Args: prefix (str): \u8981\u79fb\u9664\u7684\u524d\u7f00. copy (bool, optional): \u662f\u5426\u5728\u526f\u672c\u4e0a\u4fee\u6539, \u9ed8\u8ba4\u4e3a True. skip_header (bool, optional): \u662f\u5426\u8981\u5ffd\u7565 Source \u4e0e Quote \u7c7b\u578b\u67e5\u627e, \u9ed8\u8ba4\u4e3a True. (\u79fb\u9664\u540e\u4ecd\u4f1a\u5e26\u4e0a Source \u4e0e Quote) Returns: MessageChain: \u4fee\u6539\u540e\u7684\u6d88\u606f\u94fe, \u82e5\u672a\u79fb\u9664\u5219\u539f\u6837\u8fd4\u56de. \"\"\" header = [] elements = [] if not skip_header : elements = self . __root__ [:] else : for element in self . __root__ : if isinstance ( element , ( Quote , Source )): header . append ( element ) else : elements . append ( element ) if copy : header = deepcopy ( header ) elements = deepcopy ( elements ) if not elements or not isinstance ( elements [ 0 ], Plain ): return self . copy () if copy else self if elements [ 0 ] . text . startswith ( prefix ): elements [ 0 ] . text = elements [ 0 ] . text [ len ( prefix ) :] if copy : return MessageChain ( header + elements , inline = True ) self . __root__ = header + elements return self","title":"removeprefix()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.removesuffix","text":"removesuffix ( suffix : str , * , copy : bool = True ) -> 'MessageChain' \u79fb\u9664\u6d88\u606f\u94fe\u540e\u7f00. Parameters: Name Type Description Default suffix str \u8981\u79fb\u9664\u7684\u540e\u7f00. required copy bool \u662f\u5426\u5728\u526f\u672c\u4e0a\u4fee\u6539, \u9ed8\u8ba4\u4e3a True. True Returns: Name Type Description MessageChain 'MessageChain' \u4fee\u6539\u540e\u7684\u6d88\u606f\u94fe, \u82e5\u672a\u79fb\u9664\u5219\u539f\u6837\u8fd4\u56de. Source code in graia/ariadne/message/chain.py 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 def removesuffix ( self , suffix : str , * , copy : bool = True ) -> \"MessageChain\" : \"\"\"\u79fb\u9664\u6d88\u606f\u94fe\u540e\u7f00. Args: suffix (str): \u8981\u79fb\u9664\u7684\u540e\u7f00. copy (bool, optional): \u662f\u5426\u5728\u526f\u672c\u4e0a\u4fee\u6539, \u9ed8\u8ba4\u4e3a True. Returns: MessageChain: \u4fee\u6539\u540e\u7684\u6d88\u606f\u94fe, \u82e5\u672a\u79fb\u9664\u5219\u539f\u6837\u8fd4\u56de. \"\"\" elements = deepcopy ( self . __root__ ) if copy else self . __root__ if not elements or not isinstance ( elements [ - 1 ], Plain ): return self . copy () if copy else self last_elem : Plain = elements [ - 1 ] if last_elem . text . endswith ( suffix ): last_elem . text = last_elem . text [: - len ( suffix )] if copy : return MessageChain ( elements , inline = True ) self . __root__ = elements return self","title":"removesuffix()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.replace","text":"replace ( old : 'MessageChain | Iterable[Element] | Element' , new : 'MessageChain | Iterable[Element] | Element' ) -> 'MessageChain' \u66ff\u6362\u6d88\u606f\u94fe\u4e2d\u7684\u4e00\u90e8\u5206. (\u5728\u526f\u672c\u4e0a\u64cd\u4f5c) Parameters: Name Type Description Default old MessageChain \u8981\u66ff\u6362\u7684\u6d88\u606f\u94fe. required new MessageChain \u66ff\u6362\u540e\u7684\u6d88\u606f\u94fe. required Returns: Name Type Description MessageChain 'MessageChain' \u4fee\u6539\u540e\u7684\u6d88\u606f\u94fe, \u82e5\u672a\u66ff\u6362\u5219\u539f\u6837\u8fd4\u56de. Source code in graia/ariadne/message/chain.py 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 def replace ( self , old : \"MessageChain | Iterable[Element] | Element\" , new : \"MessageChain | Iterable[Element] | Element\" , ) -> \"MessageChain\" : \"\"\"\u66ff\u6362\u6d88\u606f\u94fe\u4e2d\u7684\u4e00\u90e8\u5206. (\u5728\u526f\u672c\u4e0a\u64cd\u4f5c) Args: old (MessageChain): \u8981\u66ff\u6362\u7684\u6d88\u606f\u94fe. new (MessageChain): \u66ff\u6362\u540e\u7684\u6d88\u606f\u94fe. Returns: MessageChain: \u4fee\u6539\u540e\u7684\u6d88\u606f\u94fe, \u82e5\u672a\u66ff\u6362\u5219\u539f\u6837\u8fd4\u56de. \"\"\" if not isinstance ( old , MessageChain ): old = MessageChain . create ( old ) if not isinstance ( new , MessageChain ): new = MessageChain . create ( new ) index_list : List [ int ] = self . findSubChain ( old ) unzipped_new : List [ Union [ str , Element ]] = new . unzip () unzipped_old : List [ Union [ str , Element ]] = old . unzip () unzipped_self : List [ Union [ str , Element ]] = self . unzip () unzipped_result : List [ Union [ str , Element ]] = [] last_end : int = 0 for start in index_list : unzipped_result . extend ( unzipped_self [ last_end : start ]) last_end = start + len ( unzipped_old ) unzipped_result . extend ( unzipped_new ) unzipped_result . extend ( unzipped_self [ last_end :]) # Merge result result_list : List [ Element ] = [] char_stk : List [ str ] = [] for v in unzipped_result : if isinstance ( v , str ): char_stk . append ( v ) else : result_list . append ( Plain ( \"\" . join ( char_stk ))) char_stk = [] result_list . append ( v ) if char_stk : result_list . append ( Plain ( \"\" . join ( char_stk ))) return MessageChain ( result_list , inline = True )","title":"replace()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.split","text":"split ( pattern : str = ' ' , raw_string : bool = False ) -> List [ 'MessageChain' ] \u548c str.split \u5dee\u4e0d\u591a, \u63d0\u4f9b\u4e00\u4e2a\u5b57\u7b26\u4e32, \u7136\u540e\u8fd4\u56de\u5206\u5272\u7ed3\u679c. Parameters: Name Type Description Default pattern str \u5206\u9694\u7b26. \u9ed8\u8ba4\u4e3a\u5355\u4e2a\u7a7a\u683c. ' ' raw_string bool \u662f\u5426\u8981\u5305\u542b \"\u7a7a\" \u7684\u6587\u672c\u5143\u7d20. False Returns: Type Description List ['MessageChain'] List[\"MessageChain\"]: \u5206\u5272\u7ed3\u679c, \u884c\u4e3a\u548c str.split \u5dee\u4e0d\u591a. Source code in graia/ariadne/message/chain.py 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 def split ( self , pattern : str = \" \" , raw_string : bool = False ) -> List [ \"MessageChain\" ]: \"\"\"\u548c `str.split` \u5dee\u4e0d\u591a, \u63d0\u4f9b\u4e00\u4e2a\u5b57\u7b26\u4e32, \u7136\u540e\u8fd4\u56de\u5206\u5272\u7ed3\u679c. Args: pattern (str): \u5206\u9694\u7b26. \u9ed8\u8ba4\u4e3a\u5355\u4e2a\u7a7a\u683c. raw_string (bool): \u662f\u5426\u8981\u5305\u542b \"\u7a7a\" \u7684\u6587\u672c\u5143\u7d20. Returns: List[\"MessageChain\"]: \u5206\u5272\u7ed3\u679c, \u884c\u4e3a\u548c `str.split` \u5dee\u4e0d\u591a. \"\"\" result : List [ \"MessageChain\" ] = [] tmp = [] for element in self . __root__ : if isinstance ( element , Plain ): split_result = element . text . split ( pattern ) for index , split_str in enumerate ( split_result ): if tmp and index > 0 : result . append ( MessageChain ( tmp , inline = True )) tmp = [] if split_str or raw_string : tmp . append ( Plain ( split_str )) else : tmp . append ( element ) if tmp : result . append ( MessageChain ( tmp , inline = True )) tmp = [] return result","title":"split()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.startswith","text":"startswith ( string : str , ignore_header : bool = True ) -> bool \u5224\u5b9a\u6d88\u606f\u94fe\u662f\u5426\u4ee5\u76f8\u5e94\u5b57\u7b26\u4e32\u5f00\u5934 Parameters: Name Type Description Default string str \u9700\u8981\u5224\u65ad\u7684\u5b57\u7b26\u4e32 required ignore_header bool \u662f\u5426\u5ffd\u7565\u5143\u6570\u636e, \u9ed8\u8ba4\u4e3a True True Returns: Name Type Description bool bool \u662f\u5426\u4ee5\u6b64\u5b57\u7b26\u4e32\u5f00\u5934 Source code in graia/ariadne/message/chain.py 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 def startswith ( self , string : str , ignore_header : bool = True ) -> bool : \"\"\" \u5224\u5b9a\u6d88\u606f\u94fe\u662f\u5426\u4ee5\u76f8\u5e94\u5b57\u7b26\u4e32\u5f00\u5934 Args: string (str): \u9700\u8981\u5224\u65ad\u7684\u5b57\u7b26\u4e32 ignore_header (bool, optional): \u662f\u5426\u5ffd\u7565\u5143\u6570\u636e, \u9ed8\u8ba4\u4e3a True Returns: bool: \u662f\u5426\u4ee5\u6b64\u5b57\u7b26\u4e32\u5f00\u5934 \"\"\" ref_root = self . asSendable () . __root__ if ignore_header else self . __root__ if not ref_root or not isinstance ( ref_root [ 0 ], Plain ): return False return ref_root [ 0 ] . text . startswith ( string )","title":"startswith()"},{"location":"refs/graia/ariadne/message/chain/#graia.ariadne.message.chain.MessageChain.unzip","text":"unzip () -> List [ Union [ str , Element ]] \u89e3\u538b\u6d88\u606f\u94fe\u4e3a\u5143\u7d20/\u5355\u5b57\u7b26\u5217\u8868. Return List[Union[str, Element]]: \u89e3\u538b\u540e\u7684\u5143\u7d20/\u5b57\u7b26\u5217\u8868. Source code in graia/ariadne/message/chain.py 140 141 142 143 144 145 146 147 148 149 150 151 152 def unzip ( self ) -> List [ Union [ str , Element ]]: \"\"\"\u89e3\u538b\u6d88\u606f\u94fe\u4e3a\u5143\u7d20/\u5355\u5b57\u7b26\u5217\u8868. Return: List[Union[str, Element]]: \u89e3\u538b\u540e\u7684\u5143\u7d20/\u5b57\u7b26\u5217\u8868. \"\"\" unzipped : List [ Union [ str , Element ]] = [] for e in self . __root__ : if isinstance ( e , Plain ): unzipped . extend ( e . text ) else : unzipped . append ( e ) return unzipped","title":"unzip()"},{"location":"refs/graia/ariadne/message/element/","text":"Ariadne \u4e2d\u7684\u6d88\u606f\u5143\u7d20 App \ud83d\udd17 Bases: Element \u8868\u793a\u6d88\u606f\u4e2d\u81ea\u5e26\u7684 App \u6d88\u606f\u5143\u7d20 Source code in graia/ariadne/message/element.py 332 333 334 335 336 337 338 339 340 341 342 343 344 class App ( Element ): \"\"\"\u8868\u793a\u6d88\u606f\u4e2d\u81ea\u5e26\u7684 App \u6d88\u606f\u5143\u7d20\"\"\" type = \"App\" content : str \"\"\"App \u5185\u5bb9\"\"\" def __init__ ( self , content : str , ** _ ) -> None : super () . __init__ ( content = content ) def asDisplay ( self ) -> str : return \"[APP\u6d88\u606f]\" content class-attribute \ud83d\udd17 content : str = None App \u5185\u5bb9 At \ud83d\udd17 Bases: Element \u8be5\u6d88\u606f\u5143\u7d20\u7528\u4e8e\u627f\u8f7d\u6d88\u606f\u4e2d\u7528\u4e8e\u63d0\u9192/\u547c\u5524\u7279\u5b9a\u7528\u6237\u7684\u90e8\u5206. Source code in graia/ariadne/message/element.py 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 class At ( Element ): \"\"\"\u8be5\u6d88\u606f\u5143\u7d20\u7528\u4e8e\u627f\u8f7d\u6d88\u606f\u4e2d\u7528\u4e8e\u63d0\u9192/\u547c\u5524\u7279\u5b9a\u7528\u6237\u7684\u90e8\u5206.\"\"\" type : str = \"At\" target : int \"\"\"At \u7684\u76ee\u6807 QQ \u53f7\"\"\" display : Optional [ str ] = None \"\"\"\u663e\u793a\u540d\u79f0\"\"\" def __init__ ( self , target : Union [ int , Member ] = ... , ** data ) -> None : \"\"\"\u5b9e\u4f8b\u5316\u4e00\u4e2a At \u6d88\u606f\u5143\u7d20, \u7528\u4e8e\u627f\u8f7d\u6d88\u606f\u4e2d\u7528\u4e8e\u63d0\u9192/\u547c\u5524\u7279\u5b9a\u7528\u6237\u7684\u90e8\u5206. Args: target (int): \u9700\u8981\u63d0\u9192/\u547c\u5524\u7684\u7279\u5b9a\u7528\u6237\u7684 QQ \u53f7(\u6216\u8005\u8bf4 id.) \"\"\" if target is not ... : if isinstance ( target , int ): data . update ( target = target ) else : data . update ( target = target . id ) super () . __init__ ( ** data ) def __eq__ ( self , other : \"At\" ): return isinstance ( other , At ) and self . target == other . target def prepare ( self ) -> None : if upload_method_ctx . get ( None ) != UploadMethod . Group : raise InvalidArgument ( f \"you cannot use this element in this method: { upload_method_ctx . get () . value } \" ) def asDisplay ( self ) -> str : return f \"@ { self . display } \" if self . display else f \"@ { self . target } \" display class-attribute \ud83d\udd17 display : Optional [ str ] = None \u663e\u793a\u540d\u79f0 target class-attribute \ud83d\udd17 target : int = None At \u7684\u76ee\u6807 QQ \u53f7 __init__ \ud83d\udd17 __init__ ( target : Union [ int , Member ] = Ellipsis , ** data ) -> None \u5b9e\u4f8b\u5316\u4e00\u4e2a At \u6d88\u606f\u5143\u7d20, \u7528\u4e8e\u627f\u8f7d\u6d88\u606f\u4e2d\u7528\u4e8e\u63d0\u9192/\u547c\u5524\u7279\u5b9a\u7528\u6237\u7684\u90e8\u5206. Parameters: Name Type Description Default target int \u9700\u8981\u63d0\u9192/\u547c\u5524\u7684\u7279\u5b9a\u7528\u6237\u7684 QQ \u53f7(\u6216\u8005\u8bf4 id.) Ellipsis Source code in graia/ariadne/message/element.py 207 208 209 210 211 212 213 214 215 216 217 218 def __init__ ( self , target : Union [ int , Member ] = ... , ** data ) -> None : \"\"\"\u5b9e\u4f8b\u5316\u4e00\u4e2a At \u6d88\u606f\u5143\u7d20, \u7528\u4e8e\u627f\u8f7d\u6d88\u606f\u4e2d\u7528\u4e8e\u63d0\u9192/\u547c\u5524\u7279\u5b9a\u7528\u6237\u7684\u90e8\u5206. Args: target (int): \u9700\u8981\u63d0\u9192/\u547c\u5524\u7684\u7279\u5b9a\u7528\u6237\u7684 QQ \u53f7(\u6216\u8005\u8bf4 id.) \"\"\" if target is not ... : if isinstance ( target , int ): data . update ( target = target ) else : data . update ( target = target . id ) super () . __init__ ( ** data ) AtAll \ud83d\udd17 Bases: Element \u8be5\u6d88\u606f\u5143\u7d20\u7528\u4e8e\u7fa4\u7ec4\u4e2d\u7684\u7ba1\u7406\u5458\u63d0\u9192\u7fa4\u7ec4\u4e2d\u7684\u6240\u6709\u6210\u5458 Source code in graia/ariadne/message/element.py 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 class AtAll ( Element ): \"\"\"\u8be5\u6d88\u606f\u5143\u7d20\u7528\u4e8e\u7fa4\u7ec4\u4e2d\u7684\u7ba1\u7406\u5458\u63d0\u9192\u7fa4\u7ec4\u4e2d\u7684\u6240\u6709\u6210\u5458\"\"\" type : str = \"AtAll\" def __init__ ( self , * _ , ** __ ) -> None : super () . __init__ () def asDisplay ( self ) -> str : return \"@\u5168\u4f53\u6210\u5458\" def prepare ( self ) -> None : if upload_method_ctx . get ( None ) != UploadMethod . Group : raise InvalidArgument ( f \"you cannot use this element in this method: { upload_method_ctx . get () . value } \" ) Dice \ud83d\udd17 Bases: Element \u8868\u793a\u6d88\u606f\u4e2d\u9ab0\u5b50\u6d88\u606f\u5143\u7d20 Source code in graia/ariadne/message/element.py 414 415 416 417 418 419 420 421 422 423 424 425 426 class Dice ( Element ): \"\"\"\u8868\u793a\u6d88\u606f\u4e2d\u9ab0\u5b50\u6d88\u606f\u5143\u7d20\"\"\" type = \"Dice\" value : int \"\"\"\u9ab0\u5b50\u503c\"\"\" def __init__ ( self , value : int , * _ , ** __ ) -> None : super () . __init__ ( value = value ) def asDisplay ( self ) -> str : return f \"[\u9ab0\u5b50: { self . value } ]\" value class-attribute \ud83d\udd17 value : int = None \u9ab0\u5b50\u503c Element \ud83d\udd17 Bases: AriadneBaseModel \u6307\u793a\u4e00\u4e2a\u6d88\u606f\u4e2d\u7684\u5143\u7d20. type (str): \u5143\u7d20\u7c7b\u578b Source code in graia/ariadne/message/element.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 class Element ( AriadneBaseModel ): \"\"\" \u6307\u793a\u4e00\u4e2a\u6d88\u606f\u4e2d\u7684\u5143\u7d20. type (str): \u5143\u7d20\u7c7b\u578b \"\"\" type : str = \"Unknown\" \"\"\"\u5143\u7d20\u7c7b\u578b\"\"\" def __init__ ( self , ** data ): return super () . __init__ ( ** data ) def __hash__ ( self ): return hash (( type ( self ),) + tuple ( self . __dict__ . values ())) @staticmethod def asDisplay () -> str : \"\"\"\u8fd4\u56de\u8be5\u5143\u7d20\u7684 \"\u663e\u793a\" \u5f62\u5f0f\u5b57\u7b26\u4e32, \u8d8b\u8fd1\u4e8e\u4f60\u89c1\u5230\u7684\u6837\u5b50. Returns: str: \"\u663e\u793a\" \u5b57\u7b26\u4e32. \"\"\" return \"\" def asPersistentString ( self ) -> str : \"\"\"\u6301\u4e45\u5316\u5b57\u7b26\u4e32\u8868\u793a. Returns: str: \u6301\u4e45\u5316\u5b57\u7b26\u4e32. \"\"\" data : str = wrap_bracket ( j_dump ( self . dict ( exclude = { \"type\" }, ), indent = None , separators = ( \",\" , \":\" ), ) ) return f \"[mirai: { self . type } : { data } ]\" def prepare ( self ) -> None : \"\"\" \u4e3a\u5143\u7d20\u88ab\u53d1\u9001\u8fdb\u884c\u51c6\u5907, \u82e5\u65e0\u5f02\u5e38\u88ab\u5f15\u53d1, \u5219\u5b8c\u6210\u672c\u65b9\u6cd5\u540e\u5143\u7d20\u5e94\u53ef\u88ab\u53d1\u9001. \u4fdd\u7559\u7a7a\u5b9e\u73b0\u4ee5\u5141\u8bb8\u4e0d\u9700\u8981 `prepare`\u7684\u5143\u7d20\u7c7b\u578b\u5b58\u5728. \u82e5\u672c\u5143\u7d20\u8bbe\u8ba1\u65f6\u4fbf\u4e0d\u53ef\u88ab\u53d1\u9001, \u8bf7\u5f15\u53d1 `NotSendableElement` \u5f02\u5e38. \"\"\" def __repr_args__ ( self ) -> \"ReprArgs\" : return list ( self . dict ( exclude = { \"type\" }) . items ()) def __str__ ( self ) -> str : return self . asDisplay () def __add__ ( self , content : Union [ \"MessageChain\" , List [ \"Element\" ], \"Element\" , str ]) -> \"MessageChain\" : from .chain import MessageChain if isinstance ( content , str ): content = Plain ( content ) if isinstance ( content , Element ): content = [ content ] if isinstance ( content , MessageChain ): content = content . __root__ return MessageChain ( content + [ self ], inline = True ) def __radd__ ( self , content : Union [ \"MessageChain\" , List [ \"Element\" ], \"Element\" , str ]) -> \"MessageChain\" : from .chain import MessageChain if isinstance ( content , str ): content = Plain ( content ) if isinstance ( content , Element ): content = [ content ] if isinstance ( content , MessageChain ): content = content . __root__ return MessageChain ([ self ] + content , inline = True ) type class-attribute \ud83d\udd17 type : str = 'Unknown' \u5143\u7d20\u7c7b\u578b asDisplay staticmethod \ud83d\udd17 asDisplay () -> str \u8fd4\u56de\u8be5\u5143\u7d20\u7684 \"\u663e\u793a\" \u5f62\u5f0f\u5b57\u7b26\u4e32, \u8d8b\u8fd1\u4e8e\u4f60\u89c1\u5230\u7684\u6837\u5b50. Returns: Name Type Description str str \"\u663e\u793a\" \u5b57\u7b26\u4e32. Source code in graia/ariadne/message/element.py 44 45 46 47 48 49 50 51 @staticmethod def asDisplay () -> str : \"\"\"\u8fd4\u56de\u8be5\u5143\u7d20\u7684 \"\u663e\u793a\" \u5f62\u5f0f\u5b57\u7b26\u4e32, \u8d8b\u8fd1\u4e8e\u4f60\u89c1\u5230\u7684\u6837\u5b50. Returns: str: \"\u663e\u793a\" \u5b57\u7b26\u4e32. \"\"\" return \"\" asPersistentString \ud83d\udd17 asPersistentString () -> str \u6301\u4e45\u5316\u5b57\u7b26\u4e32\u8868\u793a. Returns: Name Type Description str str \u6301\u4e45\u5316\u5b57\u7b26\u4e32. Source code in graia/ariadne/message/element.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 def asPersistentString ( self ) -> str : \"\"\"\u6301\u4e45\u5316\u5b57\u7b26\u4e32\u8868\u793a. Returns: str: \u6301\u4e45\u5316\u5b57\u7b26\u4e32. \"\"\" data : str = wrap_bracket ( j_dump ( self . dict ( exclude = { \"type\" }, ), indent = None , separators = ( \",\" , \":\" ), ) ) return f \"[mirai: { self . type } : { data } ]\" prepare \ud83d\udd17 prepare () -> None \u4e3a\u5143\u7d20\u88ab\u53d1\u9001\u8fdb\u884c\u51c6\u5907, \u82e5\u65e0\u5f02\u5e38\u88ab\u5f15\u53d1, \u5219\u5b8c\u6210\u672c\u65b9\u6cd5\u540e\u5143\u7d20\u5e94\u53ef\u88ab\u53d1\u9001. \u4fdd\u7559\u7a7a\u5b9e\u73b0\u4ee5\u5141\u8bb8\u4e0d\u9700\u8981 prepare \u7684\u5143\u7d20\u7c7b\u578b\u5b58\u5728. \u82e5\u672c\u5143\u7d20\u8bbe\u8ba1\u65f6\u4fbf\u4e0d\u53ef\u88ab\u53d1\u9001, \u8bf7\u5f15\u53d1 NotSendableElement \u5f02\u5e38. Source code in graia/ariadne/message/element.py 70 71 72 73 74 75 76 77 78 def prepare ( self ) -> None : \"\"\" \u4e3a\u5143\u7d20\u88ab\u53d1\u9001\u8fdb\u884c\u51c6\u5907, \u82e5\u65e0\u5f02\u5e38\u88ab\u5f15\u53d1, \u5219\u5b8c\u6210\u672c\u65b9\u6cd5\u540e\u5143\u7d20\u5e94\u53ef\u88ab\u53d1\u9001. \u4fdd\u7559\u7a7a\u5b9e\u73b0\u4ee5\u5141\u8bb8\u4e0d\u9700\u8981 `prepare`\u7684\u5143\u7d20\u7c7b\u578b\u5b58\u5728. \u82e5\u672c\u5143\u7d20\u8bbe\u8ba1\u65f6\u4fbf\u4e0d\u53ef\u88ab\u53d1\u9001, \u8bf7\u5f15\u53d1 `NotSendableElement` \u5f02\u5e38. \"\"\" Face \ud83d\udd17 Bases: Element \u8868\u793a\u6d88\u606f\u4e2d\u6240\u9644\u5e26\u7684\u8868\u60c5, \u8fd9\u4e9b\u8868\u60c5\u5927\u591a\u90fd\u662f\u804a\u5929\u5de5\u5177\u5185\u7f6e\u7684. Source code in graia/ariadne/message/element.py 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 class Face ( Element ): \"\"\"\u8868\u793a\u6d88\u606f\u4e2d\u6240\u9644\u5e26\u7684\u8868\u60c5, \u8fd9\u4e9b\u8868\u60c5\u5927\u591a\u90fd\u662f\u804a\u5929\u5de5\u5177\u5185\u7f6e\u7684.\"\"\" type : str = \"Face\" faceId : Optional [ int ] = None \"\"\"QQ \u8868\u60c5\u7f16\u53f7, \u4f18\u5148\u4e8e name\"\"\" name : Optional [ str ] = None \"\"\"QQ \u8868\u60c5\u540d\u79f0\"\"\" def __init__ ( self , id : int = ... , name : str = ... , ** data ) -> None : if id is not ... : data . update ( faceId = id ) if name is not ... : data . update ( name = name ) super () . __init__ ( ** data ) def asDisplay ( self ) -> str : return f \"[\u8868\u60c5: { self . name or self . faceId } ]\" def __eq__ ( self , other ) -> bool : return isinstance ( other , Face ) and ( self . faceId == other . faceId or self . name == other . name ) faceId class-attribute \ud83d\udd17 faceId : Optional [ int ] = None QQ \u8868\u60c5\u7f16\u53f7, \u4f18\u5148\u4e8e name name class-attribute \ud83d\udd17 name : Optional [ str ] = None QQ \u8868\u60c5\u540d\u79f0 File \ud83d\udd17 Bases: Element \u6307\u793a\u4e00\u4e2a\u6587\u4ef6\u4fe1\u606f\u5143\u7d20 Source code in graia/ariadne/message/element.py 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 class File ( Element ): \"\"\"\u6307\u793a\u4e00\u4e2a\u6587\u4ef6\u4fe1\u606f\u5143\u7d20\"\"\" type = \"File\" id : str \"\"\"\u6587\u4ef6 ID\"\"\" name : str \"\"\"\u6587\u4ef6\u540d\"\"\" size : int \"\"\"\u6587\u4ef6\u5927\u5c0f\"\"\" def asDisplay ( self ) -> str : return f \"[\u6587\u4ef6: { self . name } ]\" def asPersistentString ( self ) -> str : return \"\" def prepare ( self ) -> None : raise NotSendableElement id class-attribute \ud83d\udd17 id : str = None \u6587\u4ef6 ID name class-attribute \ud83d\udd17 name : str = None \u6587\u4ef6\u540d size class-attribute \ud83d\udd17 size : int = None \u6587\u4ef6\u5927\u5c0f FlashImage \ud83d\udd17 Bases: Image \u6307\u793a\u6d88\u606f\u4e2d\u7684\u95ea\u7167\u5143\u7d20 Source code in graia/ariadne/message/element.py 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 class FlashImage ( Image ): \"\"\"\u6307\u793a\u6d88\u606f\u4e2d\u7684\u95ea\u7167\u5143\u7d20\"\"\" type = \"FlashImage\" def __init__ ( self , id : Optional [ str ] = None , url : Optional [ str ] = None , * , path : Optional [ Union [ Path , str ]] = None , base64 : Optional [ str ] = None , data_bytes : Union [ None , bytes , BytesIO ] = None , ** kwargs , ) -> None : super () . __init__ ( id = id , url = url , path = path , base64 = base64 , data_bytes = data_bytes , ** kwargs ) def toImage ( self ) -> \"Image\" : \"\"\"\u5c06 FlashImage \u8f6c\u6362\u4e3a Image Returns: Image: \u8f6c\u6362\u540e\u7684 Image \"\"\" return Image . parse_obj ({ ** self . dict (), \"type\" : \"Image\" }) @classmethod def fromImage ( cls , image : \"Image\" ) -> \"FlashImage\" : \"\"\"\u4ece Image \u6784\u9020 FlashImage Returns: FlashImage: \u6784\u9020\u51fa\u7684 FlashImage \"\"\" return cls . parse_obj ({ ** image . dict (), \"type\" : \"FlashImage\" }) def asDisplay ( self ) -> str : return \"[\u95ea\u7167]\" fromImage classmethod \ud83d\udd17 fromImage ( image : 'Image' ) -> 'FlashImage' \u4ece Image \u6784\u9020 FlashImage Returns: Name Type Description FlashImage 'FlashImage' \u6784\u9020\u51fa\u7684 FlashImage Source code in graia/ariadne/message/element.py 798 799 800 801 802 803 804 805 @classmethod def fromImage ( cls , image : \"Image\" ) -> \"FlashImage\" : \"\"\"\u4ece Image \u6784\u9020 FlashImage Returns: FlashImage: \u6784\u9020\u51fa\u7684 FlashImage \"\"\" return cls . parse_obj ({ ** image . dict (), \"type\" : \"FlashImage\" }) toImage \ud83d\udd17 toImage () -> 'Image' \u5c06 FlashImage \u8f6c\u6362\u4e3a Image Returns: Name Type Description Image 'Image' \u8f6c\u6362\u540e\u7684 Image Source code in graia/ariadne/message/element.py 790 791 792 793 794 795 796 def toImage ( self ) -> \"Image\" : \"\"\"\u5c06 FlashImage \u8f6c\u6362\u4e3a Image Returns: Image: \u8f6c\u6362\u540e\u7684 Image \"\"\" return Image . parse_obj ({ ** self . dict (), \"type\" : \"Image\" }) Forward \ud83d\udd17 Bases: Element \u6307\u793a\u5408\u5e76\u8f6c\u53d1\u4fe1\u606f nodeList (List[ForwardNode]): \u8f6c\u53d1\u7684\u6d88\u606f\u8282\u70b9 Source code in graia/ariadne/message/element.py 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 class Forward ( Element ): \"\"\" \u6307\u793a\u5408\u5e76\u8f6c\u53d1\u4fe1\u606f nodeList (List[ForwardNode]): \u8f6c\u53d1\u7684\u6d88\u606f\u8282\u70b9 \"\"\" type = \"Forward\" nodeList : List [ ForwardNode ] \"\"\"\u8f6c\u53d1\u8282\u70b9\u5217\u8868\"\"\" def __init__ ( self , * nodes : Union [ Iterable [ ForwardNode ], ForwardNode ], ** data ) -> None : if nodes : nodeList : List [ ForwardNode ] = [] for i in nodes : if isinstance ( i , ForwardNode ): nodeList . append ( i ) else : nodeList . extend ( i ) data . update ( nodeList = nodeList ) super () . __init__ ( ** data ) def asDisplay ( self ) -> str : return f \"[\u5408\u5e76\u8f6c\u53d1:\u5171 { len ( self . nodeList ) } \u6761]\" def asPersistentString ( self ) -> str : return \"\" nodeList class-attribute \ud83d\udd17 nodeList : List [ ForwardNode ] = None \u8f6c\u53d1\u8282\u70b9\u5217\u8868 ForwardNode \ud83d\udd17 Bases: AriadneBaseModel \u8868\u793a\u5408\u5e76\u8f6c\u53d1\u4e2d\u7684\u4e00\u4e2a\u8282\u70b9 Source code in graia/ariadne/message/element.py 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 class ForwardNode ( AriadneBaseModel ): \"\"\"\u8868\u793a\u5408\u5e76\u8f6c\u53d1\u4e2d\u7684\u4e00\u4e2a\u8282\u70b9\"\"\" senderId : int \"\"\"\u53d1\u9001\u8005 QQ \u53f7 (\u51b3\u5b9a\u663e\u793a\u5934\u50cf)\"\"\" time : datetime \"\"\"\u53d1\u9001\u65f6\u95f4\"\"\" senderName : str \"\"\"\u53d1\u9001\u8005\u663e\u793a\u540d\u5b57\"\"\" messageChain : Optional [ \"MessageChain\" ] \"\"\"\u53d1\u9001\u7684\u6d88\u606f\u94fe\"\"\" messageId : Optional [ int ] \"\"\"\u7f13\u5b58\u7684\u6d88\u606f ID\"\"\" def __init__ ( self , target : Union [ int , Friend , Member , Stranger ] = ... , time : datetime = ... , message : \"MessageChain\" = ... , name : str = ... , ** data , ) -> None : if target is not ... : if isinstance ( target , int ): data . update ( senderId = target ) else : data . update ( senderId = target . id ) if isinstance ( target , Member ): data . update ( senderName = target . name ) else : data . update ( senderName = target . nickname ) if time is not ... : data . update ( time = time ) if name is not ... : data . update ( senderName = name ) if message is not ... : data . update ( messageChain = message ) super () . __init__ ( ** data ) messageChain class-attribute \ud83d\udd17 messageChain : Optional [ 'MessageChain' ] = None \u53d1\u9001\u7684\u6d88\u606f\u94fe messageId class-attribute \ud83d\udd17 messageId : Optional [ int ] = None \u7f13\u5b58\u7684\u6d88\u606f ID senderId class-attribute \ud83d\udd17 senderId : int = None \u53d1\u9001\u8005 QQ \u53f7 (\u51b3\u5b9a\u663e\u793a\u5934\u50cf) senderName class-attribute \ud83d\udd17 senderName : str = None \u53d1\u9001\u8005\u663e\u793a\u540d\u5b57 time class-attribute \ud83d\udd17 time : datetime = None \u53d1\u9001\u65f6\u95f4 Image \ud83d\udd17 Bases: MultimediaElement \u6307\u793a\u6d88\u606f\u4e2d\u7684\u56fe\u7247\u5143\u7d20 Source code in graia/ariadne/message/element.py 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 class Image ( MultimediaElement ): \"\"\"\u6307\u793a\u6d88\u606f\u4e2d\u7684\u56fe\u7247\u5143\u7d20\"\"\" type = \"Image\" id : Optional [ str ] = Field ( None , alias = \"imageId\" ) def __init__ ( self , id : Optional [ str ] = None , url : Optional [ str ] = None , * , path : Optional [ Union [ Path , str ]] = None , base64 : Optional [ str ] = None , data_bytes : Union [ None , bytes , BytesIO ] = None , ** kwargs , ) -> None : super () . __init__ ( id = id , url = url , path = path , base64 = base64 , data_bytes = data_bytes , ** kwargs ) def toFlashImage ( self ) -> \"FlashImage\" : \"\"\"\u5c06 Image \u8f6c\u6362\u4e3a FlashImage Returns: FlashImage: \u8f6c\u6362\u540e\u7684 FlashImage \"\"\" return FlashImage . parse_obj ({ ** self . dict (), \"type\" : \"FlashImage\" }) @classmethod def fromFlashImage ( cls , flash : \"FlashImage\" ) -> \"Image\" : \"\"\"\u4ece FlashImage \u6784\u9020 Image Returns: Image: \u6784\u9020\u51fa\u7684 Image \"\"\" return cls . parse_obj ({ ** flash . dict (), \"type\" : \"Image\" }) def asDisplay ( self ) -> str : return \"[\u56fe\u7247]\" fromFlashImage classmethod \ud83d\udd17 fromFlashImage ( flash : 'FlashImage' ) -> 'Image' \u4ece FlashImage \u6784\u9020 Image Returns: Name Type Description Image 'Image' \u6784\u9020\u51fa\u7684 Image Source code in graia/ariadne/message/element.py 760 761 762 763 764 765 766 767 @classmethod def fromFlashImage ( cls , flash : \"FlashImage\" ) -> \"Image\" : \"\"\"\u4ece FlashImage \u6784\u9020 Image Returns: Image: \u6784\u9020\u51fa\u7684 Image \"\"\" return cls . parse_obj ({ ** flash . dict (), \"type\" : \"Image\" }) toFlashImage \ud83d\udd17 toFlashImage () -> 'FlashImage' \u5c06 Image \u8f6c\u6362\u4e3a FlashImage Returns: Name Type Description FlashImage 'FlashImage' \u8f6c\u6362\u540e\u7684 FlashImage Source code in graia/ariadne/message/element.py 752 753 754 755 756 757 758 def toFlashImage ( self ) -> \"FlashImage\" : \"\"\"\u5c06 Image \u8f6c\u6362\u4e3a FlashImage Returns: FlashImage: \u8f6c\u6362\u540e\u7684 FlashImage \"\"\" return FlashImage . parse_obj ({ ** self . dict (), \"type\" : \"FlashImage\" }) ImageType \ud83d\udd17 Bases: Enum Image \u7c7b\u578b\u7684\u679a\u4e3e. Source code in graia/ariadne/message/element.py 606 607 608 609 610 611 612 613 614 615 616 617 618 619 class ImageType ( Enum ): \"\"\"Image \u7c7b\u578b\u7684\u679a\u4e3e.\"\"\" Friend = \"Friend\" \"\"\"\u597d\u53cb\u6d88\u606f\"\"\" Group = \"Group\" \"\"\"\u7fa4\u7ec4\u6d88\u606f\"\"\" Temp = \"Temp\" \"\"\"\u4e34\u65f6\u6d88\u606f\"\"\" Unknown = \"Unknown\" \"\"\"\u672a\u77e5\u6d88\u606f\"\"\" Friend class-attribute \ud83d\udd17 Friend = 'Friend' \u597d\u53cb\u6d88\u606f Group class-attribute \ud83d\udd17 Group = 'Group' \u7fa4\u7ec4\u6d88\u606f Temp class-attribute \ud83d\udd17 Temp = 'Temp' \u4e34\u65f6\u6d88\u606f Unknown class-attribute \ud83d\udd17 Unknown = 'Unknown' \u672a\u77e5\u6d88\u606f Json \ud83d\udd17 Bases: Element \u8868\u793a\u6d88\u606f\u4e2d\u7684 JSON \u6d88\u606f\u5143\u7d20 Source code in graia/ariadne/message/element.py 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 class Json ( Element ): \"\"\"\u8868\u793a\u6d88\u606f\u4e2d\u7684 JSON \u6d88\u606f\u5143\u7d20\"\"\" type = \"Json\" Json : str = Field ( ... , alias = \"json\" ) \"\"\"XML\u6587\u672c\"\"\" def __init__ ( self , json : Union [ dict , str ], ** kwargs ) -> None : if isinstance ( json , dict ): json = j_dump ( json ) super () . __init__ ( json = json , ** kwargs ) def dict ( self , * args , ** kwargs ): return super () . dict ( * args , ** ({ ** kwargs , \"by_alias\" : True })) def asDisplay ( self ) -> str : return \"[JSON\u6d88\u606f]\" Json class-attribute \ud83d\udd17 Json : str = Field ( Ellipsis , alias = 'json' ) XML\u6587\u672c MarketFace \ud83d\udd17 Bases: Element \u8868\u793a\u6d88\u606f\u4e2d\u7684\u5546\u57ce\u8868\u60c5. \u6ce8\u610f: \u672c\u7c7b\u578b\u4e0d\u652f\u6301\u7528\u6237\u53d1\u9001 Source code in graia/ariadne/message/element.py 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 class MarketFace ( Element ): \"\"\"\u8868\u793a\u6d88\u606f\u4e2d\u7684\u5546\u57ce\u8868\u60c5. \u6ce8\u610f: \u672c\u7c7b\u578b\u4e0d\u652f\u6301\u7528\u6237\u53d1\u9001 \"\"\" type : str = \"MarketFace\" faceId : Optional [ int ] = Field ( None , alias = \"id\" ) \"\"\"QQ \u8868\u60c5\u7f16\u53f7\"\"\" name : Optional [ str ] = None \"\"\"QQ \u8868\u60c5\u540d\u79f0\"\"\" def asDisplay ( self ) -> str : return f \"[\u5546\u57ce\u8868\u60c5: { self . name or self . faceId } ]\" def __eq__ ( self , other ) -> bool : return isinstance ( other , MarketFace ) and ( self . faceId == other . faceId or self . name == other . name ) faceId class-attribute \ud83d\udd17 faceId : Optional [ int ] = Field ( None , alias = 'id' ) QQ \u8868\u60c5\u7f16\u53f7 name class-attribute \ud83d\udd17 name : Optional [ str ] = None QQ \u8868\u60c5\u540d\u79f0 MiraiCode \ud83d\udd17 Bases: Element Mirai \u7801, \u5e76\u4e0d\u5efa\u8bae\u76f4\u63a5\u4f7f\u7528. Ariadne \u4e5f\u4e0d\u4f1a\u63d0\u4f9b\u4e92\u8f6c\u6362\u63a5\u53e3. Source code in graia/ariadne/message/element.py 597 598 599 600 601 602 603 class MiraiCode ( Element ): \"\"\"Mirai \u7801, \u5e76\u4e0d\u5efa\u8bae\u76f4\u63a5\u4f7f\u7528. Ariadne \u4e5f\u4e0d\u4f1a\u63d0\u4f9b\u4e92\u8f6c\u6362\u63a5\u53e3.\"\"\" type = \"MiraiCode\" code : str \"\"\"Mirai Code\"\"\" code class-attribute \ud83d\udd17 code : str = None Mirai Code MultimediaElement \ud83d\udd17 Bases: Element \u6307\u793a\u591a\u5a92\u4f53\u6d88\u606f\u5143\u7d20. Source code in graia/ariadne/message/element.py 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 class MultimediaElement ( Element ): \"\"\"\u6307\u793a\u591a\u5a92\u4f53\u6d88\u606f\u5143\u7d20.\"\"\" id : Optional [ str ] \"\"\"\u5143\u7d20 ID\"\"\" url : Optional [ str ] = None \"\"\"\u5143\u7d20\u7684\u4e0b\u8f7d url\"\"\" base64 : Optional [ str ] = None \"\"\"\u5143\u7d20\u7684 base64\"\"\" def __init__ ( self , id : Optional [ str ] = None , url : Optional [ str ] = None , * , path : Optional [ Union [ Path , str ]] = None , base64 : Optional [ str ] = None , data_bytes : Union [ None , bytes , BytesIO ] = None , ** kwargs , ) -> None : data = { \"id\" : value for key , value in kwargs . items () if key . lower () . endswith ( \"id\" )} if sum ([ bool ( url ), bool ( path ), bool ( base64 )]) > 1 : raise ValueError ( \"Too many binary initializers!\" ) # Web initializer data [ \"id\" ] = data . get ( \"id\" , id ) data [ \"url\" ] = url # Binary initializer if path : if isinstance ( path , str ): path = Path ( path ) if not path . exists (): raise FileNotFoundError ( f \" { path } is not exist!\" ) data [ \"base64\" ] = b64encode ( path . read_bytes ()) elif base64 : data [ \"base64\" ] = base64 elif data_bytes : if isinstance ( data_bytes , bytes ): data [ \"base64\" ] = b64encode ( data_bytes ) if isinstance ( data_bytes , BytesIO ): data [ \"base64\" ] = b64encode ( data_bytes . read ()) super () . __init__ ( ** data , ** kwargs ) async def get_bytes ( self ) -> bytes : \"\"\"\u5c1d\u8bd5\u83b7\u53d6\u6d88\u606f\u5143\u7d20\u7684 bytes, \u6ce8\u610f, \u4f60\u65e0\u6cd5\u83b7\u53d6\u5e76\u4e0d\u5305\u542b url \u4e14\u4e0d\u5305\u542b base64 \u5c5e\u6027\u7684\u672c\u5143\u7d20\u7684 bytes. Raises: ValueError: \u4f60\u5c1d\u8bd5\u83b7\u53d6\u5e76\u4e0d\u5305\u542b url \u5c5e\u6027\u7684\u672c\u5143\u7d20\u7684 bytes. Returns: bytes: \u5143\u7d20\u539f\u59cb\u6570\u636e \"\"\" from .. import get_running from ..adapter import Adapter if self . base64 : return b64decode ( self . base64 ) if not self . url : raise ValueError ( \"you should offer a url.\" ) session = get_running ( Adapter ) . session if not session : raise RuntimeError ( \"Unable to get session!\" ) async with session . get ( self . url ) as response : response . raise_for_status () data = await response . read () self . base64 = b64encode ( data ) . decode ( \"ascii\" ) return data def asNoBinaryPersistentString ( self ) -> str : \"\"\"\u751f\u6210\u4e0d\u9644\u5e26\u4e8c\u8fdb\u5236\u6570\u636e\u7684\u6301\u4e45\u5316\u5b57\u7b26\u4e32 Returns: str: \u6301\u4e45\u5316\u5b57\u7b26\u4e32 \"\"\" data : str = wrap_bracket ( j_dump ( self . dict ( exclude = { \"type\" , \"base64\" }, ), indent = None , separators = ( \",\" , \":\" ), ) ) return f \"[mirai: { self . type } : { data } ]\" @property def uuid ( self ): \"\"\"\u591a\u5a92\u4f53\u5143\u7d20\u7684 uuid, \u5373\u5143\u7d20\u5728 mirai \u5185\u90e8\u7684\u6807\u8bc6\"\"\" return self . id . split ( \".\" )[ 0 ] . strip ( \"/ {} \" ) . lower () if self . id else \"\" def __eq__ ( self , other : \"MultimediaElement\" ): if self . __class__ is not other . __class__ : return False if self . uuid and self . uuid == other . uuid : return True if self . url and self . url == other . url : return True if self . base64 and self . base64 == other . base64 : return True return False base64 class-attribute \ud83d\udd17 base64 : Optional [ str ] = None \u5143\u7d20\u7684 base64 id class-attribute \ud83d\udd17 id : Optional [ str ] = None \u5143\u7d20 ID url class-attribute \ud83d\udd17 url : Optional [ str ] = None \u5143\u7d20\u7684\u4e0b\u8f7d url asNoBinaryPersistentString \ud83d\udd17 asNoBinaryPersistentString () -> str \u751f\u6210\u4e0d\u9644\u5e26\u4e8c\u8fdb\u5236\u6570\u636e\u7684\u6301\u4e45\u5316\u5b57\u7b26\u4e32 Returns: Name Type Description str str \u6301\u4e45\u5316\u5b57\u7b26\u4e32 Source code in graia/ariadne/message/element.py 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 def asNoBinaryPersistentString ( self ) -> str : \"\"\"\u751f\u6210\u4e0d\u9644\u5e26\u4e8c\u8fdb\u5236\u6570\u636e\u7684\u6301\u4e45\u5316\u5b57\u7b26\u4e32 Returns: str: \u6301\u4e45\u5316\u5b57\u7b26\u4e32 \"\"\" data : str = wrap_bracket ( j_dump ( self . dict ( exclude = { \"type\" , \"base64\" }, ), indent = None , separators = ( \",\" , \":\" ), ) ) return f \"[mirai: { self . type } : { data } ]\" get_bytes async \ud83d\udd17 get_bytes () -> bytes \u5c1d\u8bd5\u83b7\u53d6\u6d88\u606f\u5143\u7d20\u7684 bytes, \u6ce8\u610f, \u4f60\u65e0\u6cd5\u83b7\u53d6\u5e76\u4e0d\u5305\u542b url \u4e14\u4e0d\u5305\u542b base64 \u5c5e\u6027\u7684\u672c\u5143\u7d20\u7684 bytes. Raises: Type Description ValueError \u4f60\u5c1d\u8bd5\u83b7\u53d6\u5e76\u4e0d\u5305\u542b url \u5c5e\u6027\u7684\u672c\u5143\u7d20\u7684 bytes. Returns: Name Type Description bytes bytes \u5143\u7d20\u539f\u59cb\u6570\u636e Source code in graia/ariadne/message/element.py 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 async def get_bytes ( self ) -> bytes : \"\"\"\u5c1d\u8bd5\u83b7\u53d6\u6d88\u606f\u5143\u7d20\u7684 bytes, \u6ce8\u610f, \u4f60\u65e0\u6cd5\u83b7\u53d6\u5e76\u4e0d\u5305\u542b url \u4e14\u4e0d\u5305\u542b base64 \u5c5e\u6027\u7684\u672c\u5143\u7d20\u7684 bytes. Raises: ValueError: \u4f60\u5c1d\u8bd5\u83b7\u53d6\u5e76\u4e0d\u5305\u542b url \u5c5e\u6027\u7684\u672c\u5143\u7d20\u7684 bytes. Returns: bytes: \u5143\u7d20\u539f\u59cb\u6570\u636e \"\"\" from .. import get_running from ..adapter import Adapter if self . base64 : return b64decode ( self . base64 ) if not self . url : raise ValueError ( \"you should offer a url.\" ) session = get_running ( Adapter ) . session if not session : raise RuntimeError ( \"Unable to get session!\" ) async with session . get ( self . url ) as response : response . raise_for_status () data = await response . read () self . base64 = b64encode ( data ) . decode ( \"ascii\" ) return data uuid property \ud83d\udd17 uuid () \u591a\u5a92\u4f53\u5143\u7d20\u7684 uuid, \u5373\u5143\u7d20\u5728 mirai \u5185\u90e8\u7684\u6807\u8bc6 Source code in graia/ariadne/message/element.py 716 717 718 719 @property def uuid ( self ): \"\"\"\u591a\u5a92\u4f53\u5143\u7d20\u7684 uuid, \u5373\u5143\u7d20\u5728 mirai \u5185\u90e8\u7684\u6807\u8bc6\"\"\" return self . id . split ( \".\" )[ 0 ] . strip ( \"/ {} \" ) . lower () if self . id else \"\" MusicShare \ud83d\udd17 Bases: Element \u8868\u793a\u6d88\u606f\u4e2d\u97f3\u4e50\u5206\u4eab\u6d88\u606f\u5143\u7d20 Source code in graia/ariadne/message/element.py 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 class MusicShare ( Element ): \"\"\"\u8868\u793a\u6d88\u606f\u4e2d\u97f3\u4e50\u5206\u4eab\u6d88\u606f\u5143\u7d20\"\"\" type = \"MusicShare\" kind : MusicShareKind \"\"\"\u97f3\u4e50\u5206\u4eab\u7684\u6765\u6e90\"\"\" title : Optional [ str ] \"\"\"\u97f3\u4e50\u6807\u9898\"\"\" summary : Optional [ str ] \"\"\"\u97f3\u4e50\u6458\u8981\"\"\" jumpUrl : Optional [ str ] \"\"\"\u97f3\u4e50\u8df3\u8f6c\u94fe\u63a5\"\"\" pictureUrl : Optional [ str ] \"\"\"\u97f3\u4e50\u56fe\u7247\u94fe\u63a5\"\"\" musicUrl : Optional [ str ] \"\"\"\u97f3\u4e50\u94fe\u63a5\"\"\" brief : Optional [ str ] \"\"\"\u97f3\u4e50\u7b80\u4ecb\"\"\" def __init__ ( self , kind : MusicShareKind , title : Optional [ str ] = None , summary : Optional [ str ] = None , jumpUrl : Optional [ str ] = None , pictureUrl : Optional [ str ] = None , musicUrl : Optional [ str ] = None , brief : Optional [ str ] = None , * _ , ** __ , ) -> None : super () . __init__ ( kind = kind , title = title , summary = summary , jumpUrl = jumpUrl , pictureUrl = pictureUrl , musicUrl = musicUrl , brief = brief , ) def asDisplay ( self ) -> str : return f \"[\u97f3\u4e50\u5206\u4eab: { self . title } , { self . brief } ]\" brief class-attribute \ud83d\udd17 brief : Optional [ str ] = None \u97f3\u4e50\u7b80\u4ecb jumpUrl class-attribute \ud83d\udd17 jumpUrl : Optional [ str ] = None \u97f3\u4e50\u8df3\u8f6c\u94fe\u63a5 kind class-attribute \ud83d\udd17 kind : MusicShareKind = None \u97f3\u4e50\u5206\u4eab\u7684\u6765\u6e90 musicUrl class-attribute \ud83d\udd17 musicUrl : Optional [ str ] = None \u97f3\u4e50\u94fe\u63a5 pictureUrl class-attribute \ud83d\udd17 pictureUrl : Optional [ str ] = None \u97f3\u4e50\u56fe\u7247\u94fe\u63a5 summary class-attribute \ud83d\udd17 summary : Optional [ str ] = None \u97f3\u4e50\u6458\u8981 title class-attribute \ud83d\udd17 title : Optional [ str ] = None \u97f3\u4e50\u6807\u9898 MusicShareKind \ud83d\udd17 Bases: str , Enum \u97f3\u4e50\u5206\u4eab\u7684\u6765\u6e90\u3002 Source code in graia/ariadne/message/element.py 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 class MusicShareKind ( str , Enum ): \"\"\"\u97f3\u4e50\u5206\u4eab\u7684\u6765\u6e90\u3002\"\"\" NeteaseCloudMusic = \"NeteaseCloudMusic\" \"\"\"\u7f51\u6613\u4e91\u97f3\u4e50\"\"\" QQMusic = \"QQMusic\" \"\"\"QQ\u97f3\u4e50\"\"\" MiguMusic = \"MiguMusic\" \"\"\"\u54aa\u5495\u97f3\u4e50\"\"\" KugouMusic = \"KugouMusic\" \"\"\"\u9177\u72d7\u97f3\u4e50\"\"\" KuwoMusic = \"KuwoMusic\" \"\"\"\u9177\u6211\u97f3\u4e50\"\"\" KugouMusic class-attribute \ud83d\udd17 KugouMusic = 'KugouMusic' \u9177\u72d7\u97f3\u4e50 KuwoMusic class-attribute \ud83d\udd17 KuwoMusic = 'KuwoMusic' \u9177\u6211\u97f3\u4e50 MiguMusic class-attribute \ud83d\udd17 MiguMusic = 'MiguMusic' \u54aa\u5495\u97f3\u4e50 NeteaseCloudMusic class-attribute \ud83d\udd17 NeteaseCloudMusic = 'NeteaseCloudMusic' \u7f51\u6613\u4e91\u97f3\u4e50 QQMusic class-attribute \ud83d\udd17 QQMusic = 'QQMusic' QQ\u97f3\u4e50 NotSendableElement \ud83d\udd17 Bases: Exception \u6307\u793a\u4e00\u4e2a\u5143\u7d20\u662f\u4e0d\u53ef\u53d1\u9001\u7684. Source code in graia/ariadne/message/element.py 23 24 25 26 class NotSendableElement ( Exception ): \"\"\" \u6307\u793a\u4e00\u4e2a\u5143\u7d20\u662f\u4e0d\u53ef\u53d1\u9001\u7684. \"\"\" Plain \ud83d\udd17 Bases: Element \u4ee3\u8868\u6d88\u606f\u4e2d\u7684\u6587\u672c\u5143\u7d20 Source code in graia/ariadne/message/element.py 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 class Plain ( Element ): \"\"\"\u4ee3\u8868\u6d88\u606f\u4e2d\u7684\u6587\u672c\u5143\u7d20\"\"\" type : str = \"Plain\" text : str \"\"\"\u5b9e\u9645\u7684\u6587\u672c\"\"\" def __init__ ( self , text : str , ** kwargs ) -> None : \"\"\"\u5b9e\u4f8b\u5316\u4e00\u4e2a Plain \u6d88\u606f\u5143\u7d20, \u7528\u4e8e\u627f\u8f7d\u6d88\u606f\u4e2d\u7684\u6587\u5b57. Args: text (str): \u5143\u7d20\u6240\u5305\u542b\u7684\u6587\u5b57 \"\"\" super () . __init__ ( text = text , ** kwargs ) # type: ignore def asDisplay ( self ) -> str : return self . text def asPersistentString ( self ) -> str : return self . text text class-attribute \ud83d\udd17 text : str = None \u5b9e\u9645\u7684\u6587\u672c __init__ \ud83d\udd17 __init__ ( text : str , ** kwargs ) -> None \u5b9e\u4f8b\u5316\u4e00\u4e2a Plain \u6d88\u606f\u5143\u7d20, \u7528\u4e8e\u627f\u8f7d\u6d88\u606f\u4e2d\u7684\u6587\u5b57. Parameters: Name Type Description Default text str \u5143\u7d20\u6240\u5305\u542b\u7684\u6587\u5b57 required Source code in graia/ariadne/message/element.py 117 118 119 120 121 122 123 def __init__ ( self , text : str , ** kwargs ) -> None : \"\"\"\u5b9e\u4f8b\u5316\u4e00\u4e2a Plain \u6d88\u606f\u5143\u7d20, \u7528\u4e8e\u627f\u8f7d\u6d88\u606f\u4e2d\u7684\u6587\u5b57. Args: text (str): \u5143\u7d20\u6240\u5305\u542b\u7684\u6587\u5b57 \"\"\" super () . __init__ ( text = text , ** kwargs ) # type: ignore Poke \ud83d\udd17 Bases: Element \u8868\u793a\u6d88\u606f\u4e2d\u6233\u4e00\u6233\u6d88\u606f\u5143\u7d20 Source code in graia/ariadne/message/element.py 399 400 401 402 403 404 405 406 407 408 409 410 411 class Poke ( Element ): \"\"\"\u8868\u793a\u6d88\u606f\u4e2d\u6233\u4e00\u6233\u6d88\u606f\u5143\u7d20\"\"\" type = \"Poke\" name : PokeMethods \"\"\"\u6233\u4e00\u6233\u4f7f\u7528\u7684\u65b9\u6cd5\"\"\" def __init__ ( self , name : PokeMethods , * _ , ** __ ) -> None : super () . __init__ ( name = name ) def asDisplay ( self ) -> str : return f \"[\u6233\u4e00\u6233: { self . name } ]\" name class-attribute \ud83d\udd17 name : PokeMethods = None \u6233\u4e00\u6233\u4f7f\u7528\u7684\u65b9\u6cd5 PokeMethods \ud83d\udd17 Bases: str , Enum \u6233\u4e00\u6233\u53ef\u7528\u65b9\u6cd5 Source code in graia/ariadne/message/element.py 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 class PokeMethods ( str , Enum ): \"\"\"\u6233\u4e00\u6233\u53ef\u7528\u65b9\u6cd5\"\"\" ChuoYiChuo = \"ChuoYiChuo\" \"\"\"\u6233\u4e00\u6233\"\"\" BiXin = \"BiXin\" \"\"\"\u6bd4\u5fc3\"\"\" DianZan = \"DianZan\" \"\"\"\u70b9\u8d5e\"\"\" XinSui = \"XinSui\" \"\"\"\u5fc3\u788e\"\"\" LiuLiuLiu = \"LiuLiuLiu\" \"\"\"666\"\"\" FangDaZhao = \"FangDaZhao\" \"\"\"\u653e\u5927\u62db\"\"\" BaoBeiQiu = \"BaoBeiQiu\" \"\"\"\u5b9d\u8d1d\u7403\"\"\" Rose = \"Rose\" \"\"\"\u73ab\u7470\u82b1\"\"\" ZhaoHuanShu = \"ZhaoHuanShu\" \"\"\"\u53ec\u5524\u672f\"\"\" RangNiPi = \"RangNiPi\" \"\"\"\u8ba9\u4f60\u76ae\"\"\" JeiYin = \"JeiYin\" \"\"\"\u7ed3\u5370\"\"\" ShouLei = \"ShouLei\" \"\"\"\u624b\u96f7\"\"\" GouYin = \"GouYin\" \"\"\"\u52fe\u5f15\"\"\" ZhuaYiXia = \"ZhuaYiXia\" \"\"\"\u6293\u4e00\u4e0b\"\"\" SuiPing = \"SuiPing\" \"\"\"\u788e\u5c4f\"\"\" QiaoMen = \"QiaoMen\" \"\"\"\u6572\u95e8\"\"\" BaoBeiQiu class-attribute \ud83d\udd17 BaoBeiQiu = 'BaoBeiQiu' \u5b9d\u8d1d\u7403 BiXin class-attribute \ud83d\udd17 BiXin = 'BiXin' \u6bd4\u5fc3 ChuoYiChuo class-attribute \ud83d\udd17 ChuoYiChuo = 'ChuoYiChuo' \u6233\u4e00\u6233 DianZan class-attribute \ud83d\udd17 DianZan = 'DianZan' \u70b9\u8d5e FangDaZhao class-attribute \ud83d\udd17 FangDaZhao = 'FangDaZhao' \u653e\u5927\u62db GouYin class-attribute \ud83d\udd17 GouYin = 'GouYin' \u52fe\u5f15 JeiYin class-attribute \ud83d\udd17 JeiYin = 'JeiYin' \u7ed3\u5370 LiuLiuLiu class-attribute \ud83d\udd17 LiuLiuLiu = 'LiuLiuLiu' 666 QiaoMen class-attribute \ud83d\udd17 QiaoMen = 'QiaoMen' \u6572\u95e8 RangNiPi class-attribute \ud83d\udd17 RangNiPi = 'RangNiPi' \u8ba9\u4f60\u76ae Rose class-attribute \ud83d\udd17 Rose = 'Rose' \u73ab\u7470\u82b1 ShouLei class-attribute \ud83d\udd17 ShouLei = 'ShouLei' \u624b\u96f7 SuiPing class-attribute \ud83d\udd17 SuiPing = 'SuiPing' \u788e\u5c4f XinSui class-attribute \ud83d\udd17 XinSui = 'XinSui' \u5fc3\u788e ZhaoHuanShu class-attribute \ud83d\udd17 ZhaoHuanShu = 'ZhaoHuanShu' \u53ec\u5524\u672f ZhuaYiXia class-attribute \ud83d\udd17 ZhuaYiXia = 'ZhuaYiXia' \u6293\u4e00\u4e0b Quote \ud83d\udd17 Bases: Element \u8868\u793a\u6d88\u606f\u4e2d\u56de\u590d\u5176\u4ed6\u6d88\u606f/\u7528\u6237\u7684\u90e8\u5206, \u901a\u5e38\u5305\u542b\u4e00\u4e2a\u5b8c\u6574\u7684\u6d88\u606f\u94fe( origin \u5c5e\u6027) Source code in graia/ariadne/message/element.py 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 class Quote ( Element ): \"\"\"\u8868\u793a\u6d88\u606f\u4e2d\u56de\u590d\u5176\u4ed6\u6d88\u606f/\u7528\u6237\u7684\u90e8\u5206, \u901a\u5e38\u5305\u542b\u4e00\u4e2a\u5b8c\u6574\u7684\u6d88\u606f\u94fe(`origin` \u5c5e\u6027)\"\"\" type : str = \"Quote\" id : int \"\"\"\u5f15\u7528\u7684\u6d88\u606f ID\"\"\" groupId : int \"\"\"\u5f15\u7528\u6d88\u606f\u6240\u5728\u7fa4\u53f7 (\u597d\u53cb\u6d88\u606f\u4e3a 0)\"\"\" senderId : int \"\"\"\u53d1\u9001\u8005 QQ \u53f7\"\"\" targetId : int \"\"\"\u539f\u6d88\u606f\u7684\u63a5\u6536\u8005QQ\u53f7 (\u6216\u7fa4\u53f7) \"\"\" origin : \"MessageChain\" \"\"\"\u539f\u6765\u7684\u6d88\u606f\u94fe\"\"\" @validator ( \"origin\" , pre = True , allow_reuse = True ) def _ ( cls , v ): from .chain import MessageChain return MessageChain ( v ) # no need to parse objects, they are universal! def prepare ( self ) -> NoReturn : raise NotSendableElement def asPersistentString ( self ) -> str : return \"\" groupId class-attribute \ud83d\udd17 groupId : int = None \u5f15\u7528\u6d88\u606f\u6240\u5728\u7fa4\u53f7 (\u597d\u53cb\u6d88\u606f\u4e3a 0) id class-attribute \ud83d\udd17 id : int = None \u5f15\u7528\u7684\u6d88\u606f ID origin class-attribute \ud83d\udd17 origin : 'MessageChain' = None \u539f\u6765\u7684\u6d88\u606f\u94fe senderId class-attribute \ud83d\udd17 senderId : int = None \u53d1\u9001\u8005 QQ \u53f7 targetId class-attribute \ud83d\udd17 targetId : int = None \u539f\u6d88\u606f\u7684\u63a5\u6536\u8005QQ\u53f7 (\u6216\u7fa4\u53f7) Source \ud83d\udd17 Bases: Element \u8868\u793a\u6d88\u606f\u5728\u4e00\u4e2a\u7279\u5b9a\u804a\u5929\u533a\u57df\u5185\u7684\u552f\u4e00\u6807\u8bc6 Source code in graia/ariadne/message/element.py 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 class Source ( Element ): \"\"\"\u8868\u793a\u6d88\u606f\u5728\u4e00\u4e2a\u7279\u5b9a\u804a\u5929\u533a\u57df\u5185\u7684\u552f\u4e00\u6807\u8bc6\"\"\" type : str = \"Source\" id : int \"\"\"\u6d88\u606f ID\"\"\" time : datetime \"\"\"\u53d1\u9001\u65f6\u95f4\"\"\" def prepare ( self ) -> NoReturn : raise NotSendableElement def asPersistentString ( self ) -> str : return \"\" async def fetchOriginal ( self ) -> \"MessageChain\" : \"\"\"\u5c1d\u8bd5\u4ece\u672c\u5143\u7d20\u6062\u590d\u539f\u672c\u7684\u6d88\u606f\u94fe, \u6709\u53ef\u80fd\u5931\u8d25. Returns: MessageChain: \u539f\u6765\u7684\u6d88\u606f\u94fe. \"\"\" from .. import get_running from ..app import Ariadne ariadne = get_running ( Ariadne ) return ( await ariadne . getMessageFromId ( self . id )) . messageChain id class-attribute \ud83d\udd17 id : int = None \u6d88\u606f ID time class-attribute \ud83d\udd17 time : datetime = None \u53d1\u9001\u65f6\u95f4 fetchOriginal async \ud83d\udd17 fetchOriginal () -> 'MessageChain' \u5c1d\u8bd5\u4ece\u672c\u5143\u7d20\u6062\u590d\u539f\u672c\u7684\u6d88\u606f\u94fe, \u6709\u53ef\u80fd\u5931\u8d25. Returns: Name Type Description MessageChain 'MessageChain' \u539f\u6765\u7684\u6d88\u606f\u94fe. Source code in graia/ariadne/message/element.py 149 150 151 152 153 154 155 156 157 158 159 160 async def fetchOriginal ( self ) -> \"MessageChain\" : \"\"\"\u5c1d\u8bd5\u4ece\u672c\u5143\u7d20\u6062\u590d\u539f\u672c\u7684\u6d88\u606f\u94fe, \u6709\u53ef\u80fd\u5931\u8d25. Returns: MessageChain: \u539f\u6765\u7684\u6d88\u606f\u94fe. \"\"\" from .. import get_running from ..app import Ariadne ariadne = get_running ( Ariadne ) return ( await ariadne . getMessageFromId ( self . id )) . messageChain Voice \ud83d\udd17 Bases: MultimediaElement \u6307\u793a\u6d88\u606f\u4e2d\u7684\u8bed\u97f3\u5143\u7d20 Source code in graia/ariadne/message/element.py 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 class Voice ( MultimediaElement ): \"\"\"\u6307\u793a\u6d88\u606f\u4e2d\u7684\u8bed\u97f3\u5143\u7d20\"\"\" type = \"Voice\" id : Optional [ str ] = Field ( None , alias = \"voiceId\" ) def __init__ ( self , id : Optional [ str ] = None , url : Optional [ str ] = None , * , path : Optional [ Union [ Path , str ]] = None , base64 : Optional [ str ] = None , data_bytes : Union [ None , bytes , BytesIO ] = None , ** kwargs , ) -> None : super () . __init__ ( id = id , url = url , path = path , base64 = base64 , data_bytes = data_bytes , ** kwargs ) length : Optional [ int ] \"\"\"\u8bed\u97f3\u957f\u5ea6\"\"\" def asDisplay ( self ) -> str : return \"[\u8bed\u97f3]\" length class-attribute \ud83d\udd17 length : Optional [ int ] = None \u8bed\u97f3\u957f\u5ea6 Xml \ud83d\udd17 Bases: Element \u8868\u793a\u6d88\u606f\u4e2d\u7684 XML \u6d88\u606f\u5143\u7d20 Source code in graia/ariadne/message/element.py 297 298 299 300 301 302 303 304 305 306 307 308 309 class Xml ( Element ): \"\"\"\u8868\u793a\u6d88\u606f\u4e2d\u7684 XML \u6d88\u606f\u5143\u7d20\"\"\" type = \"Xml\" xml : str \"\"\"XML\u6587\u672c\"\"\" def __init__ ( self , xml : str , ** _ ) -> None : super () . __init__ ( xml = xml ) def asDisplay ( self ) -> str : return \"[XML\u6d88\u606f]\" xml class-attribute \ud83d\udd17 xml : str = None XML\u6587\u672c _update_forward_refs \ud83d\udd17 _update_forward_refs () Internal function. Update the forward references. Source code in graia/ariadne/message/element.py 837 838 839 840 841 842 843 844 845 846 847 def _update_forward_refs (): \"\"\" Internal function. Update the forward references. \"\"\" from ..model import BotMessage from .chain import MessageChain Quote . update_forward_refs ( MessageChain = MessageChain ) ForwardNode . update_forward_refs ( MessageChain = MessageChain ) BotMessage . update_forward_refs ( MessageChain = MessageChain )","title":"element"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.App","text":"Bases: Element \u8868\u793a\u6d88\u606f\u4e2d\u81ea\u5e26\u7684 App \u6d88\u606f\u5143\u7d20 Source code in graia/ariadne/message/element.py 332 333 334 335 336 337 338 339 340 341 342 343 344 class App ( Element ): \"\"\"\u8868\u793a\u6d88\u606f\u4e2d\u81ea\u5e26\u7684 App \u6d88\u606f\u5143\u7d20\"\"\" type = \"App\" content : str \"\"\"App \u5185\u5bb9\"\"\" def __init__ ( self , content : str , ** _ ) -> None : super () . __init__ ( content = content ) def asDisplay ( self ) -> str : return \"[APP\u6d88\u606f]\"","title":"App"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.App.content","text":"content : str = None App \u5185\u5bb9","title":"content"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.At","text":"Bases: Element \u8be5\u6d88\u606f\u5143\u7d20\u7528\u4e8e\u627f\u8f7d\u6d88\u606f\u4e2d\u7528\u4e8e\u63d0\u9192/\u547c\u5524\u7279\u5b9a\u7528\u6237\u7684\u90e8\u5206. Source code in graia/ariadne/message/element.py 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 class At ( Element ): \"\"\"\u8be5\u6d88\u606f\u5143\u7d20\u7528\u4e8e\u627f\u8f7d\u6d88\u606f\u4e2d\u7528\u4e8e\u63d0\u9192/\u547c\u5524\u7279\u5b9a\u7528\u6237\u7684\u90e8\u5206.\"\"\" type : str = \"At\" target : int \"\"\"At \u7684\u76ee\u6807 QQ \u53f7\"\"\" display : Optional [ str ] = None \"\"\"\u663e\u793a\u540d\u79f0\"\"\" def __init__ ( self , target : Union [ int , Member ] = ... , ** data ) -> None : \"\"\"\u5b9e\u4f8b\u5316\u4e00\u4e2a At \u6d88\u606f\u5143\u7d20, \u7528\u4e8e\u627f\u8f7d\u6d88\u606f\u4e2d\u7528\u4e8e\u63d0\u9192/\u547c\u5524\u7279\u5b9a\u7528\u6237\u7684\u90e8\u5206. Args: target (int): \u9700\u8981\u63d0\u9192/\u547c\u5524\u7684\u7279\u5b9a\u7528\u6237\u7684 QQ \u53f7(\u6216\u8005\u8bf4 id.) \"\"\" if target is not ... : if isinstance ( target , int ): data . update ( target = target ) else : data . update ( target = target . id ) super () . __init__ ( ** data ) def __eq__ ( self , other : \"At\" ): return isinstance ( other , At ) and self . target == other . target def prepare ( self ) -> None : if upload_method_ctx . get ( None ) != UploadMethod . Group : raise InvalidArgument ( f \"you cannot use this element in this method: { upload_method_ctx . get () . value } \" ) def asDisplay ( self ) -> str : return f \"@ { self . display } \" if self . display else f \"@ { self . target } \"","title":"At"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.At.display","text":"display : Optional [ str ] = None \u663e\u793a\u540d\u79f0","title":"display"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.At.target","text":"target : int = None At \u7684\u76ee\u6807 QQ \u53f7","title":"target"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.At.__init__","text":"__init__ ( target : Union [ int , Member ] = Ellipsis , ** data ) -> None \u5b9e\u4f8b\u5316\u4e00\u4e2a At \u6d88\u606f\u5143\u7d20, \u7528\u4e8e\u627f\u8f7d\u6d88\u606f\u4e2d\u7528\u4e8e\u63d0\u9192/\u547c\u5524\u7279\u5b9a\u7528\u6237\u7684\u90e8\u5206. Parameters: Name Type Description Default target int \u9700\u8981\u63d0\u9192/\u547c\u5524\u7684\u7279\u5b9a\u7528\u6237\u7684 QQ \u53f7(\u6216\u8005\u8bf4 id.) Ellipsis Source code in graia/ariadne/message/element.py 207 208 209 210 211 212 213 214 215 216 217 218 def __init__ ( self , target : Union [ int , Member ] = ... , ** data ) -> None : \"\"\"\u5b9e\u4f8b\u5316\u4e00\u4e2a At \u6d88\u606f\u5143\u7d20, \u7528\u4e8e\u627f\u8f7d\u6d88\u606f\u4e2d\u7528\u4e8e\u63d0\u9192/\u547c\u5524\u7279\u5b9a\u7528\u6237\u7684\u90e8\u5206. Args: target (int): \u9700\u8981\u63d0\u9192/\u547c\u5524\u7684\u7279\u5b9a\u7528\u6237\u7684 QQ \u53f7(\u6216\u8005\u8bf4 id.) \"\"\" if target is not ... : if isinstance ( target , int ): data . update ( target = target ) else : data . update ( target = target . id ) super () . __init__ ( ** data )","title":"__init__()"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.AtAll","text":"Bases: Element \u8be5\u6d88\u606f\u5143\u7d20\u7528\u4e8e\u7fa4\u7ec4\u4e2d\u7684\u7ba1\u7406\u5458\u63d0\u9192\u7fa4\u7ec4\u4e2d\u7684\u6240\u6709\u6210\u5458 Source code in graia/ariadne/message/element.py 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 class AtAll ( Element ): \"\"\"\u8be5\u6d88\u606f\u5143\u7d20\u7528\u4e8e\u7fa4\u7ec4\u4e2d\u7684\u7ba1\u7406\u5458\u63d0\u9192\u7fa4\u7ec4\u4e2d\u7684\u6240\u6709\u6210\u5458\"\"\" type : str = \"AtAll\" def __init__ ( self , * _ , ** __ ) -> None : super () . __init__ () def asDisplay ( self ) -> str : return \"@\u5168\u4f53\u6210\u5458\" def prepare ( self ) -> None : if upload_method_ctx . get ( None ) != UploadMethod . Group : raise InvalidArgument ( f \"you cannot use this element in this method: { upload_method_ctx . get () . value } \" )","title":"AtAll"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Dice","text":"Bases: Element \u8868\u793a\u6d88\u606f\u4e2d\u9ab0\u5b50\u6d88\u606f\u5143\u7d20 Source code in graia/ariadne/message/element.py 414 415 416 417 418 419 420 421 422 423 424 425 426 class Dice ( Element ): \"\"\"\u8868\u793a\u6d88\u606f\u4e2d\u9ab0\u5b50\u6d88\u606f\u5143\u7d20\"\"\" type = \"Dice\" value : int \"\"\"\u9ab0\u5b50\u503c\"\"\" def __init__ ( self , value : int , * _ , ** __ ) -> None : super () . __init__ ( value = value ) def asDisplay ( self ) -> str : return f \"[\u9ab0\u5b50: { self . value } ]\"","title":"Dice"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Dice.value","text":"value : int = None \u9ab0\u5b50\u503c","title":"value"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Element","text":"Bases: AriadneBaseModel \u6307\u793a\u4e00\u4e2a\u6d88\u606f\u4e2d\u7684\u5143\u7d20. type (str): \u5143\u7d20\u7c7b\u578b Source code in graia/ariadne/message/element.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 class Element ( AriadneBaseModel ): \"\"\" \u6307\u793a\u4e00\u4e2a\u6d88\u606f\u4e2d\u7684\u5143\u7d20. type (str): \u5143\u7d20\u7c7b\u578b \"\"\" type : str = \"Unknown\" \"\"\"\u5143\u7d20\u7c7b\u578b\"\"\" def __init__ ( self , ** data ): return super () . __init__ ( ** data ) def __hash__ ( self ): return hash (( type ( self ),) + tuple ( self . __dict__ . values ())) @staticmethod def asDisplay () -> str : \"\"\"\u8fd4\u56de\u8be5\u5143\u7d20\u7684 \"\u663e\u793a\" \u5f62\u5f0f\u5b57\u7b26\u4e32, \u8d8b\u8fd1\u4e8e\u4f60\u89c1\u5230\u7684\u6837\u5b50. Returns: str: \"\u663e\u793a\" \u5b57\u7b26\u4e32. \"\"\" return \"\" def asPersistentString ( self ) -> str : \"\"\"\u6301\u4e45\u5316\u5b57\u7b26\u4e32\u8868\u793a. Returns: str: \u6301\u4e45\u5316\u5b57\u7b26\u4e32. \"\"\" data : str = wrap_bracket ( j_dump ( self . dict ( exclude = { \"type\" }, ), indent = None , separators = ( \",\" , \":\" ), ) ) return f \"[mirai: { self . type } : { data } ]\" def prepare ( self ) -> None : \"\"\" \u4e3a\u5143\u7d20\u88ab\u53d1\u9001\u8fdb\u884c\u51c6\u5907, \u82e5\u65e0\u5f02\u5e38\u88ab\u5f15\u53d1, \u5219\u5b8c\u6210\u672c\u65b9\u6cd5\u540e\u5143\u7d20\u5e94\u53ef\u88ab\u53d1\u9001. \u4fdd\u7559\u7a7a\u5b9e\u73b0\u4ee5\u5141\u8bb8\u4e0d\u9700\u8981 `prepare`\u7684\u5143\u7d20\u7c7b\u578b\u5b58\u5728. \u82e5\u672c\u5143\u7d20\u8bbe\u8ba1\u65f6\u4fbf\u4e0d\u53ef\u88ab\u53d1\u9001, \u8bf7\u5f15\u53d1 `NotSendableElement` \u5f02\u5e38. \"\"\" def __repr_args__ ( self ) -> \"ReprArgs\" : return list ( self . dict ( exclude = { \"type\" }) . items ()) def __str__ ( self ) -> str : return self . asDisplay () def __add__ ( self , content : Union [ \"MessageChain\" , List [ \"Element\" ], \"Element\" , str ]) -> \"MessageChain\" : from .chain import MessageChain if isinstance ( content , str ): content = Plain ( content ) if isinstance ( content , Element ): content = [ content ] if isinstance ( content , MessageChain ): content = content . __root__ return MessageChain ( content + [ self ], inline = True ) def __radd__ ( self , content : Union [ \"MessageChain\" , List [ \"Element\" ], \"Element\" , str ]) -> \"MessageChain\" : from .chain import MessageChain if isinstance ( content , str ): content = Plain ( content ) if isinstance ( content , Element ): content = [ content ] if isinstance ( content , MessageChain ): content = content . __root__ return MessageChain ([ self ] + content , inline = True )","title":"Element"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Element.type","text":"type : str = 'Unknown' \u5143\u7d20\u7c7b\u578b","title":"type"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Element.asDisplay","text":"asDisplay () -> str \u8fd4\u56de\u8be5\u5143\u7d20\u7684 \"\u663e\u793a\" \u5f62\u5f0f\u5b57\u7b26\u4e32, \u8d8b\u8fd1\u4e8e\u4f60\u89c1\u5230\u7684\u6837\u5b50. Returns: Name Type Description str str \"\u663e\u793a\" \u5b57\u7b26\u4e32. Source code in graia/ariadne/message/element.py 44 45 46 47 48 49 50 51 @staticmethod def asDisplay () -> str : \"\"\"\u8fd4\u56de\u8be5\u5143\u7d20\u7684 \"\u663e\u793a\" \u5f62\u5f0f\u5b57\u7b26\u4e32, \u8d8b\u8fd1\u4e8e\u4f60\u89c1\u5230\u7684\u6837\u5b50. Returns: str: \"\u663e\u793a\" \u5b57\u7b26\u4e32. \"\"\" return \"\"","title":"asDisplay()"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Element.asPersistentString","text":"asPersistentString () -> str \u6301\u4e45\u5316\u5b57\u7b26\u4e32\u8868\u793a. Returns: Name Type Description str str \u6301\u4e45\u5316\u5b57\u7b26\u4e32. Source code in graia/ariadne/message/element.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 def asPersistentString ( self ) -> str : \"\"\"\u6301\u4e45\u5316\u5b57\u7b26\u4e32\u8868\u793a. Returns: str: \u6301\u4e45\u5316\u5b57\u7b26\u4e32. \"\"\" data : str = wrap_bracket ( j_dump ( self . dict ( exclude = { \"type\" }, ), indent = None , separators = ( \",\" , \":\" ), ) ) return f \"[mirai: { self . type } : { data } ]\"","title":"asPersistentString()"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Element.prepare","text":"prepare () -> None \u4e3a\u5143\u7d20\u88ab\u53d1\u9001\u8fdb\u884c\u51c6\u5907, \u82e5\u65e0\u5f02\u5e38\u88ab\u5f15\u53d1, \u5219\u5b8c\u6210\u672c\u65b9\u6cd5\u540e\u5143\u7d20\u5e94\u53ef\u88ab\u53d1\u9001. \u4fdd\u7559\u7a7a\u5b9e\u73b0\u4ee5\u5141\u8bb8\u4e0d\u9700\u8981 prepare \u7684\u5143\u7d20\u7c7b\u578b\u5b58\u5728. \u82e5\u672c\u5143\u7d20\u8bbe\u8ba1\u65f6\u4fbf\u4e0d\u53ef\u88ab\u53d1\u9001, \u8bf7\u5f15\u53d1 NotSendableElement \u5f02\u5e38. Source code in graia/ariadne/message/element.py 70 71 72 73 74 75 76 77 78 def prepare ( self ) -> None : \"\"\" \u4e3a\u5143\u7d20\u88ab\u53d1\u9001\u8fdb\u884c\u51c6\u5907, \u82e5\u65e0\u5f02\u5e38\u88ab\u5f15\u53d1, \u5219\u5b8c\u6210\u672c\u65b9\u6cd5\u540e\u5143\u7d20\u5e94\u53ef\u88ab\u53d1\u9001. \u4fdd\u7559\u7a7a\u5b9e\u73b0\u4ee5\u5141\u8bb8\u4e0d\u9700\u8981 `prepare`\u7684\u5143\u7d20\u7c7b\u578b\u5b58\u5728. \u82e5\u672c\u5143\u7d20\u8bbe\u8ba1\u65f6\u4fbf\u4e0d\u53ef\u88ab\u53d1\u9001, \u8bf7\u5f15\u53d1 `NotSendableElement` \u5f02\u5e38. \"\"\"","title":"prepare()"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Face","text":"Bases: Element \u8868\u793a\u6d88\u606f\u4e2d\u6240\u9644\u5e26\u7684\u8868\u60c5, \u8fd9\u4e9b\u8868\u60c5\u5927\u591a\u90fd\u662f\u804a\u5929\u5de5\u5177\u5185\u7f6e\u7684. Source code in graia/ariadne/message/element.py 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 class Face ( Element ): \"\"\"\u8868\u793a\u6d88\u606f\u4e2d\u6240\u9644\u5e26\u7684\u8868\u60c5, \u8fd9\u4e9b\u8868\u60c5\u5927\u591a\u90fd\u662f\u804a\u5929\u5de5\u5177\u5185\u7f6e\u7684.\"\"\" type : str = \"Face\" faceId : Optional [ int ] = None \"\"\"QQ \u8868\u60c5\u7f16\u53f7, \u4f18\u5148\u4e8e name\"\"\" name : Optional [ str ] = None \"\"\"QQ \u8868\u60c5\u540d\u79f0\"\"\" def __init__ ( self , id : int = ... , name : str = ... , ** data ) -> None : if id is not ... : data . update ( faceId = id ) if name is not ... : data . update ( name = name ) super () . __init__ ( ** data ) def asDisplay ( self ) -> str : return f \"[\u8868\u60c5: { self . name or self . faceId } ]\" def __eq__ ( self , other ) -> bool : return isinstance ( other , Face ) and ( self . faceId == other . faceId or self . name == other . name )","title":"Face"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Face.faceId","text":"faceId : Optional [ int ] = None QQ \u8868\u60c5\u7f16\u53f7, \u4f18\u5148\u4e8e name","title":"faceId"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Face.name","text":"name : Optional [ str ] = None QQ \u8868\u60c5\u540d\u79f0","title":"name"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.File","text":"Bases: Element \u6307\u793a\u4e00\u4e2a\u6587\u4ef6\u4fe1\u606f\u5143\u7d20 Source code in graia/ariadne/message/element.py 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 class File ( Element ): \"\"\"\u6307\u793a\u4e00\u4e2a\u6587\u4ef6\u4fe1\u606f\u5143\u7d20\"\"\" type = \"File\" id : str \"\"\"\u6587\u4ef6 ID\"\"\" name : str \"\"\"\u6587\u4ef6\u540d\"\"\" size : int \"\"\"\u6587\u4ef6\u5927\u5c0f\"\"\" def asDisplay ( self ) -> str : return f \"[\u6587\u4ef6: { self . name } ]\" def asPersistentString ( self ) -> str : return \"\" def prepare ( self ) -> None : raise NotSendableElement","title":"File"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.File.id","text":"id : str = None \u6587\u4ef6 ID","title":"id"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.File.name","text":"name : str = None \u6587\u4ef6\u540d","title":"name"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.File.size","text":"size : int = None \u6587\u4ef6\u5927\u5c0f","title":"size"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.FlashImage","text":"Bases: Image \u6307\u793a\u6d88\u606f\u4e2d\u7684\u95ea\u7167\u5143\u7d20 Source code in graia/ariadne/message/element.py 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 class FlashImage ( Image ): \"\"\"\u6307\u793a\u6d88\u606f\u4e2d\u7684\u95ea\u7167\u5143\u7d20\"\"\" type = \"FlashImage\" def __init__ ( self , id : Optional [ str ] = None , url : Optional [ str ] = None , * , path : Optional [ Union [ Path , str ]] = None , base64 : Optional [ str ] = None , data_bytes : Union [ None , bytes , BytesIO ] = None , ** kwargs , ) -> None : super () . __init__ ( id = id , url = url , path = path , base64 = base64 , data_bytes = data_bytes , ** kwargs ) def toImage ( self ) -> \"Image\" : \"\"\"\u5c06 FlashImage \u8f6c\u6362\u4e3a Image Returns: Image: \u8f6c\u6362\u540e\u7684 Image \"\"\" return Image . parse_obj ({ ** self . dict (), \"type\" : \"Image\" }) @classmethod def fromImage ( cls , image : \"Image\" ) -> \"FlashImage\" : \"\"\"\u4ece Image \u6784\u9020 FlashImage Returns: FlashImage: \u6784\u9020\u51fa\u7684 FlashImage \"\"\" return cls . parse_obj ({ ** image . dict (), \"type\" : \"FlashImage\" }) def asDisplay ( self ) -> str : return \"[\u95ea\u7167]\"","title":"FlashImage"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.FlashImage.fromImage","text":"fromImage ( image : 'Image' ) -> 'FlashImage' \u4ece Image \u6784\u9020 FlashImage Returns: Name Type Description FlashImage 'FlashImage' \u6784\u9020\u51fa\u7684 FlashImage Source code in graia/ariadne/message/element.py 798 799 800 801 802 803 804 805 @classmethod def fromImage ( cls , image : \"Image\" ) -> \"FlashImage\" : \"\"\"\u4ece Image \u6784\u9020 FlashImage Returns: FlashImage: \u6784\u9020\u51fa\u7684 FlashImage \"\"\" return cls . parse_obj ({ ** image . dict (), \"type\" : \"FlashImage\" })","title":"fromImage()"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.FlashImage.toImage","text":"toImage () -> 'Image' \u5c06 FlashImage \u8f6c\u6362\u4e3a Image Returns: Name Type Description Image 'Image' \u8f6c\u6362\u540e\u7684 Image Source code in graia/ariadne/message/element.py 790 791 792 793 794 795 796 def toImage ( self ) -> \"Image\" : \"\"\"\u5c06 FlashImage \u8f6c\u6362\u4e3a Image Returns: Image: \u8f6c\u6362\u540e\u7684 Image \"\"\" return Image . parse_obj ({ ** self . dict (), \"type\" : \"Image\" })","title":"toImage()"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Forward","text":"Bases: Element \u6307\u793a\u5408\u5e76\u8f6c\u53d1\u4fe1\u606f nodeList (List[ForwardNode]): \u8f6c\u53d1\u7684\u6d88\u606f\u8282\u70b9 Source code in graia/ariadne/message/element.py 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 class Forward ( Element ): \"\"\" \u6307\u793a\u5408\u5e76\u8f6c\u53d1\u4fe1\u606f nodeList (List[ForwardNode]): \u8f6c\u53d1\u7684\u6d88\u606f\u8282\u70b9 \"\"\" type = \"Forward\" nodeList : List [ ForwardNode ] \"\"\"\u8f6c\u53d1\u8282\u70b9\u5217\u8868\"\"\" def __init__ ( self , * nodes : Union [ Iterable [ ForwardNode ], ForwardNode ], ** data ) -> None : if nodes : nodeList : List [ ForwardNode ] = [] for i in nodes : if isinstance ( i , ForwardNode ): nodeList . append ( i ) else : nodeList . extend ( i ) data . update ( nodeList = nodeList ) super () . __init__ ( ** data ) def asDisplay ( self ) -> str : return f \"[\u5408\u5e76\u8f6c\u53d1:\u5171 { len ( self . nodeList ) } \u6761]\" def asPersistentString ( self ) -> str : return \"\"","title":"Forward"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Forward.nodeList","text":"nodeList : List [ ForwardNode ] = None \u8f6c\u53d1\u8282\u70b9\u5217\u8868","title":"nodeList"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.ForwardNode","text":"Bases: AriadneBaseModel \u8868\u793a\u5408\u5e76\u8f6c\u53d1\u4e2d\u7684\u4e00\u4e2a\u8282\u70b9 Source code in graia/ariadne/message/element.py 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 class ForwardNode ( AriadneBaseModel ): \"\"\"\u8868\u793a\u5408\u5e76\u8f6c\u53d1\u4e2d\u7684\u4e00\u4e2a\u8282\u70b9\"\"\" senderId : int \"\"\"\u53d1\u9001\u8005 QQ \u53f7 (\u51b3\u5b9a\u663e\u793a\u5934\u50cf)\"\"\" time : datetime \"\"\"\u53d1\u9001\u65f6\u95f4\"\"\" senderName : str \"\"\"\u53d1\u9001\u8005\u663e\u793a\u540d\u5b57\"\"\" messageChain : Optional [ \"MessageChain\" ] \"\"\"\u53d1\u9001\u7684\u6d88\u606f\u94fe\"\"\" messageId : Optional [ int ] \"\"\"\u7f13\u5b58\u7684\u6d88\u606f ID\"\"\" def __init__ ( self , target : Union [ int , Friend , Member , Stranger ] = ... , time : datetime = ... , message : \"MessageChain\" = ... , name : str = ... , ** data , ) -> None : if target is not ... : if isinstance ( target , int ): data . update ( senderId = target ) else : data . update ( senderId = target . id ) if isinstance ( target , Member ): data . update ( senderName = target . name ) else : data . update ( senderName = target . nickname ) if time is not ... : data . update ( time = time ) if name is not ... : data . update ( senderName = name ) if message is not ... : data . update ( messageChain = message ) super () . __init__ ( ** data )","title":"ForwardNode"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.ForwardNode.messageChain","text":"messageChain : Optional [ 'MessageChain' ] = None \u53d1\u9001\u7684\u6d88\u606f\u94fe","title":"messageChain"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.ForwardNode.messageId","text":"messageId : Optional [ int ] = None \u7f13\u5b58\u7684\u6d88\u606f ID","title":"messageId"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.ForwardNode.senderId","text":"senderId : int = None \u53d1\u9001\u8005 QQ \u53f7 (\u51b3\u5b9a\u663e\u793a\u5934\u50cf)","title":"senderId"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.ForwardNode.senderName","text":"senderName : str = None \u53d1\u9001\u8005\u663e\u793a\u540d\u5b57","title":"senderName"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.ForwardNode.time","text":"time : datetime = None \u53d1\u9001\u65f6\u95f4","title":"time"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Image","text":"Bases: MultimediaElement \u6307\u793a\u6d88\u606f\u4e2d\u7684\u56fe\u7247\u5143\u7d20 Source code in graia/ariadne/message/element.py 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 class Image ( MultimediaElement ): \"\"\"\u6307\u793a\u6d88\u606f\u4e2d\u7684\u56fe\u7247\u5143\u7d20\"\"\" type = \"Image\" id : Optional [ str ] = Field ( None , alias = \"imageId\" ) def __init__ ( self , id : Optional [ str ] = None , url : Optional [ str ] = None , * , path : Optional [ Union [ Path , str ]] = None , base64 : Optional [ str ] = None , data_bytes : Union [ None , bytes , BytesIO ] = None , ** kwargs , ) -> None : super () . __init__ ( id = id , url = url , path = path , base64 = base64 , data_bytes = data_bytes , ** kwargs ) def toFlashImage ( self ) -> \"FlashImage\" : \"\"\"\u5c06 Image \u8f6c\u6362\u4e3a FlashImage Returns: FlashImage: \u8f6c\u6362\u540e\u7684 FlashImage \"\"\" return FlashImage . parse_obj ({ ** self . dict (), \"type\" : \"FlashImage\" }) @classmethod def fromFlashImage ( cls , flash : \"FlashImage\" ) -> \"Image\" : \"\"\"\u4ece FlashImage \u6784\u9020 Image Returns: Image: \u6784\u9020\u51fa\u7684 Image \"\"\" return cls . parse_obj ({ ** flash . dict (), \"type\" : \"Image\" }) def asDisplay ( self ) -> str : return \"[\u56fe\u7247]\"","title":"Image"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Image.fromFlashImage","text":"fromFlashImage ( flash : 'FlashImage' ) -> 'Image' \u4ece FlashImage \u6784\u9020 Image Returns: Name Type Description Image 'Image' \u6784\u9020\u51fa\u7684 Image Source code in graia/ariadne/message/element.py 760 761 762 763 764 765 766 767 @classmethod def fromFlashImage ( cls , flash : \"FlashImage\" ) -> \"Image\" : \"\"\"\u4ece FlashImage \u6784\u9020 Image Returns: Image: \u6784\u9020\u51fa\u7684 Image \"\"\" return cls . parse_obj ({ ** flash . dict (), \"type\" : \"Image\" })","title":"fromFlashImage()"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Image.toFlashImage","text":"toFlashImage () -> 'FlashImage' \u5c06 Image \u8f6c\u6362\u4e3a FlashImage Returns: Name Type Description FlashImage 'FlashImage' \u8f6c\u6362\u540e\u7684 FlashImage Source code in graia/ariadne/message/element.py 752 753 754 755 756 757 758 def toFlashImage ( self ) -> \"FlashImage\" : \"\"\"\u5c06 Image \u8f6c\u6362\u4e3a FlashImage Returns: FlashImage: \u8f6c\u6362\u540e\u7684 FlashImage \"\"\" return FlashImage . parse_obj ({ ** self . dict (), \"type\" : \"FlashImage\" })","title":"toFlashImage()"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.ImageType","text":"Bases: Enum Image \u7c7b\u578b\u7684\u679a\u4e3e. Source code in graia/ariadne/message/element.py 606 607 608 609 610 611 612 613 614 615 616 617 618 619 class ImageType ( Enum ): \"\"\"Image \u7c7b\u578b\u7684\u679a\u4e3e.\"\"\" Friend = \"Friend\" \"\"\"\u597d\u53cb\u6d88\u606f\"\"\" Group = \"Group\" \"\"\"\u7fa4\u7ec4\u6d88\u606f\"\"\" Temp = \"Temp\" \"\"\"\u4e34\u65f6\u6d88\u606f\"\"\" Unknown = \"Unknown\" \"\"\"\u672a\u77e5\u6d88\u606f\"\"\"","title":"ImageType"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.ImageType.Friend","text":"Friend = 'Friend' \u597d\u53cb\u6d88\u606f","title":"Friend"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.ImageType.Group","text":"Group = 'Group' \u7fa4\u7ec4\u6d88\u606f","title":"Group"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.ImageType.Temp","text":"Temp = 'Temp' \u4e34\u65f6\u6d88\u606f","title":"Temp"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.ImageType.Unknown","text":"Unknown = 'Unknown' \u672a\u77e5\u6d88\u606f","title":"Unknown"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Json","text":"Bases: Element \u8868\u793a\u6d88\u606f\u4e2d\u7684 JSON \u6d88\u606f\u5143\u7d20 Source code in graia/ariadne/message/element.py 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 class Json ( Element ): \"\"\"\u8868\u793a\u6d88\u606f\u4e2d\u7684 JSON \u6d88\u606f\u5143\u7d20\"\"\" type = \"Json\" Json : str = Field ( ... , alias = \"json\" ) \"\"\"XML\u6587\u672c\"\"\" def __init__ ( self , json : Union [ dict , str ], ** kwargs ) -> None : if isinstance ( json , dict ): json = j_dump ( json ) super () . __init__ ( json = json , ** kwargs ) def dict ( self , * args , ** kwargs ): return super () . dict ( * args , ** ({ ** kwargs , \"by_alias\" : True })) def asDisplay ( self ) -> str : return \"[JSON\u6d88\u606f]\"","title":"Json"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Json.Json","text":"Json : str = Field ( Ellipsis , alias = 'json' ) XML\u6587\u672c","title":"Json"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.MarketFace","text":"Bases: Element \u8868\u793a\u6d88\u606f\u4e2d\u7684\u5546\u57ce\u8868\u60c5. \u6ce8\u610f: \u672c\u7c7b\u578b\u4e0d\u652f\u6301\u7528\u6237\u53d1\u9001 Source code in graia/ariadne/message/element.py 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 class MarketFace ( Element ): \"\"\"\u8868\u793a\u6d88\u606f\u4e2d\u7684\u5546\u57ce\u8868\u60c5. \u6ce8\u610f: \u672c\u7c7b\u578b\u4e0d\u652f\u6301\u7528\u6237\u53d1\u9001 \"\"\" type : str = \"MarketFace\" faceId : Optional [ int ] = Field ( None , alias = \"id\" ) \"\"\"QQ \u8868\u60c5\u7f16\u53f7\"\"\" name : Optional [ str ] = None \"\"\"QQ \u8868\u60c5\u540d\u79f0\"\"\" def asDisplay ( self ) -> str : return f \"[\u5546\u57ce\u8868\u60c5: { self . name or self . faceId } ]\" def __eq__ ( self , other ) -> bool : return isinstance ( other , MarketFace ) and ( self . faceId == other . faceId or self . name == other . name )","title":"MarketFace"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.MarketFace.faceId","text":"faceId : Optional [ int ] = Field ( None , alias = 'id' ) QQ \u8868\u60c5\u7f16\u53f7","title":"faceId"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.MarketFace.name","text":"name : Optional [ str ] = None QQ \u8868\u60c5\u540d\u79f0","title":"name"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.MiraiCode","text":"Bases: Element Mirai \u7801, \u5e76\u4e0d\u5efa\u8bae\u76f4\u63a5\u4f7f\u7528. Ariadne \u4e5f\u4e0d\u4f1a\u63d0\u4f9b\u4e92\u8f6c\u6362\u63a5\u53e3. Source code in graia/ariadne/message/element.py 597 598 599 600 601 602 603 class MiraiCode ( Element ): \"\"\"Mirai \u7801, \u5e76\u4e0d\u5efa\u8bae\u76f4\u63a5\u4f7f\u7528. Ariadne \u4e5f\u4e0d\u4f1a\u63d0\u4f9b\u4e92\u8f6c\u6362\u63a5\u53e3.\"\"\" type = \"MiraiCode\" code : str \"\"\"Mirai Code\"\"\"","title":"MiraiCode"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.MiraiCode.code","text":"code : str = None Mirai Code","title":"code"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.MultimediaElement","text":"Bases: Element \u6307\u793a\u591a\u5a92\u4f53\u6d88\u606f\u5143\u7d20. Source code in graia/ariadne/message/element.py 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 class MultimediaElement ( Element ): \"\"\"\u6307\u793a\u591a\u5a92\u4f53\u6d88\u606f\u5143\u7d20.\"\"\" id : Optional [ str ] \"\"\"\u5143\u7d20 ID\"\"\" url : Optional [ str ] = None \"\"\"\u5143\u7d20\u7684\u4e0b\u8f7d url\"\"\" base64 : Optional [ str ] = None \"\"\"\u5143\u7d20\u7684 base64\"\"\" def __init__ ( self , id : Optional [ str ] = None , url : Optional [ str ] = None , * , path : Optional [ Union [ Path , str ]] = None , base64 : Optional [ str ] = None , data_bytes : Union [ None , bytes , BytesIO ] = None , ** kwargs , ) -> None : data = { \"id\" : value for key , value in kwargs . items () if key . lower () . endswith ( \"id\" )} if sum ([ bool ( url ), bool ( path ), bool ( base64 )]) > 1 : raise ValueError ( \"Too many binary initializers!\" ) # Web initializer data [ \"id\" ] = data . get ( \"id\" , id ) data [ \"url\" ] = url # Binary initializer if path : if isinstance ( path , str ): path = Path ( path ) if not path . exists (): raise FileNotFoundError ( f \" { path } is not exist!\" ) data [ \"base64\" ] = b64encode ( path . read_bytes ()) elif base64 : data [ \"base64\" ] = base64 elif data_bytes : if isinstance ( data_bytes , bytes ): data [ \"base64\" ] = b64encode ( data_bytes ) if isinstance ( data_bytes , BytesIO ): data [ \"base64\" ] = b64encode ( data_bytes . read ()) super () . __init__ ( ** data , ** kwargs ) async def get_bytes ( self ) -> bytes : \"\"\"\u5c1d\u8bd5\u83b7\u53d6\u6d88\u606f\u5143\u7d20\u7684 bytes, \u6ce8\u610f, \u4f60\u65e0\u6cd5\u83b7\u53d6\u5e76\u4e0d\u5305\u542b url \u4e14\u4e0d\u5305\u542b base64 \u5c5e\u6027\u7684\u672c\u5143\u7d20\u7684 bytes. Raises: ValueError: \u4f60\u5c1d\u8bd5\u83b7\u53d6\u5e76\u4e0d\u5305\u542b url \u5c5e\u6027\u7684\u672c\u5143\u7d20\u7684 bytes. Returns: bytes: \u5143\u7d20\u539f\u59cb\u6570\u636e \"\"\" from .. import get_running from ..adapter import Adapter if self . base64 : return b64decode ( self . base64 ) if not self . url : raise ValueError ( \"you should offer a url.\" ) session = get_running ( Adapter ) . session if not session : raise RuntimeError ( \"Unable to get session!\" ) async with session . get ( self . url ) as response : response . raise_for_status () data = await response . read () self . base64 = b64encode ( data ) . decode ( \"ascii\" ) return data def asNoBinaryPersistentString ( self ) -> str : \"\"\"\u751f\u6210\u4e0d\u9644\u5e26\u4e8c\u8fdb\u5236\u6570\u636e\u7684\u6301\u4e45\u5316\u5b57\u7b26\u4e32 Returns: str: \u6301\u4e45\u5316\u5b57\u7b26\u4e32 \"\"\" data : str = wrap_bracket ( j_dump ( self . dict ( exclude = { \"type\" , \"base64\" }, ), indent = None , separators = ( \",\" , \":\" ), ) ) return f \"[mirai: { self . type } : { data } ]\" @property def uuid ( self ): \"\"\"\u591a\u5a92\u4f53\u5143\u7d20\u7684 uuid, \u5373\u5143\u7d20\u5728 mirai \u5185\u90e8\u7684\u6807\u8bc6\"\"\" return self . id . split ( \".\" )[ 0 ] . strip ( \"/ {} \" ) . lower () if self . id else \"\" def __eq__ ( self , other : \"MultimediaElement\" ): if self . __class__ is not other . __class__ : return False if self . uuid and self . uuid == other . uuid : return True if self . url and self . url == other . url : return True if self . base64 and self . base64 == other . base64 : return True return False","title":"MultimediaElement"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.MultimediaElement.base64","text":"base64 : Optional [ str ] = None \u5143\u7d20\u7684 base64","title":"base64"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.MultimediaElement.id","text":"id : Optional [ str ] = None \u5143\u7d20 ID","title":"id"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.MultimediaElement.url","text":"url : Optional [ str ] = None \u5143\u7d20\u7684\u4e0b\u8f7d url","title":"url"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.MultimediaElement.asNoBinaryPersistentString","text":"asNoBinaryPersistentString () -> str \u751f\u6210\u4e0d\u9644\u5e26\u4e8c\u8fdb\u5236\u6570\u636e\u7684\u6301\u4e45\u5316\u5b57\u7b26\u4e32 Returns: Name Type Description str str \u6301\u4e45\u5316\u5b57\u7b26\u4e32 Source code in graia/ariadne/message/element.py 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 def asNoBinaryPersistentString ( self ) -> str : \"\"\"\u751f\u6210\u4e0d\u9644\u5e26\u4e8c\u8fdb\u5236\u6570\u636e\u7684\u6301\u4e45\u5316\u5b57\u7b26\u4e32 Returns: str: \u6301\u4e45\u5316\u5b57\u7b26\u4e32 \"\"\" data : str = wrap_bracket ( j_dump ( self . dict ( exclude = { \"type\" , \"base64\" }, ), indent = None , separators = ( \",\" , \":\" ), ) ) return f \"[mirai: { self . type } : { data } ]\"","title":"asNoBinaryPersistentString()"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.MultimediaElement.get_bytes","text":"get_bytes () -> bytes \u5c1d\u8bd5\u83b7\u53d6\u6d88\u606f\u5143\u7d20\u7684 bytes, \u6ce8\u610f, \u4f60\u65e0\u6cd5\u83b7\u53d6\u5e76\u4e0d\u5305\u542b url \u4e14\u4e0d\u5305\u542b base64 \u5c5e\u6027\u7684\u672c\u5143\u7d20\u7684 bytes. Raises: Type Description ValueError \u4f60\u5c1d\u8bd5\u83b7\u53d6\u5e76\u4e0d\u5305\u542b url \u5c5e\u6027\u7684\u672c\u5143\u7d20\u7684 bytes. Returns: Name Type Description bytes bytes \u5143\u7d20\u539f\u59cb\u6570\u636e Source code in graia/ariadne/message/element.py 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 async def get_bytes ( self ) -> bytes : \"\"\"\u5c1d\u8bd5\u83b7\u53d6\u6d88\u606f\u5143\u7d20\u7684 bytes, \u6ce8\u610f, \u4f60\u65e0\u6cd5\u83b7\u53d6\u5e76\u4e0d\u5305\u542b url \u4e14\u4e0d\u5305\u542b base64 \u5c5e\u6027\u7684\u672c\u5143\u7d20\u7684 bytes. Raises: ValueError: \u4f60\u5c1d\u8bd5\u83b7\u53d6\u5e76\u4e0d\u5305\u542b url \u5c5e\u6027\u7684\u672c\u5143\u7d20\u7684 bytes. Returns: bytes: \u5143\u7d20\u539f\u59cb\u6570\u636e \"\"\" from .. import get_running from ..adapter import Adapter if self . base64 : return b64decode ( self . base64 ) if not self . url : raise ValueError ( \"you should offer a url.\" ) session = get_running ( Adapter ) . session if not session : raise RuntimeError ( \"Unable to get session!\" ) async with session . get ( self . url ) as response : response . raise_for_status () data = await response . read () self . base64 = b64encode ( data ) . decode ( \"ascii\" ) return data","title":"get_bytes()"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.MultimediaElement.uuid","text":"uuid () \u591a\u5a92\u4f53\u5143\u7d20\u7684 uuid, \u5373\u5143\u7d20\u5728 mirai \u5185\u90e8\u7684\u6807\u8bc6 Source code in graia/ariadne/message/element.py 716 717 718 719 @property def uuid ( self ): \"\"\"\u591a\u5a92\u4f53\u5143\u7d20\u7684 uuid, \u5373\u5143\u7d20\u5728 mirai \u5185\u90e8\u7684\u6807\u8bc6\"\"\" return self . id . split ( \".\" )[ 0 ] . strip ( \"/ {} \" ) . lower () if self . id else \"\"","title":"uuid()"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.MusicShare","text":"Bases: Element \u8868\u793a\u6d88\u606f\u4e2d\u97f3\u4e50\u5206\u4eab\u6d88\u606f\u5143\u7d20 Source code in graia/ariadne/message/element.py 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 class MusicShare ( Element ): \"\"\"\u8868\u793a\u6d88\u606f\u4e2d\u97f3\u4e50\u5206\u4eab\u6d88\u606f\u5143\u7d20\"\"\" type = \"MusicShare\" kind : MusicShareKind \"\"\"\u97f3\u4e50\u5206\u4eab\u7684\u6765\u6e90\"\"\" title : Optional [ str ] \"\"\"\u97f3\u4e50\u6807\u9898\"\"\" summary : Optional [ str ] \"\"\"\u97f3\u4e50\u6458\u8981\"\"\" jumpUrl : Optional [ str ] \"\"\"\u97f3\u4e50\u8df3\u8f6c\u94fe\u63a5\"\"\" pictureUrl : Optional [ str ] \"\"\"\u97f3\u4e50\u56fe\u7247\u94fe\u63a5\"\"\" musicUrl : Optional [ str ] \"\"\"\u97f3\u4e50\u94fe\u63a5\"\"\" brief : Optional [ str ] \"\"\"\u97f3\u4e50\u7b80\u4ecb\"\"\" def __init__ ( self , kind : MusicShareKind , title : Optional [ str ] = None , summary : Optional [ str ] = None , jumpUrl : Optional [ str ] = None , pictureUrl : Optional [ str ] = None , musicUrl : Optional [ str ] = None , brief : Optional [ str ] = None , * _ , ** __ , ) -> None : super () . __init__ ( kind = kind , title = title , summary = summary , jumpUrl = jumpUrl , pictureUrl = pictureUrl , musicUrl = musicUrl , brief = brief , ) def asDisplay ( self ) -> str : return f \"[\u97f3\u4e50\u5206\u4eab: { self . title } , { self . brief } ]\"","title":"MusicShare"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.MusicShare.brief","text":"brief : Optional [ str ] = None \u97f3\u4e50\u7b80\u4ecb","title":"brief"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.MusicShare.jumpUrl","text":"jumpUrl : Optional [ str ] = None \u97f3\u4e50\u8df3\u8f6c\u94fe\u63a5","title":"jumpUrl"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.MusicShare.kind","text":"kind : MusicShareKind = None \u97f3\u4e50\u5206\u4eab\u7684\u6765\u6e90","title":"kind"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.MusicShare.musicUrl","text":"musicUrl : Optional [ str ] = None \u97f3\u4e50\u94fe\u63a5","title":"musicUrl"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.MusicShare.pictureUrl","text":"pictureUrl : Optional [ str ] = None \u97f3\u4e50\u56fe\u7247\u94fe\u63a5","title":"pictureUrl"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.MusicShare.summary","text":"summary : Optional [ str ] = None \u97f3\u4e50\u6458\u8981","title":"summary"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.MusicShare.title","text":"title : Optional [ str ] = None \u97f3\u4e50\u6807\u9898","title":"title"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.MusicShareKind","text":"Bases: str , Enum \u97f3\u4e50\u5206\u4eab\u7684\u6765\u6e90\u3002 Source code in graia/ariadne/message/element.py 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 class MusicShareKind ( str , Enum ): \"\"\"\u97f3\u4e50\u5206\u4eab\u7684\u6765\u6e90\u3002\"\"\" NeteaseCloudMusic = \"NeteaseCloudMusic\" \"\"\"\u7f51\u6613\u4e91\u97f3\u4e50\"\"\" QQMusic = \"QQMusic\" \"\"\"QQ\u97f3\u4e50\"\"\" MiguMusic = \"MiguMusic\" \"\"\"\u54aa\u5495\u97f3\u4e50\"\"\" KugouMusic = \"KugouMusic\" \"\"\"\u9177\u72d7\u97f3\u4e50\"\"\" KuwoMusic = \"KuwoMusic\" \"\"\"\u9177\u6211\u97f3\u4e50\"\"\"","title":"MusicShareKind"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.MusicShareKind.KugouMusic","text":"KugouMusic = 'KugouMusic' \u9177\u72d7\u97f3\u4e50","title":"KugouMusic"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.MusicShareKind.KuwoMusic","text":"KuwoMusic = 'KuwoMusic' \u9177\u6211\u97f3\u4e50","title":"KuwoMusic"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.MusicShareKind.MiguMusic","text":"MiguMusic = 'MiguMusic' \u54aa\u5495\u97f3\u4e50","title":"MiguMusic"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.MusicShareKind.NeteaseCloudMusic","text":"NeteaseCloudMusic = 'NeteaseCloudMusic' \u7f51\u6613\u4e91\u97f3\u4e50","title":"NeteaseCloudMusic"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.MusicShareKind.QQMusic","text":"QQMusic = 'QQMusic' QQ\u97f3\u4e50","title":"QQMusic"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.NotSendableElement","text":"Bases: Exception \u6307\u793a\u4e00\u4e2a\u5143\u7d20\u662f\u4e0d\u53ef\u53d1\u9001\u7684. Source code in graia/ariadne/message/element.py 23 24 25 26 class NotSendableElement ( Exception ): \"\"\" \u6307\u793a\u4e00\u4e2a\u5143\u7d20\u662f\u4e0d\u53ef\u53d1\u9001\u7684. \"\"\"","title":"NotSendableElement"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Plain","text":"Bases: Element \u4ee3\u8868\u6d88\u606f\u4e2d\u7684\u6587\u672c\u5143\u7d20 Source code in graia/ariadne/message/element.py 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 class Plain ( Element ): \"\"\"\u4ee3\u8868\u6d88\u606f\u4e2d\u7684\u6587\u672c\u5143\u7d20\"\"\" type : str = \"Plain\" text : str \"\"\"\u5b9e\u9645\u7684\u6587\u672c\"\"\" def __init__ ( self , text : str , ** kwargs ) -> None : \"\"\"\u5b9e\u4f8b\u5316\u4e00\u4e2a Plain \u6d88\u606f\u5143\u7d20, \u7528\u4e8e\u627f\u8f7d\u6d88\u606f\u4e2d\u7684\u6587\u5b57. Args: text (str): \u5143\u7d20\u6240\u5305\u542b\u7684\u6587\u5b57 \"\"\" super () . __init__ ( text = text , ** kwargs ) # type: ignore def asDisplay ( self ) -> str : return self . text def asPersistentString ( self ) -> str : return self . text","title":"Plain"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Plain.text","text":"text : str = None \u5b9e\u9645\u7684\u6587\u672c","title":"text"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Plain.__init__","text":"__init__ ( text : str , ** kwargs ) -> None \u5b9e\u4f8b\u5316\u4e00\u4e2a Plain \u6d88\u606f\u5143\u7d20, \u7528\u4e8e\u627f\u8f7d\u6d88\u606f\u4e2d\u7684\u6587\u5b57. Parameters: Name Type Description Default text str \u5143\u7d20\u6240\u5305\u542b\u7684\u6587\u5b57 required Source code in graia/ariadne/message/element.py 117 118 119 120 121 122 123 def __init__ ( self , text : str , ** kwargs ) -> None : \"\"\"\u5b9e\u4f8b\u5316\u4e00\u4e2a Plain \u6d88\u606f\u5143\u7d20, \u7528\u4e8e\u627f\u8f7d\u6d88\u606f\u4e2d\u7684\u6587\u5b57. Args: text (str): \u5143\u7d20\u6240\u5305\u542b\u7684\u6587\u5b57 \"\"\" super () . __init__ ( text = text , ** kwargs ) # type: ignore","title":"__init__()"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Poke","text":"Bases: Element \u8868\u793a\u6d88\u606f\u4e2d\u6233\u4e00\u6233\u6d88\u606f\u5143\u7d20 Source code in graia/ariadne/message/element.py 399 400 401 402 403 404 405 406 407 408 409 410 411 class Poke ( Element ): \"\"\"\u8868\u793a\u6d88\u606f\u4e2d\u6233\u4e00\u6233\u6d88\u606f\u5143\u7d20\"\"\" type = \"Poke\" name : PokeMethods \"\"\"\u6233\u4e00\u6233\u4f7f\u7528\u7684\u65b9\u6cd5\"\"\" def __init__ ( self , name : PokeMethods , * _ , ** __ ) -> None : super () . __init__ ( name = name ) def asDisplay ( self ) -> str : return f \"[\u6233\u4e00\u6233: { self . name } ]\"","title":"Poke"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Poke.name","text":"name : PokeMethods = None \u6233\u4e00\u6233\u4f7f\u7528\u7684\u65b9\u6cd5","title":"name"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.PokeMethods","text":"Bases: str , Enum \u6233\u4e00\u6233\u53ef\u7528\u65b9\u6cd5 Source code in graia/ariadne/message/element.py 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 class PokeMethods ( str , Enum ): \"\"\"\u6233\u4e00\u6233\u53ef\u7528\u65b9\u6cd5\"\"\" ChuoYiChuo = \"ChuoYiChuo\" \"\"\"\u6233\u4e00\u6233\"\"\" BiXin = \"BiXin\" \"\"\"\u6bd4\u5fc3\"\"\" DianZan = \"DianZan\" \"\"\"\u70b9\u8d5e\"\"\" XinSui = \"XinSui\" \"\"\"\u5fc3\u788e\"\"\" LiuLiuLiu = \"LiuLiuLiu\" \"\"\"666\"\"\" FangDaZhao = \"FangDaZhao\" \"\"\"\u653e\u5927\u62db\"\"\" BaoBeiQiu = \"BaoBeiQiu\" \"\"\"\u5b9d\u8d1d\u7403\"\"\" Rose = \"Rose\" \"\"\"\u73ab\u7470\u82b1\"\"\" ZhaoHuanShu = \"ZhaoHuanShu\" \"\"\"\u53ec\u5524\u672f\"\"\" RangNiPi = \"RangNiPi\" \"\"\"\u8ba9\u4f60\u76ae\"\"\" JeiYin = \"JeiYin\" \"\"\"\u7ed3\u5370\"\"\" ShouLei = \"ShouLei\" \"\"\"\u624b\u96f7\"\"\" GouYin = \"GouYin\" \"\"\"\u52fe\u5f15\"\"\" ZhuaYiXia = \"ZhuaYiXia\" \"\"\"\u6293\u4e00\u4e0b\"\"\" SuiPing = \"SuiPing\" \"\"\"\u788e\u5c4f\"\"\" QiaoMen = \"QiaoMen\" \"\"\"\u6572\u95e8\"\"\"","title":"PokeMethods"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.PokeMethods.BaoBeiQiu","text":"BaoBeiQiu = 'BaoBeiQiu' \u5b9d\u8d1d\u7403","title":"BaoBeiQiu"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.PokeMethods.BiXin","text":"BiXin = 'BiXin' \u6bd4\u5fc3","title":"BiXin"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.PokeMethods.ChuoYiChuo","text":"ChuoYiChuo = 'ChuoYiChuo' \u6233\u4e00\u6233","title":"ChuoYiChuo"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.PokeMethods.DianZan","text":"DianZan = 'DianZan' \u70b9\u8d5e","title":"DianZan"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.PokeMethods.FangDaZhao","text":"FangDaZhao = 'FangDaZhao' \u653e\u5927\u62db","title":"FangDaZhao"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.PokeMethods.GouYin","text":"GouYin = 'GouYin' \u52fe\u5f15","title":"GouYin"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.PokeMethods.JeiYin","text":"JeiYin = 'JeiYin' \u7ed3\u5370","title":"JeiYin"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.PokeMethods.LiuLiuLiu","text":"LiuLiuLiu = 'LiuLiuLiu' 666","title":"LiuLiuLiu"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.PokeMethods.QiaoMen","text":"QiaoMen = 'QiaoMen' \u6572\u95e8","title":"QiaoMen"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.PokeMethods.RangNiPi","text":"RangNiPi = 'RangNiPi' \u8ba9\u4f60\u76ae","title":"RangNiPi"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.PokeMethods.Rose","text":"Rose = 'Rose' \u73ab\u7470\u82b1","title":"Rose"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.PokeMethods.ShouLei","text":"ShouLei = 'ShouLei' \u624b\u96f7","title":"ShouLei"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.PokeMethods.SuiPing","text":"SuiPing = 'SuiPing' \u788e\u5c4f","title":"SuiPing"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.PokeMethods.XinSui","text":"XinSui = 'XinSui' \u5fc3\u788e","title":"XinSui"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.PokeMethods.ZhaoHuanShu","text":"ZhaoHuanShu = 'ZhaoHuanShu' \u53ec\u5524\u672f","title":"ZhaoHuanShu"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.PokeMethods.ZhuaYiXia","text":"ZhuaYiXia = 'ZhuaYiXia' \u6293\u4e00\u4e0b","title":"ZhuaYiXia"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Quote","text":"Bases: Element \u8868\u793a\u6d88\u606f\u4e2d\u56de\u590d\u5176\u4ed6\u6d88\u606f/\u7528\u6237\u7684\u90e8\u5206, \u901a\u5e38\u5305\u542b\u4e00\u4e2a\u5b8c\u6574\u7684\u6d88\u606f\u94fe( origin \u5c5e\u6027) Source code in graia/ariadne/message/element.py 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 class Quote ( Element ): \"\"\"\u8868\u793a\u6d88\u606f\u4e2d\u56de\u590d\u5176\u4ed6\u6d88\u606f/\u7528\u6237\u7684\u90e8\u5206, \u901a\u5e38\u5305\u542b\u4e00\u4e2a\u5b8c\u6574\u7684\u6d88\u606f\u94fe(`origin` \u5c5e\u6027)\"\"\" type : str = \"Quote\" id : int \"\"\"\u5f15\u7528\u7684\u6d88\u606f ID\"\"\" groupId : int \"\"\"\u5f15\u7528\u6d88\u606f\u6240\u5728\u7fa4\u53f7 (\u597d\u53cb\u6d88\u606f\u4e3a 0)\"\"\" senderId : int \"\"\"\u53d1\u9001\u8005 QQ \u53f7\"\"\" targetId : int \"\"\"\u539f\u6d88\u606f\u7684\u63a5\u6536\u8005QQ\u53f7 (\u6216\u7fa4\u53f7) \"\"\" origin : \"MessageChain\" \"\"\"\u539f\u6765\u7684\u6d88\u606f\u94fe\"\"\" @validator ( \"origin\" , pre = True , allow_reuse = True ) def _ ( cls , v ): from .chain import MessageChain return MessageChain ( v ) # no need to parse objects, they are universal! def prepare ( self ) -> NoReturn : raise NotSendableElement def asPersistentString ( self ) -> str : return \"\"","title":"Quote"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Quote.groupId","text":"groupId : int = None \u5f15\u7528\u6d88\u606f\u6240\u5728\u7fa4\u53f7 (\u597d\u53cb\u6d88\u606f\u4e3a 0)","title":"groupId"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Quote.id","text":"id : int = None \u5f15\u7528\u7684\u6d88\u606f ID","title":"id"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Quote.origin","text":"origin : 'MessageChain' = None \u539f\u6765\u7684\u6d88\u606f\u94fe","title":"origin"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Quote.senderId","text":"senderId : int = None \u53d1\u9001\u8005 QQ \u53f7","title":"senderId"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Quote.targetId","text":"targetId : int = None \u539f\u6d88\u606f\u7684\u63a5\u6536\u8005QQ\u53f7 (\u6216\u7fa4\u53f7)","title":"targetId"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Source","text":"Bases: Element \u8868\u793a\u6d88\u606f\u5728\u4e00\u4e2a\u7279\u5b9a\u804a\u5929\u533a\u57df\u5185\u7684\u552f\u4e00\u6807\u8bc6 Source code in graia/ariadne/message/element.py 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 class Source ( Element ): \"\"\"\u8868\u793a\u6d88\u606f\u5728\u4e00\u4e2a\u7279\u5b9a\u804a\u5929\u533a\u57df\u5185\u7684\u552f\u4e00\u6807\u8bc6\"\"\" type : str = \"Source\" id : int \"\"\"\u6d88\u606f ID\"\"\" time : datetime \"\"\"\u53d1\u9001\u65f6\u95f4\"\"\" def prepare ( self ) -> NoReturn : raise NotSendableElement def asPersistentString ( self ) -> str : return \"\" async def fetchOriginal ( self ) -> \"MessageChain\" : \"\"\"\u5c1d\u8bd5\u4ece\u672c\u5143\u7d20\u6062\u590d\u539f\u672c\u7684\u6d88\u606f\u94fe, \u6709\u53ef\u80fd\u5931\u8d25. Returns: MessageChain: \u539f\u6765\u7684\u6d88\u606f\u94fe. \"\"\" from .. import get_running from ..app import Ariadne ariadne = get_running ( Ariadne ) return ( await ariadne . getMessageFromId ( self . id )) . messageChain","title":"Source"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Source.id","text":"id : int = None \u6d88\u606f ID","title":"id"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Source.time","text":"time : datetime = None \u53d1\u9001\u65f6\u95f4","title":"time"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Source.fetchOriginal","text":"fetchOriginal () -> 'MessageChain' \u5c1d\u8bd5\u4ece\u672c\u5143\u7d20\u6062\u590d\u539f\u672c\u7684\u6d88\u606f\u94fe, \u6709\u53ef\u80fd\u5931\u8d25. Returns: Name Type Description MessageChain 'MessageChain' \u539f\u6765\u7684\u6d88\u606f\u94fe. Source code in graia/ariadne/message/element.py 149 150 151 152 153 154 155 156 157 158 159 160 async def fetchOriginal ( self ) -> \"MessageChain\" : \"\"\"\u5c1d\u8bd5\u4ece\u672c\u5143\u7d20\u6062\u590d\u539f\u672c\u7684\u6d88\u606f\u94fe, \u6709\u53ef\u80fd\u5931\u8d25. Returns: MessageChain: \u539f\u6765\u7684\u6d88\u606f\u94fe. \"\"\" from .. import get_running from ..app import Ariadne ariadne = get_running ( Ariadne ) return ( await ariadne . getMessageFromId ( self . id )) . messageChain","title":"fetchOriginal()"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Voice","text":"Bases: MultimediaElement \u6307\u793a\u6d88\u606f\u4e2d\u7684\u8bed\u97f3\u5143\u7d20 Source code in graia/ariadne/message/element.py 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 class Voice ( MultimediaElement ): \"\"\"\u6307\u793a\u6d88\u606f\u4e2d\u7684\u8bed\u97f3\u5143\u7d20\"\"\" type = \"Voice\" id : Optional [ str ] = Field ( None , alias = \"voiceId\" ) def __init__ ( self , id : Optional [ str ] = None , url : Optional [ str ] = None , * , path : Optional [ Union [ Path , str ]] = None , base64 : Optional [ str ] = None , data_bytes : Union [ None , bytes , BytesIO ] = None , ** kwargs , ) -> None : super () . __init__ ( id = id , url = url , path = path , base64 = base64 , data_bytes = data_bytes , ** kwargs ) length : Optional [ int ] \"\"\"\u8bed\u97f3\u957f\u5ea6\"\"\" def asDisplay ( self ) -> str : return \"[\u8bed\u97f3]\"","title":"Voice"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Voice.length","text":"length : Optional [ int ] = None \u8bed\u97f3\u957f\u5ea6","title":"length"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Xml","text":"Bases: Element \u8868\u793a\u6d88\u606f\u4e2d\u7684 XML \u6d88\u606f\u5143\u7d20 Source code in graia/ariadne/message/element.py 297 298 299 300 301 302 303 304 305 306 307 308 309 class Xml ( Element ): \"\"\"\u8868\u793a\u6d88\u606f\u4e2d\u7684 XML \u6d88\u606f\u5143\u7d20\"\"\" type = \"Xml\" xml : str \"\"\"XML\u6587\u672c\"\"\" def __init__ ( self , xml : str , ** _ ) -> None : super () . __init__ ( xml = xml ) def asDisplay ( self ) -> str : return \"[XML\u6d88\u606f]\"","title":"Xml"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element.Xml.xml","text":"xml : str = None XML\u6587\u672c","title":"xml"},{"location":"refs/graia/ariadne/message/element/#graia.ariadne.message.element._update_forward_refs","text":"_update_forward_refs () Internal function. Update the forward references. Source code in graia/ariadne/message/element.py 837 838 839 840 841 842 843 844 845 846 847 def _update_forward_refs (): \"\"\" Internal function. Update the forward references. \"\"\" from ..model import BotMessage from .chain import MessageChain Quote . update_forward_refs ( MessageChain = MessageChain ) ForwardNode . update_forward_refs ( MessageChain = MessageChain ) BotMessage . update_forward_refs ( MessageChain = MessageChain )","title":"_update_forward_refs()"},{"location":"refs/graia/ariadne/message/formatter/","text":"\u57fa\u4e8e format string \u7684\u6d88\u606f\u94fe\u683c\u5f0f\u5316\u5668 Formatter \ud83d\udd17 \u7c7b\u4f3c\u4e8e string.Formatter \u7684\u6d88\u606f\u94fe\u683c\u5f0f\u5316\u5668 Source code in graia/ariadne/message/formatter.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 class Formatter : \"\"\"\u7c7b\u4f3c\u4e8e string.Formatter \u7684\u6d88\u606f\u94fe\u683c\u5f0f\u5316\u5668\"\"\" format_string : str def __init__ ( self , format_string : str ) -> None : self . format_string = format_string def format ( self , * o_args : Union [ Element , MessageChain , str ], ** o_kwargs : Union [ Element , MessageChain , str ] ) -> MessageChain : \"\"\"\u901a\u8fc7\u521d\u59cb\u5316\u65f6\u4f20\u5165\u7684\u683c\u5f0f\u5b57\u7b26\u4e32 \u683c\u5f0f\u5316\u6d88\u606f\u94fe Args: *o_args (Union[Element, MessageChain, str]): \u683c\u5f0f\u5316\u65f6\u4f20\u5165\u7684\u5173\u952e\u5b57\u53c2\u6570 **o_kwargs (Union[Element, MessageChain, str]): \u683c\u5f0f\u5316\u65f6\u4f20\u5165\u7684\u5173\u952e\u5b57\u53c2\u6570 Returns: MessageChain: \u683c\u5f0f\u5316\u540e\u7684\u6d88\u606f\u94fe \"\"\" args : List [ MessageChain ] = [ MessageChain . create ( e ) for e in o_args ] kwargs : Dict [ str , MessageChain ] = { k : MessageChain . create ( e ) for k , e in o_kwargs . items ()} args_mapping : Dict [ str , MessageChain ] = { f \" \\x02 { index } \\x02 \" : chain for index , chain in enumerate ( args ) } kwargs_mapping : Dict [ str , MessageChain ] = { f \" \\x03 { key } \\x03 \" : chain for key , chain in kwargs . items ()} result = self . format_string . format ( * args_mapping , ** { k : f \" \\x03 { k } \\x03 \" for k in kwargs }) chain_list : List [ Union [ MessageChain , Plain ]] = [] for i in re . split ( \"([ \\x02\\x03 ][ \\\\ d \\\\ w]+[ \\x02\\x03 ])\" , result ): if match := re . fullmatch ( \"(?P<header>[ \\x02\\x03 ])(?P<content> \\\\ w+)(?P=header)\" , i ): header = match . group ( \"header\" ) full : str = match . group ( 0 ) if header == \" \\x02 \" : # from args chain_list . append ( args_mapping [ full ]) else : # \\x03, from kwargs chain_list . append ( kwargs_mapping [ full ]) else : chain_list . append ( Plain ( i )) return MessageChain . create ( * chain_list ) . merge () format \ud83d\udd17 format ( * o_args : Union [ Element , MessageChain , str ], ** o_kwargs : Union [ Element , MessageChain , str ]) -> MessageChain \u901a\u8fc7\u521d\u59cb\u5316\u65f6\u4f20\u5165\u7684\u683c\u5f0f\u5b57\u7b26\u4e32 \u683c\u5f0f\u5316\u6d88\u606f\u94fe Parameters: Name Type Description Default *o_args Union [ Element , MessageChain , str ] \u683c\u5f0f\u5316\u65f6\u4f20\u5165\u7684\u5173\u952e\u5b57\u53c2\u6570 () **o_kwargs Union [ Element , MessageChain , str ] \u683c\u5f0f\u5316\u65f6\u4f20\u5165\u7684\u5173\u952e\u5b57\u53c2\u6570 {} Returns: Name Type Description MessageChain MessageChain \u683c\u5f0f\u5316\u540e\u7684\u6d88\u606f\u94fe Source code in graia/ariadne/message/formatter.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 def format ( self , * o_args : Union [ Element , MessageChain , str ], ** o_kwargs : Union [ Element , MessageChain , str ] ) -> MessageChain : \"\"\"\u901a\u8fc7\u521d\u59cb\u5316\u65f6\u4f20\u5165\u7684\u683c\u5f0f\u5b57\u7b26\u4e32 \u683c\u5f0f\u5316\u6d88\u606f\u94fe Args: *o_args (Union[Element, MessageChain, str]): \u683c\u5f0f\u5316\u65f6\u4f20\u5165\u7684\u5173\u952e\u5b57\u53c2\u6570 **o_kwargs (Union[Element, MessageChain, str]): \u683c\u5f0f\u5316\u65f6\u4f20\u5165\u7684\u5173\u952e\u5b57\u53c2\u6570 Returns: MessageChain: \u683c\u5f0f\u5316\u540e\u7684\u6d88\u606f\u94fe \"\"\" args : List [ MessageChain ] = [ MessageChain . create ( e ) for e in o_args ] kwargs : Dict [ str , MessageChain ] = { k : MessageChain . create ( e ) for k , e in o_kwargs . items ()} args_mapping : Dict [ str , MessageChain ] = { f \" \\x02 { index } \\x02 \" : chain for index , chain in enumerate ( args ) } kwargs_mapping : Dict [ str , MessageChain ] = { f \" \\x03 { key } \\x03 \" : chain for key , chain in kwargs . items ()} result = self . format_string . format ( * args_mapping , ** { k : f \" \\x03 { k } \\x03 \" for k in kwargs }) chain_list : List [ Union [ MessageChain , Plain ]] = [] for i in re . split ( \"([ \\x02\\x03 ][ \\\\ d \\\\ w]+[ \\x02\\x03 ])\" , result ): if match := re . fullmatch ( \"(?P<header>[ \\x02\\x03 ])(?P<content> \\\\ w+)(?P=header)\" , i ): header = match . group ( \"header\" ) full : str = match . group ( 0 ) if header == \" \\x02 \" : # from args chain_list . append ( args_mapping [ full ]) else : # \\x03, from kwargs chain_list . append ( kwargs_mapping [ full ]) else : chain_list . append ( Plain ( i )) return MessageChain . create ( * chain_list ) . merge ()","title":"formatter"},{"location":"refs/graia/ariadne/message/formatter/#graia.ariadne.message.formatter.Formatter","text":"\u7c7b\u4f3c\u4e8e string.Formatter \u7684\u6d88\u606f\u94fe\u683c\u5f0f\u5316\u5668 Source code in graia/ariadne/message/formatter.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 class Formatter : \"\"\"\u7c7b\u4f3c\u4e8e string.Formatter \u7684\u6d88\u606f\u94fe\u683c\u5f0f\u5316\u5668\"\"\" format_string : str def __init__ ( self , format_string : str ) -> None : self . format_string = format_string def format ( self , * o_args : Union [ Element , MessageChain , str ], ** o_kwargs : Union [ Element , MessageChain , str ] ) -> MessageChain : \"\"\"\u901a\u8fc7\u521d\u59cb\u5316\u65f6\u4f20\u5165\u7684\u683c\u5f0f\u5b57\u7b26\u4e32 \u683c\u5f0f\u5316\u6d88\u606f\u94fe Args: *o_args (Union[Element, MessageChain, str]): \u683c\u5f0f\u5316\u65f6\u4f20\u5165\u7684\u5173\u952e\u5b57\u53c2\u6570 **o_kwargs (Union[Element, MessageChain, str]): \u683c\u5f0f\u5316\u65f6\u4f20\u5165\u7684\u5173\u952e\u5b57\u53c2\u6570 Returns: MessageChain: \u683c\u5f0f\u5316\u540e\u7684\u6d88\u606f\u94fe \"\"\" args : List [ MessageChain ] = [ MessageChain . create ( e ) for e in o_args ] kwargs : Dict [ str , MessageChain ] = { k : MessageChain . create ( e ) for k , e in o_kwargs . items ()} args_mapping : Dict [ str , MessageChain ] = { f \" \\x02 { index } \\x02 \" : chain for index , chain in enumerate ( args ) } kwargs_mapping : Dict [ str , MessageChain ] = { f \" \\x03 { key } \\x03 \" : chain for key , chain in kwargs . items ()} result = self . format_string . format ( * args_mapping , ** { k : f \" \\x03 { k } \\x03 \" for k in kwargs }) chain_list : List [ Union [ MessageChain , Plain ]] = [] for i in re . split ( \"([ \\x02\\x03 ][ \\\\ d \\\\ w]+[ \\x02\\x03 ])\" , result ): if match := re . fullmatch ( \"(?P<header>[ \\x02\\x03 ])(?P<content> \\\\ w+)(?P=header)\" , i ): header = match . group ( \"header\" ) full : str = match . group ( 0 ) if header == \" \\x02 \" : # from args chain_list . append ( args_mapping [ full ]) else : # \\x03, from kwargs chain_list . append ( kwargs_mapping [ full ]) else : chain_list . append ( Plain ( i )) return MessageChain . create ( * chain_list ) . merge ()","title":"Formatter"},{"location":"refs/graia/ariadne/message/formatter/#graia.ariadne.message.formatter.Formatter.format","text":"format ( * o_args : Union [ Element , MessageChain , str ], ** o_kwargs : Union [ Element , MessageChain , str ]) -> MessageChain \u901a\u8fc7\u521d\u59cb\u5316\u65f6\u4f20\u5165\u7684\u683c\u5f0f\u5b57\u7b26\u4e32 \u683c\u5f0f\u5316\u6d88\u606f\u94fe Parameters: Name Type Description Default *o_args Union [ Element , MessageChain , str ] \u683c\u5f0f\u5316\u65f6\u4f20\u5165\u7684\u5173\u952e\u5b57\u53c2\u6570 () **o_kwargs Union [ Element , MessageChain , str ] \u683c\u5f0f\u5316\u65f6\u4f20\u5165\u7684\u5173\u952e\u5b57\u53c2\u6570 {} Returns: Name Type Description MessageChain MessageChain \u683c\u5f0f\u5316\u540e\u7684\u6d88\u606f\u94fe Source code in graia/ariadne/message/formatter.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 def format ( self , * o_args : Union [ Element , MessageChain , str ], ** o_kwargs : Union [ Element , MessageChain , str ] ) -> MessageChain : \"\"\"\u901a\u8fc7\u521d\u59cb\u5316\u65f6\u4f20\u5165\u7684\u683c\u5f0f\u5b57\u7b26\u4e32 \u683c\u5f0f\u5316\u6d88\u606f\u94fe Args: *o_args (Union[Element, MessageChain, str]): \u683c\u5f0f\u5316\u65f6\u4f20\u5165\u7684\u5173\u952e\u5b57\u53c2\u6570 **o_kwargs (Union[Element, MessageChain, str]): \u683c\u5f0f\u5316\u65f6\u4f20\u5165\u7684\u5173\u952e\u5b57\u53c2\u6570 Returns: MessageChain: \u683c\u5f0f\u5316\u540e\u7684\u6d88\u606f\u94fe \"\"\" args : List [ MessageChain ] = [ MessageChain . create ( e ) for e in o_args ] kwargs : Dict [ str , MessageChain ] = { k : MessageChain . create ( e ) for k , e in o_kwargs . items ()} args_mapping : Dict [ str , MessageChain ] = { f \" \\x02 { index } \\x02 \" : chain for index , chain in enumerate ( args ) } kwargs_mapping : Dict [ str , MessageChain ] = { f \" \\x03 { key } \\x03 \" : chain for key , chain in kwargs . items ()} result = self . format_string . format ( * args_mapping , ** { k : f \" \\x03 { k } \\x03 \" for k in kwargs }) chain_list : List [ Union [ MessageChain , Plain ]] = [] for i in re . split ( \"([ \\x02\\x03 ][ \\\\ d \\\\ w]+[ \\x02\\x03 ])\" , result ): if match := re . fullmatch ( \"(?P<header>[ \\x02\\x03 ])(?P<content> \\\\ w+)(?P=header)\" , i ): header = match . group ( \"header\" ) full : str = match . group ( 0 ) if header == \" \\x02 \" : # from args chain_list . append ( args_mapping [ full ]) else : # \\x03, from kwargs chain_list . append ( kwargs_mapping [ full ]) else : chain_list . append ( Plain ( i )) return MessageChain . create ( * chain_list ) . merge ()","title":"format()"},{"location":"refs/graia/ariadne/message/commander/","text":"Arg \ud83d\udd17 Bases: ParamDesc Argument Source code in graia/ariadne/message/commander/__init__.py 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 class Arg ( ParamDesc ): \"\"\"Argument\"\"\" def __init__ ( self , pattern : str , type : Type [ Union [ BaseModel , Any ]] = ... , default : Any = ... , default_factory : Callable [[], Any ] = ... , ) -> None : self . pattern : str = pattern self . match_patterns : List [ str ] = [] self . tags : List [ str ] = [] self . default = default self . default_factory = default_factory self . param_name : Optional [ str ] = None tokens = tokenize_command ( pattern ) assert tokens [ 0 ][ 0 ] in { CommandToken . TEXT , CommandToken . CHOICE }, \"Required argument pattern!\" self . match_patterns = list ( map ( str , tokens [ 0 ][ 1 ])) for t_type , token_list in tokens [ 1 :]: if t_type in { CommandToken . TEXT , CommandToken . CHOICE }: raise ValueError ( \"\"\"Argument pattern can only be placed at head. \"\"\" \"\"\"Use \"{\" and \"}\" for placeholders.\"\"\" ) if t_type is CommandToken . PARAM : if len ( token_list ) != 1 : raise ValueError ( \"Arg doesn't support aliasing!\" ) if str ( token_list [ 0 ]) in self . tags : raise ValueError ( \"Duplicated tag!\" ) self . tags . append ( str ( token_list [ 0 ])) self . nargs = len ( self . tags ) self . type = type self . model : Optional [ Type [ BaseModel ]] = None def gen_model ( self , validators : Iterable [ Callable ]) -> None : if self . model : return if self . nargs == 0 : self . type = self . type if self . type is not ... else bool if self . default is ... and self . default_factory is ... : self . default = False elif self . nargs == 1 : self . type = self . type if self . type is not ... else MessageChain self . default_factory = const_call ( self . default ) if self . default is not ... else self . default_factory if ( isinstance ( self . type , type ) and issubclass ( self . type , BaseModel ) and not issubclass ( self . type , AriadneBaseModel ) ): self . model = self . type return if self . nargs == 0 : # Set default self . model = create_model ( \"ArgModel\" , __validators__ = { f \"#validator_ { i } #\" : validator ( \"*\" , pre = True , allow_reuse = True )( v ) for i , v in enumerate ( validators ) }, val = ( self . type , ... ), ) elif self . nargs == 1 : self . model = create_model ( \"ArgModel\" , __validators__ = { f \"#validator_ { i } #\" : validator ( \"*\" , pre = True , allow_reuse = True )( v ) for i , v in enumerate ( validators ) }, ** { self . tags [ 0 ]: ( self . type , ... )}, ) if self . model is ... : raise ValueError ( f \"You didn't supply a suitable model for { self . param_name } !\" ) CommandHandler \ud83d\udd17 Bases: ExecTarget Command \u7684 ExecTarget \u5bf9\u8c61, \u627f\u62c5\u4e86\u53c2\u6570\u63d0\u53d6\u7b49\u4efb\u52a1 Source code in graia/ariadne/message/commander/__init__.py 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 class CommandHandler ( ExecTarget ): \"\"\"Command \u7684 ExecTarget \u5bf9\u8c61, \u627f\u62c5\u4e86\u53c2\u6570\u63d0\u53d6\u7b49\u4efb\u52a1\"\"\" def __init__ ( self , record : CommandPattern , callable : Callable , dispatchers : Sequence [ BaseDispatcher ] = (), decorators : Sequence [ Decorator ] = (), ): super () . __init__ ( callable , [ ConstantDispatcher ( commander_data_ctx ), ContextDispatcher (), * resolve_dispatchers_mixin ( dispatchers ), ], list ( decorators ), ) self . pattern : CommandPattern = record def get_data ( self , slot_data : Dict [ Union [ int , str ], MessageChain ], arg_data : Dict [ str , List [ MessageChain ]], wildcard_list : List [ MessageChain ], ) -> Dict [ str , Any ]: \"\"\"\u57fa\u4e8e CommandRecord \u4e0e\u89e3\u6790\u6570\u636e\u8bbe\u7f6e ConstantDispatcher \u53c2\u6570 Args: slot_data (Dict[Union[int, str], MessageChain]): Slot \u7684\u89e3\u6790\u7ed3\u679c arg_data (Dict[str, List[MessageChain]]): Arg \u7684\u89e3\u6790\u7ed3\u679c Returns: Dict[str, Any]: \u53c2\u6570 \"\"\" param_result : Dict [ str , Any ] = {} for arg in set ( self . pattern . arg_map . values ()): value = arg . default_factory () if TYPE_CHECKING : assert arg . param_name assert arg . model if arg . nargs : for param in arg . match_patterns : if param in arg_data : value = dict ( zip ( arg . tags , arg_data [ param ])) break else : if issubclass ( arg . type , BaseModel ) and isinstance ( value , arg . type ): param_result [ arg . param_name ] = value continue if not isinstance ( value , list ): value = [ value ] if not isinstance ( value , dict ): value = dict ( zip ( arg . tags , value )) if not issubclass ( arg . type , BaseModel ) or issubclass ( arg . type , AriadneBaseModel ): param_result [ arg . param_name ] = arg . model ( ** value ) . __dict__ [ arg . tags [ 0 ]] else : param_result [ arg . param_name ] = arg . model ( ** value ) else : if any ( param in arg_data for param in arg . match_patterns ): value = not value param_result [ arg . param_name ] = arg . model ( val = value ) . __dict__ [ \"val\" ] for ind , slot in self . pattern . slot_map . items (): if TYPE_CHECKING : assert slot . model if slot . param_name != self . pattern . wildcard : value = slot_data . get ( ind , None ) or slot . default_factory () param_result [ slot . param_name ] = slot . model ( val = value ) . __dict__ [ \"val\" ] else : if slot . type is _raw : param_result [ slot . param_name ] = MessageChain ([ \" \" ]) . join ( wildcard_list , merge = True ) else : param_result [ slot . param_name ] = tuple ( slot . model ( val = chain ) . __dict__ [ \"val\" ] for chain in wildcard_list ) return param_result get_data \ud83d\udd17 get_data ( slot_data : Dict [ Union [ int , str ], MessageChain ], arg_data : Dict [ str , List [ MessageChain ]], wildcard_list : List [ MessageChain ]) -> Dict [ str , Any ] \u57fa\u4e8e CommandRecord \u4e0e\u89e3\u6790\u6570\u636e\u8bbe\u7f6e ConstantDispatcher \u53c2\u6570 Parameters: Name Type Description Default slot_data Dict [ Union [ int , str ], MessageChain ] Slot \u7684\u89e3\u6790\u7ed3\u679c required arg_data Dict [ str , List [ MessageChain ]] Arg \u7684\u89e3\u6790\u7ed3\u679c required Returns: Type Description Dict [ str , Any ] Dict[str, Any]: \u53c2\u6570 Source code in graia/ariadne/message/commander/__init__.py 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 def get_data ( self , slot_data : Dict [ Union [ int , str ], MessageChain ], arg_data : Dict [ str , List [ MessageChain ]], wildcard_list : List [ MessageChain ], ) -> Dict [ str , Any ]: \"\"\"\u57fa\u4e8e CommandRecord \u4e0e\u89e3\u6790\u6570\u636e\u8bbe\u7f6e ConstantDispatcher \u53c2\u6570 Args: slot_data (Dict[Union[int, str], MessageChain]): Slot \u7684\u89e3\u6790\u7ed3\u679c arg_data (Dict[str, List[MessageChain]]): Arg \u7684\u89e3\u6790\u7ed3\u679c Returns: Dict[str, Any]: \u53c2\u6570 \"\"\" param_result : Dict [ str , Any ] = {} for arg in set ( self . pattern . arg_map . values ()): value = arg . default_factory () if TYPE_CHECKING : assert arg . param_name assert arg . model if arg . nargs : for param in arg . match_patterns : if param in arg_data : value = dict ( zip ( arg . tags , arg_data [ param ])) break else : if issubclass ( arg . type , BaseModel ) and isinstance ( value , arg . type ): param_result [ arg . param_name ] = value continue if not isinstance ( value , list ): value = [ value ] if not isinstance ( value , dict ): value = dict ( zip ( arg . tags , value )) if not issubclass ( arg . type , BaseModel ) or issubclass ( arg . type , AriadneBaseModel ): param_result [ arg . param_name ] = arg . model ( ** value ) . __dict__ [ arg . tags [ 0 ]] else : param_result [ arg . param_name ] = arg . model ( ** value ) else : if any ( param in arg_data for param in arg . match_patterns ): value = not value param_result [ arg . param_name ] = arg . model ( val = value ) . __dict__ [ \"val\" ] for ind , slot in self . pattern . slot_map . items (): if TYPE_CHECKING : assert slot . model if slot . param_name != self . pattern . wildcard : value = slot_data . get ( ind , None ) or slot . default_factory () param_result [ slot . param_name ] = slot . model ( val = value ) . __dict__ [ \"val\" ] else : if slot . type is _raw : param_result [ slot . param_name ] = MessageChain ([ \" \" ]) . join ( wildcard_list , merge = True ) else : param_result [ slot . param_name ] = tuple ( slot . model ( val = chain ) . __dict__ [ \"val\" ] for chain in wildcard_list ) return param_result CommandPattern \ud83d\udd17 \u547d\u4ee4\u6837\u5f0f Source code in graia/ariadne/message/commander/__init__.py 221 222 223 224 225 226 227 228 229 230 231 232 233 234 @dataclass class CommandPattern : \"\"\"\u547d\u4ee4\u6837\u5f0f\"\"\" class ELast ( enum . Enum ): REQUIRED = \"required\" OPTIONAL = \"optional\" WILDCARD = \"wildcard\" token_list : \"List[Set[str] | List[int | str]]\" slot_map : Dict [ Union [ str , int ], Slot ] arg_map : Dict [ str , Arg ] last_type : ELast wildcard : str = \"\" Commander \ud83d\udd17 \u4fbf\u5229\u7684\u6307\u4ee4\u89e6\u53d1\u4f53\u7cfb Source code in graia/ariadne/message/commander/__init__.pyclass Commander : \"\"\"\u4fbf\u5229\u7684\u6307\u4ee4\u89e6\u53d1\u4f53\u7cfb\"\"\" def __init__ ( self , broadcast : Broadcast , listen : bool = True ): \"\"\" Args: broadcast (Broadcast): \u4e8b\u4ef6\u7cfb\u7edf listen (bool): \u662f\u5426\u76d1\u542c\u6307\u4ee4 \"\"\" self . broadcast = broadcast self . command_handlers : List [ CommandHandler ] = [] self . validators : List [ Callable ] = [ chain_validator ] async def execute_func ( chain : MessageChain ): await self . execute ( chain ) self . listen_func = execute_func if listen : self . broadcast . listeners . append ( Listener ( self . listen_func , self . broadcast . getDefaultNamespace (), list ( gen_subclass ( MessageEvent )), ) ) def __del__ ( self ): self . broadcast . listeners = [ i for i in self . broadcast . listeners if i . callable != self . listen_func ] def add_type_cast ( self , * caster : Callable ): \"\"\"\u6dfb\u52a0\u7c7b\u578b\u9a8c\u8bc1\u5668 (type caster / validator)\"\"\" self . validators = [ * reversed ( caster ), * self . validators ] def command ( self , command : str , setting : Optional [ Dict [ str , Union [ Slot , Arg ]]] = None , dispatchers : Sequence [ BaseDispatcher ] = (), decorators : Sequence [ Decorator ] = (), ) -> Callable [[ T_Callable ], T_Callable ]: \"\"\"\u88c5\u9970\u4e00\u4e2a\u547d\u4ee4\u5904\u7406\u51fd\u6570 Args: command (str): \u8981\u5904\u7406\u7684\u547d\u4ee4 setting (Dict[str, Union[Slot, Arg]], optional): \u53c2\u6570\u8bbe\u7f6e. dispatchers (Sequence[BaseDispatcher], optional): \u53ef\u9009\u7684\u989d\u5916 Dispatcher \u5e8f\u5217. decorators (Sequence[Decorator], optional): \u53ef\u9009\u7684\u989d\u5916 Decorator \u5e8f\u5217. Raises: ValueError: \u547d\u4ee4\u683c\u5f0f\u9519\u8bef Returns: Callable[[T_Callable], T_Callable]: \u88c5\u9970\u5668 \"\"\" slot_map : Dict [ Union [ int , str ], Slot ] = {} pattern_arg_map : Dict [ str , Arg ] = {} param_arg_map : Dict [ str , Arg ] = {} for name , val in ( setting or {}) . items (): if isinstance ( val , Slot ): slot_map [ val . placeholder ] = val elif isinstance ( val , Arg ): for pattern in val . match_patterns : pattern_arg_map [ pattern ] = val param_arg_map [ name ] = val else : raise TypeError ( f \"Unknown setting value: { name } - { val !r} \" ) val . param_name = name token_list : \"List[Set[str] | List[int | str]]\" = [] # set: const, list: param placeholder_set : Set [ Union [ int , str ]] = set () last : CommandPattern . ELast = CommandPattern . ELast . REQUIRED wildcard_slot_name : str = \"\" command_tokens : List [ CommandTokenTuple ] = tokenize_command ( command ) for ( t_type , tokens ) in command_tokens : if t_type in { CommandToken . TEXT , CommandToken . CHOICE }: assert not any ( token in pattern_arg_map for token in tokens ), f \" { tokens } conflicts with a Arg object!\" token_list . append ( set ( cast ( List [ str ], tokens ))) elif t_type is CommandToken . ANNOTATED : wildcard , name , annotation , default = cast ( List [ str ], tokens ) if wildcard or default : assert ( tokens is command_tokens [ - 1 ][ 1 ] ), \"Not setting wildcard / optional on the last slot!\" if wildcard : last = CommandPattern . ELast . WILDCARD if default : last = CommandPattern . ELast . OPTIONAL assert name not in placeholder_set , \"Duplicated parameter slot!\" placeholder_set . add ( name ) parsed_slot = Slot ( name , eval ( annotation or \"...\" , * eval_ctx ( 1 , { \"raw\" : _raw })), eval ( default or \"...\" , * eval_ctx ( 1 )), ) parsed_slot . param_name = name # assuming that param_name is consistent if name in slot_map : slot_map [ name ] = parsed_slot | slot_map [ name ] # parsed slot < provided slot if wildcard : wildcard_slot_name = name token_list . append ([ name ]) elif t_type is CommandToken . PARAM : for param_name in tokens : assert param_name not in placeholder_set , \"Duplicated parameter slot!\" placeholder_set . add ( param_name ) token_list . append ( tokens ) def wrapper ( func : T_Callable ) -> T_Callable : \"\"\"register as command executor\"\"\" # scan function signature def __translate_obj ( obj ): if obj is inspect . Parameter . empty : return ... if isinstance ( obj , Decorator ): return ... return obj for name , parameter in inspect . signature ( func ) . parameters . items (): annotation , default = __translate_obj ( parameter . annotation ), __translate_obj ( parameter . default ) if name in placeholder_set : parsed_slot = Slot ( name , annotation , default ) parsed_slot . param_name = name # assuming that param_name is consistent if name in slot_map : slot_map [ name ] = parsed_slot | slot_map [ name ] # parsed slot < provided slot if default is not ... : assert all ( [ slot_map [ name ] . placeholder in command_tokens [ - 1 ][ 1 ], command_tokens [ - 1 ][ 0 ] in { CommandToken . ANNOTATED , CommandToken . PARAM , }, ] ), \"Not setting wildcard / optional on the last slot!\" nonlocal last if last is CommandPattern . ELast . REQUIRED : last = CommandPattern . ELast . OPTIONAL if name in param_arg_map : arg = param_arg_map [ name ] arg . type = arg . type if arg . type is not ... else parameter . annotation if arg . default is ... and arg . default_factory is ... : arg . default = parameter . default for slot in slot_map . values (): slot . gen_model ( self . validators ) for arg in param_arg_map . values (): arg . gen_model ( self . validators ) self . command_handlers . append ( CommandHandler ( CommandPattern ( token_list , slot_map , pattern_arg_map , last , wildcard_slot_name ), func , dispatchers , decorators , ) ) return func return wrapper async def execute ( self , chain : MessageChain ): \"\"\"\u89e6\u53d1 Commander. Args: chain (MessageChain): \u89e6\u53d1\u7684\u6d88\u606f\u94fe \"\"\" mapping_str , elem_m = chain . _to_mapping_str () for handler in reversed ( self . command_handlers ): # starting from latest added pattern = handler . pattern text_index : int = 0 token_index : int = 0 arg_data : Dict [ str , List [ MessageChain ]] = {} slot_data : Dict [ Union [ str , int ], MessageChain ] = {} text_list : List [ str ] = split ( mapping_str ) wildcard_list : List [ MessageChain ] = [] with suppress ( IndexError , MismatchError , ValueError , RequirementCrashed , ExecutionStop ): while text_index < len ( text_list ): text = text_list [ text_index ] text_index += 1 if text in pattern . arg_map : # Arg handle if text in arg_data : raise MismatchError ( \"Duplicated argument\" ) nargs : int = pattern . arg_map [ text ] . nargs arg_data [ text ] = [ MessageChain . _from_mapping_string ( t , elem_m ) for t in text_list [ text_index : text_index + nargs ] ] text_index += nargs else : # Constant and Slot handle tokens = pattern . token_list [ token_index ] token_index += 1 if isinstance ( tokens , set ) and text not in tokens : raise MismatchError if isinstance ( tokens , list ): if pattern . last_type is CommandPattern . ELast . WILDCARD and token_index == len ( pattern . token_list ): wildcard_list . append ( MessageChain . _from_mapping_string ( text , elem_m )) token_index -= 1 for slot in tokens : slot_data [ slot ] = MessageChain . _from_mapping_string ( text , elem_m ) if text_index < len ( pattern . token_list ) - ( pattern . last_type is not CommandPattern . ELast . REQUIRED ): continue dispatchers = [] if event := event_ctx . get ( None ): dispatchers = resolve_dispatchers_mixin ([ event . Dispatcher ]) token = commander_data_ctx . set ( handler . get_data ( slot_data , arg_data , wildcard_list )) await self . broadcast . Executor ( handler , dispatchers ) commander_data_ctx . reset ( token ) __init__ \ud83d\udd17 __init__ ( broadcast : Broadcast , listen : bool = True ) Parameters: Name Type Description Default broadcast Broadcast \u4e8b\u4ef6\u7cfb\u7edf required listen bool \u662f\u5426\u76d1\u542c\u6307\u4ee4 True Source code in graia/ariadne/message/commander/__init__.py 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 def __init__ ( self , broadcast : Broadcast , listen : bool = True ): \"\"\" Args: broadcast (Broadcast): \u4e8b\u4ef6\u7cfb\u7edf listen (bool): \u662f\u5426\u76d1\u542c\u6307\u4ee4 \"\"\" self . broadcast = broadcast self . command_handlers : List [ CommandHandler ] = [] self . validators : List [ Callable ] = [ chain_validator ] async def execute_func ( chain : MessageChain ): await self . execute ( chain ) self . listen_func = execute_func if listen : self . broadcast . listeners . append ( Listener ( self . listen_func , self . broadcast . getDefaultNamespace (), list ( gen_subclass ( MessageEvent )), ) ) add_type_cast \ud83d\udd17 add_type_cast ( * caster : Callable ) \u6dfb\u52a0\u7c7b\u578b\u9a8c\u8bc1\u5668 (type caster / validator) Source code in graia/ariadne/message/commander/__init__.py 359 360 361 def add_type_cast ( self , * caster : Callable ): \"\"\"\u6dfb\u52a0\u7c7b\u578b\u9a8c\u8bc1\u5668 (type caster / validator)\"\"\" self . validators = [ * reversed ( caster ), * self . validators ] command \ud83d\udd17 command ( command : str , setting : Optional [ Dict [ str , Union [ Slot , Arg ]]] = None , dispatchers : Sequence [ BaseDispatcher ] = (), decorators : Sequence [ Decorator ] = ()) -> Callable [[ T_Callable ], T_Callable ] \u88c5\u9970\u4e00\u4e2a\u547d\u4ee4\u5904\u7406\u51fd\u6570 Parameters: Name Type Description Default command str \u8981\u5904\u7406\u7684\u547d\u4ee4 required setting Dict [ str , Union [ Slot , Arg ]] \u53c2\u6570\u8bbe\u7f6e. None dispatchers Sequence [ BaseDispatcher ] \u53ef\u9009\u7684\u989d\u5916 Dispatcher \u5e8f\u5217. () decorators Sequence [ Decorator ] \u53ef\u9009\u7684\u989d\u5916 Decorator \u5e8f\u5217. () Raises: Type Description ValueError \u547d\u4ee4\u683c\u5f0f\u9519\u8bef Returns: Type Description Callable [[ T_Callable ], T_Callable ] Callable[[T_Callable], T_Callable]: \u88c5\u9970\u5668 Source code in graia/ariadne/message/commander/__init__.pydef command ( self , command : str , setting : Optional [ Dict [ str , Union [ Slot , Arg ]]] = None , dispatchers : Sequence [ BaseDispatcher ] = (), decorators : Sequence [ Decorator ] = (), ) -> Callable [[ T_Callable ], T_Callable ]: \"\"\"\u88c5\u9970\u4e00\u4e2a\u547d\u4ee4\u5904\u7406\u51fd\u6570 Args: command (str): \u8981\u5904\u7406\u7684\u547d\u4ee4 setting (Dict[str, Union[Slot, Arg]], optional): \u53c2\u6570\u8bbe\u7f6e. dispatchers (Sequence[BaseDispatcher], optional): \u53ef\u9009\u7684\u989d\u5916 Dispatcher \u5e8f\u5217. decorators (Sequence[Decorator], optional): \u53ef\u9009\u7684\u989d\u5916 Decorator \u5e8f\u5217. Raises: ValueError: \u547d\u4ee4\u683c\u5f0f\u9519\u8bef Returns: Callable[[T_Callable], T_Callable]: \u88c5\u9970\u5668 \"\"\" slot_map : Dict [ Union [ int , str ], Slot ] = {} pattern_arg_map : Dict [ str , Arg ] = {} param_arg_map : Dict [ str , Arg ] = {} for name , val in ( setting or {}) . items (): if isinstance ( val , Slot ): slot_map [ val . placeholder ] = val elif isinstance ( val , Arg ): for pattern in val . match_patterns : pattern_arg_map [ pattern ] = val param_arg_map [ name ] = val else : raise TypeError ( f \"Unknown setting value: { name } - { val !r} \" ) val . param_name = name token_list : \"List[Set[str] | List[int | str]]\" = [] # set: const, list: param placeholder_set : Set [ Union [ int , str ]] = set () last : CommandPattern . ELast = CommandPattern . ELast . REQUIRED wildcard_slot_name : str = \"\" command_tokens : List [ CommandTokenTuple ] = tokenize_command ( command ) for ( t_type , tokens ) in command_tokens : if t_type in { CommandToken . TEXT , CommandToken . CHOICE }: assert not any ( token in pattern_arg_map for token in tokens ), f \" { tokens } conflicts with a Arg object!\" token_list . append ( set ( cast ( List [ str ], tokens ))) elif t_type is CommandToken . ANNOTATED : wildcard , name , annotation , default = cast ( List [ str ], tokens ) if wildcard or default : assert ( tokens is command_tokens [ - 1 ][ 1 ] ), \"Not setting wildcard / optional on the last slot!\" if wildcard : last = CommandPattern . ELast . WILDCARD if default : last = CommandPattern . ELast . OPTIONAL assert name not in placeholder_set , \"Duplicated parameter slot!\" placeholder_set . add ( name ) parsed_slot = Slot ( name , eval ( annotation or \"...\" , * eval_ctx ( 1 , { \"raw\" : _raw })), eval ( default or \"...\" , * eval_ctx ( 1 )), ) parsed_slot . param_name = name # assuming that param_name is consistent if name in slot_map : slot_map [ name ] = parsed_slot | slot_map [ name ] # parsed slot < provided slot if wildcard : wildcard_slot_name = name token_list . append ([ name ]) elif t_type is CommandToken . PARAM : for param_name in tokens : assert param_name not in placeholder_set , \"Duplicated parameter slot!\" placeholder_set . add ( param_name ) token_list . append ( tokens ) def wrapper ( func : T_Callable ) -> T_Callable : \"\"\"register as command executor\"\"\" # scan function signature def __translate_obj ( obj ): if obj is inspect . Parameter . empty : return ... if isinstance ( obj , Decorator ): return ... return obj for name , parameter in inspect . signature ( func ) . parameters . items (): annotation , default = __translate_obj ( parameter . annotation ), __translate_obj ( parameter . default ) if name in placeholder_set : parsed_slot = Slot ( name , annotation , default ) parsed_slot . param_name = name # assuming that param_name is consistent if name in slot_map : slot_map [ name ] = parsed_slot | slot_map [ name ] # parsed slot < provided slot if default is not ... : assert all ( [ slot_map [ name ] . placeholder in command_tokens [ - 1 ][ 1 ], command_tokens [ - 1 ][ 0 ] in { CommandToken . ANNOTATED , CommandToken . PARAM , }, ] ), \"Not setting wildcard / optional on the last slot!\" nonlocal last if last is CommandPattern . ELast . REQUIRED : last = CommandPattern . ELast . OPTIONAL if name in param_arg_map : arg = param_arg_map [ name ] arg . type = arg . type if arg . type is not ... else parameter . annotation if arg . default is ... and arg . default_factory is ... : arg . default = parameter . default for slot in slot_map . values (): slot . gen_model ( self . validators ) for arg in param_arg_map . values (): arg . gen_model ( self . validators ) self . command_handlers . append ( CommandHandler ( CommandPattern ( token_list , slot_map , pattern_arg_map , last , wildcard_slot_name ), func , dispatchers , decorators , ) ) return func return wrapper execute async \ud83d\udd17 execute ( chain : MessageChain ) \u89e6\u53d1 Commander. Parameters: Name Type Description Default chain MessageChain \u89e6\u53d1\u7684\u6d88\u606f\u94fe required Source code in graia/ariadne/message/commander/__init__.py 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 async def execute ( self , chain : MessageChain ): \"\"\"\u89e6\u53d1 Commander. Args: chain (MessageChain): \u89e6\u53d1\u7684\u6d88\u606f\u94fe \"\"\" mapping_str , elem_m = chain . _to_mapping_str () for handler in reversed ( self . command_handlers ): # starting from latest added pattern = handler . pattern text_index : int = 0 token_index : int = 0 arg_data : Dict [ str , List [ MessageChain ]] = {} slot_data : Dict [ Union [ str , int ], MessageChain ] = {} text_list : List [ str ] = split ( mapping_str ) wildcard_list : List [ MessageChain ] = [] with suppress ( IndexError , MismatchError , ValueError , RequirementCrashed , ExecutionStop ): while text_index < len ( text_list ): text = text_list [ text_index ] text_index += 1 if text in pattern . arg_map : # Arg handle if text in arg_data : raise MismatchError ( \"Duplicated argument\" ) nargs : int = pattern . arg_map [ text ] . nargs arg_data [ text ] = [ MessageChain . _from_mapping_string ( t , elem_m ) for t in text_list [ text_index : text_index + nargs ] ] text_index += nargs else : # Constant and Slot handle tokens = pattern . token_list [ token_index ] token_index += 1 if isinstance ( tokens , set ) and text not in tokens : raise MismatchError if isinstance ( tokens , list ): if pattern . last_type is CommandPattern . ELast . WILDCARD and token_index == len ( pattern . token_list ): wildcard_list . append ( MessageChain . _from_mapping_string ( text , elem_m )) token_index -= 1 for slot in tokens : slot_data [ slot ] = MessageChain . _from_mapping_string ( text , elem_m ) if text_index < len ( pattern . token_list ) - ( pattern . last_type is not CommandPattern . ELast . REQUIRED ): continue dispatchers = [] if event := event_ctx . get ( None ): dispatchers = resolve_dispatchers_mixin ([ event . Dispatcher ]) token = commander_data_ctx . set ( handler . get_data ( slot_data , arg_data , wildcard_list )) await self . broadcast . Executor ( handler , dispatchers ) commander_data_ctx . reset ( token ) MismatchError \ud83d\udd17 Bases: ValueError \u6307\u4ee4\u5931\u914d Source code in graia/ariadne/message/commander/__init__.py 240 241 class MismatchError ( ValueError ): \"\"\"\u6307\u4ee4\u5931\u914d\"\"\" ParamDesc \ud83d\udd17 Bases: abc . ABC Source code in graia/ariadne/message/commander/__init__.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 class ParamDesc ( abc . ABC ): model : Optional [ BaseModel ] default : Any default_factory : Callable [[], Any ] def __or__ ( self , other : \"ParamDesc | Dict[str, Any]\" ): dct = other . __dict__ if isinstance ( other , ParamDesc ) else other for k , v in dct . items (): if v and v is not ... and not isinstance ( v , Decorator ): self . __dict__ [ k ] = v return self @abc . abstractmethod def gen_model ( self , validators : Iterable [ Callable ]) -> None : \"\"\"\u751f\u6210\u7528\u4e8e pydantic \u89e3\u6790\u7684 model \u5c5e\u6027 Args: validators (Iterable[Callable]): \u7528\u4f5c validator \u7684 Callable \u53ef\u8fed\u4ee3\u5bf9\u8c61 \"\"\" ... gen_model abstractmethod \ud83d\udd17 gen_model ( validators : Iterable [ Callable ]) -> None \u751f\u6210\u7528\u4e8e pydantic \u89e3\u6790\u7684 model \u5c5e\u6027 Parameters: Name Type Description Default validators Iterable [ Callable ] \u7528\u4f5c validator \u7684 Callable \u53ef\u8fed\u4ee3\u5bf9\u8c61 required Source code in graia/ariadne/message/commander/__init__.py 88 89 90 91 92 93 94 95 @abc . abstractmethod def gen_model ( self , validators : Iterable [ Callable ]) -> None : \"\"\"\u751f\u6210\u7528\u4e8e pydantic \u89e3\u6790\u7684 model \u5c5e\u6027 Args: validators (Iterable[Callable]): \u7528\u4f5c validator \u7684 Callable \u53ef\u8fed\u4ee3\u5bf9\u8c61 \"\"\" ... Slot \ud83d\udd17 Bases: ParamDesc Slot Source code in graia/ariadne/message/commander/__init__.py 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 @dataclass class Slot ( ParamDesc ): \"\"\"Slot\"\"\" def __init__ ( self , placeholder : Union [ str , int ], type : Type = ... , default : Any = ... , default_factory : Callable [[], Any ] = ... , ) -> None : self . placeholder = placeholder self . type = type if self . type == \"raw\" : self . type = _raw self . default = default self . default_factory = default_factory self . param_name : str = \"\" self . model : Optional [ Type [ BaseModel ]] = None def gen_model ( self , validators : Iterable [ Callable ]) -> None : if self . model or self . type is _raw : return self . default_factory = const_call ( self . default ) if self . default is not ... else self . default_factory if self . type is ... : self . type = MessageChain self . model = create_model ( \"SlotModel\" , __validators__ = { f \"#validator_ { i } #\" : validator ( \"*\" , pre = True , allow_reuse = True )( v ) for i , v in enumerate ( validators ) }, val = ( self . type , ... ), # default is handled at exec ) chain_validator \ud83d\udd17 chain_validator ( value : MessageChain , field : ModelField ) -> Union [ MessageChain , Element , str ] MessageChain \u5904\u7406\u51fd\u6570. \u5e94\u7528\u4f5c pydantic \u7684 Model validator. \u53d6\u51b3\u4e8e\u5b57\u6bb5\u7c7b\u578b\u6807\u6ce8, \u82e5\u4e0e\u6d88\u606f\u94fe, \u6d88\u606f\u5143\u7d20\u65e0\u5173\u5219\u4f1a\u76f4\u63a5\u628a\u6d88\u606f\u94fe\u7528 asDisplay \u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32. Parameters: Name Type Description Default value MessageChain \u6d88\u606f\u94fe required field ModelField \u5f53\u524d\u7684 model \u5b57\u6bb5 required Returns: Type Description Union [ MessageChain , Element , str ] Union[MessageChain, Element, str]: \u53d6\u51b3\u4e8e\u5b57\u6bb5\u7c7b\u578b\u6807\u6ce8 Source code in graia/ariadne/message/commander/__init__.py 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 def chain_validator ( value : MessageChain , field : ModelField ) -> Union [ MessageChain , Element , str ]: \"\"\" MessageChain \u5904\u7406\u51fd\u6570. \u5e94\u7528\u4f5c pydantic \u7684 Model validator. \u53d6\u51b3\u4e8e\u5b57\u6bb5\u7c7b\u578b\u6807\u6ce8, \u82e5\u4e0e\u6d88\u606f\u94fe, \u6d88\u606f\u5143\u7d20\u65e0\u5173\u5219\u4f1a\u76f4\u63a5\u628a\u6d88\u606f\u94fe\u7528 asDisplay \u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32. Args: value (MessageChain): \u6d88\u606f\u94fe field (ModelField): \u5f53\u524d\u7684 model \u5b57\u6bb5 Returns: Union[MessageChain, Element, str]: \u53d6\u51b3\u4e8e\u5b57\u6bb5\u7c7b\u578b\u6807\u6ce8 \"\"\" if field . outer_type_ is MessageChain : return value if issubclass ( field . type_ , Element ): assert len ( value ) == 1 assert isinstance ( value [ 0 ], field . type_ ) return value [ 0 ] if isinstance ( value , MessageChain ): return value . asDisplay () if value is None : return field . default return value","title":"commander"},{"location":"refs/graia/ariadne/message/commander/#graia.ariadne.message.commander.Arg","text":"Bases: ParamDesc Argument Source code in graia/ariadne/message/commander/__init__.py 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 class Arg ( ParamDesc ): \"\"\"Argument\"\"\" def __init__ ( self , pattern : str , type : Type [ Union [ BaseModel , Any ]] = ... , default : Any = ... , default_factory : Callable [[], Any ] = ... , ) -> None : self . pattern : str = pattern self . match_patterns : List [ str ] = [] self . tags : List [ str ] = [] self . default = default self . default_factory = default_factory self . param_name : Optional [ str ] = None tokens = tokenize_command ( pattern ) assert tokens [ 0 ][ 0 ] in { CommandToken . TEXT , CommandToken . CHOICE }, \"Required argument pattern!\" self . match_patterns = list ( map ( str , tokens [ 0 ][ 1 ])) for t_type , token_list in tokens [ 1 :]: if t_type in { CommandToken . TEXT , CommandToken . CHOICE }: raise ValueError ( \"\"\"Argument pattern can only be placed at head. \"\"\" \"\"\"Use \"{\" and \"}\" for placeholders.\"\"\" ) if t_type is CommandToken . PARAM : if len ( token_list ) != 1 : raise ValueError ( \"Arg doesn't support aliasing!\" ) if str ( token_list [ 0 ]) in self . tags : raise ValueError ( \"Duplicated tag!\" ) self . tags . append ( str ( token_list [ 0 ])) self . nargs = len ( self . tags ) self . type = type self . model : Optional [ Type [ BaseModel ]] = None def gen_model ( self , validators : Iterable [ Callable ]) -> None : if self . model : return if self . nargs == 0 : self . type = self . type if self . type is not ... else bool if self . default is ... and self . default_factory is ... : self . default = False elif self . nargs == 1 : self . type = self . type if self . type is not ... else MessageChain self . default_factory = const_call ( self . default ) if self . default is not ... else self . default_factory if ( isinstance ( self . type , type ) and issubclass ( self . type , BaseModel ) and not issubclass ( self . type , AriadneBaseModel ) ): self . model = self . type return if self . nargs == 0 : # Set default self . model = create_model ( \"ArgModel\" , __validators__ = { f \"#validator_ { i } #\" : validator ( \"*\" , pre = True , allow_reuse = True )( v ) for i , v in enumerate ( validators ) }, val = ( self . type , ... ), ) elif self . nargs == 1 : self . model = create_model ( \"ArgModel\" , __validators__ = { f \"#validator_ { i } #\" : validator ( \"*\" , pre = True , allow_reuse = True )( v ) for i , v in enumerate ( validators ) }, ** { self . tags [ 0 ]: ( self . type , ... )}, ) if self . model is ... : raise ValueError ( f \"You didn't supply a suitable model for { self . param_name } !\" )","title":"Arg"},{"location":"refs/graia/ariadne/message/commander/#graia.ariadne.message.commander.CommandHandler","text":"Bases: ExecTarget Command \u7684 ExecTarget \u5bf9\u8c61, \u627f\u62c5\u4e86\u53c2\u6570\u63d0\u53d6\u7b49\u4efb\u52a1 Source code in graia/ariadne/message/commander/__init__.py 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 class CommandHandler ( ExecTarget ): \"\"\"Command \u7684 ExecTarget \u5bf9\u8c61, \u627f\u62c5\u4e86\u53c2\u6570\u63d0\u53d6\u7b49\u4efb\u52a1\"\"\" def __init__ ( self , record : CommandPattern , callable : Callable , dispatchers : Sequence [ BaseDispatcher ] = (), decorators : Sequence [ Decorator ] = (), ): super () . __init__ ( callable , [ ConstantDispatcher ( commander_data_ctx ), ContextDispatcher (), * resolve_dispatchers_mixin ( dispatchers ), ], list ( decorators ), ) self . pattern : CommandPattern = record def get_data ( self , slot_data : Dict [ Union [ int , str ], MessageChain ], arg_data : Dict [ str , List [ MessageChain ]], wildcard_list : List [ MessageChain ], ) -> Dict [ str , Any ]: \"\"\"\u57fa\u4e8e CommandRecord \u4e0e\u89e3\u6790\u6570\u636e\u8bbe\u7f6e ConstantDispatcher \u53c2\u6570 Args: slot_data (Dict[Union[int, str], MessageChain]): Slot \u7684\u89e3\u6790\u7ed3\u679c arg_data (Dict[str, List[MessageChain]]): Arg \u7684\u89e3\u6790\u7ed3\u679c Returns: Dict[str, Any]: \u53c2\u6570 \"\"\" param_result : Dict [ str , Any ] = {} for arg in set ( self . pattern . arg_map . values ()): value = arg . default_factory () if TYPE_CHECKING : assert arg . param_name assert arg . model if arg . nargs : for param in arg . match_patterns : if param in arg_data : value = dict ( zip ( arg . tags , arg_data [ param ])) break else : if issubclass ( arg . type , BaseModel ) and isinstance ( value , arg . type ): param_result [ arg . param_name ] = value continue if not isinstance ( value , list ): value = [ value ] if not isinstance ( value , dict ): value = dict ( zip ( arg . tags , value )) if not issubclass ( arg . type , BaseModel ) or issubclass ( arg . type , AriadneBaseModel ): param_result [ arg . param_name ] = arg . model ( ** value ) . __dict__ [ arg . tags [ 0 ]] else : param_result [ arg . param_name ] = arg . model ( ** value ) else : if any ( param in arg_data for param in arg . match_patterns ): value = not value param_result [ arg . param_name ] = arg . model ( val = value ) . __dict__ [ \"val\" ] for ind , slot in self . pattern . slot_map . items (): if TYPE_CHECKING : assert slot . model if slot . param_name != self . pattern . wildcard : value = slot_data . get ( ind , None ) or slot . default_factory () param_result [ slot . param_name ] = slot . model ( val = value ) . __dict__ [ \"val\" ] else : if slot . type is _raw : param_result [ slot . param_name ] = MessageChain ([ \" \" ]) . join ( wildcard_list , merge = True ) else : param_result [ slot . param_name ] = tuple ( slot . model ( val = chain ) . __dict__ [ \"val\" ] for chain in wildcard_list ) return param_result","title":"CommandHandler"},{"location":"refs/graia/ariadne/message/commander/#graia.ariadne.message.commander.CommandHandler.get_data","text":"get_data ( slot_data : Dict [ Union [ int , str ], MessageChain ], arg_data : Dict [ str , List [ MessageChain ]], wildcard_list : List [ MessageChain ]) -> Dict [ str , Any ] \u57fa\u4e8e CommandRecord \u4e0e\u89e3\u6790\u6570\u636e\u8bbe\u7f6e ConstantDispatcher \u53c2\u6570 Parameters: Name Type Description Default slot_data Dict [ Union [ int , str ], MessageChain ] Slot \u7684\u89e3\u6790\u7ed3\u679c required arg_data Dict [ str , List [ MessageChain ]] Arg \u7684\u89e3\u6790\u7ed3\u679c required Returns: Type Description Dict [ str , Any ] Dict[str, Any]: \u53c2\u6570 Source code in graia/ariadne/message/commander/__init__.py 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 def get_data ( self , slot_data : Dict [ Union [ int , str ], MessageChain ], arg_data : Dict [ str , List [ MessageChain ]], wildcard_list : List [ MessageChain ], ) -> Dict [ str , Any ]: \"\"\"\u57fa\u4e8e CommandRecord \u4e0e\u89e3\u6790\u6570\u636e\u8bbe\u7f6e ConstantDispatcher \u53c2\u6570 Args: slot_data (Dict[Union[int, str], MessageChain]): Slot \u7684\u89e3\u6790\u7ed3\u679c arg_data (Dict[str, List[MessageChain]]): Arg \u7684\u89e3\u6790\u7ed3\u679c Returns: Dict[str, Any]: \u53c2\u6570 \"\"\" param_result : Dict [ str , Any ] = {} for arg in set ( self . pattern . arg_map . values ()): value = arg . default_factory () if TYPE_CHECKING : assert arg . param_name assert arg . model if arg . nargs : for param in arg . match_patterns : if param in arg_data : value = dict ( zip ( arg . tags , arg_data [ param ])) break else : if issubclass ( arg . type , BaseModel ) and isinstance ( value , arg . type ): param_result [ arg . param_name ] = value continue if not isinstance ( value , list ): value = [ value ] if not isinstance ( value , dict ): value = dict ( zip ( arg . tags , value )) if not issubclass ( arg . type , BaseModel ) or issubclass ( arg . type , AriadneBaseModel ): param_result [ arg . param_name ] = arg . model ( ** value ) . __dict__ [ arg . tags [ 0 ]] else : param_result [ arg . param_name ] = arg . model ( ** value ) else : if any ( param in arg_data for param in arg . match_patterns ): value = not value param_result [ arg . param_name ] = arg . model ( val = value ) . __dict__ [ \"val\" ] for ind , slot in self . pattern . slot_map . items (): if TYPE_CHECKING : assert slot . model if slot . param_name != self . pattern . wildcard : value = slot_data . get ( ind , None ) or slot . default_factory () param_result [ slot . param_name ] = slot . model ( val = value ) . __dict__ [ \"val\" ] else : if slot . type is _raw : param_result [ slot . param_name ] = MessageChain ([ \" \" ]) . join ( wildcard_list , merge = True ) else : param_result [ slot . param_name ] = tuple ( slot . model ( val = chain ) . __dict__ [ \"val\" ] for chain in wildcard_list ) return param_result","title":"get_data()"},{"location":"refs/graia/ariadne/message/commander/#graia.ariadne.message.commander.CommandPattern","text":"\u547d\u4ee4\u6837\u5f0f Source code in graia/ariadne/message/commander/__init__.py 221 222 223 224 225 226 227 228 229 230 231 232 233 234 @dataclass class CommandPattern : \"\"\"\u547d\u4ee4\u6837\u5f0f\"\"\" class ELast ( enum . Enum ): REQUIRED = \"required\" OPTIONAL = \"optional\" WILDCARD = \"wildcard\" token_list : \"List[Set[str] | List[int | str]]\" slot_map : Dict [ Union [ str , int ], Slot ] arg_map : Dict [ str , Arg ] last_type : ELast wildcard : str = \"\"","title":"CommandPattern"},{"location":"refs/graia/ariadne/message/commander/#graia.ariadne.message.commander.Commander","text":"\u4fbf\u5229\u7684\u6307\u4ee4\u89e6\u53d1\u4f53\u7cfb Source code in graia/ariadne/message/commander/__init__.pyclass Commander : \"\"\"\u4fbf\u5229\u7684\u6307\u4ee4\u89e6\u53d1\u4f53\u7cfb\"\"\" def __init__ ( self , broadcast : Broadcast , listen : bool = True ): \"\"\" Args: broadcast (Broadcast): \u4e8b\u4ef6\u7cfb\u7edf listen (bool): \u662f\u5426\u76d1\u542c\u6307\u4ee4 \"\"\" self . broadcast = broadcast self . command_handlers : List [ CommandHandler ] = [] self . validators : List [ Callable ] = [ chain_validator ] async def execute_func ( chain : MessageChain ): await self . execute ( chain ) self . listen_func = execute_func if listen : self . broadcast . listeners . append ( Listener ( self . listen_func , self . broadcast . getDefaultNamespace (), list ( gen_subclass ( MessageEvent )), ) ) def __del__ ( self ): self . broadcast . listeners = [ i for i in self . broadcast . listeners if i . callable != self . listen_func ] def add_type_cast ( self , * caster : Callable ): \"\"\"\u6dfb\u52a0\u7c7b\u578b\u9a8c\u8bc1\u5668 (type caster / validator)\"\"\" self . validators = [ * reversed ( caster ), * self . validators ] def command ( self , command : str , setting : Optional [ Dict [ str , Union [ Slot , Arg ]]] = None , dispatchers : Sequence [ BaseDispatcher ] = (), decorators : Sequence [ Decorator ] = (), ) -> Callable [[ T_Callable ], T_Callable ]: \"\"\"\u88c5\u9970\u4e00\u4e2a\u547d\u4ee4\u5904\u7406\u51fd\u6570 Args: command (str): \u8981\u5904\u7406\u7684\u547d\u4ee4 setting (Dict[str, Union[Slot, Arg]], optional): \u53c2\u6570\u8bbe\u7f6e. dispatchers (Sequence[BaseDispatcher], optional): \u53ef\u9009\u7684\u989d\u5916 Dispatcher \u5e8f\u5217. decorators (Sequence[Decorator], optional): \u53ef\u9009\u7684\u989d\u5916 Decorator \u5e8f\u5217. Raises: ValueError: \u547d\u4ee4\u683c\u5f0f\u9519\u8bef Returns: Callable[[T_Callable], T_Callable]: \u88c5\u9970\u5668 \"\"\" slot_map : Dict [ Union [ int , str ], Slot ] = {} pattern_arg_map : Dict [ str , Arg ] = {} param_arg_map : Dict [ str , Arg ] = {} for name , val in ( setting or {}) . items (): if isinstance ( val , Slot ): slot_map [ val . placeholder ] = val elif isinstance ( val , Arg ): for pattern in val . match_patterns : pattern_arg_map [ pattern ] = val param_arg_map [ name ] = val else : raise TypeError ( f \"Unknown setting value: { name } - { val !r} \" ) val . param_name = name token_list : \"List[Set[str] | List[int | str]]\" = [] # set: const, list: param placeholder_set : Set [ Union [ int , str ]] = set () last : CommandPattern . ELast = CommandPattern . ELast . REQUIRED wildcard_slot_name : str = \"\" command_tokens : List [ CommandTokenTuple ] = tokenize_command ( command ) for ( t_type , tokens ) in command_tokens : if t_type in { CommandToken . TEXT , CommandToken . CHOICE }: assert not any ( token in pattern_arg_map for token in tokens ), f \" { tokens } conflicts with a Arg object!\" token_list . append ( set ( cast ( List [ str ], tokens ))) elif t_type is CommandToken . ANNOTATED : wildcard , name , annotation , default = cast ( List [ str ], tokens ) if wildcard or default : assert ( tokens is command_tokens [ - 1 ][ 1 ] ), \"Not setting wildcard / optional on the last slot!\" if wildcard : last = CommandPattern . ELast . WILDCARD if default : last = CommandPattern . ELast . OPTIONAL assert name not in placeholder_set , \"Duplicated parameter slot!\" placeholder_set . add ( name ) parsed_slot = Slot ( name , eval ( annotation or \"...\" , * eval_ctx ( 1 , { \"raw\" : _raw })), eval ( default or \"...\" , * eval_ctx ( 1 )), ) parsed_slot . param_name = name # assuming that param_name is consistent if name in slot_map : slot_map [ name ] = parsed_slot | slot_map [ name ] # parsed slot < provided slot if wildcard : wildcard_slot_name = name token_list . append ([ name ]) elif t_type is CommandToken . PARAM : for param_name in tokens : assert param_name not in placeholder_set , \"Duplicated parameter slot!\" placeholder_set . add ( param_name ) token_list . append ( tokens ) def wrapper ( func : T_Callable ) -> T_Callable : \"\"\"register as command executor\"\"\" # scan function signature def __translate_obj ( obj ): if obj is inspect . Parameter . empty : return ... if isinstance ( obj , Decorator ): return ... return obj for name , parameter in inspect . signature ( func ) . parameters . items (): annotation , default = __translate_obj ( parameter . annotation ), __translate_obj ( parameter . default ) if name in placeholder_set : parsed_slot = Slot ( name , annotation , default ) parsed_slot . param_name = name # assuming that param_name is consistent if name in slot_map : slot_map [ name ] = parsed_slot | slot_map [ name ] # parsed slot < provided slot if default is not ... : assert all ( [ slot_map [ name ] . placeholder in command_tokens [ - 1 ][ 1 ], command_tokens [ - 1 ][ 0 ] in { CommandToken . ANNOTATED , CommandToken . PARAM , }, ] ), \"Not setting wildcard / optional on the last slot!\" nonlocal last if last is CommandPattern . ELast . REQUIRED : last = CommandPattern . ELast . OPTIONAL if name in param_arg_map : arg = param_arg_map [ name ] arg . type = arg . type if arg . type is not ... else parameter . annotation if arg . default is ... and arg . default_factory is ... : arg . default = parameter . default for slot in slot_map . values (): slot . gen_model ( self . validators ) for arg in param_arg_map . values (): arg . gen_model ( self . validators ) self . command_handlers . append ( CommandHandler ( CommandPattern ( token_list , slot_map , pattern_arg_map , last , wildcard_slot_name ), func , dispatchers , decorators , ) ) return func return wrapper async def execute ( self , chain : MessageChain ): \"\"\"\u89e6\u53d1 Commander. Args: chain (MessageChain): \u89e6\u53d1\u7684\u6d88\u606f\u94fe \"\"\" mapping_str , elem_m = chain . _to_mapping_str () for handler in reversed ( self . command_handlers ): # starting from latest added pattern = handler . pattern text_index : int = 0 token_index : int = 0 arg_data : Dict [ str , List [ MessageChain ]] = {} slot_data : Dict [ Union [ str , int ], MessageChain ] = {} text_list : List [ str ] = split ( mapping_str ) wildcard_list : List [ MessageChain ] = [] with suppress ( IndexError , MismatchError , ValueError , RequirementCrashed , ExecutionStop ): while text_index < len ( text_list ): text = text_list [ text_index ] text_index += 1 if text in pattern . arg_map : # Arg handle if text in arg_data : raise MismatchError ( \"Duplicated argument\" ) nargs : int = pattern . arg_map [ text ] . nargs arg_data [ text ] = [ MessageChain . _from_mapping_string ( t , elem_m ) for t in text_list [ text_index : text_index + nargs ] ] text_index += nargs else : # Constant and Slot handle tokens = pattern . token_list [ token_index ] token_index += 1 if isinstance ( tokens , set ) and text not in tokens : raise MismatchError if isinstance ( tokens , list ): if pattern . last_type is CommandPattern . ELast . WILDCARD and token_index == len ( pattern . token_list ): wildcard_list . append ( MessageChain . _from_mapping_string ( text , elem_m )) token_index -= 1 for slot in tokens : slot_data [ slot ] = MessageChain . _from_mapping_string ( text , elem_m ) if text_index < len ( pattern . token_list ) - ( pattern . last_type is not CommandPattern . ELast . REQUIRED ): continue dispatchers = [] if event := event_ctx . get ( None ): dispatchers = resolve_dispatchers_mixin ([ event . Dispatcher ]) token = commander_data_ctx . set ( handler . get_data ( slot_data , arg_data , wildcard_list )) await self . broadcast . Executor ( handler , dispatchers ) commander_data_ctx . reset ( token )","title":"Commander"},{"location":"refs/graia/ariadne/message/commander/#graia.ariadne.message.commander.Commander.__init__","text":"__init__ ( broadcast : Broadcast , listen : bool = True ) Parameters: Name Type Description Default broadcast Broadcast \u4e8b\u4ef6\u7cfb\u7edf required listen bool \u662f\u5426\u76d1\u542c\u6307\u4ee4 True Source code in graia/ariadne/message/commander/__init__.py 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 def __init__ ( self , broadcast : Broadcast , listen : bool = True ): \"\"\" Args: broadcast (Broadcast): \u4e8b\u4ef6\u7cfb\u7edf listen (bool): \u662f\u5426\u76d1\u542c\u6307\u4ee4 \"\"\" self . broadcast = broadcast self . command_handlers : List [ CommandHandler ] = [] self . validators : List [ Callable ] = [ chain_validator ] async def execute_func ( chain : MessageChain ): await self . execute ( chain ) self . listen_func = execute_func if listen : self . broadcast . listeners . append ( Listener ( self . listen_func , self . broadcast . getDefaultNamespace (), list ( gen_subclass ( MessageEvent )), ) )","title":"__init__()"},{"location":"refs/graia/ariadne/message/commander/#graia.ariadne.message.commander.Commander.add_type_cast","text":"add_type_cast ( * caster : Callable ) \u6dfb\u52a0\u7c7b\u578b\u9a8c\u8bc1\u5668 (type caster / validator) Source code in graia/ariadne/message/commander/__init__.py 359 360 361 def add_type_cast ( self , * caster : Callable ): \"\"\"\u6dfb\u52a0\u7c7b\u578b\u9a8c\u8bc1\u5668 (type caster / validator)\"\"\" self . validators = [ * reversed ( caster ), * self . validators ]","title":"add_type_cast()"},{"location":"refs/graia/ariadne/message/commander/#graia.ariadne.message.commander.Commander.command","text":"command ( command : str , setting : Optional [ Dict [ str , Union [ Slot , Arg ]]] = None , dispatchers : Sequence [ BaseDispatcher ] = (), decorators : Sequence [ Decorator ] = ()) -> Callable [[ T_Callable ], T_Callable ] \u88c5\u9970\u4e00\u4e2a\u547d\u4ee4\u5904\u7406\u51fd\u6570 Parameters: Name Type Description Default command str \u8981\u5904\u7406\u7684\u547d\u4ee4 required setting Dict [ str , Union [ Slot , Arg ]] \u53c2\u6570\u8bbe\u7f6e. None dispatchers Sequence [ BaseDispatcher ] \u53ef\u9009\u7684\u989d\u5916 Dispatcher \u5e8f\u5217. () decorators Sequence [ Decorator ] \u53ef\u9009\u7684\u989d\u5916 Decorator \u5e8f\u5217. () Raises: Type Description ValueError \u547d\u4ee4\u683c\u5f0f\u9519\u8bef Returns: Type Description Callable [[ T_Callable ], T_Callable ] Callable[[T_Callable], T_Callable]: \u88c5\u9970\u5668 Source code in graia/ariadne/message/commander/__init__.pydef command ( self , command : str , setting : Optional [ Dict [ str , Union [ Slot , Arg ]]] = None , dispatchers : Sequence [ BaseDispatcher ] = (), decorators : Sequence [ Decorator ] = (), ) -> Callable [[ T_Callable ], T_Callable ]: \"\"\"\u88c5\u9970\u4e00\u4e2a\u547d\u4ee4\u5904\u7406\u51fd\u6570 Args: command (str): \u8981\u5904\u7406\u7684\u547d\u4ee4 setting (Dict[str, Union[Slot, Arg]], optional): \u53c2\u6570\u8bbe\u7f6e. dispatchers (Sequence[BaseDispatcher], optional): \u53ef\u9009\u7684\u989d\u5916 Dispatcher \u5e8f\u5217. decorators (Sequence[Decorator], optional): \u53ef\u9009\u7684\u989d\u5916 Decorator \u5e8f\u5217. Raises: ValueError: \u547d\u4ee4\u683c\u5f0f\u9519\u8bef Returns: Callable[[T_Callable], T_Callable]: \u88c5\u9970\u5668 \"\"\" slot_map : Dict [ Union [ int , str ], Slot ] = {} pattern_arg_map : Dict [ str , Arg ] = {} param_arg_map : Dict [ str , Arg ] = {} for name , val in ( setting or {}) . items (): if isinstance ( val , Slot ): slot_map [ val . placeholder ] = val elif isinstance ( val , Arg ): for pattern in val . match_patterns : pattern_arg_map [ pattern ] = val param_arg_map [ name ] = val else : raise TypeError ( f \"Unknown setting value: { name } - { val !r} \" ) val . param_name = name token_list : \"List[Set[str] | List[int | str]]\" = [] # set: const, list: param placeholder_set : Set [ Union [ int , str ]] = set () last : CommandPattern . ELast = CommandPattern . ELast . REQUIRED wildcard_slot_name : str = \"\" command_tokens : List [ CommandTokenTuple ] = tokenize_command ( command ) for ( t_type , tokens ) in command_tokens : if t_type in { CommandToken . TEXT , CommandToken . CHOICE }: assert not any ( token in pattern_arg_map for token in tokens ), f \" { tokens } conflicts with a Arg object!\" token_list . append ( set ( cast ( List [ str ], tokens ))) elif t_type is CommandToken . ANNOTATED : wildcard , name , annotation , default = cast ( List [ str ], tokens ) if wildcard or default : assert ( tokens is command_tokens [ - 1 ][ 1 ] ), \"Not setting wildcard / optional on the last slot!\" if wildcard : last = CommandPattern . ELast . WILDCARD if default : last = CommandPattern . ELast . OPTIONAL assert name not in placeholder_set , \"Duplicated parameter slot!\" placeholder_set . add ( name ) parsed_slot = Slot ( name , eval ( annotation or \"...\" , * eval_ctx ( 1 , { \"raw\" : _raw })), eval ( default or \"...\" , * eval_ctx ( 1 )), ) parsed_slot . param_name = name # assuming that param_name is consistent if name in slot_map : slot_map [ name ] = parsed_slot | slot_map [ name ] # parsed slot < provided slot if wildcard : wildcard_slot_name = name token_list . append ([ name ]) elif t_type is CommandToken . PARAM : for param_name in tokens : assert param_name not in placeholder_set , \"Duplicated parameter slot!\" placeholder_set . add ( param_name ) token_list . append ( tokens ) def wrapper ( func : T_Callable ) -> T_Callable : \"\"\"register as command executor\"\"\" # scan function signature def __translate_obj ( obj ): if obj is inspect . Parameter . empty : return ... if isinstance ( obj , Decorator ): return ... return obj for name , parameter in inspect . signature ( func ) . parameters . items (): annotation , default = __translate_obj ( parameter . annotation ), __translate_obj ( parameter . default ) if name in placeholder_set : parsed_slot = Slot ( name , annotation , default ) parsed_slot . param_name = name # assuming that param_name is consistent if name in slot_map : slot_map [ name ] = parsed_slot | slot_map [ name ] # parsed slot < provided slot if default is not ... : assert all ( [ slot_map [ name ] . placeholder in command_tokens [ - 1 ][ 1 ], command_tokens [ - 1 ][ 0 ] in { CommandToken . ANNOTATED , CommandToken . PARAM , }, ] ), \"Not setting wildcard / optional on the last slot!\" nonlocal last if last is CommandPattern . ELast . REQUIRED : last = CommandPattern . ELast . OPTIONAL if name in param_arg_map : arg = param_arg_map [ name ] arg . type = arg . type if arg . type is not ... else parameter . annotation if arg . default is ... and arg . default_factory is ... : arg . default = parameter . default for slot in slot_map . values (): slot . gen_model ( self . validators ) for arg in param_arg_map . values (): arg . gen_model ( self . validators ) self . command_handlers . append ( CommandHandler ( CommandPattern ( token_list , slot_map , pattern_arg_map , last , wildcard_slot_name ), func , dispatchers , decorators , ) ) return func return wrapper","title":"command()"},{"location":"refs/graia/ariadne/message/commander/#graia.ariadne.message.commander.Commander.execute","text":"execute ( chain : MessageChain ) \u89e6\u53d1 Commander. Parameters: Name Type Description Default chain MessageChain \u89e6\u53d1\u7684\u6d88\u606f\u94fe required Source code in graia/ariadne/message/commander/__init__.py 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 async def execute ( self , chain : MessageChain ): \"\"\"\u89e6\u53d1 Commander. Args: chain (MessageChain): \u89e6\u53d1\u7684\u6d88\u606f\u94fe \"\"\" mapping_str , elem_m = chain . _to_mapping_str () for handler in reversed ( self . command_handlers ): # starting from latest added pattern = handler . pattern text_index : int = 0 token_index : int = 0 arg_data : Dict [ str , List [ MessageChain ]] = {} slot_data : Dict [ Union [ str , int ], MessageChain ] = {} text_list : List [ str ] = split ( mapping_str ) wildcard_list : List [ MessageChain ] = [] with suppress ( IndexError , MismatchError , ValueError , RequirementCrashed , ExecutionStop ): while text_index < len ( text_list ): text = text_list [ text_index ] text_index += 1 if text in pattern . arg_map : # Arg handle if text in arg_data : raise MismatchError ( \"Duplicated argument\" ) nargs : int = pattern . arg_map [ text ] . nargs arg_data [ text ] = [ MessageChain . _from_mapping_string ( t , elem_m ) for t in text_list [ text_index : text_index + nargs ] ] text_index += nargs else : # Constant and Slot handle tokens = pattern . token_list [ token_index ] token_index += 1 if isinstance ( tokens , set ) and text not in tokens : raise MismatchError if isinstance ( tokens , list ): if pattern . last_type is CommandPattern . ELast . WILDCARD and token_index == len ( pattern . token_list ): wildcard_list . append ( MessageChain . _from_mapping_string ( text , elem_m )) token_index -= 1 for slot in tokens : slot_data [ slot ] = MessageChain . _from_mapping_string ( text , elem_m ) if text_index < len ( pattern . token_list ) - ( pattern . last_type is not CommandPattern . ELast . REQUIRED ): continue dispatchers = [] if event := event_ctx . get ( None ): dispatchers = resolve_dispatchers_mixin ([ event . Dispatcher ]) token = commander_data_ctx . set ( handler . get_data ( slot_data , arg_data , wildcard_list )) await self . broadcast . Executor ( handler , dispatchers ) commander_data_ctx . reset ( token )","title":"execute()"},{"location":"refs/graia/ariadne/message/commander/#graia.ariadne.message.commander.MismatchError","text":"Bases: ValueError \u6307\u4ee4\u5931\u914d Source code in graia/ariadne/message/commander/__init__.py 240 241 class MismatchError ( ValueError ): \"\"\"\u6307\u4ee4\u5931\u914d\"\"\"","title":"MismatchError"},{"location":"refs/graia/ariadne/message/commander/#graia.ariadne.message.commander.ParamDesc","text":"Bases: abc . ABC Source code in graia/ariadne/message/commander/__init__.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 class ParamDesc ( abc . ABC ): model : Optional [ BaseModel ] default : Any default_factory : Callable [[], Any ] def __or__ ( self , other : \"ParamDesc | Dict[str, Any]\" ): dct = other . __dict__ if isinstance ( other , ParamDesc ) else other for k , v in dct . items (): if v and v is not ... and not isinstance ( v , Decorator ): self . __dict__ [ k ] = v return self @abc . abstractmethod def gen_model ( self , validators : Iterable [ Callable ]) -> None : \"\"\"\u751f\u6210\u7528\u4e8e pydantic \u89e3\u6790\u7684 model \u5c5e\u6027 Args: validators (Iterable[Callable]): \u7528\u4f5c validator \u7684 Callable \u53ef\u8fed\u4ee3\u5bf9\u8c61 \"\"\" ...","title":"ParamDesc"},{"location":"refs/graia/ariadne/message/commander/#graia.ariadne.message.commander.ParamDesc.gen_model","text":"gen_model ( validators : Iterable [ Callable ]) -> None \u751f\u6210\u7528\u4e8e pydantic \u89e3\u6790\u7684 model \u5c5e\u6027 Parameters: Name Type Description Default validators Iterable [ Callable ] \u7528\u4f5c validator \u7684 Callable \u53ef\u8fed\u4ee3\u5bf9\u8c61 required Source code in graia/ariadne/message/commander/__init__.py 88 89 90 91 92 93 94 95 @abc . abstractmethod def gen_model ( self , validators : Iterable [ Callable ]) -> None : \"\"\"\u751f\u6210\u7528\u4e8e pydantic \u89e3\u6790\u7684 model \u5c5e\u6027 Args: validators (Iterable[Callable]): \u7528\u4f5c validator \u7684 Callable \u53ef\u8fed\u4ee3\u5bf9\u8c61 \"\"\" ...","title":"gen_model()"},{"location":"refs/graia/ariadne/message/commander/#graia.ariadne.message.commander.Slot","text":"Bases: ParamDesc Slot Source code in graia/ariadne/message/commander/__init__.py 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 @dataclass class Slot ( ParamDesc ): \"\"\"Slot\"\"\" def __init__ ( self , placeholder : Union [ str , int ], type : Type = ... , default : Any = ... , default_factory : Callable [[], Any ] = ... , ) -> None : self . placeholder = placeholder self . type = type if self . type == \"raw\" : self . type = _raw self . default = default self . default_factory = default_factory self . param_name : str = \"\" self . model : Optional [ Type [ BaseModel ]] = None def gen_model ( self , validators : Iterable [ Callable ]) -> None : if self . model or self . type is _raw : return self . default_factory = const_call ( self . default ) if self . default is not ... else self . default_factory if self . type is ... : self . type = MessageChain self . model = create_model ( \"SlotModel\" , __validators__ = { f \"#validator_ { i } #\" : validator ( \"*\" , pre = True , allow_reuse = True )( v ) for i , v in enumerate ( validators ) }, val = ( self . type , ... ), # default is handled at exec )","title":"Slot"},{"location":"refs/graia/ariadne/message/commander/#graia.ariadne.message.commander.chain_validator","text":"chain_validator ( value : MessageChain , field : ModelField ) -> Union [ MessageChain , Element , str ] MessageChain \u5904\u7406\u51fd\u6570. \u5e94\u7528\u4f5c pydantic \u7684 Model validator. \u53d6\u51b3\u4e8e\u5b57\u6bb5\u7c7b\u578b\u6807\u6ce8, \u82e5\u4e0e\u6d88\u606f\u94fe, \u6d88\u606f\u5143\u7d20\u65e0\u5173\u5219\u4f1a\u76f4\u63a5\u628a\u6d88\u606f\u94fe\u7528 asDisplay \u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32. Parameters: Name Type Description Default value MessageChain \u6d88\u606f\u94fe required field ModelField \u5f53\u524d\u7684 model \u5b57\u6bb5 required Returns: Type Description Union [ MessageChain , Element , str ] Union[MessageChain, Element, str]: \u53d6\u51b3\u4e8e\u5b57\u6bb5\u7c7b\u578b\u6807\u6ce8 Source code in graia/ariadne/message/commander/__init__.py 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 def chain_validator ( value : MessageChain , field : ModelField ) -> Union [ MessageChain , Element , str ]: \"\"\" MessageChain \u5904\u7406\u51fd\u6570. \u5e94\u7528\u4f5c pydantic \u7684 Model validator. \u53d6\u51b3\u4e8e\u5b57\u6bb5\u7c7b\u578b\u6807\u6ce8, \u82e5\u4e0e\u6d88\u606f\u94fe, \u6d88\u606f\u5143\u7d20\u65e0\u5173\u5219\u4f1a\u76f4\u63a5\u628a\u6d88\u606f\u94fe\u7528 asDisplay \u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32. Args: value (MessageChain): \u6d88\u606f\u94fe field (ModelField): \u5f53\u524d\u7684 model \u5b57\u6bb5 Returns: Union[MessageChain, Element, str]: \u53d6\u51b3\u4e8e\u5b57\u6bb5\u7c7b\u578b\u6807\u6ce8 \"\"\" if field . outer_type_ is MessageChain : return value if issubclass ( field . type_ , Element ): assert len ( value ) == 1 assert isinstance ( value [ 0 ], field . type_ ) return value [ 0 ] if isinstance ( value , MessageChain ): return value . asDisplay () if value is None : return field . default return value","title":"chain_validator()"},{"location":"refs/graia/ariadne/message/commander/saya/","text":"CommandSchema \ud83d\udd17 Bases: BaseSchema \u547d\u4ee4\u76d1\u542c Schema, \u76f8\u5f53\u4e8e commander.command Source code in graia/ariadne/message/commander/saya.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 @dataclass class CommandSchema ( BaseSchema ): \"\"\"\u547d\u4ee4\u76d1\u542c Schema, \u76f8\u5f53\u4e8e commander.command\"\"\" command : str settings : Dict [ str , Union [ Slot , Arg ]] = field ( default_factory = dict ) dispatchers : List [ BaseDispatcher ] = field ( default_factory = list ) decorators : List [ Decorator ] = field ( default_factory = list ) def register ( self , func : Callable , commander : Commander ): \"\"\"\u6ce8\u518c func \u81f3 commander Args: func (Callable): \u547d\u4ee4\u51fd\u6570 commander (Commander): \u547d\u4ee4\u5bf9\u8c61 \"\"\" commander . command ( self . command , self . settings , self . dispatchers , self . decorators )( func ) register \ud83d\udd17 register ( func : Callable , commander : Commander ) \u6ce8\u518c func \u81f3 commander Parameters: Name Type Description Default func Callable \u547d\u4ee4\u51fd\u6570 required commander Commander \u547d\u4ee4\u5bf9\u8c61 required Source code in graia/ariadne/message/commander/saya.py 22 23 24 25 26 27 28 29 def register ( self , func : Callable , commander : Commander ): \"\"\"\u6ce8\u518c func \u81f3 commander Args: func (Callable): \u547d\u4ee4\u51fd\u6570 commander (Commander): \u547d\u4ee4\u5bf9\u8c61 \"\"\" commander . command ( self . command , self . settings , self . dispatchers , self . decorators )( func ) CommanderBehaviour \ud83d\udd17 Bases: Behaviour \u547d\u4ee4\u884c\u4e3a Source code in graia/ariadne/message/commander/saya.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 class CommanderBehaviour ( Behaviour ): \"\"\"\u547d\u4ee4\u884c\u4e3a\"\"\" def __init__ ( self , commander : Commander ) -> None : self . commander = commander def allocate ( self , cube : Cube [ CommandSchema ]): if not isinstance ( cube . metaclass , CommandSchema ): return cube . metaclass . register ( cube . content , self . commander ) return True def uninstall ( self , cube : Cube [ CommandSchema ]): if not isinstance ( cube . metaclass , CommandSchema ): return for val in self . commander . command_handlers [:]: if cube . content is val . callable : self . commander . command_handlers . remove ( val ) return True","title":"saya"},{"location":"refs/graia/ariadne/message/commander/saya/#graia.ariadne.message.commander.saya.CommandSchema","text":"Bases: BaseSchema \u547d\u4ee4\u76d1\u542c Schema, \u76f8\u5f53\u4e8e commander.command Source code in graia/ariadne/message/commander/saya.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 @dataclass class CommandSchema ( BaseSchema ): \"\"\"\u547d\u4ee4\u76d1\u542c Schema, \u76f8\u5f53\u4e8e commander.command\"\"\" command : str settings : Dict [ str , Union [ Slot , Arg ]] = field ( default_factory = dict ) dispatchers : List [ BaseDispatcher ] = field ( default_factory = list ) decorators : List [ Decorator ] = field ( default_factory = list ) def register ( self , func : Callable , commander : Commander ): \"\"\"\u6ce8\u518c func \u81f3 commander Args: func (Callable): \u547d\u4ee4\u51fd\u6570 commander (Commander): \u547d\u4ee4\u5bf9\u8c61 \"\"\" commander . command ( self . command , self . settings , self . dispatchers , self . decorators )( func )","title":"CommandSchema"},{"location":"refs/graia/ariadne/message/commander/saya/#graia.ariadne.message.commander.saya.CommandSchema.register","text":"register ( func : Callable , commander : Commander ) \u6ce8\u518c func \u81f3 commander Parameters: Name Type Description Default func Callable \u547d\u4ee4\u51fd\u6570 required commander Commander \u547d\u4ee4\u5bf9\u8c61 required Source code in graia/ariadne/message/commander/saya.py 22 23 24 25 26 27 28 29 def register ( self , func : Callable , commander : Commander ): \"\"\"\u6ce8\u518c func \u81f3 commander Args: func (Callable): \u547d\u4ee4\u51fd\u6570 commander (Commander): \u547d\u4ee4\u5bf9\u8c61 \"\"\" commander . command ( self . command , self . settings , self . dispatchers , self . decorators )( func )","title":"register()"},{"location":"refs/graia/ariadne/message/commander/saya/#graia.ariadne.message.commander.saya.CommanderBehaviour","text":"Bases: Behaviour \u547d\u4ee4\u884c\u4e3a Source code in graia/ariadne/message/commander/saya.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 class CommanderBehaviour ( Behaviour ): \"\"\"\u547d\u4ee4\u884c\u4e3a\"\"\" def __init__ ( self , commander : Commander ) -> None : self . commander = commander def allocate ( self , cube : Cube [ CommandSchema ]): if not isinstance ( cube . metaclass , CommandSchema ): return cube . metaclass . register ( cube . content , self . commander ) return True def uninstall ( self , cube : Cube [ CommandSchema ]): if not isinstance ( cube . metaclass , CommandSchema ): return for val in self . commander . command_handlers [:]: if cube . content is val . callable : self . commander . command_handlers . remove ( val ) return True","title":"CommanderBehaviour"},{"location":"refs/graia/ariadne/message/parser/","text":"\u672c\u6a21\u5757\u63d0\u4f9b\u5404\u79cd Message \u5904\u7406\u5668.","title":"parser"},{"location":"refs/graia/ariadne/message/parser/alconna/","text":"\u8be5\u6587\u4ef6\u4ec5\u4f5c\u4e3a\u517c\u5bb9\u7528","title":"alconna"},{"location":"refs/graia/ariadne/message/parser/base/","text":"Ariadne \u57fa\u7840\u7684 parser, \u5305\u62ec DetectPrefix \u4e0e DetectSuffix Compose \ud83d\udd17 Bases: Decorator \u5c06\u591a\u4e2a\u57fa\u7840 Decorator \u4e32\u8054\u8d77\u6765 Source code in graia/ariadne/message/parser/base.py 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 class Compose ( Decorator ): \"\"\"\u5c06\u591a\u4e2a\u57fa\u7840 Decorator \u4e32\u8054\u8d77\u6765\"\"\" def __init__ ( self , * deco : \"ChainDecorator\" ) -> None : self . deco : List [ ChainDecorator ] = list ( deco ) async def target ( self , interface : DecoratorInterface ): chain = await interface . dispatcher_interface . lookup_param ( \"message_chain\" , MessageChain , None ) for deco in self . deco : chain = await deco . decorate ( chain , interface ) if chain is None : break if interface . annotation is MessageChain : if chain is None : raise ExecutionStop return chain ContainKeyword \ud83d\udd17 Bases: ChainDecorator \u6d88\u606f\u4e2d\u542b\u6709\u6307\u5b9a\u5173\u952e\u5b57 Source code in graia/ariadne/message/parser/base.py 166 167 168 169 170 171 172 173 174 175 176 class ContainKeyword ( ChainDecorator ): \"\"\"\u6d88\u606f\u4e2d\u542b\u6709\u6307\u5b9a\u5173\u952e\u5b57\"\"\" def __init__ ( self , keyword : str ) -> None : self . keyword : str = keyword async def decorate ( self , chain : MessageChain , interface : DecoratorInterface ) -> Optional [ MessageChain ]: if self . keyword not in chain : raise ExecutionStop if interface . annotation is MessageChain : return chain DetectPrefix \ud83d\udd17 Bases: ChainDecorator \u524d\u7f00\u68c0\u6d4b\u5668 Source code in graia/ariadne/message/parser/base.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 class DetectPrefix ( ChainDecorator ): \"\"\"\u524d\u7f00\u68c0\u6d4b\u5668\"\"\" def __init__ ( self , prefix : Union [ str , Iterable [ str ]]) -> None : \"\"\"\u521d\u59cb\u5316\u524d\u7f00\u68c0\u6d4b\u5668. Args: prefix (Union[str, Iterable[str]]): \u8981\u5339\u914d\u7684\u524d\u7f00 \"\"\" self . prefix : List [ str ] = [ prefix ] if isinstance ( prefix , str ) else list ( prefix ) async def decorate ( self , chain : MessageChain , interface : DecoratorInterface ) -> Optional [ MessageChain ]: header = chain . include ( Quote , Source ) rest : MessageChain = chain . exclude ( Quote , Source ) for prefix in self . prefix : if rest . startswith ( prefix ): result = rest . removeprefix ( prefix ) . removeprefix ( \" \" ) break else : raise ExecutionStop if interface . annotation is MessageChain : return header + result __init__ \ud83d\udd17 __init__ ( prefix : Union [ str , Iterable [ str ]]) -> None \u521d\u59cb\u5316\u524d\u7f00\u68c0\u6d4b\u5668. Parameters: Name Type Description Default prefix Union [ str , Iterable [ str ]] \u8981\u5339\u914d\u7684\u524d\u7f00 required Source code in graia/ariadne/message/parser/base.py 67 68 69 70 71 72 73 def __init__ ( self , prefix : Union [ str , Iterable [ str ]]) -> None : \"\"\"\u521d\u59cb\u5316\u524d\u7f00\u68c0\u6d4b\u5668. Args: prefix (Union[str, Iterable[str]]): \u8981\u5339\u914d\u7684\u524d\u7f00 \"\"\" self . prefix : List [ str ] = [ prefix ] if isinstance ( prefix , str ) else list ( prefix ) DetectSuffix \ud83d\udd17 Bases: ChainDecorator \u540e\u7f00\u68c0\u6d4b\u5668 Source code in graia/ariadne/message/parser/base.py 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 class DetectSuffix ( ChainDecorator ): \"\"\"\u540e\u7f00\u68c0\u6d4b\u5668\"\"\" def __init__ ( self , suffix : Union [ str , Iterable [ str ]]) -> None : \"\"\"\u521d\u59cb\u5316\u540e\u7f00\u68c0\u6d4b\u5668. Args: suffix (Union[str, Iterable[str]]): \u8981\u5339\u914d\u7684\u540e\u7f00 \"\"\" self . suffix : List [ str ] = [ suffix ] if isinstance ( suffix , str ) else list ( suffix ) async def decorate ( self , chain : MessageChain , interface : DecoratorInterface ) -> Optional [ MessageChain ]: header = chain . include ( Quote , Source ) rest : MessageChain = chain . exclude ( Quote , Source ) for suffix in self . suffix : if rest . endswith ( suffix ): result = rest . removesuffix ( suffix ) . removesuffix ( \" \" ) break else : raise ExecutionStop if interface . annotation is MessageChain : return header + result __init__ \ud83d\udd17 __init__ ( suffix : Union [ str , Iterable [ str ]]) -> None \u521d\u59cb\u5316\u540e\u7f00\u68c0\u6d4b\u5668. Parameters: Name Type Description Default suffix Union [ str , Iterable [ str ]] \u8981\u5339\u914d\u7684\u540e\u7f00 required Source code in graia/ariadne/message/parser/base.py 91 92 93 94 95 96 97 def __init__ ( self , suffix : Union [ str , Iterable [ str ]]) -> None : \"\"\"\u521d\u59cb\u5316\u540e\u7f00\u68c0\u6d4b\u5668. Args: suffix (Union[str, Iterable[str]]): \u8981\u5339\u914d\u7684\u540e\u7f00 \"\"\" self . suffix : List [ str ] = [ suffix ] if isinstance ( suffix , str ) else list ( suffix ) FuzzyMatch \ud83d\udd17 Bases: ChainDecorator \u6a21\u7cca\u5339\u914d Warning \u6211\u4eec\u66f4\u63a8\u8350\u4f7f\u7528 FuzzyDispatcher \u6765\u8fdb\u884c\u6a21\u7cca\u5339\u914d\u64cd\u4f5c, \u56e0\u4e3a\u5176\u5177\u6709\u4e0a\u4e0b\u6587\u5339\u914d\u6570\u91cf\u9650\u5236. Source code in graia/ariadne/message/parser/base.py 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 class FuzzyMatch ( ChainDecorator ): \"\"\"\u6a21\u7cca\u5339\u914d Warning: \u6211\u4eec\u66f4\u63a8\u8350\u4f7f\u7528 FuzzyDispatcher \u6765\u8fdb\u884c\u6a21\u7cca\u5339\u914d\u64cd\u4f5c, \u56e0\u4e3a\u5176\u5177\u6709\u4e0a\u4e0b\u6587\u5339\u914d\u6570\u91cf\u9650\u5236. \"\"\" def __init__ ( self , template : str , min_rate : float = 0.6 ) -> None : self . template : str = template self . min_rate : float = min_rate def match ( self , chain : MessageChain ): \"\"\"\u5339\u914d\u6d88\u606f\u94fe\"\"\" text_frags : List [ str ] = [] for element in chain : if isinstance ( element , Plain ): text_frags . append ( element . text ) else : text_frags . append ( element . asDisplay ()) text = \"\" . join ( text_frags ) matcher = difflib . SequenceMatcher ( a = text , b = self . template ) # return false when **any** ratio calc falls undef the rate if matcher . real_quick_ratio () < self . min_rate : return False if matcher . quick_ratio () < self . min_rate : return False return matcher . ratio () >= self . min_rate async def decorate ( self , chain : MessageChain , interface : DecoratorInterface ) -> Optional [ MessageChain ]: if not self . match ( chain ): raise ExecutionStop if interface . annotation is MessageChain : return chain match \ud83d\udd17 match ( chain : MessageChain ) \u5339\u914d\u6d88\u606f\u94fe Source code in graia/ariadne/message/parser/base.py 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 def match ( self , chain : MessageChain ): \"\"\"\u5339\u914d\u6d88\u606f\u94fe\"\"\" text_frags : List [ str ] = [] for element in chain : if isinstance ( element , Plain ): text_frags . append ( element . text ) else : text_frags . append ( element . asDisplay ()) text = \"\" . join ( text_frags ) matcher = difflib . SequenceMatcher ( a = text , b = self . template ) # return false when **any** ratio calc falls undef the rate if matcher . real_quick_ratio () < self . min_rate : return False if matcher . quick_ratio () < self . min_rate : return False return matcher . ratio () >= self . min_rate MatchContent \ud83d\udd17 Bases: ChainDecorator \u5339\u914d\u5b57\u7b26\u4e32 / \u6d88\u606f\u94fe Source code in graia/ariadne/message/parser/base.py 179 180 181 182 183 184 185 186 187 188 189 190 191 192 class MatchContent ( ChainDecorator ): \"\"\"\u5339\u914d\u5b57\u7b26\u4e32 / \u6d88\u606f\u94fe\"\"\" def __init__ ( self , content : Union [ str , MessageChain ]) -> None : self . content : Union [ str , MessageChain ] = content self . next : Optional [ ChainDecorator ] = None async def decorate ( self , chain : MessageChain , interface : DecoratorInterface ) -> Optional [ MessageChain ]: if isinstance ( self . content , str ) and chain . asDisplay () != self . content : raise ExecutionStop if isinstance ( self . content , MessageChain ) and chain != self . content : raise ExecutionStop if interface . annotation is MessageChain : return chain MatchRegex \ud83d\udd17 Bases: ChainDecorator \u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f Source code in graia/ariadne/message/parser/base.py 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 class MatchRegex ( ChainDecorator ): \"\"\"\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\"\"\" def __init__ ( self , regex : str , flags : re . RegexFlag = re . RegexFlag ( 0 )) -> None : \"\"\"\u521d\u59cb\u5316\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f. Args: regex (str): \u6b63\u5219\u8868\u8fbe\u5f0f flags (re.RegexFlag): \u6b63\u5219\u8868\u8fbe\u5f0f\u6807\u5fd7 \"\"\" self . regex : str = regex self . flags : re . RegexFlag = flags async def decorate ( self , chain : MessageChain , interface : DecoratorInterface ) -> Optional [ MessageChain ]: if not re . match ( self . regex , chain . asDisplay (), self . flags ): raise ExecutionStop if interface . annotation is MessageChain : return chain __init__ \ud83d\udd17 __init__ ( regex : str , flags : re . RegexFlag = re . RegexFlag ( 0 )) -> None \u521d\u59cb\u5316\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f. Parameters: Name Type Description Default regex str \u6b63\u5219\u8868\u8fbe\u5f0f required flags re . RegexFlag \u6b63\u5219\u8868\u8fbe\u5f0f\u6807\u5fd7 re.RegexFlag(0) Source code in graia/ariadne/message/parser/base.py 198 199 200 201 202 203 204 205 206 def __init__ ( self , regex : str , flags : re . RegexFlag = re . RegexFlag ( 0 )) -> None : \"\"\"\u521d\u59cb\u5316\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f. Args: regex (str): \u6b63\u5219\u8868\u8fbe\u5f0f flags (re.RegexFlag): \u6b63\u5219\u8868\u8fbe\u5f0f\u6807\u5fd7 \"\"\" self . regex : str = regex self . flags : re . RegexFlag = flags MatchTemplate \ud83d\udd17 Bases: ChainDecorator \u6a21\u677f\u5339\u914d Source code in graia/ariadne/message/parser/base.py 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 class MatchTemplate ( ChainDecorator ): \"\"\"\u6a21\u677f\u5339\u914d\"\"\" def __init__ ( self , template : List [ Union [ Type [ Element ], Element ]]) -> None : self . template : List [ Union [ Type [ Element ], Element , str ]] = [] for element in template : if isinstance ( element , type ) and element is not Plain : self . template . append ( element ) elif isinstance ( element , Element ) and not isinstance ( element , Plain ): self . template . append ( element ) else : element = element . text if isinstance ( element , Plain ) else \"*\" if self . template and isinstance ( self . template [ - 1 ], str ): self . template [ - 1 ] = self . template [ - 1 ] + element else : self . template . append ( element ) def match ( self , chain : MessageChain ): \"\"\"\u5339\u914d\u6d88\u606f\u94fe\"\"\" chain = chain . asSendable () if len ( self . template ) != len ( chain ): return False for element , template in zip ( chain , self . template ): if isinstance ( template , type ) and not isinstance ( element , template ): return False elif isinstance ( template , Element ) and element != template : return False elif isinstance ( template , str ): if not isinstance ( element , Plain ) or not fnmatch . fnmatch ( element . text , template ): return False return True async def decorate ( self , chain : MessageChain , interface : DecoratorInterface ) -> Optional [ MessageChain ]: if not self . match ( chain ): raise ExecutionStop if interface . annotation is MessageChain : return chain match \ud83d\udd17 match ( chain : MessageChain ) \u5339\u914d\u6d88\u606f\u94fe Source code in graia/ariadne/message/parser/base.py 232 233 234 235 236 237 238 239 240 241 242 243 244 245 def match ( self , chain : MessageChain ): \"\"\"\u5339\u914d\u6d88\u606f\u94fe\"\"\" chain = chain . asSendable () if len ( self . template ) != len ( chain ): return False for element , template in zip ( chain , self . template ): if isinstance ( template , type ) and not isinstance ( element , template ): return False elif isinstance ( template , Element ) and element != template : return False elif isinstance ( template , str ): if not isinstance ( element , Plain ) or not fnmatch . fnmatch ( element . text , template ): return False return True Mention \ud83d\udd17 Bases: ChainDecorator At \u6216\u63d0\u5230\u6307\u5b9a\u4eba Source code in graia/ariadne/message/parser/base.py 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 class Mention ( ChainDecorator ): \"\"\"At \u6216\u63d0\u5230\u6307\u5b9a\u4eba\"\"\" def __init__ ( self , target : Union [ int , str ]) -> None : self . person : Union [ int , str ] = target async def decorate ( self , chain : MessageChain , interface : DecoratorInterface ) -> Optional [ MessageChain ]: header = chain . include ( Quote , Source ) rest : MessageChain = chain . exclude ( Quote , Source ) first : Element = rest [ 0 ] result : Optional [ MessageChain ] = None if ( rest and isinstance ( first , Plain ) and isinstance ( self . person , str ) and first . asDisplay () . startswith ( self . person ) ): result = header + rest . removeprefix ( self . person ) . removeprefix ( \" \" ) if rest and isinstance ( first , At ) and isinstance ( self . person , int ) and first . target == self . person : result = header + MessageChain ( rest . __root__ [ 1 :], inline = True ) . removeprefix ( \" \" ) if result is None : raise ExecutionStop if interface . annotation is MessageChain : return result MentionMe \ud83d\udd17 Bases: ChainDecorator At \u8d26\u53f7\u6216\u8005\u63d0\u5230\u8d26\u53f7\u7fa4\u6635\u79f0 Source code in graia/ariadne/message/parser/base.py 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 class MentionMe ( ChainDecorator ): \"\"\"At \u8d26\u53f7\u6216\u8005\u63d0\u5230\u8d26\u53f7\u7fa4\u6635\u79f0\"\"\" async def decorate ( self , chain : MessageChain , interface : DecoratorInterface ) -> Optional [ MessageChain ]: ariadne = get_running () if isinstance ( interface . event , GroupMessage ): if not ariadne . account : logger . warning ( \"Unable to detect Ariadne's name because account is not set\" ) raise ExecutionStop name = ( await ariadne . getMember ( interface . event . sender . group , ariadne . account )) . name else : name = ( await ariadne . getBotProfile ()) . nickname header = chain . include ( Quote , Source ) rest : MessageChain = chain . exclude ( Quote , Source ) first : Element = rest [ 0 ] result : Optional [ MessageChain ] = None if rest and isinstance ( first , Plain ) and first . asDisplay () . startswith ( name ): result = header + rest . removeprefix ( name ) . removeprefix ( \" \" ) if rest and isinstance ( first , At ) and first . target == ariadne . account : result = header + MessageChain ( rest . __root__ [ 1 :], inline = True ) . removeprefix ( \" \" ) if result is None : raise ExecutionStop if interface . annotation is MessageChain : return result","title":"base"},{"location":"refs/graia/ariadne/message/parser/base/#graia.ariadne.message.parser.base.Compose","text":"Bases: Decorator \u5c06\u591a\u4e2a\u57fa\u7840 Decorator \u4e32\u8054\u8d77\u6765 Source code in graia/ariadne/message/parser/base.py 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 class Compose ( Decorator ): \"\"\"\u5c06\u591a\u4e2a\u57fa\u7840 Decorator \u4e32\u8054\u8d77\u6765\"\"\" def __init__ ( self , * deco : \"ChainDecorator\" ) -> None : self . deco : List [ ChainDecorator ] = list ( deco ) async def target ( self , interface : DecoratorInterface ): chain = await interface . dispatcher_interface . lookup_param ( \"message_chain\" , MessageChain , None ) for deco in self . deco : chain = await deco . decorate ( chain , interface ) if chain is None : break if interface . annotation is MessageChain : if chain is None : raise ExecutionStop return chain","title":"Compose"},{"location":"refs/graia/ariadne/message/parser/base/#graia.ariadne.message.parser.base.ContainKeyword","text":"Bases: ChainDecorator \u6d88\u606f\u4e2d\u542b\u6709\u6307\u5b9a\u5173\u952e\u5b57 Source code in graia/ariadne/message/parser/base.py 166 167 168 169 170 171 172 173 174 175 176 class ContainKeyword ( ChainDecorator ): \"\"\"\u6d88\u606f\u4e2d\u542b\u6709\u6307\u5b9a\u5173\u952e\u5b57\"\"\" def __init__ ( self , keyword : str ) -> None : self . keyword : str = keyword async def decorate ( self , chain : MessageChain , interface : DecoratorInterface ) -> Optional [ MessageChain ]: if self . keyword not in chain : raise ExecutionStop if interface . annotation is MessageChain : return chain","title":"ContainKeyword"},{"location":"refs/graia/ariadne/message/parser/base/#graia.ariadne.message.parser.base.DetectPrefix","text":"Bases: ChainDecorator \u524d\u7f00\u68c0\u6d4b\u5668 Source code in graia/ariadne/message/parser/base.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 class DetectPrefix ( ChainDecorator ): \"\"\"\u524d\u7f00\u68c0\u6d4b\u5668\"\"\" def __init__ ( self , prefix : Union [ str , Iterable [ str ]]) -> None : \"\"\"\u521d\u59cb\u5316\u524d\u7f00\u68c0\u6d4b\u5668. Args: prefix (Union[str, Iterable[str]]): \u8981\u5339\u914d\u7684\u524d\u7f00 \"\"\" self . prefix : List [ str ] = [ prefix ] if isinstance ( prefix , str ) else list ( prefix ) async def decorate ( self , chain : MessageChain , interface : DecoratorInterface ) -> Optional [ MessageChain ]: header = chain . include ( Quote , Source ) rest : MessageChain = chain . exclude ( Quote , Source ) for prefix in self . prefix : if rest . startswith ( prefix ): result = rest . removeprefix ( prefix ) . removeprefix ( \" \" ) break else : raise ExecutionStop if interface . annotation is MessageChain : return header + result","title":"DetectPrefix"},{"location":"refs/graia/ariadne/message/parser/base/#graia.ariadne.message.parser.base.DetectPrefix.__init__","text":"__init__ ( prefix : Union [ str , Iterable [ str ]]) -> None \u521d\u59cb\u5316\u524d\u7f00\u68c0\u6d4b\u5668. Parameters: Name Type Description Default prefix Union [ str , Iterable [ str ]] \u8981\u5339\u914d\u7684\u524d\u7f00 required Source code in graia/ariadne/message/parser/base.py 67 68 69 70 71 72 73 def __init__ ( self , prefix : Union [ str , Iterable [ str ]]) -> None : \"\"\"\u521d\u59cb\u5316\u524d\u7f00\u68c0\u6d4b\u5668. Args: prefix (Union[str, Iterable[str]]): \u8981\u5339\u914d\u7684\u524d\u7f00 \"\"\" self . prefix : List [ str ] = [ prefix ] if isinstance ( prefix , str ) else list ( prefix )","title":"__init__()"},{"location":"refs/graia/ariadne/message/parser/base/#graia.ariadne.message.parser.base.DetectSuffix","text":"Bases: ChainDecorator \u540e\u7f00\u68c0\u6d4b\u5668 Source code in graia/ariadne/message/parser/base.py 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 class DetectSuffix ( ChainDecorator ): \"\"\"\u540e\u7f00\u68c0\u6d4b\u5668\"\"\" def __init__ ( self , suffix : Union [ str , Iterable [ str ]]) -> None : \"\"\"\u521d\u59cb\u5316\u540e\u7f00\u68c0\u6d4b\u5668. Args: suffix (Union[str, Iterable[str]]): \u8981\u5339\u914d\u7684\u540e\u7f00 \"\"\" self . suffix : List [ str ] = [ suffix ] if isinstance ( suffix , str ) else list ( suffix ) async def decorate ( self , chain : MessageChain , interface : DecoratorInterface ) -> Optional [ MessageChain ]: header = chain . include ( Quote , Source ) rest : MessageChain = chain . exclude ( Quote , Source ) for suffix in self . suffix : if rest . endswith ( suffix ): result = rest . removesuffix ( suffix ) . removesuffix ( \" \" ) break else : raise ExecutionStop if interface . annotation is MessageChain : return header + result","title":"DetectSuffix"},{"location":"refs/graia/ariadne/message/parser/base/#graia.ariadne.message.parser.base.DetectSuffix.__init__","text":"__init__ ( suffix : Union [ str , Iterable [ str ]]) -> None \u521d\u59cb\u5316\u540e\u7f00\u68c0\u6d4b\u5668. Parameters: Name Type Description Default suffix Union [ str , Iterable [ str ]] \u8981\u5339\u914d\u7684\u540e\u7f00 required Source code in graia/ariadne/message/parser/base.py 91 92 93 94 95 96 97 def __init__ ( self , suffix : Union [ str , Iterable [ str ]]) -> None : \"\"\"\u521d\u59cb\u5316\u540e\u7f00\u68c0\u6d4b\u5668. Args: suffix (Union[str, Iterable[str]]): \u8981\u5339\u914d\u7684\u540e\u7f00 \"\"\" self . suffix : List [ str ] = [ suffix ] if isinstance ( suffix , str ) else list ( suffix )","title":"__init__()"},{"location":"refs/graia/ariadne/message/parser/base/#graia.ariadne.message.parser.base.FuzzyMatch","text":"Bases: ChainDecorator \u6a21\u7cca\u5339\u914d Warning \u6211\u4eec\u66f4\u63a8\u8350\u4f7f\u7528 FuzzyDispatcher \u6765\u8fdb\u884c\u6a21\u7cca\u5339\u914d\u64cd\u4f5c, \u56e0\u4e3a\u5176\u5177\u6709\u4e0a\u4e0b\u6587\u5339\u914d\u6570\u91cf\u9650\u5236. Source code in graia/ariadne/message/parser/base.py 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 class FuzzyMatch ( ChainDecorator ): \"\"\"\u6a21\u7cca\u5339\u914d Warning: \u6211\u4eec\u66f4\u63a8\u8350\u4f7f\u7528 FuzzyDispatcher \u6765\u8fdb\u884c\u6a21\u7cca\u5339\u914d\u64cd\u4f5c, \u56e0\u4e3a\u5176\u5177\u6709\u4e0a\u4e0b\u6587\u5339\u914d\u6570\u91cf\u9650\u5236. \"\"\" def __init__ ( self , template : str , min_rate : float = 0.6 ) -> None : self . template : str = template self . min_rate : float = min_rate def match ( self , chain : MessageChain ): \"\"\"\u5339\u914d\u6d88\u606f\u94fe\"\"\" text_frags : List [ str ] = [] for element in chain : if isinstance ( element , Plain ): text_frags . append ( element . text ) else : text_frags . append ( element . asDisplay ()) text = \"\" . join ( text_frags ) matcher = difflib . SequenceMatcher ( a = text , b = self . template ) # return false when **any** ratio calc falls undef the rate if matcher . real_quick_ratio () < self . min_rate : return False if matcher . quick_ratio () < self . min_rate : return False return matcher . ratio () >= self . min_rate async def decorate ( self , chain : MessageChain , interface : DecoratorInterface ) -> Optional [ MessageChain ]: if not self . match ( chain ): raise ExecutionStop if interface . annotation is MessageChain : return chain","title":"FuzzyMatch"},{"location":"refs/graia/ariadne/message/parser/base/#graia.ariadne.message.parser.base.FuzzyMatch.match","text":"match ( chain : MessageChain ) \u5339\u914d\u6d88\u606f\u94fe Source code in graia/ariadne/message/parser/base.py 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 def match ( self , chain : MessageChain ): \"\"\"\u5339\u914d\u6d88\u606f\u94fe\"\"\" text_frags : List [ str ] = [] for element in chain : if isinstance ( element , Plain ): text_frags . append ( element . text ) else : text_frags . append ( element . asDisplay ()) text = \"\" . join ( text_frags ) matcher = difflib . SequenceMatcher ( a = text , b = self . template ) # return false when **any** ratio calc falls undef the rate if matcher . real_quick_ratio () < self . min_rate : return False if matcher . quick_ratio () < self . min_rate : return False return matcher . ratio () >= self . min_rate","title":"match()"},{"location":"refs/graia/ariadne/message/parser/base/#graia.ariadne.message.parser.base.MatchContent","text":"Bases: ChainDecorator \u5339\u914d\u5b57\u7b26\u4e32 / \u6d88\u606f\u94fe Source code in graia/ariadne/message/parser/base.py 179 180 181 182 183 184 185 186 187 188 189 190 191 192 class MatchContent ( ChainDecorator ): \"\"\"\u5339\u914d\u5b57\u7b26\u4e32 / \u6d88\u606f\u94fe\"\"\" def __init__ ( self , content : Union [ str , MessageChain ]) -> None : self . content : Union [ str , MessageChain ] = content self . next : Optional [ ChainDecorator ] = None async def decorate ( self , chain : MessageChain , interface : DecoratorInterface ) -> Optional [ MessageChain ]: if isinstance ( self . content , str ) and chain . asDisplay () != self . content : raise ExecutionStop if isinstance ( self . content , MessageChain ) and chain != self . content : raise ExecutionStop if interface . annotation is MessageChain : return chain","title":"MatchContent"},{"location":"refs/graia/ariadne/message/parser/base/#graia.ariadne.message.parser.base.MatchRegex","text":"Bases: ChainDecorator \u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f Source code in graia/ariadne/message/parser/base.py 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 class MatchRegex ( ChainDecorator ): \"\"\"\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\"\"\" def __init__ ( self , regex : str , flags : re . RegexFlag = re . RegexFlag ( 0 )) -> None : \"\"\"\u521d\u59cb\u5316\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f. Args: regex (str): \u6b63\u5219\u8868\u8fbe\u5f0f flags (re.RegexFlag): \u6b63\u5219\u8868\u8fbe\u5f0f\u6807\u5fd7 \"\"\" self . regex : str = regex self . flags : re . RegexFlag = flags async def decorate ( self , chain : MessageChain , interface : DecoratorInterface ) -> Optional [ MessageChain ]: if not re . match ( self . regex , chain . asDisplay (), self . flags ): raise ExecutionStop if interface . annotation is MessageChain : return chain","title":"MatchRegex"},{"location":"refs/graia/ariadne/message/parser/base/#graia.ariadne.message.parser.base.MatchRegex.__init__","text":"__init__ ( regex : str , flags : re . RegexFlag = re . RegexFlag ( 0 )) -> None \u521d\u59cb\u5316\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f. Parameters: Name Type Description Default regex str \u6b63\u5219\u8868\u8fbe\u5f0f required flags re . RegexFlag \u6b63\u5219\u8868\u8fbe\u5f0f\u6807\u5fd7 re.RegexFlag(0) Source code in graia/ariadne/message/parser/base.py 198 199 200 201 202 203 204 205 206 def __init__ ( self , regex : str , flags : re . RegexFlag = re . RegexFlag ( 0 )) -> None : \"\"\"\u521d\u59cb\u5316\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f. Args: regex (str): \u6b63\u5219\u8868\u8fbe\u5f0f flags (re.RegexFlag): \u6b63\u5219\u8868\u8fbe\u5f0f\u6807\u5fd7 \"\"\" self . regex : str = regex self . flags : re . RegexFlag = flags","title":"__init__()"},{"location":"refs/graia/ariadne/message/parser/base/#graia.ariadne.message.parser.base.MatchTemplate","text":"Bases: ChainDecorator \u6a21\u677f\u5339\u914d Source code in graia/ariadne/message/parser/base.py 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 class MatchTemplate ( ChainDecorator ): \"\"\"\u6a21\u677f\u5339\u914d\"\"\" def __init__ ( self , template : List [ Union [ Type [ Element ], Element ]]) -> None : self . template : List [ Union [ Type [ Element ], Element , str ]] = [] for element in template : if isinstance ( element , type ) and element is not Plain : self . template . append ( element ) elif isinstance ( element , Element ) and not isinstance ( element , Plain ): self . template . append ( element ) else : element = element . text if isinstance ( element , Plain ) else \"*\" if self . template and isinstance ( self . template [ - 1 ], str ): self . template [ - 1 ] = self . template [ - 1 ] + element else : self . template . append ( element ) def match ( self , chain : MessageChain ): \"\"\"\u5339\u914d\u6d88\u606f\u94fe\"\"\" chain = chain . asSendable () if len ( self . template ) != len ( chain ): return False for element , template in zip ( chain , self . template ): if isinstance ( template , type ) and not isinstance ( element , template ): return False elif isinstance ( template , Element ) and element != template : return False elif isinstance ( template , str ): if not isinstance ( element , Plain ) or not fnmatch . fnmatch ( element . text , template ): return False return True async def decorate ( self , chain : MessageChain , interface : DecoratorInterface ) -> Optional [ MessageChain ]: if not self . match ( chain ): raise ExecutionStop if interface . annotation is MessageChain : return chain","title":"MatchTemplate"},{"location":"refs/graia/ariadne/message/parser/base/#graia.ariadne.message.parser.base.MatchTemplate.match","text":"match ( chain : MessageChain ) \u5339\u914d\u6d88\u606f\u94fe Source code in graia/ariadne/message/parser/base.py 232 233 234 235 236 237 238 239 240 241 242 243 244 245 def match ( self , chain : MessageChain ): \"\"\"\u5339\u914d\u6d88\u606f\u94fe\"\"\" chain = chain . asSendable () if len ( self . template ) != len ( chain ): return False for element , template in zip ( chain , self . template ): if isinstance ( template , type ) and not isinstance ( element , template ): return False elif isinstance ( template , Element ) and element != template : return False elif isinstance ( template , str ): if not isinstance ( element , Plain ) or not fnmatch . fnmatch ( element . text , template ): return False return True","title":"match()"},{"location":"refs/graia/ariadne/message/parser/base/#graia.ariadne.message.parser.base.Mention","text":"Bases: ChainDecorator At \u6216\u63d0\u5230\u6307\u5b9a\u4eba Source code in graia/ariadne/message/parser/base.py 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 class Mention ( ChainDecorator ): \"\"\"At \u6216\u63d0\u5230\u6307\u5b9a\u4eba\"\"\" def __init__ ( self , target : Union [ int , str ]) -> None : self . person : Union [ int , str ] = target async def decorate ( self , chain : MessageChain , interface : DecoratorInterface ) -> Optional [ MessageChain ]: header = chain . include ( Quote , Source ) rest : MessageChain = chain . exclude ( Quote , Source ) first : Element = rest [ 0 ] result : Optional [ MessageChain ] = None if ( rest and isinstance ( first , Plain ) and isinstance ( self . person , str ) and first . asDisplay () . startswith ( self . person ) ): result = header + rest . removeprefix ( self . person ) . removeprefix ( \" \" ) if rest and isinstance ( first , At ) and isinstance ( self . person , int ) and first . target == self . person : result = header + MessageChain ( rest . __root__ [ 1 :], inline = True ) . removeprefix ( \" \" ) if result is None : raise ExecutionStop if interface . annotation is MessageChain : return result","title":"Mention"},{"location":"refs/graia/ariadne/message/parser/base/#graia.ariadne.message.parser.base.MentionMe","text":"Bases: ChainDecorator At \u8d26\u53f7\u6216\u8005\u63d0\u5230\u8d26\u53f7\u7fa4\u6635\u79f0 Source code in graia/ariadne/message/parser/base.py 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 class MentionMe ( ChainDecorator ): \"\"\"At \u8d26\u53f7\u6216\u8005\u63d0\u5230\u8d26\u53f7\u7fa4\u6635\u79f0\"\"\" async def decorate ( self , chain : MessageChain , interface : DecoratorInterface ) -> Optional [ MessageChain ]: ariadne = get_running () if isinstance ( interface . event , GroupMessage ): if not ariadne . account : logger . warning ( \"Unable to detect Ariadne's name because account is not set\" ) raise ExecutionStop name = ( await ariadne . getMember ( interface . event . sender . group , ariadne . account )) . name else : name = ( await ariadne . getBotProfile ()) . nickname header = chain . include ( Quote , Source ) rest : MessageChain = chain . exclude ( Quote , Source ) first : Element = rest [ 0 ] result : Optional [ MessageChain ] = None if rest and isinstance ( first , Plain ) and first . asDisplay () . startswith ( name ): result = header + rest . removeprefix ( name ) . removeprefix ( \" \" ) if rest and isinstance ( first , At ) and first . target == ariadne . account : result = header + MessageChain ( rest . __root__ [ 1 :], inline = True ) . removeprefix ( \" \" ) if result is None : raise ExecutionStop if interface . annotation is MessageChain : return result","title":"MentionMe"},{"location":"refs/graia/ariadne/message/parser/twilight/","text":"ArgResult \ud83d\udd17 Bases: Generic [ T ] , MatchResult [ T , ArgumentMatch ] \u8868\u793a ArgumentMatch \u5339\u914d\u7ed3\u679c Source code in graia/ariadne/message/parser/twilight.py 389 390 391 392 class ArgResult ( Generic [ T ], MatchResult [ T , ArgumentMatch ]): \"\"\"\u8868\u793a ArgumentMatch \u5339\u914d\u7ed3\u679c\"\"\" ... ArgumentMatch \ud83d\udd17 Bases: Match , Generic [ T ] \u53c2\u6570\u5339\u914d Source code in graia/ariadne/message/parser/twilight.py 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 class ArgumentMatch ( Match , Generic [ T ]): \"\"\"\u53c2\u6570\u5339\u914d\"\"\" if TYPE_CHECKING : @overload def __init__ ( # type: ignore self , * pattern : str , action : Union [ str , Type [ Action ]] = ... , nargs : Union [ int , str ] = ... , const : T = ... , default : T = ... , type : Callable [[ str ], T ] = ... , choices : Iterable [ T ] = ... , optional : bool = True , ): \"\"\"\u521d\u59cb\u5316 ArgumentMatch \u5bf9\u8c61. Args: *pattern (str): \u5339\u914d\u7684\u53c2\u6570\u540d. action (Union[str, Type[Action]], optional): \u53c2\u6570\u7684\u52a8\u4f5c. Defaults to \"store\". nargs (Union[int, str], optional): \u53c2\u6570\u7684\u4e2a\u6570. const (T, optional): \u53c2\u6570\u7684\u5e38\u91cf\u503c. default (T, optional): \u53c2\u6570\u7684\u9ed8\u8ba4\u503c. type (Callable[[str], T], optional): \u53c2\u6570\u7684\u7c7b\u578b. choices (Iterable[T], optional): \u53c2\u6570\u7684\u53ef\u9009\u503c. optional (bool, optional): \u53c2\u6570\u662f\u5426\u53ef\u9009. Defaults to True. Returns: None: \u65e0\u8fd4\u56de \"\"\" ... def __init__ ( self , * pattern : str , ** kwargs ) -> None : \"\"\"\u521d\u59cb\u5316 ArgumentMatch \u5bf9\u8c61. Args: *pattern (str): \u5339\u914d\u7684\u53c2\u6570\u540d. action (Union[str, Type[Action]], optional): \u53c2\u6570\u7684\u52a8\u4f5c. Defaults to \"store\". nargs (Union[int, str], optional): \u53c2\u6570\u7684\u4e2a\u6570. const (T, optional): \u53c2\u6570\u7684\u5e38\u91cf\u503c. default (T, optional): \u53c2\u6570\u7684\u9ed8\u8ba4\u503c. type (Callable[[str], T], optional): \u53c2\u6570\u7684\u7c7b\u578b. choices (Iterable[T], optional): \u53c2\u6570\u7684\u53ef\u9009\u503c. optional (bool, optional): \u53c2\u6570\u662f\u5426\u53ef\u9009. Defaults to True. Returns: None: \u65e0\u8fd4\u56de \"\"\" super () . __init__ () if not pattern : raise ValueError ( \"pattern must not be empty\" ) if not all ( i . startswith ( \"-\" ) for i in pattern ): raise ValueError ( \"pattern must start with '-'\" ) self . pattern : List [ str ] = list ( pattern ) self . arg_data : Dict [ str , Any ] = { \"default\" : Unmatched } for k , v in kwargs . items (): if k == \"optional\" : self . arg_data [ \"required\" ] = not v elif k == \"type\" : if v is MessageChain : v = MessageChainType () elif isinstance ( v , Type ) and issubclass ( v , Element ): v = ElementType ( v ) self . arg_data [ \"type\" ] = v else : self . arg_data [ k ] = v if \"type\" not in self . arg_data : self . arg_data [ \"type\" ] = MessageChainType () def param ( self , target : Union [ int , str ]) -> Self : self . arg_data [ \"dest\" ] = target if isinstance ( target , str ) else f \"_#! { target } !#_\" return super () . param ( target ) def help ( self , value : str ) -> Self : self . arg_data [ \"help\" ] = value return super () . help ( value ) def __repr_args__ ( self ): return [( None , self . pattern )] __init__ \ud83d\udd17 __init__ ( * pattern : str , ** kwargs ) -> None \u521d\u59cb\u5316 ArgumentMatch \u5bf9\u8c61. Parameters: Name Type Description Default *pattern str \u5339\u914d\u7684\u53c2\u6570\u540d. () action Union [ str , Type [ Action ]] \u53c2\u6570\u7684\u52a8\u4f5c. Defaults to \"store\". required nargs Union [ int , str ] \u53c2\u6570\u7684\u4e2a\u6570. required const T \u53c2\u6570\u7684\u5e38\u91cf\u503c. required default T \u53c2\u6570\u7684\u9ed8\u8ba4\u503c. required type Callable [[ str ], T ] \u53c2\u6570\u7684\u7c7b\u578b. required choices Iterable [ T ] \u53c2\u6570\u7684\u53ef\u9009\u503c. required optional bool \u53c2\u6570\u662f\u5426\u53ef\u9009. Defaults to True. required Returns: Name Type Description None None \u65e0\u8fd4\u56de Source code in graia/ariadne/message/parser/twilight.py 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 def __init__ ( self , * pattern : str , ** kwargs ) -> None : \"\"\"\u521d\u59cb\u5316 ArgumentMatch \u5bf9\u8c61. Args: *pattern (str): \u5339\u914d\u7684\u53c2\u6570\u540d. action (Union[str, Type[Action]], optional): \u53c2\u6570\u7684\u52a8\u4f5c. Defaults to \"store\". nargs (Union[int, str], optional): \u53c2\u6570\u7684\u4e2a\u6570. const (T, optional): \u53c2\u6570\u7684\u5e38\u91cf\u503c. default (T, optional): \u53c2\u6570\u7684\u9ed8\u8ba4\u503c. type (Callable[[str], T], optional): \u53c2\u6570\u7684\u7c7b\u578b. choices (Iterable[T], optional): \u53c2\u6570\u7684\u53ef\u9009\u503c. optional (bool, optional): \u53c2\u6570\u662f\u5426\u53ef\u9009. Defaults to True. Returns: None: \u65e0\u8fd4\u56de \"\"\" super () . __init__ () if not pattern : raise ValueError ( \"pattern must not be empty\" ) if not all ( i . startswith ( \"-\" ) for i in pattern ): raise ValueError ( \"pattern must start with '-'\" ) self . pattern : List [ str ] = list ( pattern ) self . arg_data : Dict [ str , Any ] = { \"default\" : Unmatched } for k , v in kwargs . items (): if k == \"optional\" : self . arg_data [ \"required\" ] = not v elif k == \"type\" : if v is MessageChain : v = MessageChainType () elif isinstance ( v , Type ) and issubclass ( v , Element ): v = ElementType ( v ) self . arg_data [ \"type\" ] = v else : self . arg_data [ k ] = v if \"type\" not in self . arg_data : self . arg_data [ \"type\" ] = MessageChainType () ElementMatch \ud83d\udd17 Bases: RegexMatch \u5143\u7d20\u7c7b\u578b\u5339\u914d Source code in graia/ariadne/message/parser/twilight.py 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 class ElementMatch ( RegexMatch ): \"\"\"\u5143\u7d20\u7c7b\u578b\u5339\u914d\"\"\" type : Type [ Element ] \"\"\"\u8981\u5339\u914d\u7684\u5143\u7d20\u7c7b\u578b\"\"\" def __init__ ( self , type : Type [ Element ] = ... , optional : bool = False , ) -> None : \"\"\"\u521d\u59cb\u5316 ElementMatch \u5bf9\u8c61. Args: type (Type[Element]): \u5143\u7d20\u7c7b\u578b. optional (bool, optional): \u5339\u914d\u662f\u5426\u53ef\u9009. Defaults to False. \"\"\" super ( RegexMatch , self ) . __init__ () self . type = type self . optional = optional self . _flags : re . RegexFlag = re . RegexFlag ( 0 ) self . space_policy : SpacePolicy = SpacePolicy . PRESERVE self . help ( f \" { self . type . __name__ } \u5143\u7d20\" ) @property def _src ( self ) -> str : return f \" \\x02\\\\ d+_ { self . type . __fields__ [ 'type' ] . default } \\x03 \" def __repr_args__ ( self ): return [( None , self . type ), ( \"space\" , self . space_policy . name ), ( \"flags\" , self . _flags )] __init__ \ud83d\udd17 __init__ ( type : Type [ Element ] = Ellipsis , optional : bool = False ) -> None \u521d\u59cb\u5316 ElementMatch \u5bf9\u8c61. Parameters: Name Type Description Default type Type [ Element ] \u5143\u7d20\u7c7b\u578b. Ellipsis optional bool \u5339\u914d\u662f\u5426\u53ef\u9009. Defaults to False. False Source code in graia/ariadne/message/parser/twilight.py 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 def __init__ ( self , type : Type [ Element ] = ... , optional : bool = False , ) -> None : \"\"\"\u521d\u59cb\u5316 ElementMatch \u5bf9\u8c61. Args: type (Type[Element]): \u5143\u7d20\u7c7b\u578b. optional (bool, optional): \u5339\u914d\u662f\u5426\u53ef\u9009. Defaults to False. \"\"\" super ( RegexMatch , self ) . __init__ () self . type = type self . optional = optional self . _flags : re . RegexFlag = re . RegexFlag ( 0 ) self . space_policy : SpacePolicy = SpacePolicy . PRESERVE self . help ( f \" { self . type . __name__ } \u5143\u7d20\" ) ElementResult \ud83d\udd17 Bases: MatchResult [ Element , ElementMatch ] \u8868\u793a ElementMatch \u5339\u914d\u7ed3\u679c Source code in graia/ariadne/message/parser/twilight.py 401 402 403 404 class ElementResult ( MatchResult [ Element , ElementMatch ]): \"\"\"\u8868\u793a ElementMatch \u5339\u914d\u7ed3\u679c\"\"\" ... FullMatch \ud83d\udd17 Bases: RegexMatch \u5168\u5339\u914d Source code in graia/ariadne/message/parser/twilight.py 208 209 210 211 212 213 class FullMatch ( RegexMatch ): \"\"\"\u5168\u5339\u914d\"\"\" @property def _src ( self ) -> str : return re . escape ( self . pattern ) Help \ud83d\udd17 Bases: Decorator , Generic [ T ] \u8fd4\u56de\u5e2e\u52a9\u4fe1\u606f\u7684\u88c5\u9970\u5668 Source code in graia/ariadne/message/parser/twilight.py 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 class Help ( Decorator , Generic [ T ]): \"\"\"\u8fd4\u56de\u5e2e\u52a9\u4fe1\u606f\u7684\u88c5\u9970\u5668\"\"\" pre = True formatter : Optional [ Callable [[ str , DecoratorInterface ], Union [ Awaitable [ T ], T ]]] @overload def __init__ ( self ) -> None : ... @overload def __init__ ( self , formatter : Callable [[ str , DecoratorInterface ], Union [ Awaitable [ T ], T ]]) -> None : ... def __init__ ( self , formatter : Optional [ Callable [[ str , DecoratorInterface ], Union [ Awaitable [ T ], T ]]] = None ) -> None : \"\"\" Args: formatter (Optional[Callable[[str, DecoratorInterface], Union[Awaitable[T], T]]], optional): \\ \u5e2e\u52a9\u4fe1\u606f\u683c\u5f0f\u5316\u51fd\u6570. \"\"\" self . formatter = formatter async def target ( self , i : DecoratorInterface ) -> T : twilight : Twilight = i . local_storage [ f \" { __name__ } :twilight\" ] help_string : str = twilight . matcher . get_help ( ** ( twilight . help_data or {})) if self . formatter : coro_or_result = self . formatter ( help_string , i ) if inspect . isawaitable ( coro_or_result ): return await coro_or_result else : return cast ( T , coro_or_result ) return cast ( T , help_string ) __init__ \ud83d\udd17 __init__ ( formatter : Optional [ Callable [[ str , DecoratorInterface ], Union [ Awaitable [ T ], T ]]] = None ) -> None Parameters: Name Type Description Default formatter Optional [ Callable [[ str , DecoratorInterface ], Union [ Awaitable [ T ], T ]]] \u5e2e\u52a9\u4fe1\u606f\u683c\u5f0f\u5316\u51fd\u6570. None Source code in graia/ariadne/message/parser/twilight.py 802 803 804 805 806 807 808 809 810 def __init__ ( self , formatter : Optional [ Callable [[ str , DecoratorInterface ], Union [ Awaitable [ T ], T ]]] = None ) -> None : \"\"\" Args: formatter (Optional[Callable[[str, DecoratorInterface], Union[Awaitable[T], T]]], optional): \\ \u5e2e\u52a9\u4fe1\u606f\u683c\u5f0f\u5316\u51fd\u6570. \"\"\" self . formatter = formatter Match \ud83d\udd17 Bases: abc . ABC , Representation \u5339\u914d\u9879\u62bd\u8c61\u57fa\u7c7b Source code in graia/ariadne/message/parser/twilight.py 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 class Match ( abc . ABC , Representation ): \"\"\"\u5339\u914d\u9879\u62bd\u8c61\u57fa\u7c7b\"\"\" dest : Union [ int , str ] def __init__ ( self ) -> None : self . _help = \"\" self . dest = \"\" def help ( self , value : str ) -> Self : \"\"\"\u8bbe\u7f6e\u5339\u914d\u9879\u7684\u5e2e\u52a9\u4fe1\u606f.\"\"\" self . _help = value return self def param ( self , target : Union [ int , str ]) -> Self : \"\"\"\u8bbe\u7f6e\u5339\u914d\u9879\u7684\u5206\u6d3e\u4f4d\u7f6e.\"\"\" self . dest = target return self def __matmul__ ( self , other : Union [ int , str ]) -> Self : return self . param ( other ) def __rmatmul__ ( self , other : Union [ int , str ]) -> Self : return self . param ( other ) def __rshift__ ( self , other : Union [ int , str ]) -> Self : return self . param ( other ) def __rlshift__ ( self , other : Union [ int , str ]) -> Self : return self . param ( other ) help \ud83d\udd17 help ( value : str ) -> Self \u8bbe\u7f6e\u5339\u914d\u9879\u7684\u5e2e\u52a9\u4fe1\u606f. Source code in graia/ariadne/message/parser/twilight.py 86 87 88 89 def help ( self , value : str ) -> Self : \"\"\"\u8bbe\u7f6e\u5339\u914d\u9879\u7684\u5e2e\u52a9\u4fe1\u606f.\"\"\" self . _help = value return self param \ud83d\udd17 param ( target : Union [ int , str ]) -> Self \u8bbe\u7f6e\u5339\u914d\u9879\u7684\u5206\u6d3e\u4f4d\u7f6e. Source code in graia/ariadne/message/parser/twilight.py 91 92 93 94 def param ( self , target : Union [ int , str ]) -> Self : \"\"\"\u8bbe\u7f6e\u5339\u914d\u9879\u7684\u5206\u6d3e\u4f4d\u7f6e.\"\"\" self . dest = target return self MatchResult \ud83d\udd17 Bases: Generic [ T , T_Match ] , Representation \u5339\u914d\u7ed3\u679c Source code in graia/ariadne/message/parser/twilight.py 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 class MatchResult ( Generic [ T , T_Match ], Representation ): \"\"\"\u5339\u914d\u7ed3\u679c\"\"\" __slots__ = ( \"matched\" , \"result\" , \"origin\" ) matched : bool \"\"\"\u662f\u5426\u5339\u914d\u6210\u529f\"\"\" result : Optional [ T ] \"\"\"\u5339\u914d\u7ed3\u679c\"\"\" origin : T_Match \"\"\"\u539f\u6765\u7684 Match \u5bf9\u8c61\"\"\" def __init__ ( self , matched : bool , origin : T_Match , result : T = None ) -> None : \"\"\"\u521d\u59cb\u5316 MatchResult \u5bf9\u8c61. Args: matched (bool): \u662f\u5426\u5339\u914d\u6210\u529f origin (T_Match): \u539f\u6765\u7684 Match \u5bf9\u8c61 result (T, optional): \u5339\u914d\u7ed3\u679c. Defaults to None. \"\"\" self . matched = matched self . origin = origin self . result = result __init__ \ud83d\udd17 __init__ ( matched : bool , origin : T_Match , result : T = None ) -> None \u521d\u59cb\u5316 MatchResult \u5bf9\u8c61. Parameters: Name Type Description Default matched bool \u662f\u5426\u5339\u914d\u6210\u529f required origin T_Match \u539f\u6765\u7684 Match \u5bf9\u8c61 required result T \u5339\u914d\u7ed3\u679c. Defaults to None. None Source code in graia/ariadne/message/parser/twilight.py 126 127 128 129 130 131 132 133 134 135 136 def __init__ ( self , matched : bool , origin : T_Match , result : T = None ) -> None : \"\"\"\u521d\u59cb\u5316 MatchResult \u5bf9\u8c61. Args: matched (bool): \u662f\u5426\u5339\u914d\u6210\u529f origin (T_Match): \u539f\u6765\u7684 Match \u5bf9\u8c61 result (T, optional): \u5339\u914d\u7ed3\u679c. Defaults to None. \"\"\" self . matched = matched self . origin = origin self . result = result ParamMatch \ud83d\udd17 Bases: RegexMatch \u4e0e WildcardMatch \u7c7b\u4f3c, \u4f46\u9700\u8981\u81f3\u5c11\u4e00\u4e2a\u5b57\u7b26. \u4e14\u4ec5\u5339\u914d\u7528\u7a7a\u683c\u5206\u5f00\u7684\u4e00\u6bb5 Source code in graia/ariadne/message/parser/twilight.py 280 281 282 283 284 285 286 287 288 289 290 291 class ParamMatch ( RegexMatch ): \"\"\"\u4e0e WildcardMatch \u7c7b\u4f3c, \u4f46\u9700\u8981\u81f3\u5c11\u4e00\u4e2a\u5b57\u7b26. \u4e14\u4ec5\u5339\u914d\u7528\u7a7a\u683c\u5206\u5f00\u7684\u4e00\u6bb5\"\"\" def __init__ ( self , optional : bool = False ) -> None : super () . __init__ ( r \"\"\"(?:\").+?(?:\")|(?:').+?(?:')|[^ \"']+\"\"\" , optional , ) self . _help = \"\u53c2\u6570\" def __repr_args__ ( self ): return [( None , \"PARAM\" ), ( \"space\" , self . space_policy . name ), ( \"flags\" , self . _flags )] RegexMatch \ud83d\udd17 Bases: Match \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d Source code in graia/ariadne/message/parser/twilight.py 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 class RegexMatch ( Match ): \"\"\"\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\"\"\" pattern : str \"\"\"\u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\"\"\" def __init__ ( self , pattern : str = \"\" , optional : bool = False ) -> None : \"\"\"\u521d\u59cb\u5316 RegexMatch \u5bf9\u8c61. Args: pattern (str, optional): \u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32. Defaults to \"\". optional (bool, optional): \u662f\u5426\u53ef\u9009. Defaults to False. Returns: None: \u65e0\u8fd4\u56de. \"\"\" super () . __init__ () self . pattern : str = pattern self . _flags : re . RegexFlag = re . RegexFlag ( 0 ) self . optional : bool = optional self . space_policy : SpacePolicy = SpacePolicy . PRESERVE def flags ( self , flags : re . RegexFlag ) -> Self : \"\"\"\u8bbe\u7f6e\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u6807\u5fd7. Args: flags (re.RegexFlag): \u6b63\u5219\u8868\u8fbe\u5f0f\u65d7\u6807. Returns: Self: RegexMatch \u81ea\u8eab. \"\"\" self . _flags = flags return self def space ( self , space : SpacePolicy ) -> Self : \"\"\"\u8bbe\u7f6e\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u5c3e\u968f\u7a7a\u683c\u7b56\u7565. Args: space (SpacePolicy): \u5c3e\u968f\u7a7a\u683c\u7b56\u7565. Returns: Self: RegexMatch \u81ea\u8eab. \"\"\" self . space_policy = space return self @final @property def _regex_str ( self ) -> str : \"\"\"\u751f\u6210 RegexMatch \u76f8\u5e94\u7684\u6b63\u5219\u8868\u8fbe\u5f0f.\"\"\" return ( f \" { transform_regex ( self . _flags , self . _src ) } \" f \" { '?' if self . optional else '' }{ self . space_policy . value } \" ) @property def _src ( self ) -> str : \"\"\"\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u6765\u6e90\"\"\" return self . pattern def __repr_args__ ( self ): return [( None , self . pattern ), ( \"space\" , self . space_policy . name ), ( \"flags\" , self . _flags )] __init__ \ud83d\udd17 __init__ ( pattern : str = '' , optional : bool = False ) -> None \u521d\u59cb\u5316 RegexMatch \u5bf9\u8c61. Parameters: Name Type Description Default pattern str \u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32. Defaults to \"\". '' optional bool \u662f\u5426\u53ef\u9009. Defaults to False. False Returns: Name Type Description None None \u65e0\u8fd4\u56de. Source code in graia/ariadne/message/parser/twilight.py 148 149 150 151 152 153 154 155 156 157 158 159 160 161 def __init__ ( self , pattern : str = \"\" , optional : bool = False ) -> None : \"\"\"\u521d\u59cb\u5316 RegexMatch \u5bf9\u8c61. Args: pattern (str, optional): \u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32. Defaults to \"\". optional (bool, optional): \u662f\u5426\u53ef\u9009. Defaults to False. Returns: None: \u65e0\u8fd4\u56de. \"\"\" super () . __init__ () self . pattern : str = pattern self . _flags : re . RegexFlag = re . RegexFlag ( 0 ) self . optional : bool = optional self . space_policy : SpacePolicy = SpacePolicy . PRESERVE _regex_str property \ud83d\udd17 _regex_str () -> str \u751f\u6210 RegexMatch \u76f8\u5e94\u7684\u6b63\u5219\u8868\u8fbe\u5f0f. Source code in graia/ariadne/message/parser/twilight.py 187 188 189 190 191 192 193 194 @final @property def _regex_str ( self ) -> str : \"\"\"\u751f\u6210 RegexMatch \u76f8\u5e94\u7684\u6b63\u5219\u8868\u8fbe\u5f0f.\"\"\" return ( f \" { transform_regex ( self . _flags , self . _src ) } \" f \" { '?' if self . optional else '' }{ self . space_policy . value } \" ) _src property \ud83d\udd17 _src () -> str \u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u6765\u6e90 Source code in graia/ariadne/message/parser/twilight.py 196 197 198 199 @property def _src ( self ) -> str : \"\"\"\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u6765\u6e90\"\"\" return self . pattern flags \ud83d\udd17 flags ( flags : re . RegexFlag ) -> Self \u8bbe\u7f6e\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u6807\u5fd7. Parameters: Name Type Description Default flags re . RegexFlag \u6b63\u5219\u8868\u8fbe\u5f0f\u65d7\u6807. required Returns: Name Type Description Self Self RegexMatch \u81ea\u8eab. Source code in graia/ariadne/message/parser/twilight.py 163 164 165 166 167 168 169 170 171 172 173 def flags ( self , flags : re . RegexFlag ) -> Self : \"\"\"\u8bbe\u7f6e\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u6807\u5fd7. Args: flags (re.RegexFlag): \u6b63\u5219\u8868\u8fbe\u5f0f\u65d7\u6807. Returns: Self: RegexMatch \u81ea\u8eab. \"\"\" self . _flags = flags return self space \ud83d\udd17 space ( space : SpacePolicy ) -> Self \u8bbe\u7f6e\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u5c3e\u968f\u7a7a\u683c\u7b56\u7565. Parameters: Name Type Description Default space SpacePolicy \u5c3e\u968f\u7a7a\u683c\u7b56\u7565. required Returns: Name Type Description Self Self RegexMatch \u81ea\u8eab. Source code in graia/ariadne/message/parser/twilight.py 175 176 177 178 179 180 181 182 183 184 185 def space ( self , space : SpacePolicy ) -> Self : \"\"\"\u8bbe\u7f6e\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u5c3e\u968f\u7a7a\u683c\u7b56\u7565. Args: space (SpacePolicy): \u5c3e\u968f\u7a7a\u683c\u7b56\u7565. Returns: Self: RegexMatch \u81ea\u8eab. \"\"\" self . space_policy = space return self RegexResult \ud83d\udd17 Bases: MatchResult [ MessageChain , RegexMatch ] \u8868\u793a RegexMatch \u5339\u914d\u7ed3\u679c Source code in graia/ariadne/message/parser/twilight.py 395 396 397 398 class RegexResult ( MatchResult [ MessageChain , RegexMatch ]): \"\"\"\u8868\u793a RegexMatch \u5339\u914d\u7ed3\u679c\"\"\" ... ResultValue \ud83d\udd17 Bases: Decorator \u8fd4\u56de Match \u7ed3\u679c\u503c\u7684\u88c5\u9970\u5668 Source code in graia/ariadne/message/parser/twilight.py 773 774 775 776 777 778 779 780 781 782 783 784 class ResultValue ( Decorator ): \"\"\"\u8fd4\u56de Match \u7ed3\u679c\u503c\u7684\u88c5\u9970\u5668\"\"\" pre = True @staticmethod async def target ( i : DecoratorInterface ): sparkle : Sparkle = i . local_storage [ f \" { __name__ } :result\" ] res = sparkle . res . get ( i . name , None ) if generic_isinstance ( res , i . annotation ): return res raise ExecutionStop SpacePolicy \ud83d\udd17 Bases: str , enum . Enum \u6307\u793a RegexMatch \u7684\u5c3e\u968f\u7a7a\u683c\u7b56\u7565. Source code in graia/ariadne/message/parser/twilight.py 54 55 56 57 58 59 60 61 62 63 64 65 66 class SpacePolicy ( str , enum . Enum ): \"\"\"\u6307\u793a RegexMatch \u7684\u5c3e\u968f\u7a7a\u683c\u7b56\u7565.\"\"\" value : str NOSPACE = \"\" \"\"\"\u7981\u6b62\u5c3e\u968f\u7a7a\u683c\"\"\" PRESERVE = \"( )?\" \"\"\"\u9884\u7559\u5c3e\u968f\u7a7a\u683c\"\"\" FORCE = \"( )\" \"\"\"\u5f3a\u5236\u5c3e\u968f\u7a7a\u683c\"\"\" FORCE class-attribute \ud83d\udd17 FORCE = '( )' \u5f3a\u5236\u5c3e\u968f\u7a7a\u683c NOSPACE class-attribute \ud83d\udd17 NOSPACE = '' \u7981\u6b62\u5c3e\u968f\u7a7a\u683c PRESERVE class-attribute \ud83d\udd17 PRESERVE = '( )?' \u9884\u7559\u5c3e\u968f\u7a7a\u683c Sparkle \ud83d\udd17 Bases: Representation Source code in graia/ariadne/message/parser/twilight.py 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 class Sparkle ( Representation ): \"\"\"Sparkle: Twilight \u7684\u5339\u914d\u5bb9\u5668\"\"\" __slots__ = ( \"res\" ,) def __init__ ( self , match_result : Dict [ Union [ int , str ], MatchResult ]): self . res = match_result @overload def __getitem__ ( self , item : Union [ int , str ]) -> MatchResult : ... @overload def __getitem__ ( self , item : Type [ int ]) -> List [ MatchResult ]: ... @overload def __getitem__ ( self , item : Type [ str ]) -> Dict [ str , MatchResult ]: ... def __getitem__ ( self , item : Union [ int , str , Type [ int ], Type [ str ]]): if not isinstance ( item , type ): return self . get ( item ) if item is int : return [ v for k , v in self . res . items () if isinstance ( k , int )] elif item is str : return { k : v for k , v in self . res . items () if isinstance ( k , str )} def get ( self , item : Union [ int , str ]) -> MatchResult : return self . res [ item ] def __repr_args__ ( self ): return [( repr ( k ), v ) for k , v in self . res . items ()] Twilight \ud83d\udd17 Bases: Generic [ T_Sparkle ] , BaseDispatcher \u66ae\u5149 Source code in graia/ariadne/message/parser/twilight.pyclass Twilight ( Generic [ T_Sparkle ], BaseDispatcher ): \"\"\"\u66ae\u5149\"\"\" def __init__ ( self , * root : Union [ Iterable [ Match ], Match ], map_param : Optional [ Dict [ str , bool ]] = None , ) -> None : \"\"\"\u672c\u9b54\u6cd5\u65b9\u6cd5\u7528\u4e8e\u521d\u59cb\u5316\u672c\u5b9e\u4f8b. Args: *root (Iterable[Match] | Match): \u5339\u914d\u89c4\u5219. map_param (Dict[str, bool], optional): \u5411 MessageChain.asMappingString \u4f20\u5165\u7684\u53c2\u6570. \"\"\" self . map_param = map_param or {} self . help_data : Optional [ _TwilightHelpArgs ] = None self . help_id : str = TwilightHelpManager . AUTO_ID self . help_brief : str = TwilightHelpManager . AUTO_ID self . matcher : TwilightMatcher = TwilightMatcher ( * root ) def __repr__ ( self ) -> str : return f \"<Twilight: { self . matcher } >\" def generate ( self , chain : MessageChain ) -> T_Sparkle : \"\"\"\u4ece\u6d88\u606f\u94fe\u751f\u6210 Sparkle \u5b9e\u4f8b. Args: chain (MessageChain): \u4f20\u5165\u7684\u6d88\u606f\u94fe. Returns: T_Sparkle: \u751f\u6210\u7684 Sparkle \u5bf9\u8c61. \"\"\" mapping_str , elem_mapping = chain . _to_mapping_str ( ** self . map_param ) token = elem_mapping_ctx . set ( elem_mapping ) arguments : List [ str ] = split ( mapping_str , keep_quote = True ) res = self . matcher . match ( arguments , elem_mapping ) elem_mapping_ctx . reset ( token ) return Sparkle ( res ) # type: ignore @classmethod def from_command ( # ANCHOR: Sparkle: From command cls , command : str , extra_args : Optional [ List [ Match ]] = None , ) -> \"Twilight\" : \"\"\"\u4ece shell \u5f0f\u547d\u4ee4\u751f\u6210 Twilight. Args: command (str): \u547d\u4ee4, \u4f7f\u7528 {param} \u6216 {0} \u7684\u5f62\u5f0f\u521b\u5efa\u53c2\u6570\u5360\u4f4d\u7b26. \u4f7f\u7528 [a|b] \u521b\u5efa\u9009\u62e9\u5339\u914d. \u4f7f\u7528 \u53cd\u659c\u6760 \u8f6c\u4e49. extra_args (List[Match], optional): \u53ef\u9009\u7684\u989d\u5916 Match \u5217\u8868. Returns: Twilight: \u751f\u6210\u7684 Twilight. \"\"\" extra_args = extra_args or [] match : List [ RegexMatch ] = [] for t_type , token_list in tokenize_command ( command ): if t_type is CommandToken . TEXT : match . append ( FullMatch ( * token_list ) . space ( SpacePolicy . FORCE )) elif t_type is CommandToken . CHOICE : match . append ( UnionMatch ( * token_list ) . space ( SpacePolicy . FORCE )) elif t_type is CommandToken . PARAM : match . append ( ParamMatch () . space ( SpacePolicy . FORCE ) . param ( token_list [ 0 ])) else : raise ValueError ( f \"unexpected token type: { t_type } \" ) if match : match [ - 1 ] . space_policy = SpacePolicy . NOSPACE return cls ( * match , * extra_args ) def help ( self , usage : str = \"\" , description : str = \"\" , epilog : str = \"\" , dest : bool = True , sep : str = \" -> \" , formatter_class : Type [ HelpFormatter ] = HelpFormatter , * , brief : Optional [ str ] = None , help_id : str = TwilightHelpManager . AUTO_ID , manager : Union [ str , TwilightHelpManager ] = \"global\" , ) -> Self : \"\"\"\u5229\u7528 Match \u4e2d\u7684\u4fe1\u606f\u751f\u6210\u5e2e\u52a9\u5b57\u7b26\u4e32. Args: usage (str, optional): \u4f7f\u7528\u65b9\u6cd5 (\u547d\u4ee4\u683c\u5f0f). description (str, optional): \u524d\u5bfc\u63cf\u8ff0. Defaults to \"\". epilog (str, optional): \u540e\u7f6e\u603b\u7ed3. Defaults to \"\". dest (bool, optional): \u662f\u5426\u663e\u793a\u5206\u6d3e\u4f4d\u7f6e. Defaults to True. sep (str, optional): \u5206\u6d3e\u4f4d\u7f6e\u4e4b\u95f4\u7684\u5206\u9694\u7b26. Defaults to \" -> \". formatter_class (Type[HelpFormatter], optional): \u5e2e\u52a9\u683c\u5f0f\u5316\u5668. Defaults to HelpFormatter. help_id (str, optional): \u5e2e\u52a9 id. \u9ed8\u8ba4\u4e3a\u81ea\u52a8\u751f\u6210 (\u63a8\u8350\u81ea\u884c\u6307\u5b9a). brief (str, optional): \u7b80\u8981\u4ecb\u7ecd, \u9ed8\u8ba4\u4e0e description \u76f8\u540c. manager (str, optional): \u5e2e\u52a9\u4fe1\u606f\u7ba1\u7406\u5668. \u9ed8\u8ba4 \"global\" (\u5168\u5c40\u7ba1\u7406\u5668). Returns: str: \u751f\u6210\u7684\u5e2e\u52a9\u5b57\u7b26\u4e32, \u88ab\u683c\u5f0f\u5316\u4e0e\u7f29\u8fdb\u8fc7\u4e86 \"\"\" self . help_data = { \"usage\" : usage , \"description\" : description , \"epilog\" : epilog , \"dest\" : dest , \"sep\" : sep , \"formatter_class\" : formatter_class , } self . help_id = help_id self . help_brief = brief or description help_mgr = TwilightHelpManager . get_help_mgr ( manager ) help_mgr . register ( self ) return self def get_help ( self , usage : str = \"\" , description : str = \"\" , epilog : str = \"\" , dest : bool = True , sep : str = \" -> \" , formatter_class : Type [ HelpFormatter ] = HelpFormatter , ) -> str : \"\"\"\u5229\u7528 Match \u4e2d\u7684\u4fe1\u606f\u751f\u6210\u5e2e\u52a9\u5b57\u7b26\u4e32. Args: usage (str, optional): \u4f7f\u7528\u65b9\u6cd5 (\u547d\u4ee4\u683c\u5f0f). description (str, optional): \u524d\u5bfc\u63cf\u8ff0. Defaults to \"\". epilog (str, optional): \u540e\u7f6e\u603b\u7ed3. Defaults to \"\". dest (bool, optional): \u662f\u5426\u663e\u793a\u5206\u6d3e\u4f4d\u7f6e. Defaults to True. sep (str, optional): \u5206\u6d3e\u4f4d\u7f6e\u5206\u9694\u7b26. Defaults to \" -> \". formatter_class (Type[HelpFormatter], optional): \u5e2e\u52a9\u683c\u5f0f\u5316\u5668. Defaults to HelpFormatter. Returns: str: \u751f\u6210\u7684\u5e2e\u52a9\u5b57\u7b26\u4e32, \u88ab\u683c\u5f0f\u5316\u4e0e\u7f29\u8fdb\u8fc7\u4e86 \"\"\" if self . help_data : return self . matcher . get_help ( ** self . help_data ) return self . matcher . get_help ( usage , description , epilog , dest , sep , formatter_class ) async def beforeExecution ( self , interface : DispatcherInterface ): \"\"\"\u68c0\u9a8c MessageChain \u5e76\u5c06 Sparkle \u5b58\u5165\u672c\u5730\u5b58\u50a8 Args: interface (DispatcherInterface): DispatcherInterface, \u5e94\u8be5\u80fd\u4ece\u4e2d\u63d0\u53d6 MessageChain Raises: ExecutionStop: \u5339\u914d\u4ee5\u4efb\u610f\u65b9\u5f0f\u5931\u8d25 \"\"\" local_storage = interface . local_storage chain : MessageChain = await interface . lookup_param ( \"message_chain\" , MessageChain , None ) with contextlib . suppress ( Exception ): local_storage [ f \" { __name__ } :result\" ] = self . generate ( chain ) local_storage [ f \" { __name__ } :twilight\" ] = self return raise ExecutionStop async def catch ( self , interface : DispatcherInterface ): local_storage = interface . local_storage sparkle : T_Sparkle = local_storage [ f \" { __name__ } :result\" ] if generic_issubclass ( Sparkle , interface . annotation ): return sparkle if generic_issubclass ( Twilight , interface . annotation ): return self if interface . name in sparkle . res : result = sparkle . get ( interface . name ) if generic_isinstance ( result . origin , interface . annotation ): return result . origin if any ( generic_issubclass ( res_cls , interface . annotation ) for res_cls in gen_subclass ( MatchResult ) ): return result if generic_isinstance ( result . result , interface . annotation ): return result . result __init__ \ud83d\udd17 __init__ ( * root : Union [ Iterable [ Match ], Match ], map_param : Optional [ Dict [ str , bool ]] = None ) -> None \u672c\u9b54\u6cd5\u65b9\u6cd5\u7528\u4e8e\u521d\u59cb\u5316\u672c\u5b9e\u4f8b. Parameters: Name Type Description Default *root Iterable [ Match ] | Match \u5339\u914d\u89c4\u5219. () map_param Dict [ str , bool ] \u5411 MessageChain.asMappingString \u4f20\u5165\u7684\u53c2\u6570. None Source code in graia/ariadne/message/parser/twilight.py 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 def __init__ ( self , * root : Union [ Iterable [ Match ], Match ], map_param : Optional [ Dict [ str , bool ]] = None , ) -> None : \"\"\"\u672c\u9b54\u6cd5\u65b9\u6cd5\u7528\u4e8e\u521d\u59cb\u5316\u672c\u5b9e\u4f8b. Args: *root (Iterable[Match] | Match): \u5339\u914d\u89c4\u5219. map_param (Dict[str, bool], optional): \u5411 MessageChain.asMappingString \u4f20\u5165\u7684\u53c2\u6570. \"\"\" self . map_param = map_param or {} self . help_data : Optional [ _TwilightHelpArgs ] = None self . help_id : str = TwilightHelpManager . AUTO_ID self . help_brief : str = TwilightHelpManager . AUTO_ID self . matcher : TwilightMatcher = TwilightMatcher ( * root ) beforeExecution async \ud83d\udd17 beforeExecution ( interface : DispatcherInterface ) \u68c0\u9a8c MessageChain \u5e76\u5c06 Sparkle \u5b58\u5165\u672c\u5730\u5b58\u50a8 Parameters: Name Type Description Default interface DispatcherInterface DispatcherInterface, \u5e94\u8be5\u80fd\u4ece\u4e2d\u63d0\u53d6 MessageChain required Raises: Type Description ExecutionStop \u5339\u914d\u4ee5\u4efb\u610f\u65b9\u5f0f\u5931\u8d25 Source code in graia/ariadne/message/parser/twilight.py 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 async def beforeExecution ( self , interface : DispatcherInterface ): \"\"\"\u68c0\u9a8c MessageChain \u5e76\u5c06 Sparkle \u5b58\u5165\u672c\u5730\u5b58\u50a8 Args: interface (DispatcherInterface): DispatcherInterface, \u5e94\u8be5\u80fd\u4ece\u4e2d\u63d0\u53d6 MessageChain Raises: ExecutionStop: \u5339\u914d\u4ee5\u4efb\u610f\u65b9\u5f0f\u5931\u8d25 \"\"\" local_storage = interface . local_storage chain : MessageChain = await interface . lookup_param ( \"message_chain\" , MessageChain , None ) with contextlib . suppress ( Exception ): local_storage [ f \" { __name__ } :result\" ] = self . generate ( chain ) local_storage [ f \" { __name__ } :twilight\" ] = self return raise ExecutionStop from_command classmethod \ud83d\udd17 from_command ( command : str , extra_args : Optional [ List [ Match ]] = None ) -> 'Twilight' \u4ece shell \u5f0f\u547d\u4ee4\u751f\u6210 Twilight. Parameters: Name Type Description Default command str \u547d\u4ee4, \u4f7f\u7528 {param} \u6216 {0} \u7684\u5f62\u5f0f\u521b\u5efa\u53c2\u6570\u5360\u4f4d\u7b26. \u4f7f\u7528 [a|b] \u521b\u5efa\u9009\u62e9\u5339\u914d. \u4f7f\u7528 \u53cd\u659c\u6760 \u8f6c\u4e49. required extra_args List [ Match ] \u53ef\u9009\u7684\u989d\u5916 Match \u5217\u8868. None Returns: Name Type Description Twilight 'Twilight' \u751f\u6210\u7684 Twilight. Source code in graia/ariadne/message/parser/twilight.py 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 @classmethod def from_command ( # ANCHOR: Sparkle: From command cls , command : str , extra_args : Optional [ List [ Match ]] = None , ) -> \"Twilight\" : \"\"\"\u4ece shell \u5f0f\u547d\u4ee4\u751f\u6210 Twilight. Args: command (str): \u547d\u4ee4, \u4f7f\u7528 {param} \u6216 {0} \u7684\u5f62\u5f0f\u521b\u5efa\u53c2\u6570\u5360\u4f4d\u7b26. \u4f7f\u7528 [a|b] \u521b\u5efa\u9009\u62e9\u5339\u914d. \u4f7f\u7528 \u53cd\u659c\u6760 \u8f6c\u4e49. extra_args (List[Match], optional): \u53ef\u9009\u7684\u989d\u5916 Match \u5217\u8868. Returns: Twilight: \u751f\u6210\u7684 Twilight. \"\"\" extra_args = extra_args or [] match : List [ RegexMatch ] = [] for t_type , token_list in tokenize_command ( command ): if t_type is CommandToken . TEXT : match . append ( FullMatch ( * token_list ) . space ( SpacePolicy . FORCE )) elif t_type is CommandToken . CHOICE : match . append ( UnionMatch ( * token_list ) . space ( SpacePolicy . FORCE )) elif t_type is CommandToken . PARAM : match . append ( ParamMatch () . space ( SpacePolicy . FORCE ) . param ( token_list [ 0 ])) else : raise ValueError ( f \"unexpected token type: { t_type } \" ) if match : match [ - 1 ] . space_policy = SpacePolicy . NOSPACE return cls ( * match , * extra_args ) generate \ud83d\udd17 generate ( chain : MessageChain ) -> T_Sparkle \u4ece\u6d88\u606f\u94fe\u751f\u6210 Sparkle \u5b9e\u4f8b. Parameters: Name Type Description Default chain MessageChain \u4f20\u5165\u7684\u6d88\u606f\u94fe. required Returns: Name Type Description T_Sparkle T_Sparkle \u751f\u6210\u7684 Sparkle \u5bf9\u8c61. Source code in graia/ariadne/message/parser/twilight.py 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 def generate ( self , chain : MessageChain ) -> T_Sparkle : \"\"\"\u4ece\u6d88\u606f\u94fe\u751f\u6210 Sparkle \u5b9e\u4f8b. Args: chain (MessageChain): \u4f20\u5165\u7684\u6d88\u606f\u94fe. Returns: T_Sparkle: \u751f\u6210\u7684 Sparkle \u5bf9\u8c61. \"\"\" mapping_str , elem_mapping = chain . _to_mapping_str ( ** self . map_param ) token = elem_mapping_ctx . set ( elem_mapping ) arguments : List [ str ] = split ( mapping_str , keep_quote = True ) res = self . matcher . match ( arguments , elem_mapping ) elem_mapping_ctx . reset ( token ) return Sparkle ( res ) # type: ignore get_help \ud83d\udd17 get_help ( usage : str = '' , description : str = '' , epilog : str = '' , dest : bool = True , sep : str = ' -> ' , formatter_class : Type [ HelpFormatter ] = HelpFormatter ) -> str \u5229\u7528 Match \u4e2d\u7684\u4fe1\u606f\u751f\u6210\u5e2e\u52a9\u5b57\u7b26\u4e32. Parameters: Name Type Description Default usage str \u4f7f\u7528\u65b9\u6cd5 (\u547d\u4ee4\u683c\u5f0f). '' description str \u524d\u5bfc\u63cf\u8ff0. Defaults to \"\". '' epilog str \u540e\u7f6e\u603b\u7ed3. Defaults to \"\". '' dest bool \u662f\u5426\u663e\u793a\u5206\u6d3e\u4f4d\u7f6e. Defaults to True. True sep str \u5206\u6d3e\u4f4d\u7f6e\u5206\u9694\u7b26. Defaults to \" -> \". ' -> ' formatter_class Type [ HelpFormatter ] \u5e2e\u52a9\u683c\u5f0f\u5316\u5668. Defaults to HelpFormatter. HelpFormatter Returns: Name Type Description str str \u751f\u6210\u7684\u5e2e\u52a9\u5b57\u7b26\u4e32, \u88ab\u683c\u5f0f\u5316\u4e0e\u7f29\u8fdb\u8fc7\u4e86 Source code in graia/ariadne/message/parser/twilight.py 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 def get_help ( self , usage : str = \"\" , description : str = \"\" , epilog : str = \"\" , dest : bool = True , sep : str = \" -> \" , formatter_class : Type [ HelpFormatter ] = HelpFormatter , ) -> str : \"\"\"\u5229\u7528 Match \u4e2d\u7684\u4fe1\u606f\u751f\u6210\u5e2e\u52a9\u5b57\u7b26\u4e32. Args: usage (str, optional): \u4f7f\u7528\u65b9\u6cd5 (\u547d\u4ee4\u683c\u5f0f). description (str, optional): \u524d\u5bfc\u63cf\u8ff0. Defaults to \"\". epilog (str, optional): \u540e\u7f6e\u603b\u7ed3. Defaults to \"\". dest (bool, optional): \u662f\u5426\u663e\u793a\u5206\u6d3e\u4f4d\u7f6e. Defaults to True. sep (str, optional): \u5206\u6d3e\u4f4d\u7f6e\u5206\u9694\u7b26. Defaults to \" -> \". formatter_class (Type[HelpFormatter], optional): \u5e2e\u52a9\u683c\u5f0f\u5316\u5668. Defaults to HelpFormatter. Returns: str: \u751f\u6210\u7684\u5e2e\u52a9\u5b57\u7b26\u4e32, \u88ab\u683c\u5f0f\u5316\u4e0e\u7f29\u8fdb\u8fc7\u4e86 \"\"\" if self . help_data : return self . matcher . get_help ( ** self . help_data ) return self . matcher . get_help ( usage , description , epilog , dest , sep , formatter_class ) help \ud83d\udd17 help ( usage : str = '' , description : str = '' , epilog : str = '' , dest : bool = True , sep : str = ' -> ' , formatter_class : Type [ HelpFormatter ] = HelpFormatter , * , brief : Optional [ str ] = None , help_id : str = TwilightHelpManager . AUTO_ID , manager : Union [ str , TwilightHelpManager ] = 'global' ) -> Self \u5229\u7528 Match \u4e2d\u7684\u4fe1\u606f\u751f\u6210\u5e2e\u52a9\u5b57\u7b26\u4e32. Parameters: Name Type Description Default usage str \u4f7f\u7528\u65b9\u6cd5 (\u547d\u4ee4\u683c\u5f0f). '' description str \u524d\u5bfc\u63cf\u8ff0. Defaults to \"\". '' epilog str \u540e\u7f6e\u603b\u7ed3. Defaults to \"\". '' dest bool \u662f\u5426\u663e\u793a\u5206\u6d3e\u4f4d\u7f6e. Defaults to True. True sep str \u5206\u6d3e\u4f4d\u7f6e\u4e4b\u95f4\u7684\u5206\u9694\u7b26. Defaults to \" -> \". ' -> ' formatter_class Type [ HelpFormatter ] \u5e2e\u52a9\u683c\u5f0f\u5316\u5668. Defaults to HelpFormatter. HelpFormatter help_id str \u5e2e\u52a9 id. \u9ed8\u8ba4\u4e3a\u81ea\u52a8\u751f\u6210 (\u63a8\u8350\u81ea\u884c\u6307\u5b9a). TwilightHelpManager.AUTO_ID brief str \u7b80\u8981\u4ecb\u7ecd, \u9ed8\u8ba4\u4e0e description \u76f8\u540c. None manager str \u5e2e\u52a9\u4fe1\u606f\u7ba1\u7406\u5668. \u9ed8\u8ba4 \"global\" (\u5168\u5c40\u7ba1\u7406\u5668). 'global' Returns: Name Type Description str Self \u751f\u6210\u7684\u5e2e\u52a9\u5b57\u7b26\u4e32, \u88ab\u683c\u5f0f\u5316\u4e0e\u7f29\u8fdb\u8fc7\u4e86 Source code in graia/ariadne/message/parser/twilight.py 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 def help ( self , usage : str = \"\" , description : str = \"\" , epilog : str = \"\" , dest : bool = True , sep : str = \" -> \" , formatter_class : Type [ HelpFormatter ] = HelpFormatter , * , brief : Optional [ str ] = None , help_id : str = TwilightHelpManager . AUTO_ID , manager : Union [ str , TwilightHelpManager ] = \"global\" , ) -> Self : \"\"\"\u5229\u7528 Match \u4e2d\u7684\u4fe1\u606f\u751f\u6210\u5e2e\u52a9\u5b57\u7b26\u4e32. Args: usage (str, optional): \u4f7f\u7528\u65b9\u6cd5 (\u547d\u4ee4\u683c\u5f0f). description (str, optional): \u524d\u5bfc\u63cf\u8ff0. Defaults to \"\". epilog (str, optional): \u540e\u7f6e\u603b\u7ed3. Defaults to \"\". dest (bool, optional): \u662f\u5426\u663e\u793a\u5206\u6d3e\u4f4d\u7f6e. Defaults to True. sep (str, optional): \u5206\u6d3e\u4f4d\u7f6e\u4e4b\u95f4\u7684\u5206\u9694\u7b26. Defaults to \" -> \". formatter_class (Type[HelpFormatter], optional): \u5e2e\u52a9\u683c\u5f0f\u5316\u5668. Defaults to HelpFormatter. help_id (str, optional): \u5e2e\u52a9 id. \u9ed8\u8ba4\u4e3a\u81ea\u52a8\u751f\u6210 (\u63a8\u8350\u81ea\u884c\u6307\u5b9a). brief (str, optional): \u7b80\u8981\u4ecb\u7ecd, \u9ed8\u8ba4\u4e0e description \u76f8\u540c. manager (str, optional): \u5e2e\u52a9\u4fe1\u606f\u7ba1\u7406\u5668. \u9ed8\u8ba4 \"global\" (\u5168\u5c40\u7ba1\u7406\u5668). Returns: str: \u751f\u6210\u7684\u5e2e\u52a9\u5b57\u7b26\u4e32, \u88ab\u683c\u5f0f\u5316\u4e0e\u7f29\u8fdb\u8fc7\u4e86 \"\"\" self . help_data = { \"usage\" : usage , \"description\" : description , \"epilog\" : epilog , \"dest\" : dest , \"sep\" : sep , \"formatter_class\" : formatter_class , } self . help_id = help_id self . help_brief = brief or description help_mgr = TwilightHelpManager . get_help_mgr ( manager ) help_mgr . register ( self ) return self TwilightMatcher \ud83d\udd17 Twilight \u5339\u914d\u5668 Source code in graia/ariadne/message/parser/twilight.pyclass TwilightMatcher : \"\"\"Twilight \u5339\u914d\u5668\"\"\" def __init__ ( self , * root : Union [ Iterable [ Match ], Match ]): self . origin_match_list : List [ Match ] = [] self . _parser = TwilightParser ( prog = \"\" , add_help = False ) self . _dest_map : Dict [ str , ArgumentMatch ] = {} self . _group_map : Dict [ int , RegexMatch ] = {} self . dispatch_ref : Dict [ Union [ int , str ], Match ] = {} self . match_ref : DefaultDict [ Type [ Match ], List [ Match ]] = DefaultDict ( list ) regex_str_list : List [ str ] = [] regex_group_cnt : int = 0 for i in root : if isinstance ( i , Match ): i = [ i ] self . origin_match_list . extend ( i ) for m in i : if isinstance ( m , RegexMatch ): self . match_ref [ RegexMatch ] . append ( m ) if m . dest : self . _group_map [ regex_group_cnt + 1 ] = m regex_str_list . append ( m . _regex_str ) regex_group_cnt += re . compile ( m . _regex_str ) . groups elif isinstance ( m , ArgumentMatch ): self . match_ref [ ArgumentMatch ] . append ( m ) if ( \"action\" in m . arg_data and \"type\" in m . arg_data and not self . _parser . accept_type ( m . arg_data [ \"action\" ]) ): del m . arg_data [ \"type\" ] action = self . _parser . add_argument ( * m . pattern , ** m . arg_data ) if m . dest : self . _dest_map [ action . dest ] = m if m . dest : if m . dest in self . dispatch_ref : raise NameError ( f \"duplicate dispatch name: { m . dest } \" ) self . dispatch_ref [ m . dest ] = m self . _regex_pattern : re . Pattern = re . compile ( \"\" . join ( regex_str_list )) def match ( self , arguments : List [ str ], elem_mapping : Dict [ str , Element ] ) -> Dict [ Union [ int , str ], MatchResult ]: \"\"\"\u5339\u914d\u53c2\u6570 Args: arguments (List[str]): \u53c2\u6570\u5217\u8868 elem_mapping (Dict[str, Element]): \u5143\u7d20\u6620\u5c04 Returns: Dict[Union[int, str], MatchResult]: \u5339\u914d\u7ed3\u679c \"\"\" result : Dict [ Union [ int , str ], MatchResult ] = {} if self . _dest_map : namespace , arguments = self . _parser . parse_known_args ( arguments ) nbsp_dict : Dict [ str , Any ] = namespace . __dict__ for k , v in self . _dest_map . items (): res = nbsp_dict . get ( k , Unmatched ) result [ v . dest ] = MatchResult ( res is not Unmatched , v , res ) if not ( total_match := self . _regex_pattern . fullmatch ( \" \" . join ( arguments ))): raise ValueError ( f \" { ' ' . join ( arguments ) } not matching { self . _regex_pattern . pattern } \" ) for index , match in self . _group_map . items (): group : Optional [ str ] = total_match . group ( index ) if group is None : res = None else : res = ( elem_mapping [ group [ 1 : - 1 ] . split ( \"_\" )[ 0 ]] if isinstance ( match , ElementMatch ) else MessageChain . _from_mapping_string ( group , elem_mapping ) ) if match . dest : if isinstance ( match , WildcardMatch ): result [ match . dest ] = MatchResult ( bool ( res ), match , res ) else : result [ match . dest ] = MatchResult ( group is not None , match , res ) return result def get_help ( self , usage : str = \"\" , description : str = \"\" , epilog : str = \"\" , dest : bool = True , sep : str = \" -> \" , formatter_class : Type [ HelpFormatter ] = HelpFormatter , ) -> str : \"\"\"\u5229\u7528 Match \u4e2d\u7684\u4fe1\u606f\u751f\u6210\u5e2e\u52a9\u5b57\u7b26\u4e32. Args: usage (str, optional): \u4f7f\u7528\u65b9\u6cd5 (\u547d\u4ee4\u683c\u5f0f). description (str, optional): \u524d\u5bfc\u63cf\u8ff0. Defaults to \"\". epilog (str, optional): \u540e\u7f6e\u603b\u7ed3. Defaults to \"\". dest (bool, optional): \u662f\u5426\u663e\u793a\u5206\u6d3e\u4f4d\u7f6e. Defaults to True. sep (str, optional): \u5206\u6d3e\u4f4d\u7f6e\u5206\u9694\u7b26. Defaults to \" -> \". formatter_class (Type[HelpFormatter], optional): \u5e2e\u52a9\u683c\u5f0f\u5316\u5668. Defaults to HelpFormatter. Returns: str: \u751f\u6210\u7684\u5e2e\u52a9\u5b57\u7b26\u4e32, \u88ab\u683c\u5f0f\u5316\u4e0e\u7f29\u8fdb\u8fc7\u4e86 \"\"\" formatter = formatter_class ( prog = \"\" ) if usage : formatter . add_usage ( None , self . _parser . _actions , [], prefix = usage + \" \" ) formatter . add_text ( description ) _ , optional , * _ = self . _parser . _action_groups if self . match_ref [ RegexMatch ]: formatter . start_section ( \"\u5339\u914d\u9879\" ) for match in self . match_ref [ RegexMatch ]: if match . _help : formatter . add_text ( f \"\"\" { f \" { match . dest }{ sep } \" if dest and match . dest else \"\" }{ match . _help } \"\"\" ) formatter . end_section () if self . match_ref [ ArgumentMatch ]: formatter . start_section ( \"\u53ef\u9009\u53c2\u6570\" ) formatter . add_arguments ( optional . _group_actions ) formatter . end_section () formatter . add_text ( epilog ) # determine help from format above return formatter . format_help () def __repr__ ( self ) -> str : return f \"<Matcher { list ( self . _group_map . values ()) + list ( self . _dest_map . values ()) !r} >\" # type: ignore def __str__ ( self ) -> str : return repr ( list ( self . _group_map . values ()) + list ( self . _dest_map . values ())) # type: ignore get_help \ud83d\udd17 get_help ( usage : str = '' , description : str = '' , epilog : str = '' , dest : bool = True , sep : str = ' -> ' , formatter_class : Type [ HelpFormatter ] = HelpFormatter ) -> str \u5229\u7528 Match \u4e2d\u7684\u4fe1\u606f\u751f\u6210\u5e2e\u52a9\u5b57\u7b26\u4e32. Parameters: Name Type Description Default usage str \u4f7f\u7528\u65b9\u6cd5 (\u547d\u4ee4\u683c\u5f0f). '' description str \u524d\u5bfc\u63cf\u8ff0. Defaults to \"\". '' epilog str \u540e\u7f6e\u603b\u7ed3. Defaults to \"\". '' dest bool \u662f\u5426\u663e\u793a\u5206\u6d3e\u4f4d\u7f6e. Defaults to True. True sep str \u5206\u6d3e\u4f4d\u7f6e\u5206\u9694\u7b26. Defaults to \" -> \". ' -> ' formatter_class Type [ HelpFormatter ] \u5e2e\u52a9\u683c\u5f0f\u5316\u5668. Defaults to HelpFormatter. HelpFormatter Returns: Name Type Description str str \u751f\u6210\u7684\u5e2e\u52a9\u5b57\u7b26\u4e32, \u88ab\u683c\u5f0f\u5316\u4e0e\u7f29\u8fdb\u8fc7\u4e86 Source code in graia/ariadne/message/parser/twilight.py 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 def get_help ( self , usage : str = \"\" , description : str = \"\" , epilog : str = \"\" , dest : bool = True , sep : str = \" -> \" , formatter_class : Type [ HelpFormatter ] = HelpFormatter , ) -> str : \"\"\"\u5229\u7528 Match \u4e2d\u7684\u4fe1\u606f\u751f\u6210\u5e2e\u52a9\u5b57\u7b26\u4e32. Args: usage (str, optional): \u4f7f\u7528\u65b9\u6cd5 (\u547d\u4ee4\u683c\u5f0f). description (str, optional): \u524d\u5bfc\u63cf\u8ff0. Defaults to \"\". epilog (str, optional): \u540e\u7f6e\u603b\u7ed3. Defaults to \"\". dest (bool, optional): \u662f\u5426\u663e\u793a\u5206\u6d3e\u4f4d\u7f6e. Defaults to True. sep (str, optional): \u5206\u6d3e\u4f4d\u7f6e\u5206\u9694\u7b26. Defaults to \" -> \". formatter_class (Type[HelpFormatter], optional): \u5e2e\u52a9\u683c\u5f0f\u5316\u5668. Defaults to HelpFormatter. Returns: str: \u751f\u6210\u7684\u5e2e\u52a9\u5b57\u7b26\u4e32, \u88ab\u683c\u5f0f\u5316\u4e0e\u7f29\u8fdb\u8fc7\u4e86 \"\"\" formatter = formatter_class ( prog = \"\" ) if usage : formatter . add_usage ( None , self . _parser . _actions , [], prefix = usage + \" \" ) formatter . add_text ( description ) _ , optional , * _ = self . _parser . _action_groups if self . match_ref [ RegexMatch ]: formatter . start_section ( \"\u5339\u914d\u9879\" ) for match in self . match_ref [ RegexMatch ]: if match . _help : formatter . add_text ( f \"\"\" { f \" { match . dest }{ sep } \" if dest and match . dest else \"\" }{ match . _help } \"\"\" ) formatter . end_section () if self . match_ref [ ArgumentMatch ]: formatter . start_section ( \"\u53ef\u9009\u53c2\u6570\" ) formatter . add_arguments ( optional . _group_actions ) formatter . end_section () formatter . add_text ( epilog ) # determine help from format above return formatter . format_help () match \ud83d\udd17 match ( arguments : List [ str ], elem_mapping : Dict [ str , Element ]) -> Dict [ Union [ int , str ], MatchResult ] \u5339\u914d\u53c2\u6570 Parameters: Name Type Description Default arguments List [ str ] \u53c2\u6570\u5217\u8868 required elem_mapping Dict [ str , Element ] \u5143\u7d20\u6620\u5c04 required Returns: Type Description Dict [ Union [ int , str ], MatchResult ] Dict[Union[int, str], MatchResult]: \u5339\u914d\u7ed3\u679c Source code in graia/ariadne/message/parser/twilight.py 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 def match ( self , arguments : List [ str ], elem_mapping : Dict [ str , Element ] ) -> Dict [ Union [ int , str ], MatchResult ]: \"\"\"\u5339\u914d\u53c2\u6570 Args: arguments (List[str]): \u53c2\u6570\u5217\u8868 elem_mapping (Dict[str, Element]): \u5143\u7d20\u6620\u5c04 Returns: Dict[Union[int, str], MatchResult]: \u5339\u914d\u7ed3\u679c \"\"\" result : Dict [ Union [ int , str ], MatchResult ] = {} if self . _dest_map : namespace , arguments = self . _parser . parse_known_args ( arguments ) nbsp_dict : Dict [ str , Any ] = namespace . __dict__ for k , v in self . _dest_map . items (): res = nbsp_dict . get ( k , Unmatched ) result [ v . dest ] = MatchResult ( res is not Unmatched , v , res ) if not ( total_match := self . _regex_pattern . fullmatch ( \" \" . join ( arguments ))): raise ValueError ( f \" { ' ' . join ( arguments ) } not matching { self . _regex_pattern . pattern } \" ) for index , match in self . _group_map . items (): group : Optional [ str ] = total_match . group ( index ) if group is None : res = None else : res = ( elem_mapping [ group [ 1 : - 1 ] . split ( \"_\" )[ 0 ]] if isinstance ( match , ElementMatch ) else MessageChain . _from_mapping_string ( group , elem_mapping ) ) if match . dest : if isinstance ( match , WildcardMatch ): result [ match . dest ] = MatchResult ( bool ( res ), match , res ) else : result [ match . dest ] = MatchResult ( group is not None , match , res ) return result UnionMatch \ud83d\udd17 Bases: RegexMatch \u591a\u91cd\u5339\u914d Source code in graia/ariadne/message/parser/twilight.py 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 class UnionMatch ( RegexMatch ): \"\"\"\u591a\u91cd\u5339\u914d\"\"\" pattern : List [ str ] \"\"\"\u5339\u914d\u7684\u9009\u62e9\u9879\"\"\" def __init__ ( self , * pattern : Union [ str , Iterable [ str ]], optional : bool = False , ) -> None : \"\"\"\u521d\u59cb\u5316 UnionMatch \u5bf9\u8c61. Args: *pattern (Union[str, Iterable[str]]): \u5339\u914d\u7684\u9009\u62e9\u9879. optional (bool, optional): \u5339\u914d\u662f\u5426\u53ef\u9009. Defaults to False. \"\"\" super () . __init__ ( \"\" , optional ) self . pattern : List [ str ] = [] for p in pattern : if isinstance ( p , str ): self . pattern . append ( p ) else : self . pattern . extend ( p ) self . optional = optional self . help ( f \"\u5728 { self . pattern } \u4e2d\u9009\u62e9\u4e00\u9879\" ) @property def _src ( self ) -> str : return f \" { '|' . join ( re . escape ( i ) for i in self . pattern ) } \" __init__ \ud83d\udd17 __init__ ( * pattern : Union [ str , Iterable [ str ]], optional : bool = False ) -> None \u521d\u59cb\u5316 UnionMatch \u5bf9\u8c61. Parameters: Name Type Description Default *pattern Union [ str , Iterable [ str ]] \u5339\u914d\u7684\u9009\u62e9\u9879. () optional bool \u5339\u914d\u662f\u5426\u53ef\u9009. Defaults to False. False Source code in graia/ariadne/message/parser/twilight.py 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 def __init__ ( self , * pattern : Union [ str , Iterable [ str ]], optional : bool = False , ) -> None : \"\"\"\u521d\u59cb\u5316 UnionMatch \u5bf9\u8c61. Args: *pattern (Union[str, Iterable[str]]): \u5339\u914d\u7684\u9009\u62e9\u9879. optional (bool, optional): \u5339\u914d\u662f\u5426\u53ef\u9009. Defaults to False. \"\"\" super () . __init__ ( \"\" , optional ) self . pattern : List [ str ] = [] for p in pattern : if isinstance ( p , str ): self . pattern . append ( p ) else : self . pattern . extend ( p ) self . optional = optional self . help ( f \"\u5728 { self . pattern } \u4e2d\u9009\u62e9\u4e00\u9879\" ) WildcardMatch \ud83d\udd17 Bases: RegexMatch \u6cdb\u5339\u914d Source code in graia/ariadne/message/parser/twilight.py 294 295 296 297 298 299 300 301 302 303 304 class WildcardMatch ( RegexMatch ): \"\"\"\u6cdb\u5339\u914d\"\"\" def __init__ ( self , greed : bool = True , optional : bool = False ) -> None : \"\"\"\u521d\u59cb\u5316 WildcardMatch \u5bf9\u8c61. Args: greed (bool, optional): \u662f\u5426\u8d2a\u5a6a\u5339\u914d. Defaults to True. optional (bool, optional): \u5339\u914d\u662f\u5426\u53ef\u9009. Defaults to False. \"\"\" super () . __init__ ( f \".* { '' if greed else '?' } \" , optional ) __init__ \ud83d\udd17 __init__ ( greed : bool = True , optional : bool = False ) -> None \u521d\u59cb\u5316 WildcardMatch \u5bf9\u8c61. Parameters: Name Type Description Default greed bool \u662f\u5426\u8d2a\u5a6a\u5339\u914d. Defaults to True. True optional bool \u5339\u914d\u662f\u5426\u53ef\u9009. Defaults to False. False Source code in graia/ariadne/message/parser/twilight.py 297 298 299 300 301 302 303 304 def __init__ ( self , greed : bool = True , optional : bool = False ) -> None : \"\"\"\u521d\u59cb\u5316 WildcardMatch \u5bf9\u8c61. Args: greed (bool, optional): \u662f\u5426\u8d2a\u5a6a\u5339\u914d. Defaults to True. optional (bool, optional): \u5339\u914d\u662f\u5426\u53ef\u9009. Defaults to False. \"\"\" super () . __init__ ( f \".* { '' if greed else '?' } \" , optional )","title":"twilight"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.ArgResult","text":"Bases: Generic [ T ] , MatchResult [ T , ArgumentMatch ] \u8868\u793a ArgumentMatch \u5339\u914d\u7ed3\u679c Source code in graia/ariadne/message/parser/twilight.py 389 390 391 392 class ArgResult ( Generic [ T ], MatchResult [ T , ArgumentMatch ]): \"\"\"\u8868\u793a ArgumentMatch \u5339\u914d\u7ed3\u679c\"\"\" ...","title":"ArgResult"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.ArgumentMatch","text":"Bases: Match , Generic [ T ] \u53c2\u6570\u5339\u914d Source code in graia/ariadne/message/parser/twilight.py 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 class ArgumentMatch ( Match , Generic [ T ]): \"\"\"\u53c2\u6570\u5339\u914d\"\"\" if TYPE_CHECKING : @overload def __init__ ( # type: ignore self , * pattern : str , action : Union [ str , Type [ Action ]] = ... , nargs : Union [ int , str ] = ... , const : T = ... , default : T = ... , type : Callable [[ str ], T ] = ... , choices : Iterable [ T ] = ... , optional : bool = True , ): \"\"\"\u521d\u59cb\u5316 ArgumentMatch \u5bf9\u8c61. Args: *pattern (str): \u5339\u914d\u7684\u53c2\u6570\u540d. action (Union[str, Type[Action]], optional): \u53c2\u6570\u7684\u52a8\u4f5c. Defaults to \"store\". nargs (Union[int, str], optional): \u53c2\u6570\u7684\u4e2a\u6570. const (T, optional): \u53c2\u6570\u7684\u5e38\u91cf\u503c. default (T, optional): \u53c2\u6570\u7684\u9ed8\u8ba4\u503c. type (Callable[[str], T], optional): \u53c2\u6570\u7684\u7c7b\u578b. choices (Iterable[T], optional): \u53c2\u6570\u7684\u53ef\u9009\u503c. optional (bool, optional): \u53c2\u6570\u662f\u5426\u53ef\u9009. Defaults to True. Returns: None: \u65e0\u8fd4\u56de \"\"\" ... def __init__ ( self , * pattern : str , ** kwargs ) -> None : \"\"\"\u521d\u59cb\u5316 ArgumentMatch \u5bf9\u8c61. Args: *pattern (str): \u5339\u914d\u7684\u53c2\u6570\u540d. action (Union[str, Type[Action]], optional): \u53c2\u6570\u7684\u52a8\u4f5c. Defaults to \"store\". nargs (Union[int, str], optional): \u53c2\u6570\u7684\u4e2a\u6570. const (T, optional): \u53c2\u6570\u7684\u5e38\u91cf\u503c. default (T, optional): \u53c2\u6570\u7684\u9ed8\u8ba4\u503c. type (Callable[[str], T], optional): \u53c2\u6570\u7684\u7c7b\u578b. choices (Iterable[T], optional): \u53c2\u6570\u7684\u53ef\u9009\u503c. optional (bool, optional): \u53c2\u6570\u662f\u5426\u53ef\u9009. Defaults to True. Returns: None: \u65e0\u8fd4\u56de \"\"\" super () . __init__ () if not pattern : raise ValueError ( \"pattern must not be empty\" ) if not all ( i . startswith ( \"-\" ) for i in pattern ): raise ValueError ( \"pattern must start with '-'\" ) self . pattern : List [ str ] = list ( pattern ) self . arg_data : Dict [ str , Any ] = { \"default\" : Unmatched } for k , v in kwargs . items (): if k == \"optional\" : self . arg_data [ \"required\" ] = not v elif k == \"type\" : if v is MessageChain : v = MessageChainType () elif isinstance ( v , Type ) and issubclass ( v , Element ): v = ElementType ( v ) self . arg_data [ \"type\" ] = v else : self . arg_data [ k ] = v if \"type\" not in self . arg_data : self . arg_data [ \"type\" ] = MessageChainType () def param ( self , target : Union [ int , str ]) -> Self : self . arg_data [ \"dest\" ] = target if isinstance ( target , str ) else f \"_#! { target } !#_\" return super () . param ( target ) def help ( self , value : str ) -> Self : self . arg_data [ \"help\" ] = value return super () . help ( value ) def __repr_args__ ( self ): return [( None , self . pattern )]","title":"ArgumentMatch"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.ArgumentMatch.__init__","text":"__init__ ( * pattern : str , ** kwargs ) -> None \u521d\u59cb\u5316 ArgumentMatch \u5bf9\u8c61. Parameters: Name Type Description Default *pattern str \u5339\u914d\u7684\u53c2\u6570\u540d. () action Union [ str , Type [ Action ]] \u53c2\u6570\u7684\u52a8\u4f5c. Defaults to \"store\". required nargs Union [ int , str ] \u53c2\u6570\u7684\u4e2a\u6570. required const T \u53c2\u6570\u7684\u5e38\u91cf\u503c. required default T \u53c2\u6570\u7684\u9ed8\u8ba4\u503c. required type Callable [[ str ], T ] \u53c2\u6570\u7684\u7c7b\u578b. required choices Iterable [ T ] \u53c2\u6570\u7684\u53ef\u9009\u503c. required optional bool \u53c2\u6570\u662f\u5426\u53ef\u9009. Defaults to True. required Returns: Name Type Description None None \u65e0\u8fd4\u56de Source code in graia/ariadne/message/parser/twilight.py 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 def __init__ ( self , * pattern : str , ** kwargs ) -> None : \"\"\"\u521d\u59cb\u5316 ArgumentMatch \u5bf9\u8c61. Args: *pattern (str): \u5339\u914d\u7684\u53c2\u6570\u540d. action (Union[str, Type[Action]], optional): \u53c2\u6570\u7684\u52a8\u4f5c. Defaults to \"store\". nargs (Union[int, str], optional): \u53c2\u6570\u7684\u4e2a\u6570. const (T, optional): \u53c2\u6570\u7684\u5e38\u91cf\u503c. default (T, optional): \u53c2\u6570\u7684\u9ed8\u8ba4\u503c. type (Callable[[str], T], optional): \u53c2\u6570\u7684\u7c7b\u578b. choices (Iterable[T], optional): \u53c2\u6570\u7684\u53ef\u9009\u503c. optional (bool, optional): \u53c2\u6570\u662f\u5426\u53ef\u9009. Defaults to True. Returns: None: \u65e0\u8fd4\u56de \"\"\" super () . __init__ () if not pattern : raise ValueError ( \"pattern must not be empty\" ) if not all ( i . startswith ( \"-\" ) for i in pattern ): raise ValueError ( \"pattern must start with '-'\" ) self . pattern : List [ str ] = list ( pattern ) self . arg_data : Dict [ str , Any ] = { \"default\" : Unmatched } for k , v in kwargs . items (): if k == \"optional\" : self . arg_data [ \"required\" ] = not v elif k == \"type\" : if v is MessageChain : v = MessageChainType () elif isinstance ( v , Type ) and issubclass ( v , Element ): v = ElementType ( v ) self . arg_data [ \"type\" ] = v else : self . arg_data [ k ] = v if \"type\" not in self . arg_data : self . arg_data [ \"type\" ] = MessageChainType ()","title":"__init__()"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.ElementMatch","text":"Bases: RegexMatch \u5143\u7d20\u7c7b\u578b\u5339\u914d Source code in graia/ariadne/message/parser/twilight.py 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 class ElementMatch ( RegexMatch ): \"\"\"\u5143\u7d20\u7c7b\u578b\u5339\u914d\"\"\" type : Type [ Element ] \"\"\"\u8981\u5339\u914d\u7684\u5143\u7d20\u7c7b\u578b\"\"\" def __init__ ( self , type : Type [ Element ] = ... , optional : bool = False , ) -> None : \"\"\"\u521d\u59cb\u5316 ElementMatch \u5bf9\u8c61. Args: type (Type[Element]): \u5143\u7d20\u7c7b\u578b. optional (bool, optional): \u5339\u914d\u662f\u5426\u53ef\u9009. Defaults to False. \"\"\" super ( RegexMatch , self ) . __init__ () self . type = type self . optional = optional self . _flags : re . RegexFlag = re . RegexFlag ( 0 ) self . space_policy : SpacePolicy = SpacePolicy . PRESERVE self . help ( f \" { self . type . __name__ } \u5143\u7d20\" ) @property def _src ( self ) -> str : return f \" \\x02\\\\ d+_ { self . type . __fields__ [ 'type' ] . default } \\x03 \" def __repr_args__ ( self ): return [( None , self . type ), ( \"space\" , self . space_policy . name ), ( \"flags\" , self . _flags )]","title":"ElementMatch"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.ElementMatch.__init__","text":"__init__ ( type : Type [ Element ] = Ellipsis , optional : bool = False ) -> None \u521d\u59cb\u5316 ElementMatch \u5bf9\u8c61. Parameters: Name Type Description Default type Type [ Element ] \u5143\u7d20\u7c7b\u578b. Ellipsis optional bool \u5339\u914d\u662f\u5426\u53ef\u9009. Defaults to False. False Source code in graia/ariadne/message/parser/twilight.py 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 def __init__ ( self , type : Type [ Element ] = ... , optional : bool = False , ) -> None : \"\"\"\u521d\u59cb\u5316 ElementMatch \u5bf9\u8c61. Args: type (Type[Element]): \u5143\u7d20\u7c7b\u578b. optional (bool, optional): \u5339\u914d\u662f\u5426\u53ef\u9009. Defaults to False. \"\"\" super ( RegexMatch , self ) . __init__ () self . type = type self . optional = optional self . _flags : re . RegexFlag = re . RegexFlag ( 0 ) self . space_policy : SpacePolicy = SpacePolicy . PRESERVE self . help ( f \" { self . type . __name__ } \u5143\u7d20\" )","title":"__init__()"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.ElementResult","text":"Bases: MatchResult [ Element , ElementMatch ] \u8868\u793a ElementMatch \u5339\u914d\u7ed3\u679c Source code in graia/ariadne/message/parser/twilight.py 401 402 403 404 class ElementResult ( MatchResult [ Element , ElementMatch ]): \"\"\"\u8868\u793a ElementMatch \u5339\u914d\u7ed3\u679c\"\"\" ...","title":"ElementResult"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.FullMatch","text":"Bases: RegexMatch \u5168\u5339\u914d Source code in graia/ariadne/message/parser/twilight.py 208 209 210 211 212 213 class FullMatch ( RegexMatch ): \"\"\"\u5168\u5339\u914d\"\"\" @property def _src ( self ) -> str : return re . escape ( self . pattern )","title":"FullMatch"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.Help","text":"Bases: Decorator , Generic [ T ] \u8fd4\u56de\u5e2e\u52a9\u4fe1\u606f\u7684\u88c5\u9970\u5668 Source code in graia/ariadne/message/parser/twilight.py 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 class Help ( Decorator , Generic [ T ]): \"\"\"\u8fd4\u56de\u5e2e\u52a9\u4fe1\u606f\u7684\u88c5\u9970\u5668\"\"\" pre = True formatter : Optional [ Callable [[ str , DecoratorInterface ], Union [ Awaitable [ T ], T ]]] @overload def __init__ ( self ) -> None : ... @overload def __init__ ( self , formatter : Callable [[ str , DecoratorInterface ], Union [ Awaitable [ T ], T ]]) -> None : ... def __init__ ( self , formatter : Optional [ Callable [[ str , DecoratorInterface ], Union [ Awaitable [ T ], T ]]] = None ) -> None : \"\"\" Args: formatter (Optional[Callable[[str, DecoratorInterface], Union[Awaitable[T], T]]], optional): \\ \u5e2e\u52a9\u4fe1\u606f\u683c\u5f0f\u5316\u51fd\u6570. \"\"\" self . formatter = formatter async def target ( self , i : DecoratorInterface ) -> T : twilight : Twilight = i . local_storage [ f \" { __name__ } :twilight\" ] help_string : str = twilight . matcher . get_help ( ** ( twilight . help_data or {})) if self . formatter : coro_or_result = self . formatter ( help_string , i ) if inspect . isawaitable ( coro_or_result ): return await coro_or_result else : return cast ( T , coro_or_result ) return cast ( T , help_string )","title":"Help"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.Help.__init__","text":"__init__ ( formatter : Optional [ Callable [[ str , DecoratorInterface ], Union [ Awaitable [ T ], T ]]] = None ) -> None Parameters: Name Type Description Default formatter Optional [ Callable [[ str , DecoratorInterface ], Union [ Awaitable [ T ], T ]]] \u5e2e\u52a9\u4fe1\u606f\u683c\u5f0f\u5316\u51fd\u6570. None Source code in graia/ariadne/message/parser/twilight.py 802 803 804 805 806 807 808 809 810 def __init__ ( self , formatter : Optional [ Callable [[ str , DecoratorInterface ], Union [ Awaitable [ T ], T ]]] = None ) -> None : \"\"\" Args: formatter (Optional[Callable[[str, DecoratorInterface], Union[Awaitable[T], T]]], optional): \\ \u5e2e\u52a9\u4fe1\u606f\u683c\u5f0f\u5316\u51fd\u6570. \"\"\" self . formatter = formatter","title":"__init__()"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.Match","text":"Bases: abc . ABC , Representation \u5339\u914d\u9879\u62bd\u8c61\u57fa\u7c7b Source code in graia/ariadne/message/parser/twilight.py 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 class Match ( abc . ABC , Representation ): \"\"\"\u5339\u914d\u9879\u62bd\u8c61\u57fa\u7c7b\"\"\" dest : Union [ int , str ] def __init__ ( self ) -> None : self . _help = \"\" self . dest = \"\" def help ( self , value : str ) -> Self : \"\"\"\u8bbe\u7f6e\u5339\u914d\u9879\u7684\u5e2e\u52a9\u4fe1\u606f.\"\"\" self . _help = value return self def param ( self , target : Union [ int , str ]) -> Self : \"\"\"\u8bbe\u7f6e\u5339\u914d\u9879\u7684\u5206\u6d3e\u4f4d\u7f6e.\"\"\" self . dest = target return self def __matmul__ ( self , other : Union [ int , str ]) -> Self : return self . param ( other ) def __rmatmul__ ( self , other : Union [ int , str ]) -> Self : return self . param ( other ) def __rshift__ ( self , other : Union [ int , str ]) -> Self : return self . param ( other ) def __rlshift__ ( self , other : Union [ int , str ]) -> Self : return self . param ( other )","title":"Match"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.Match.help","text":"help ( value : str ) -> Self \u8bbe\u7f6e\u5339\u914d\u9879\u7684\u5e2e\u52a9\u4fe1\u606f. Source code in graia/ariadne/message/parser/twilight.py 86 87 88 89 def help ( self , value : str ) -> Self : \"\"\"\u8bbe\u7f6e\u5339\u914d\u9879\u7684\u5e2e\u52a9\u4fe1\u606f.\"\"\" self . _help = value return self","title":"help()"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.Match.param","text":"param ( target : Union [ int , str ]) -> Self \u8bbe\u7f6e\u5339\u914d\u9879\u7684\u5206\u6d3e\u4f4d\u7f6e. Source code in graia/ariadne/message/parser/twilight.py 91 92 93 94 def param ( self , target : Union [ int , str ]) -> Self : \"\"\"\u8bbe\u7f6e\u5339\u914d\u9879\u7684\u5206\u6d3e\u4f4d\u7f6e.\"\"\" self . dest = target return self","title":"param()"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.MatchResult","text":"Bases: Generic [ T , T_Match ] , Representation \u5339\u914d\u7ed3\u679c Source code in graia/ariadne/message/parser/twilight.py 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 class MatchResult ( Generic [ T , T_Match ], Representation ): \"\"\"\u5339\u914d\u7ed3\u679c\"\"\" __slots__ = ( \"matched\" , \"result\" , \"origin\" ) matched : bool \"\"\"\u662f\u5426\u5339\u914d\u6210\u529f\"\"\" result : Optional [ T ] \"\"\"\u5339\u914d\u7ed3\u679c\"\"\" origin : T_Match \"\"\"\u539f\u6765\u7684 Match \u5bf9\u8c61\"\"\" def __init__ ( self , matched : bool , origin : T_Match , result : T = None ) -> None : \"\"\"\u521d\u59cb\u5316 MatchResult \u5bf9\u8c61. Args: matched (bool): \u662f\u5426\u5339\u914d\u6210\u529f origin (T_Match): \u539f\u6765\u7684 Match \u5bf9\u8c61 result (T, optional): \u5339\u914d\u7ed3\u679c. Defaults to None. \"\"\" self . matched = matched self . origin = origin self . result = result","title":"MatchResult"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.MatchResult.__init__","text":"__init__ ( matched : bool , origin : T_Match , result : T = None ) -> None \u521d\u59cb\u5316 MatchResult \u5bf9\u8c61. Parameters: Name Type Description Default matched bool \u662f\u5426\u5339\u914d\u6210\u529f required origin T_Match \u539f\u6765\u7684 Match \u5bf9\u8c61 required result T \u5339\u914d\u7ed3\u679c. Defaults to None. None Source code in graia/ariadne/message/parser/twilight.py 126 127 128 129 130 131 132 133 134 135 136 def __init__ ( self , matched : bool , origin : T_Match , result : T = None ) -> None : \"\"\"\u521d\u59cb\u5316 MatchResult \u5bf9\u8c61. Args: matched (bool): \u662f\u5426\u5339\u914d\u6210\u529f origin (T_Match): \u539f\u6765\u7684 Match \u5bf9\u8c61 result (T, optional): \u5339\u914d\u7ed3\u679c. Defaults to None. \"\"\" self . matched = matched self . origin = origin self . result = result","title":"__init__()"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.ParamMatch","text":"Bases: RegexMatch \u4e0e WildcardMatch \u7c7b\u4f3c, \u4f46\u9700\u8981\u81f3\u5c11\u4e00\u4e2a\u5b57\u7b26. \u4e14\u4ec5\u5339\u914d\u7528\u7a7a\u683c\u5206\u5f00\u7684\u4e00\u6bb5 Source code in graia/ariadne/message/parser/twilight.py 280 281 282 283 284 285 286 287 288 289 290 291 class ParamMatch ( RegexMatch ): \"\"\"\u4e0e WildcardMatch \u7c7b\u4f3c, \u4f46\u9700\u8981\u81f3\u5c11\u4e00\u4e2a\u5b57\u7b26. \u4e14\u4ec5\u5339\u914d\u7528\u7a7a\u683c\u5206\u5f00\u7684\u4e00\u6bb5\"\"\" def __init__ ( self , optional : bool = False ) -> None : super () . __init__ ( r \"\"\"(?:\").+?(?:\")|(?:').+?(?:')|[^ \"']+\"\"\" , optional , ) self . _help = \"\u53c2\u6570\" def __repr_args__ ( self ): return [( None , \"PARAM\" ), ( \"space\" , self . space_policy . name ), ( \"flags\" , self . _flags )]","title":"ParamMatch"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.RegexMatch","text":"Bases: Match \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d Source code in graia/ariadne/message/parser/twilight.py 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 class RegexMatch ( Match ): \"\"\"\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\"\"\" pattern : str \"\"\"\u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\"\"\" def __init__ ( self , pattern : str = \"\" , optional : bool = False ) -> None : \"\"\"\u521d\u59cb\u5316 RegexMatch \u5bf9\u8c61. Args: pattern (str, optional): \u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32. Defaults to \"\". optional (bool, optional): \u662f\u5426\u53ef\u9009. Defaults to False. Returns: None: \u65e0\u8fd4\u56de. \"\"\" super () . __init__ () self . pattern : str = pattern self . _flags : re . RegexFlag = re . RegexFlag ( 0 ) self . optional : bool = optional self . space_policy : SpacePolicy = SpacePolicy . PRESERVE def flags ( self , flags : re . RegexFlag ) -> Self : \"\"\"\u8bbe\u7f6e\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u6807\u5fd7. Args: flags (re.RegexFlag): \u6b63\u5219\u8868\u8fbe\u5f0f\u65d7\u6807. Returns: Self: RegexMatch \u81ea\u8eab. \"\"\" self . _flags = flags return self def space ( self , space : SpacePolicy ) -> Self : \"\"\"\u8bbe\u7f6e\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u5c3e\u968f\u7a7a\u683c\u7b56\u7565. Args: space (SpacePolicy): \u5c3e\u968f\u7a7a\u683c\u7b56\u7565. Returns: Self: RegexMatch \u81ea\u8eab. \"\"\" self . space_policy = space return self @final @property def _regex_str ( self ) -> str : \"\"\"\u751f\u6210 RegexMatch \u76f8\u5e94\u7684\u6b63\u5219\u8868\u8fbe\u5f0f.\"\"\" return ( f \" { transform_regex ( self . _flags , self . _src ) } \" f \" { '?' if self . optional else '' }{ self . space_policy . value } \" ) @property def _src ( self ) -> str : \"\"\"\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u6765\u6e90\"\"\" return self . pattern def __repr_args__ ( self ): return [( None , self . pattern ), ( \"space\" , self . space_policy . name ), ( \"flags\" , self . _flags )]","title":"RegexMatch"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.RegexMatch.__init__","text":"__init__ ( pattern : str = '' , optional : bool = False ) -> None \u521d\u59cb\u5316 RegexMatch \u5bf9\u8c61. Parameters: Name Type Description Default pattern str \u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32. Defaults to \"\". '' optional bool \u662f\u5426\u53ef\u9009. Defaults to False. False Returns: Name Type Description None None \u65e0\u8fd4\u56de. Source code in graia/ariadne/message/parser/twilight.py 148 149 150 151 152 153 154 155 156 157 158 159 160 161 def __init__ ( self , pattern : str = \"\" , optional : bool = False ) -> None : \"\"\"\u521d\u59cb\u5316 RegexMatch \u5bf9\u8c61. Args: pattern (str, optional): \u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32. Defaults to \"\". optional (bool, optional): \u662f\u5426\u53ef\u9009. Defaults to False. Returns: None: \u65e0\u8fd4\u56de. \"\"\" super () . __init__ () self . pattern : str = pattern self . _flags : re . RegexFlag = re . RegexFlag ( 0 ) self . optional : bool = optional self . space_policy : SpacePolicy = SpacePolicy . PRESERVE","title":"__init__()"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.RegexMatch._regex_str","text":"_regex_str () -> str \u751f\u6210 RegexMatch \u76f8\u5e94\u7684\u6b63\u5219\u8868\u8fbe\u5f0f. Source code in graia/ariadne/message/parser/twilight.py 187 188 189 190 191 192 193 194 @final @property def _regex_str ( self ) -> str : \"\"\"\u751f\u6210 RegexMatch \u76f8\u5e94\u7684\u6b63\u5219\u8868\u8fbe\u5f0f.\"\"\" return ( f \" { transform_regex ( self . _flags , self . _src ) } \" f \" { '?' if self . optional else '' }{ self . space_policy . value } \" )","title":"_regex_str()"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.RegexMatch._src","text":"_src () -> str \u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u6765\u6e90 Source code in graia/ariadne/message/parser/twilight.py 196 197 198 199 @property def _src ( self ) -> str : \"\"\"\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u6765\u6e90\"\"\" return self . pattern","title":"_src()"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.RegexMatch.flags","text":"flags ( flags : re . RegexFlag ) -> Self \u8bbe\u7f6e\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u6807\u5fd7. Parameters: Name Type Description Default flags re . RegexFlag \u6b63\u5219\u8868\u8fbe\u5f0f\u65d7\u6807. required Returns: Name Type Description Self Self RegexMatch \u81ea\u8eab. Source code in graia/ariadne/message/parser/twilight.py 163 164 165 166 167 168 169 170 171 172 173 def flags ( self , flags : re . RegexFlag ) -> Self : \"\"\"\u8bbe\u7f6e\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u6807\u5fd7. Args: flags (re.RegexFlag): \u6b63\u5219\u8868\u8fbe\u5f0f\u65d7\u6807. Returns: Self: RegexMatch \u81ea\u8eab. \"\"\" self . _flags = flags return self","title":"flags()"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.RegexMatch.space","text":"space ( space : SpacePolicy ) -> Self \u8bbe\u7f6e\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u5c3e\u968f\u7a7a\u683c\u7b56\u7565. Parameters: Name Type Description Default space SpacePolicy \u5c3e\u968f\u7a7a\u683c\u7b56\u7565. required Returns: Name Type Description Self Self RegexMatch \u81ea\u8eab. Source code in graia/ariadne/message/parser/twilight.py 175 176 177 178 179 180 181 182 183 184 185 def space ( self , space : SpacePolicy ) -> Self : \"\"\"\u8bbe\u7f6e\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u5c3e\u968f\u7a7a\u683c\u7b56\u7565. Args: space (SpacePolicy): \u5c3e\u968f\u7a7a\u683c\u7b56\u7565. Returns: Self: RegexMatch \u81ea\u8eab. \"\"\" self . space_policy = space return self","title":"space()"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.RegexResult","text":"Bases: MatchResult [ MessageChain , RegexMatch ] \u8868\u793a RegexMatch \u5339\u914d\u7ed3\u679c Source code in graia/ariadne/message/parser/twilight.py 395 396 397 398 class RegexResult ( MatchResult [ MessageChain , RegexMatch ]): \"\"\"\u8868\u793a RegexMatch \u5339\u914d\u7ed3\u679c\"\"\" ...","title":"RegexResult"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.ResultValue","text":"Bases: Decorator \u8fd4\u56de Match \u7ed3\u679c\u503c\u7684\u88c5\u9970\u5668 Source code in graia/ariadne/message/parser/twilight.py 773 774 775 776 777 778 779 780 781 782 783 784 class ResultValue ( Decorator ): \"\"\"\u8fd4\u56de Match \u7ed3\u679c\u503c\u7684\u88c5\u9970\u5668\"\"\" pre = True @staticmethod async def target ( i : DecoratorInterface ): sparkle : Sparkle = i . local_storage [ f \" { __name__ } :result\" ] res = sparkle . res . get ( i . name , None ) if generic_isinstance ( res , i . annotation ): return res raise ExecutionStop","title":"ResultValue"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.SpacePolicy","text":"Bases: str , enum . Enum \u6307\u793a RegexMatch \u7684\u5c3e\u968f\u7a7a\u683c\u7b56\u7565. Source code in graia/ariadne/message/parser/twilight.py 54 55 56 57 58 59 60 61 62 63 64 65 66 class SpacePolicy ( str , enum . Enum ): \"\"\"\u6307\u793a RegexMatch \u7684\u5c3e\u968f\u7a7a\u683c\u7b56\u7565.\"\"\" value : str NOSPACE = \"\" \"\"\"\u7981\u6b62\u5c3e\u968f\u7a7a\u683c\"\"\" PRESERVE = \"( )?\" \"\"\"\u9884\u7559\u5c3e\u968f\u7a7a\u683c\"\"\" FORCE = \"( )\" \"\"\"\u5f3a\u5236\u5c3e\u968f\u7a7a\u683c\"\"\"","title":"SpacePolicy"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.SpacePolicy.FORCE","text":"FORCE = '( )' \u5f3a\u5236\u5c3e\u968f\u7a7a\u683c","title":"FORCE"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.SpacePolicy.NOSPACE","text":"NOSPACE = '' \u7981\u6b62\u5c3e\u968f\u7a7a\u683c","title":"NOSPACE"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.SpacePolicy.PRESERVE","text":"PRESERVE = '( )?' \u9884\u7559\u5c3e\u968f\u7a7a\u683c","title":"PRESERVE"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.Sparkle","text":"Bases: Representation Source code in graia/ariadne/message/parser/twilight.py 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 class Sparkle ( Representation ): \"\"\"Sparkle: Twilight \u7684\u5339\u914d\u5bb9\u5668\"\"\" __slots__ = ( \"res\" ,) def __init__ ( self , match_result : Dict [ Union [ int , str ], MatchResult ]): self . res = match_result @overload def __getitem__ ( self , item : Union [ int , str ]) -> MatchResult : ... @overload def __getitem__ ( self , item : Type [ int ]) -> List [ MatchResult ]: ... @overload def __getitem__ ( self , item : Type [ str ]) -> Dict [ str , MatchResult ]: ... def __getitem__ ( self , item : Union [ int , str , Type [ int ], Type [ str ]]): if not isinstance ( item , type ): return self . get ( item ) if item is int : return [ v for k , v in self . res . items () if isinstance ( k , int )] elif item is str : return { k : v for k , v in self . res . items () if isinstance ( k , str )} def get ( self , item : Union [ int , str ]) -> MatchResult : return self . res [ item ] def __repr_args__ ( self ): return [( repr ( k ), v ) for k , v in self . res . items ()]","title":"Sparkle"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.Twilight","text":"Bases: Generic [ T_Sparkle ] , BaseDispatcher \u66ae\u5149 Source code in graia/ariadne/message/parser/twilight.py 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 class Twilight ( Generic [ T_Sparkle ], BaseDispatcher ): \"\"\"\u66ae\u5149\"\"\" def __init__ ( self , * root : Union [ Iterable [ Match ], Match ], map_param : Optional [ Dict [ str , bool ]] = None , ) -> None : \"\"\"\u672c\u9b54\u6cd5\u65b9\u6cd5\u7528\u4e8e\u521d\u59cb\u5316\u672c\u5b9e\u4f8b. Args: *root (Iterable[Match] | Match): \u5339\u914d\u89c4\u5219. map_param (Dict[str, bool], optional): \u5411 MessageChain.asMappingString \u4f20\u5165\u7684\u53c2\u6570. \"\"\" self . map_param = map_param or {} self . help_data : Optional [ _TwilightHelpArgs ] = None self . help_id : str = TwilightHelpManager . AUTO_ID self . help_brief : str = TwilightHelpManager . AUTO_ID self . matcher : TwilightMatcher = TwilightMatcher ( * root ) def __repr__ ( self ) -> str : return f \"<Twilight: { self . matcher } >\" def generate ( self , chain : MessageChain ) -> T_Sparkle : \"\"\"\u4ece\u6d88\u606f\u94fe\u751f\u6210 Sparkle \u5b9e\u4f8b. Args: chain (MessageChain): \u4f20\u5165\u7684\u6d88\u606f\u94fe. Returns: T_Sparkle: \u751f\u6210\u7684 Sparkle \u5bf9\u8c61. \"\"\" mapping_str , elem_mapping = chain . _to_mapping_str ( ** self . map_param ) token = elem_mapping_ctx . set ( elem_mapping ) arguments : List [ str ] = split ( mapping_str , keep_quote = True ) res = self . matcher . match ( arguments , elem_mapping ) elem_mapping_ctx . reset ( token ) return Sparkle ( res ) # type: ignore @classmethod def from_command ( # ANCHOR: Sparkle: From command cls , command : str , extra_args : Optional [ List [ Match ]] = None , ) -> \"Twilight\" : \"\"\"\u4ece shell \u5f0f\u547d\u4ee4\u751f\u6210 Twilight. Args: command (str): \u547d\u4ee4, \u4f7f\u7528 {param} \u6216 {0} \u7684\u5f62\u5f0f\u521b\u5efa\u53c2\u6570\u5360\u4f4d\u7b26. \u4f7f\u7528 [a|b] \u521b\u5efa\u9009\u62e9\u5339\u914d. \u4f7f\u7528 \u53cd\u659c\u6760 \u8f6c\u4e49. extra_args (List[Match], optional): \u53ef\u9009\u7684\u989d\u5916 Match \u5217\u8868. Returns: Twilight: \u751f\u6210\u7684 Twilight. \"\"\" extra_args = extra_args or [] match : List [ RegexMatch ] = [] for t_type , token_list in tokenize_command ( command ): if t_type is CommandToken . TEXT : match . append ( FullMatch ( * token_list ) . space ( SpacePolicy . FORCE )) elif t_type is CommandToken . CHOICE : match . append ( UnionMatch ( * token_list ) . space ( SpacePolicy . FORCE )) elif t_type is CommandToken . PARAM : match . append ( ParamMatch () . space ( SpacePolicy . FORCE ) . param ( token_list [ 0 ])) else : raise ValueError ( f \"unexpected token type: { t_type } \" ) if match : match [ - 1 ] . space_policy = SpacePolicy . NOSPACE return cls ( * match , * extra_args ) def help ( self , usage : str = \"\" , description : str = \"\" , epilog : str = \"\" , dest : bool = True , sep : str = \" -> \" , formatter_class : Type [ HelpFormatter ] = HelpFormatter , * , brief : Optional [ str ] = None , help_id : str = TwilightHelpManager . AUTO_ID , manager : Union [ str , TwilightHelpManager ] = \"global\" , ) -> Self : \"\"\"\u5229\u7528 Match \u4e2d\u7684\u4fe1\u606f\u751f\u6210\u5e2e\u52a9\u5b57\u7b26\u4e32. Args: usage (str, optional): \u4f7f\u7528\u65b9\u6cd5 (\u547d\u4ee4\u683c\u5f0f). description (str, optional): \u524d\u5bfc\u63cf\u8ff0. Defaults to \"\". epilog (str, optional): \u540e\u7f6e\u603b\u7ed3. Defaults to \"\". dest (bool, optional): \u662f\u5426\u663e\u793a\u5206\u6d3e\u4f4d\u7f6e. Defaults to True. sep (str, optional): \u5206\u6d3e\u4f4d\u7f6e\u4e4b\u95f4\u7684\u5206\u9694\u7b26. Defaults to \" -> \". formatter_class (Type[HelpFormatter], optional): \u5e2e\u52a9\u683c\u5f0f\u5316\u5668. Defaults to HelpFormatter. help_id (str, optional): \u5e2e\u52a9 id. \u9ed8\u8ba4\u4e3a\u81ea\u52a8\u751f\u6210 (\u63a8\u8350\u81ea\u884c\u6307\u5b9a). brief (str, optional): \u7b80\u8981\u4ecb\u7ecd, \u9ed8\u8ba4\u4e0e description \u76f8\u540c. manager (str, optional): \u5e2e\u52a9\u4fe1\u606f\u7ba1\u7406\u5668. \u9ed8\u8ba4 \"global\" (\u5168\u5c40\u7ba1\u7406\u5668). Returns: str: \u751f\u6210\u7684\u5e2e\u52a9\u5b57\u7b26\u4e32, \u88ab\u683c\u5f0f\u5316\u4e0e\u7f29\u8fdb\u8fc7\u4e86 \"\"\" self . help_data = { \"usage\" : usage , \"description\" : description , \"epilog\" : epilog , \"dest\" : dest , \"sep\" : sep , \"formatter_class\" : formatter_class , } self . help_id = help_id self . help_brief = brief or description help_mgr = TwilightHelpManager . get_help_mgr ( manager ) help_mgr . register ( self ) return self def get_help ( self , usage : str = \"\" , description : str = \"\" , epilog : str = \"\" , dest : bool = True , sep : str = \" -> \" , formatter_class : Type [ HelpFormatter ] = HelpFormatter , ) -> str : \"\"\"\u5229\u7528 Match \u4e2d\u7684\u4fe1\u606f\u751f\u6210\u5e2e\u52a9\u5b57\u7b26\u4e32. Args: usage (str, optional): \u4f7f\u7528\u65b9\u6cd5 (\u547d\u4ee4\u683c\u5f0f). description (str, optional): \u524d\u5bfc\u63cf\u8ff0. Defaults to \"\". epilog (str, optional): \u540e\u7f6e\u603b\u7ed3. Defaults to \"\". dest (bool, optional): \u662f\u5426\u663e\u793a\u5206\u6d3e\u4f4d\u7f6e. Defaults to True. sep (str, optional): \u5206\u6d3e\u4f4d\u7f6e\u5206\u9694\u7b26. Defaults to \" -> \". formatter_class (Type[HelpFormatter], optional): \u5e2e\u52a9\u683c\u5f0f\u5316\u5668. Defaults to HelpFormatter. Returns: str: \u751f\u6210\u7684\u5e2e\u52a9\u5b57\u7b26\u4e32, \u88ab\u683c\u5f0f\u5316\u4e0e\u7f29\u8fdb\u8fc7\u4e86 \"\"\" if self . help_data : return self . matcher . get_help ( ** self . help_data ) return self . matcher . get_help ( usage , description , epilog , dest , sep , formatter_class ) async def beforeExecution ( self , interface : DispatcherInterface ): \"\"\"\u68c0\u9a8c MessageChain \u5e76\u5c06 Sparkle \u5b58\u5165\u672c\u5730\u5b58\u50a8 Args: interface (DispatcherInterface): DispatcherInterface, \u5e94\u8be5\u80fd\u4ece\u4e2d\u63d0\u53d6 MessageChain Raises: ExecutionStop: \u5339\u914d\u4ee5\u4efb\u610f\u65b9\u5f0f\u5931\u8d25 \"\"\" local_storage = interface . local_storage chain : MessageChain = await interface . lookup_param ( \"message_chain\" , MessageChain , None ) with contextlib . suppress ( Exception ): local_storage [ f \" { __name__ } :result\" ] = self . generate ( chain ) local_storage [ f \" { __name__ } :twilight\" ] = self return raise ExecutionStop async def catch ( self , interface : DispatcherInterface ): local_storage = interface . local_storage sparkle : T_Sparkle = local_storage [ f \" { __name__ } :result\" ] if generic_issubclass ( Sparkle , interface . annotation ): return sparkle if generic_issubclass ( Twilight , interface . annotation ): return self if interface . name in sparkle . res : result = sparkle . get ( interface . name ) if generic_isinstance ( result . origin , interface . annotation ): return result . origin if any ( generic_issubclass ( res_cls , interface . annotation ) for res_cls in gen_subclass ( MatchResult ) ): return result if generic_isinstance ( result . result , interface . annotation ): return result . result","title":"Twilight"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.Twilight.__init__","text":"__init__ ( * root : Union [ Iterable [ Match ], Match ], map_param : Optional [ Dict [ str , bool ]] = None ) -> None \u672c\u9b54\u6cd5\u65b9\u6cd5\u7528\u4e8e\u521d\u59cb\u5316\u672c\u5b9e\u4f8b. Parameters: Name Type Description Default *root Iterable [ Match ] | Match \u5339\u914d\u89c4\u5219. () map_param Dict [ str , bool ] \u5411 MessageChain.asMappingString \u4f20\u5165\u7684\u53c2\u6570. None Source code in graia/ariadne/message/parser/twilight.py 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 def __init__ ( self , * root : Union [ Iterable [ Match ], Match ], map_param : Optional [ Dict [ str , bool ]] = None , ) -> None : \"\"\"\u672c\u9b54\u6cd5\u65b9\u6cd5\u7528\u4e8e\u521d\u59cb\u5316\u672c\u5b9e\u4f8b. Args: *root (Iterable[Match] | Match): \u5339\u914d\u89c4\u5219. map_param (Dict[str, bool], optional): \u5411 MessageChain.asMappingString \u4f20\u5165\u7684\u53c2\u6570. \"\"\" self . map_param = map_param or {} self . help_data : Optional [ _TwilightHelpArgs ] = None self . help_id : str = TwilightHelpManager . AUTO_ID self . help_brief : str = TwilightHelpManager . AUTO_ID self . matcher : TwilightMatcher = TwilightMatcher ( * root )","title":"__init__()"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.Twilight.beforeExecution","text":"beforeExecution ( interface : DispatcherInterface ) \u68c0\u9a8c MessageChain \u5e76\u5c06 Sparkle \u5b58\u5165\u672c\u5730\u5b58\u50a8 Parameters: Name Type Description Default interface DispatcherInterface DispatcherInterface, \u5e94\u8be5\u80fd\u4ece\u4e2d\u63d0\u53d6 MessageChain required Raises: Type Description ExecutionStop \u5339\u914d\u4ee5\u4efb\u610f\u65b9\u5f0f\u5931\u8d25 Source code in graia/ariadne/message/parser/twilight.py 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 async def beforeExecution ( self , interface : DispatcherInterface ): \"\"\"\u68c0\u9a8c MessageChain \u5e76\u5c06 Sparkle \u5b58\u5165\u672c\u5730\u5b58\u50a8 Args: interface (DispatcherInterface): DispatcherInterface, \u5e94\u8be5\u80fd\u4ece\u4e2d\u63d0\u53d6 MessageChain Raises: ExecutionStop: \u5339\u914d\u4ee5\u4efb\u610f\u65b9\u5f0f\u5931\u8d25 \"\"\" local_storage = interface . local_storage chain : MessageChain = await interface . lookup_param ( \"message_chain\" , MessageChain , None ) with contextlib . suppress ( Exception ): local_storage [ f \" { __name__ } :result\" ] = self . generate ( chain ) local_storage [ f \" { __name__ } :twilight\" ] = self return raise ExecutionStop","title":"beforeExecution()"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.Twilight.from_command","text":"from_command ( command : str , extra_args : Optional [ List [ Match ]] = None ) -> 'Twilight' \u4ece shell \u5f0f\u547d\u4ee4\u751f\u6210 Twilight. Parameters: Name Type Description Default command str \u547d\u4ee4, \u4f7f\u7528 {param} \u6216 {0} \u7684\u5f62\u5f0f\u521b\u5efa\u53c2\u6570\u5360\u4f4d\u7b26. \u4f7f\u7528 [a|b] \u521b\u5efa\u9009\u62e9\u5339\u914d. \u4f7f\u7528 \u53cd\u659c\u6760 \u8f6c\u4e49. required extra_args List [ Match ] \u53ef\u9009\u7684\u989d\u5916 Match \u5217\u8868. None Returns: Name Type Description Twilight 'Twilight' \u751f\u6210\u7684 Twilight. Source code in graia/ariadne/message/parser/twilight.py 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 @classmethod def from_command ( # ANCHOR: Sparkle: From command cls , command : str , extra_args : Optional [ List [ Match ]] = None , ) -> \"Twilight\" : \"\"\"\u4ece shell \u5f0f\u547d\u4ee4\u751f\u6210 Twilight. Args: command (str): \u547d\u4ee4, \u4f7f\u7528 {param} \u6216 {0} \u7684\u5f62\u5f0f\u521b\u5efa\u53c2\u6570\u5360\u4f4d\u7b26. \u4f7f\u7528 [a|b] \u521b\u5efa\u9009\u62e9\u5339\u914d. \u4f7f\u7528 \u53cd\u659c\u6760 \u8f6c\u4e49. extra_args (List[Match], optional): \u53ef\u9009\u7684\u989d\u5916 Match \u5217\u8868. Returns: Twilight: \u751f\u6210\u7684 Twilight. \"\"\" extra_args = extra_args or [] match : List [ RegexMatch ] = [] for t_type , token_list in tokenize_command ( command ): if t_type is CommandToken . TEXT : match . append ( FullMatch ( * token_list ) . space ( SpacePolicy . FORCE )) elif t_type is CommandToken . CHOICE : match . append ( UnionMatch ( * token_list ) . space ( SpacePolicy . FORCE )) elif t_type is CommandToken . PARAM : match . append ( ParamMatch () . space ( SpacePolicy . FORCE ) . param ( token_list [ 0 ])) else : raise ValueError ( f \"unexpected token type: { t_type } \" ) if match : match [ - 1 ] . space_policy = SpacePolicy . NOSPACE return cls ( * match , * extra_args )","title":"from_command()"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.Twilight.generate","text":"generate ( chain : MessageChain ) -> T_Sparkle \u4ece\u6d88\u606f\u94fe\u751f\u6210 Sparkle \u5b9e\u4f8b. Parameters: Name Type Description Default chain MessageChain \u4f20\u5165\u7684\u6d88\u606f\u94fe. required Returns: Name Type Description T_Sparkle T_Sparkle \u751f\u6210\u7684 Sparkle \u5bf9\u8c61. Source code in graia/ariadne/message/parser/twilight.py 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 def generate ( self , chain : MessageChain ) -> T_Sparkle : \"\"\"\u4ece\u6d88\u606f\u94fe\u751f\u6210 Sparkle \u5b9e\u4f8b. Args: chain (MessageChain): \u4f20\u5165\u7684\u6d88\u606f\u94fe. Returns: T_Sparkle: \u751f\u6210\u7684 Sparkle \u5bf9\u8c61. \"\"\" mapping_str , elem_mapping = chain . _to_mapping_str ( ** self . map_param ) token = elem_mapping_ctx . set ( elem_mapping ) arguments : List [ str ] = split ( mapping_str , keep_quote = True ) res = self . matcher . match ( arguments , elem_mapping ) elem_mapping_ctx . reset ( token ) return Sparkle ( res ) # type: ignore","title":"generate()"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.Twilight.get_help","text":"get_help ( usage : str = '' , description : str = '' , epilog : str = '' , dest : bool = True , sep : str = ' -> ' , formatter_class : Type [ HelpFormatter ] = HelpFormatter ) -> str \u5229\u7528 Match \u4e2d\u7684\u4fe1\u606f\u751f\u6210\u5e2e\u52a9\u5b57\u7b26\u4e32. Parameters: Name Type Description Default usage str \u4f7f\u7528\u65b9\u6cd5 (\u547d\u4ee4\u683c\u5f0f). '' description str \u524d\u5bfc\u63cf\u8ff0. Defaults to \"\". '' epilog str \u540e\u7f6e\u603b\u7ed3. Defaults to \"\". '' dest bool \u662f\u5426\u663e\u793a\u5206\u6d3e\u4f4d\u7f6e. Defaults to True. True sep str \u5206\u6d3e\u4f4d\u7f6e\u5206\u9694\u7b26. Defaults to \" -> \". ' -> ' formatter_class Type [ HelpFormatter ] \u5e2e\u52a9\u683c\u5f0f\u5316\u5668. Defaults to HelpFormatter. HelpFormatter Returns: Name Type Description str str \u751f\u6210\u7684\u5e2e\u52a9\u5b57\u7b26\u4e32, \u88ab\u683c\u5f0f\u5316\u4e0e\u7f29\u8fdb\u8fc7\u4e86 Source code in graia/ariadne/message/parser/twilight.py 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 def get_help ( self , usage : str = \"\" , description : str = \"\" , epilog : str = \"\" , dest : bool = True , sep : str = \" -> \" , formatter_class : Type [ HelpFormatter ] = HelpFormatter , ) -> str : \"\"\"\u5229\u7528 Match \u4e2d\u7684\u4fe1\u606f\u751f\u6210\u5e2e\u52a9\u5b57\u7b26\u4e32. Args: usage (str, optional): \u4f7f\u7528\u65b9\u6cd5 (\u547d\u4ee4\u683c\u5f0f). description (str, optional): \u524d\u5bfc\u63cf\u8ff0. Defaults to \"\". epilog (str, optional): \u540e\u7f6e\u603b\u7ed3. Defaults to \"\". dest (bool, optional): \u662f\u5426\u663e\u793a\u5206\u6d3e\u4f4d\u7f6e. Defaults to True. sep (str, optional): \u5206\u6d3e\u4f4d\u7f6e\u5206\u9694\u7b26. Defaults to \" -> \". formatter_class (Type[HelpFormatter], optional): \u5e2e\u52a9\u683c\u5f0f\u5316\u5668. Defaults to HelpFormatter. Returns: str: \u751f\u6210\u7684\u5e2e\u52a9\u5b57\u7b26\u4e32, \u88ab\u683c\u5f0f\u5316\u4e0e\u7f29\u8fdb\u8fc7\u4e86 \"\"\" if self . help_data : return self . matcher . get_help ( ** self . help_data ) return self . matcher . get_help ( usage , description , epilog , dest , sep , formatter_class )","title":"get_help()"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.Twilight.help","text":"help ( usage : str = '' , description : str = '' , epilog : str = '' , dest : bool = True , sep : str = ' -> ' , formatter_class : Type [ HelpFormatter ] = HelpFormatter , * , brief : Optional [ str ] = None , help_id : str = TwilightHelpManager . AUTO_ID , manager : Union [ str , TwilightHelpManager ] = 'global' ) -> Self \u5229\u7528 Match \u4e2d\u7684\u4fe1\u606f\u751f\u6210\u5e2e\u52a9\u5b57\u7b26\u4e32. Parameters: Name Type Description Default usage str \u4f7f\u7528\u65b9\u6cd5 (\u547d\u4ee4\u683c\u5f0f). '' description str \u524d\u5bfc\u63cf\u8ff0. Defaults to \"\". '' epilog str \u540e\u7f6e\u603b\u7ed3. Defaults to \"\". '' dest bool \u662f\u5426\u663e\u793a\u5206\u6d3e\u4f4d\u7f6e. Defaults to True. True sep str \u5206\u6d3e\u4f4d\u7f6e\u4e4b\u95f4\u7684\u5206\u9694\u7b26. Defaults to \" -> \". ' -> ' formatter_class Type [ HelpFormatter ] \u5e2e\u52a9\u683c\u5f0f\u5316\u5668. Defaults to HelpFormatter. HelpFormatter help_id str \u5e2e\u52a9 id. \u9ed8\u8ba4\u4e3a\u81ea\u52a8\u751f\u6210 (\u63a8\u8350\u81ea\u884c\u6307\u5b9a). TwilightHelpManager.AUTO_ID brief str \u7b80\u8981\u4ecb\u7ecd, \u9ed8\u8ba4\u4e0e description \u76f8\u540c. None manager str \u5e2e\u52a9\u4fe1\u606f\u7ba1\u7406\u5668. \u9ed8\u8ba4 \"global\" (\u5168\u5c40\u7ba1\u7406\u5668). 'global' Returns: Name Type Description str Self \u751f\u6210\u7684\u5e2e\u52a9\u5b57\u7b26\u4e32, \u88ab\u683c\u5f0f\u5316\u4e0e\u7f29\u8fdb\u8fc7\u4e86 Source code in graia/ariadne/message/parser/twilight.py 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 def help ( self , usage : str = \"\" , description : str = \"\" , epilog : str = \"\" , dest : bool = True , sep : str = \" -> \" , formatter_class : Type [ HelpFormatter ] = HelpFormatter , * , brief : Optional [ str ] = None , help_id : str = TwilightHelpManager . AUTO_ID , manager : Union [ str , TwilightHelpManager ] = \"global\" , ) -> Self : \"\"\"\u5229\u7528 Match \u4e2d\u7684\u4fe1\u606f\u751f\u6210\u5e2e\u52a9\u5b57\u7b26\u4e32. Args: usage (str, optional): \u4f7f\u7528\u65b9\u6cd5 (\u547d\u4ee4\u683c\u5f0f). description (str, optional): \u524d\u5bfc\u63cf\u8ff0. Defaults to \"\". epilog (str, optional): \u540e\u7f6e\u603b\u7ed3. Defaults to \"\". dest (bool, optional): \u662f\u5426\u663e\u793a\u5206\u6d3e\u4f4d\u7f6e. Defaults to True. sep (str, optional): \u5206\u6d3e\u4f4d\u7f6e\u4e4b\u95f4\u7684\u5206\u9694\u7b26. Defaults to \" -> \". formatter_class (Type[HelpFormatter], optional): \u5e2e\u52a9\u683c\u5f0f\u5316\u5668. Defaults to HelpFormatter. help_id (str, optional): \u5e2e\u52a9 id. \u9ed8\u8ba4\u4e3a\u81ea\u52a8\u751f\u6210 (\u63a8\u8350\u81ea\u884c\u6307\u5b9a). brief (str, optional): \u7b80\u8981\u4ecb\u7ecd, \u9ed8\u8ba4\u4e0e description \u76f8\u540c. manager (str, optional): \u5e2e\u52a9\u4fe1\u606f\u7ba1\u7406\u5668. \u9ed8\u8ba4 \"global\" (\u5168\u5c40\u7ba1\u7406\u5668). Returns: str: \u751f\u6210\u7684\u5e2e\u52a9\u5b57\u7b26\u4e32, \u88ab\u683c\u5f0f\u5316\u4e0e\u7f29\u8fdb\u8fc7\u4e86 \"\"\" self . help_data = { \"usage\" : usage , \"description\" : description , \"epilog\" : epilog , \"dest\" : dest , \"sep\" : sep , \"formatter_class\" : formatter_class , } self . help_id = help_id self . help_brief = brief or description help_mgr = TwilightHelpManager . get_help_mgr ( manager ) help_mgr . register ( self ) return self","title":"help()"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.TwilightMatcher","text":"Twilight \u5339\u914d\u5668 Source code in graia/ariadne/message/parser/twilight.pyclass TwilightMatcher : \"\"\"Twilight \u5339\u914d\u5668\"\"\" def __init__ ( self , * root : Union [ Iterable [ Match ], Match ]): self . origin_match_list : List [ Match ] = [] self . _parser = TwilightParser ( prog = \"\" , add_help = False ) self . _dest_map : Dict [ str , ArgumentMatch ] = {} self . _group_map : Dict [ int , RegexMatch ] = {} self . dispatch_ref : Dict [ Union [ int , str ], Match ] = {} self . match_ref : DefaultDict [ Type [ Match ], List [ Match ]] = DefaultDict ( list ) regex_str_list : List [ str ] = [] regex_group_cnt : int = 0 for i in root : if isinstance ( i , Match ): i = [ i ] self . origin_match_list . extend ( i ) for m in i : if isinstance ( m , RegexMatch ): self . match_ref [ RegexMatch ] . append ( m ) if m . dest : self . _group_map [ regex_group_cnt + 1 ] = m regex_str_list . append ( m . _regex_str ) regex_group_cnt += re . compile ( m . _regex_str ) . groups elif isinstance ( m , ArgumentMatch ): self . match_ref [ ArgumentMatch ] . append ( m ) if ( \"action\" in m . arg_data and \"type\" in m . arg_data and not self . _parser . accept_type ( m . arg_data [ \"action\" ]) ): del m . arg_data [ \"type\" ] action = self . _parser . add_argument ( * m . pattern , ** m . arg_data ) if m . dest : self . _dest_map [ action . dest ] = m if m . dest : if m . dest in self . dispatch_ref : raise NameError ( f \"duplicate dispatch name: { m . dest } \" ) self . dispatch_ref [ m . dest ] = m self . _regex_pattern : re . Pattern = re . compile ( \"\" . join ( regex_str_list )) def match ( self , arguments : List [ str ], elem_mapping : Dict [ str , Element ] ) -> Dict [ Union [ int , str ], MatchResult ]: \"\"\"\u5339\u914d\u53c2\u6570 Args: arguments (List[str]): \u53c2\u6570\u5217\u8868 elem_mapping (Dict[str, Element]): \u5143\u7d20\u6620\u5c04 Returns: Dict[Union[int, str], MatchResult]: \u5339\u914d\u7ed3\u679c \"\"\" result : Dict [ Union [ int , str ], MatchResult ] = {} if self . _dest_map : namespace , arguments = self . _parser . parse_known_args ( arguments ) nbsp_dict : Dict [ str , Any ] = namespace . __dict__ for k , v in self . _dest_map . items (): res = nbsp_dict . get ( k , Unmatched ) result [ v . dest ] = MatchResult ( res is not Unmatched , v , res ) if not ( total_match := self . _regex_pattern . fullmatch ( \" \" . join ( arguments ))): raise ValueError ( f \" { ' ' . join ( arguments ) } not matching { self . _regex_pattern . pattern } \" ) for index , match in self . _group_map . items (): group : Optional [ str ] = total_match . group ( index ) if group is None : res = None else : res = ( elem_mapping [ group [ 1 : - 1 ] . split ( \"_\" )[ 0 ]] if isinstance ( match , ElementMatch ) else MessageChain . _from_mapping_string ( group , elem_mapping ) ) if match . dest : if isinstance ( match , WildcardMatch ): result [ match . dest ] = MatchResult ( bool ( res ), match , res ) else : result [ match . dest ] = MatchResult ( group is not None , match , res ) return result def get_help ( self , usage : str = \"\" , description : str = \"\" , epilog : str = \"\" , dest : bool = True , sep : str = \" -> \" , formatter_class : Type [ HelpFormatter ] = HelpFormatter , ) -> str : \"\"\"\u5229\u7528 Match \u4e2d\u7684\u4fe1\u606f\u751f\u6210\u5e2e\u52a9\u5b57\u7b26\u4e32. Args: usage (str, optional): \u4f7f\u7528\u65b9\u6cd5 (\u547d\u4ee4\u683c\u5f0f). description (str, optional): \u524d\u5bfc\u63cf\u8ff0. Defaults to \"\". epilog (str, optional): \u540e\u7f6e\u603b\u7ed3. Defaults to \"\". dest (bool, optional): \u662f\u5426\u663e\u793a\u5206\u6d3e\u4f4d\u7f6e. Defaults to True. sep (str, optional): \u5206\u6d3e\u4f4d\u7f6e\u5206\u9694\u7b26. Defaults to \" -> \". formatter_class (Type[HelpFormatter], optional): \u5e2e\u52a9\u683c\u5f0f\u5316\u5668. Defaults to HelpFormatter. Returns: str: \u751f\u6210\u7684\u5e2e\u52a9\u5b57\u7b26\u4e32, \u88ab\u683c\u5f0f\u5316\u4e0e\u7f29\u8fdb\u8fc7\u4e86 \"\"\" formatter = formatter_class ( prog = \"\" ) if usage : formatter . add_usage ( None , self . _parser . _actions , [], prefix = usage + \" \" ) formatter . add_text ( description ) _ , optional , * _ = self . _parser . _action_groups if self . match_ref [ RegexMatch ]: formatter . start_section ( \"\u5339\u914d\u9879\" ) for match in self . match_ref [ RegexMatch ]: if match . _help : formatter . add_text ( f \"\"\" { f \" { match . dest }{ sep } \" if dest and match . dest else \"\" }{ match . _help } \"\"\" ) formatter . end_section () if self . match_ref [ ArgumentMatch ]: formatter . start_section ( \"\u53ef\u9009\u53c2\u6570\" ) formatter . add_arguments ( optional . _group_actions ) formatter . end_section () formatter . add_text ( epilog ) # determine help from format above return formatter . format_help () def __repr__ ( self ) -> str : return f \"<Matcher { list ( self . _group_map . values ()) + list ( self . _dest_map . values ()) !r} >\" # type: ignore def __str__ ( self ) -> str : return repr ( list ( self . _group_map . values ()) + list ( self . _dest_map . values ())) # type: ignore","title":"TwilightMatcher"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.TwilightMatcher.get_help","text":"get_help ( usage : str = '' , description : str = '' , epilog : str = '' , dest : bool = True , sep : str = ' -> ' , formatter_class : Type [ HelpFormatter ] = HelpFormatter ) -> str \u5229\u7528 Match \u4e2d\u7684\u4fe1\u606f\u751f\u6210\u5e2e\u52a9\u5b57\u7b26\u4e32. Parameters: Name Type Description Default usage str \u4f7f\u7528\u65b9\u6cd5 (\u547d\u4ee4\u683c\u5f0f). '' description str \u524d\u5bfc\u63cf\u8ff0. Defaults to \"\". '' epilog str \u540e\u7f6e\u603b\u7ed3. Defaults to \"\". '' dest bool \u662f\u5426\u663e\u793a\u5206\u6d3e\u4f4d\u7f6e. Defaults to True. True sep str \u5206\u6d3e\u4f4d\u7f6e\u5206\u9694\u7b26. Defaults to \" -> \". ' -> ' formatter_class Type [ HelpFormatter ] \u5e2e\u52a9\u683c\u5f0f\u5316\u5668. Defaults to HelpFormatter. HelpFormatter Returns: Name Type Description str str \u751f\u6210\u7684\u5e2e\u52a9\u5b57\u7b26\u4e32, \u88ab\u683c\u5f0f\u5316\u4e0e\u7f29\u8fdb\u8fc7\u4e86 Source code in graia/ariadne/message/parser/twilight.py 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 def get_help ( self , usage : str = \"\" , description : str = \"\" , epilog : str = \"\" , dest : bool = True , sep : str = \" -> \" , formatter_class : Type [ HelpFormatter ] = HelpFormatter , ) -> str : \"\"\"\u5229\u7528 Match \u4e2d\u7684\u4fe1\u606f\u751f\u6210\u5e2e\u52a9\u5b57\u7b26\u4e32. Args: usage (str, optional): \u4f7f\u7528\u65b9\u6cd5 (\u547d\u4ee4\u683c\u5f0f). description (str, optional): \u524d\u5bfc\u63cf\u8ff0. Defaults to \"\". epilog (str, optional): \u540e\u7f6e\u603b\u7ed3. Defaults to \"\". dest (bool, optional): \u662f\u5426\u663e\u793a\u5206\u6d3e\u4f4d\u7f6e. Defaults to True. sep (str, optional): \u5206\u6d3e\u4f4d\u7f6e\u5206\u9694\u7b26. Defaults to \" -> \". formatter_class (Type[HelpFormatter], optional): \u5e2e\u52a9\u683c\u5f0f\u5316\u5668. Defaults to HelpFormatter. Returns: str: \u751f\u6210\u7684\u5e2e\u52a9\u5b57\u7b26\u4e32, \u88ab\u683c\u5f0f\u5316\u4e0e\u7f29\u8fdb\u8fc7\u4e86 \"\"\" formatter = formatter_class ( prog = \"\" ) if usage : formatter . add_usage ( None , self . _parser . _actions , [], prefix = usage + \" \" ) formatter . add_text ( description ) _ , optional , * _ = self . _parser . _action_groups if self . match_ref [ RegexMatch ]: formatter . start_section ( \"\u5339\u914d\u9879\" ) for match in self . match_ref [ RegexMatch ]: if match . _help : formatter . add_text ( f \"\"\" { f \" { match . dest }{ sep } \" if dest and match . dest else \"\" }{ match . _help } \"\"\" ) formatter . end_section () if self . match_ref [ ArgumentMatch ]: formatter . start_section ( \"\u53ef\u9009\u53c2\u6570\" ) formatter . add_arguments ( optional . _group_actions ) formatter . end_section () formatter . add_text ( epilog ) # determine help from format above return formatter . format_help ()","title":"get_help()"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.TwilightMatcher.match","text":"match ( arguments : List [ str ], elem_mapping : Dict [ str , Element ]) -> Dict [ Union [ int , str ], MatchResult ] \u5339\u914d\u53c2\u6570 Parameters: Name Type Description Default arguments List [ str ] \u53c2\u6570\u5217\u8868 required elem_mapping Dict [ str , Element ] \u5143\u7d20\u6620\u5c04 required Returns: Type Description Dict [ Union [ int , str ], MatchResult ] Dict[Union[int, str], MatchResult]: \u5339\u914d\u7ed3\u679c Source code in graia/ariadne/message/parser/twilight.py 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 def match ( self , arguments : List [ str ], elem_mapping : Dict [ str , Element ] ) -> Dict [ Union [ int , str ], MatchResult ]: \"\"\"\u5339\u914d\u53c2\u6570 Args: arguments (List[str]): \u53c2\u6570\u5217\u8868 elem_mapping (Dict[str, Element]): \u5143\u7d20\u6620\u5c04 Returns: Dict[Union[int, str], MatchResult]: \u5339\u914d\u7ed3\u679c \"\"\" result : Dict [ Union [ int , str ], MatchResult ] = {} if self . _dest_map : namespace , arguments = self . _parser . parse_known_args ( arguments ) nbsp_dict : Dict [ str , Any ] = namespace . __dict__ for k , v in self . _dest_map . items (): res = nbsp_dict . get ( k , Unmatched ) result [ v . dest ] = MatchResult ( res is not Unmatched , v , res ) if not ( total_match := self . _regex_pattern . fullmatch ( \" \" . join ( arguments ))): raise ValueError ( f \" { ' ' . join ( arguments ) } not matching { self . _regex_pattern . pattern } \" ) for index , match in self . _group_map . items (): group : Optional [ str ] = total_match . group ( index ) if group is None : res = None else : res = ( elem_mapping [ group [ 1 : - 1 ] . split ( \"_\" )[ 0 ]] if isinstance ( match , ElementMatch ) else MessageChain . _from_mapping_string ( group , elem_mapping ) ) if match . dest : if isinstance ( match , WildcardMatch ): result [ match . dest ] = MatchResult ( bool ( res ), match , res ) else : result [ match . dest ] = MatchResult ( group is not None , match , res ) return result","title":"match()"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.UnionMatch","text":"Bases: RegexMatch \u591a\u91cd\u5339\u914d Source code in graia/ariadne/message/parser/twilight.py 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 class UnionMatch ( RegexMatch ): \"\"\"\u591a\u91cd\u5339\u914d\"\"\" pattern : List [ str ] \"\"\"\u5339\u914d\u7684\u9009\u62e9\u9879\"\"\" def __init__ ( self , * pattern : Union [ str , Iterable [ str ]], optional : bool = False , ) -> None : \"\"\"\u521d\u59cb\u5316 UnionMatch \u5bf9\u8c61. Args: *pattern (Union[str, Iterable[str]]): \u5339\u914d\u7684\u9009\u62e9\u9879. optional (bool, optional): \u5339\u914d\u662f\u5426\u53ef\u9009. Defaults to False. \"\"\" super () . __init__ ( \"\" , optional ) self . pattern : List [ str ] = [] for p in pattern : if isinstance ( p , str ): self . pattern . append ( p ) else : self . pattern . extend ( p ) self . optional = optional self . help ( f \"\u5728 { self . pattern } \u4e2d\u9009\u62e9\u4e00\u9879\" ) @property def _src ( self ) -> str : return f \" { '|' . join ( re . escape ( i ) for i in self . pattern ) } \"","title":"UnionMatch"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.UnionMatch.__init__","text":"__init__ ( * pattern : Union [ str , Iterable [ str ]], optional : bool = False ) -> None \u521d\u59cb\u5316 UnionMatch \u5bf9\u8c61. Parameters: Name Type Description Default *pattern Union [ str , Iterable [ str ]] \u5339\u914d\u7684\u9009\u62e9\u9879. () optional bool \u5339\u914d\u662f\u5426\u53ef\u9009. Defaults to False. False Source code in graia/ariadne/message/parser/twilight.py 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 def __init__ ( self , * pattern : Union [ str , Iterable [ str ]], optional : bool = False , ) -> None : \"\"\"\u521d\u59cb\u5316 UnionMatch \u5bf9\u8c61. Args: *pattern (Union[str, Iterable[str]]): \u5339\u914d\u7684\u9009\u62e9\u9879. optional (bool, optional): \u5339\u914d\u662f\u5426\u53ef\u9009. Defaults to False. \"\"\" super () . __init__ ( \"\" , optional ) self . pattern : List [ str ] = [] for p in pattern : if isinstance ( p , str ): self . pattern . append ( p ) else : self . pattern . extend ( p ) self . optional = optional self . help ( f \"\u5728 { self . pattern } \u4e2d\u9009\u62e9\u4e00\u9879\" )","title":"__init__()"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.WildcardMatch","text":"Bases: RegexMatch \u6cdb\u5339\u914d Source code in graia/ariadne/message/parser/twilight.py 294 295 296 297 298 299 300 301 302 303 304 class WildcardMatch ( RegexMatch ): \"\"\"\u6cdb\u5339\u914d\"\"\" def __init__ ( self , greed : bool = True , optional : bool = False ) -> None : \"\"\"\u521d\u59cb\u5316 WildcardMatch \u5bf9\u8c61. Args: greed (bool, optional): \u662f\u5426\u8d2a\u5a6a\u5339\u914d. Defaults to True. optional (bool, optional): \u5339\u914d\u662f\u5426\u53ef\u9009. Defaults to False. \"\"\" super () . __init__ ( f \".* { '' if greed else '?' } \" , optional )","title":"WildcardMatch"},{"location":"refs/graia/ariadne/message/parser/twilight/#graia.ariadne.message.parser.twilight.WildcardMatch.__init__","text":"__init__ ( greed : bool = True , optional : bool = False ) -> None \u521d\u59cb\u5316 WildcardMatch \u5bf9\u8c61. Parameters: Name Type Description Default greed bool \u662f\u5426\u8d2a\u5a6a\u5339\u914d. Defaults to True. True optional bool \u5339\u914d\u662f\u5426\u53ef\u9009. Defaults to False. False Source code in graia/ariadne/message/parser/twilight.py 297 298 299 300 301 302 303 304 def __init__ ( self , greed : bool = True , optional : bool = False ) -> None : \"\"\"\u521d\u59cb\u5316 WildcardMatch \u5bf9\u8c61. Args: greed (bool, optional): \u662f\u5426\u8d2a\u5a6a\u5339\u914d. Defaults to True. optional (bool, optional): \u5339\u914d\u662f\u5426\u53ef\u9009. Defaults to False. \"\"\" super () . __init__ ( f \".* { '' if greed else '?' } \" , optional )","title":"__init__()"},{"location":"refs/graia/ariadne/message/parser/util/","text":"\u6d88\u606f\u94fe\u5904\u7406\u5668\u7528\u5230\u7684\u5de5\u5177\u51fd\u6570, \u7c7b CommandToken \ud83d\udd17 Bases: enum . Enum Command \u7684 Token. Source code in graia/ariadne/message/parser/util.py 75 76 77 78 79 80 81 class CommandToken ( enum . Enum ): \"\"\"Command \u7684 Token.\"\"\" TEXT = \"TEXT\" CHOICE = \"CHOICE\" PARAM = \"PARAM\" ANNOTATED = \"ANNOTATED\" ElementType \ud83d\udd17 \u7528\u4e8e\u6807\u8bb0\u7c7b\u578b\u4e3a\u6d88\u606f\u94fe\u5143\u7d20, \u5728 ArgumentMatch \u4e0a\u4f7f\u7528 Source code in graia/ariadne/message/parser/util.py 252 253 254 255 256 257 258 259 260 261 class ElementType : \"\"\"\u7528\u4e8e\u6807\u8bb0\u7c7b\u578b\u4e3a\u6d88\u606f\u94fe\u5143\u7d20, \u5728 ArgumentMatch \u4e0a\u4f7f\u7528\"\"\" def __init__ ( self , pattern : Type [ Element_T ]): self . regex = re . compile ( f \" \\x02 ( \\\\ d+)_ { pattern . __fields__ [ 'type' ] . default } \\x03 \" ) def __call__ ( self , string : str ) -> Element : if not self . regex . fullmatch ( string ): raise ValueError ( f \" { string } not matching { self . regex . pattern } \" ) return MessageChain . _from_mapping_string ( string , elem_mapping_ctx . get ())[ 0 ] MessageChainType \ud83d\udd17 \u7528\u4e8e\u6807\u8bb0\u7c7b\u578b\u4e3a\u6d88\u606f\u94fe, \u5728 ArgumentMatch \u4e0a\u4f7f\u7528 Source code in graia/ariadne/message/parser/util.py 244 245 246 247 248 249 class MessageChainType : \"\"\"\u7528\u4e8e\u6807\u8bb0\u7c7b\u578b\u4e3a\u6d88\u606f\u94fe, \u5728 ArgumentMatch \u4e0a\u4f7f\u7528\"\"\" @staticmethod def __call__ ( string : str ) -> MessageChain : return MessageChain . _from_mapping_string ( string , elem_mapping_ctx . get ()) TwilightHelpManager \ud83d\udd17 Source code in graia/ariadne/message/parser/util.py 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 class TwilightHelpManager : AUTO_ID : Final [ str ] = \"&auto_id\" + hex ( id ( \"&auto_id\" )) _manager_ref : ClassVar [ Dict [ str , \"TwilightHelpManager\" ]] = {} name : str display_name : Optional [ str ] help_map : Dict [ str , \"Twilight\" ] def __init__ ( self , name : str , display_name : Optional [ str ] = AUTO_ID ): self . name : str = name self . help_map : Dict [ str , \"Twilight\" ] = {} if display_name == self . AUTO_ID : self . display_name = None if name . startswith (( \"global\" , \"local\" , \"_\" )) else name else : self . display_name = display_name if name in TwilightHelpManager . _manager_ref : global_ref = TwilightHelpManager . _manager_ref [ name ] global_ref . display_name = global_ref . display_name or display_name self . help_map = global_ref . help_map else : TwilightHelpManager . _manager_ref [ name ] = self def register ( self , twilight : \"Twilight\" ) -> None : if twilight . help_id == self . AUTO_ID : from .twilight import ElementMatch , ParamMatch , RegexMatch , UnionMatch extracted_ids : List [ str ] = [] for match in twilight . matcher . origin_match_list : if isinstance ( match , UnionMatch ): extracted_ids . extend ( match . pattern ) elif isinstance ( match , ElementMatch ): extracted_ids . append ( match . type . __name__ ) elif isinstance ( match , RegexMatch ) and not isinstance ( match , ParamMatch ): extracted_ids . append ( match . pattern ) if not extracted_ids : raise ValueError ( f \"Unable to extract help_id from { twilight } \" ) help_id = extracted_ids [ 0 ] else : help_id = twilight . help_id if help_id in self . help_map and self . help_map [ help_id ] is not twilight : raise ValueError ( f \"Help Manager { self . name } 's help id { help_id } has been registered\" , self . help_map [ help_id ] ) self . help_map [ help_id ] = twilight @classmethod def get_help_mgr ( cls , mgr : Union [ \"TwilightHelpManager\" , str ]) -> \"TwilightHelpManager\" : return TwilightHelpManager ( mgr ) if isinstance ( mgr , str ) else mgr @overload def get_help ( self , description : str = \"\" , epilog : str = \"\" , * , prefix_src : Literal [ \"brief\" , \"usage\" , \"description\" ] = \"brief\" , fmt_cls : Type [ argparse . HelpFormatter ] = argparse . HelpFormatter , ) -> str : ... @overload def get_help ( self , description : str = \"\" , epilog : str = \"\" , * , prefix_src : Literal [ \"brief\" , \"usage\" , \"description\" ] = \"brief\" , fmt_func : Callable [[ str ], T ], fmt_cls : Type [ argparse . HelpFormatter ] = argparse . HelpFormatter , ) -> T : ... def get_help ( self , description : str = \"\" , epilog : str = \"\" , * , prefix_src : Literal [ \"brief\" , \"usage\" , \"description\" ] = \"brief\" , fmt_func : Optional [ Callable [[ str ], T ]] = None , fmt_cls : Type [ argparse . HelpFormatter ] = argparse . HelpFormatter , ) -> Union [ T , str ]: \"\"\"\u83b7\u53d6\u672c\u7ba1\u7406\u5668\u603b\u7684\u5e2e\u52a9\u4fe1\u606f Args: fmt_func (Optional[Callable[[str], T]]): \u5982\u679c\u6307\u5b9a, \u5219\u4f7f\u7528\u8be5\u51fd\u6570\u6765\u8f6c\u6362\u5e2e\u52a9\u4fe1\u606f\u683c\u5f0f fmt_cls (Type[argparse.HelpFormatter], optional): \u5982\u679c\u6307\u5b9a, \u5219\u4f7f\u7528\u8be5\u7c7b\u6765\u683c\u5f0f\u5316\u5e2e\u52a9\u4fe1\u606f. \\ \u9ed8\u8ba4\u4e3a argparse.HelpFormatter \"\"\" formatter = fmt_cls ( \"\" ) formatter . add_usage ( self . display_name or \"\" , [], [], \"\" ) formatter . add_text ( description ) if self . help_map : formatter . start_section ( f \"\u5171\u6709 { len ( self . help_map ) } \u4e2a\u5b50\u5339\u914d\" ) for help_id , twilight in self . help_map . items (): if twilight . help_data is not None : prefixes : Dict [ str , str ] = { \"brief\" : twilight . help_brief , \"usage\" : twilight . help_data [ \"usage\" ], \"description\" : twilight . help_data [ \"description\" ], } formatter . add_text ( f \" { help_id } - { prefixes [ prefix_src ] } \" ) else : formatter . add_text ( f \" { help_id } \" ) formatter . end_section () formatter . add_text ( epilog ) help_string : str = formatter . format_help () return fmt_func ( help_string ) if fmt_func else help_string get_help \ud83d\udd17 get_help ( description : str = '' , epilog : str = '' , * , prefix_src : Literal [ 'brief' , 'usage' , 'description' ] = 'brief' , fmt_func : Optional [ Callable [[ str ], T ]] = None , fmt_cls : Type [ argparse . HelpFormatter ] = argparse . HelpFormatter ) -> Union [ T , str ] \u83b7\u53d6\u672c\u7ba1\u7406\u5668\u603b\u7684\u5e2e\u52a9\u4fe1\u606f Parameters: Name Type Description Default fmt_func Optional [ Callable [[ str ], T ]] \u5982\u679c\u6307\u5b9a, \u5219\u4f7f\u7528\u8be5\u51fd\u6570\u6765\u8f6c\u6362\u5e2e\u52a9\u4fe1\u606f\u683c\u5f0f None fmt_cls Type [ argparse . HelpFormatter ] \u5982\u679c\u6307\u5b9a, \u5219\u4f7f\u7528\u8be5\u7c7b\u6765\u683c\u5f0f\u5316\u5e2e\u52a9\u4fe1\u606f. \u9ed8\u8ba4\u4e3a argparse.HelpFormatter argparse.HelpFormatter Source code in graia/ariadne/message/parser/util.py 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 def get_help ( self , description : str = \"\" , epilog : str = \"\" , * , prefix_src : Literal [ \"brief\" , \"usage\" , \"description\" ] = \"brief\" , fmt_func : Optional [ Callable [[ str ], T ]] = None , fmt_cls : Type [ argparse . HelpFormatter ] = argparse . HelpFormatter , ) -> Union [ T , str ]: \"\"\"\u83b7\u53d6\u672c\u7ba1\u7406\u5668\u603b\u7684\u5e2e\u52a9\u4fe1\u606f Args: fmt_func (Optional[Callable[[str], T]]): \u5982\u679c\u6307\u5b9a, \u5219\u4f7f\u7528\u8be5\u51fd\u6570\u6765\u8f6c\u6362\u5e2e\u52a9\u4fe1\u606f\u683c\u5f0f fmt_cls (Type[argparse.HelpFormatter], optional): \u5982\u679c\u6307\u5b9a, \u5219\u4f7f\u7528\u8be5\u7c7b\u6765\u683c\u5f0f\u5316\u5e2e\u52a9\u4fe1\u606f. \\ \u9ed8\u8ba4\u4e3a argparse.HelpFormatter \"\"\" formatter = fmt_cls ( \"\" ) formatter . add_usage ( self . display_name or \"\" , [], [], \"\" ) formatter . add_text ( description ) if self . help_map : formatter . start_section ( f \"\u5171\u6709 { len ( self . help_map ) } \u4e2a\u5b50\u5339\u914d\" ) for help_id , twilight in self . help_map . items (): if twilight . help_data is not None : prefixes : Dict [ str , str ] = { \"brief\" : twilight . help_brief , \"usage\" : twilight . help_data [ \"usage\" ], \"description\" : twilight . help_data [ \"description\" ], } formatter . add_text ( f \" { help_id } - { prefixes [ prefix_src ] } \" ) else : formatter . add_text ( f \" { help_id } \" ) formatter . end_section () formatter . add_text ( epilog ) help_string : str = formatter . format_help () return fmt_func ( help_string ) if fmt_func else help_string TwilightParser \ud83d\udd17 Bases: argparse . ArgumentParser \u9002\u4e8e Twilight \u4f7f\u7528\u7684 argparse.ArgumentParser \u5b50\u7c7b \u79fb\u9664\u4e86\u62a5\u9519\u65f6\u81ea\u52a8\u9000\u51fa\u89e3\u91ca\u5668\u7684\u884c\u4e3a Source code in graia/ariadne/message/parser/util.py 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 class TwilightParser ( argparse . ArgumentParser ): \"\"\"\u9002\u4e8e Twilight \u4f7f\u7528\u7684 argparse.ArgumentParser \u5b50\u7c7b \u79fb\u9664\u4e86\u62a5\u9519\u65f6\u81ea\u52a8\u9000\u51fa\u89e3\u91ca\u5668\u7684\u884c\u4e3a \"\"\" def error ( self , message ) -> NoReturn : raise ValueError ( message ) def accept_type ( self , action : Union [ str , type ]) -> bool : \"\"\"\u68c0\u67e5\u4e00\u4e2a action \u662f\u5426\u63a5\u53d7 type \u53c2\u6570 Args: action (Union[str, type]): \u68c0\u67e5\u7684 action Returns: bool: \u662f\u5426\u63a5\u53d7 type \u53c2\u6570 \"\"\" if action is ... : action = \"store\" if isinstance ( action , str ): action_cls : Type [ argparse . Action ] = self . _registry_get ( \"action\" , action , action ) elif isinstance ( action , type ) and issubclass ( action , argparse . Action ): action_cls = action else : return False action_init_sig = inspect . signature ( action_cls . __init__ ) if \"type\" not in action_init_sig . parameters : return False return True accept_type \ud83d\udd17 accept_type ( action : Union [ str , type ]) -> bool \u68c0\u67e5\u4e00\u4e2a action \u662f\u5426\u63a5\u53d7 type \u53c2\u6570 Parameters: Name Type Description Default action Union [ str , type ] \u68c0\u67e5\u7684 action required Returns: Name Type Description bool bool \u662f\u5426\u63a5\u53d7 type \u53c2\u6570 Source code in graia/ariadne/message/parser/util.py 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 def accept_type ( self , action : Union [ str , type ]) -> bool : \"\"\"\u68c0\u67e5\u4e00\u4e2a action \u662f\u5426\u63a5\u53d7 type \u53c2\u6570 Args: action (Union[str, type]): \u68c0\u67e5\u7684 action Returns: bool: \u662f\u5426\u63a5\u53d7 type \u53c2\u6570 \"\"\" if action is ... : action = \"store\" if isinstance ( action , str ): action_cls : Type [ argparse . Action ] = self . _registry_get ( \"action\" , action , action ) elif isinstance ( action , type ) and issubclass ( action , argparse . Action ): action_cls = action else : return False action_init_sig = inspect . signature ( action_cls . __init__ ) if \"type\" not in action_init_sig . parameters : return False return True escape \ud83d\udd17 escape ( string : str ) -> str \u8f6c\u4e49\u5b57\u7b26\u4e32 Parameters: Name Type Description Default string str \u8981\u8f6c\u4e49\u7684\u5b57\u7b26\u4e32 required Returns: Name Type Description str str \u8f6c\u4e49\u540e\u7684\u5b57\u7b26\u4e32 Source code in graia/ariadne/message/parser/util.py 46 47 48 49 50 51 52 53 54 55 56 57 58 def escape ( string : str ) -> str : \"\"\"\u8f6c\u4e49\u5b57\u7b26\u4e32 Args: string (str): \u8981\u8f6c\u4e49\u7684\u5b57\u7b26\u4e32 Returns: str: \u8f6c\u4e49\u540e\u7684\u5b57\u7b26\u4e32 \"\"\" for k , v in ESCAPE . items (): string = string . replace ( \" \\\\ \" + k , v ) string = string . replace ( \" \\\\ \" , \"\" ) return string gen_flags_repr \ud83d\udd17 gen_flags_repr ( flags : re . RegexFlag ) -> str \u901a\u8fc7 RegexFlag \u751f\u6210\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32 Parameters: Name Type Description Default flags re . RegexFlag \u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u6807\u8bb0 required Returns: Name Type Description str str \u5bf9\u5e94\u7684\u6807\u8bb0\u5b57\u7b26\u4e32 Source code in graia/ariadne/message/parser/util.py 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 def gen_flags_repr ( flags : re . RegexFlag ) -> str : \"\"\"\u901a\u8fc7 RegexFlag \u751f\u6210\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32 Args: flags (re.RegexFlag): \u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u6807\u8bb0 Returns: str: \u5bf9\u5e94\u7684\u6807\u8bb0\u5b57\u7b26\u4e32 \"\"\" flags_list : List [ str ] = [] if re . ASCII in flags : flags_list . append ( \"a\" ) if re . IGNORECASE in flags : flags_list . append ( \"i\" ) if re . LOCALE in flags : flags_list . append ( \"L\" ) if re . MULTILINE in flags : flags_list . append ( \"m\" ) if re . DOTALL in flags : flags_list . append ( \"s\" ) if re . UNICODE in flags : flags_list . append ( \"u\" ) if re . VERBOSE in flags : flags_list . append ( \"x\" ) return \"\" . join ( flags_list ) split \ud83d\udd17 split ( string : str , keep_quote : bool = False ) -> List [ str ] \u5c0a\u91cd\u5f15\u53f7\u4e0e\u8f6c\u4e49\u7684\u5b57\u7b26\u4e32\u5207\u5206 Parameters: Name Type Description Default string str \u8981\u5207\u5272\u7684\u5b57\u7b26\u4e32 required keep_quote bool \u662f\u5426\u4fdd\u7559\u5f15\u53f7, \u9ed8\u8ba4 False. False Returns: Type Description List [ str ] List[str]: \u5207\u5272\u540e\u7684\u5b57\u7b26\u4e32, \u53ef\u80fd\u542b\u6709\u7a7a\u683c Source code in graia/ariadne/message/parser/util.py 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 def split ( string : str , keep_quote : bool = False ) -> List [ str ]: \"\"\"\u5c0a\u91cd\u5f15\u53f7\u4e0e\u8f6c\u4e49\u7684\u5b57\u7b26\u4e32\u5207\u5206 Args: string (str): \u8981\u5207\u5272\u7684\u5b57\u7b26\u4e32 keep_quote (bool): \u662f\u5426\u4fdd\u7559\u5f15\u53f7, \u9ed8\u8ba4 False. Returns: List[str]: \u5207\u5272\u540e\u7684\u5b57\u7b26\u4e32, \u53ef\u80fd\u542b\u6709\u7a7a\u683c \"\"\" result : List [ str ] = [] quote = \"\" cache : List [ str ] = [] for index , char in enumerate ( string ): if char in { \"'\" , '\"' }: if not quote : quote = char elif char == quote and index and string [ index - 1 ] != \" \\\\ \" : # is current quote, not transfigured quote = \"\" else : cache . append ( char ) continue if keep_quote : cache . append ( char ) elif not quote and char == \" \" : result . append ( \"\" . join ( cache )) cache = [] elif char != \" \\\\ \" : cache . append ( char ) if cache : result . append ( \"\" . join ( cache )) return result tokenize_command \ud83d\udd17 tokenize_command ( string : str ) -> List [ CommandTokenTuple ] \u5c06\u5b57\u7b26\u4e32\u8f6c\u4e49\u5316, \u5e76\u5904\u7406\u4e3a Text, Choice, Param, AnnotatedParam \u56db\u79cd token Parameters: Name Type Description Default string str \u8981\u5904\u7406\u7684\u5b57\u7b26\u4e32 required Returns: Type Description List [ CommandTokenTuple ] List[Tuple[CommandToken, List[int, str]]]: \u5904\u7406\u540e\u7684 Token Source code in graia/ariadne/message/parser/util.py 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 def tokenize_command ( string : str ) -> List [ CommandTokenTuple ]: \"\"\"\u5c06\u5b57\u7b26\u4e32\u8f6c\u4e49\u5316, \u5e76\u5904\u7406\u4e3a Text, Choice, Param, AnnotatedParam \u56db\u79cd token Args: string (str): \u8981\u5904\u7406\u7684\u5b57\u7b26\u4e32 Returns: List[Tuple[CommandToken, List[int, str]]]: \u5904\u7406\u540e\u7684 Token \"\"\" string = escape ( string ) paren : str = \"\" char_stk : List [ str ] = [] token : List [ CommandTokenTuple ] = [] for index , char in enumerate ( string ): if char in L_PAREN + R_PAREN : if char in L_PAREN : if paren : raise ValueError ( f \"\"\"Duplicated parenthesis character \" { char } \" @ { index } !\"\"\" \"\"\"Are you sure you've escaped with \"\\\\\"?\"\"\" ) paren = char elif char in R_PAREN : if paren == \"[\" : # CHOICE token . append (( CommandToken . CHOICE , list ( map ( unescape , \"\" . join ( char_stk ) . split ( \"|\" ))))) elif paren == \"{\" : # PARAM piece = \"\" . join ( char_stk ) match = re . fullmatch ( r \"(?P<wildcard>\\.\\.\\.)?\" r \"(?P<name>[^:=|]+)\" r \"(?P<annotation>:[^=]+)?\" r \"(?P<default>=.+)?\" , piece , ) if match and any ( s in piece for s in \".:=\" ): token . append ( # type: List[str] ( CommandToken . ANNOTATED , list ( map ( lambda x : unescape ( x ) . strip () . lstrip ( \":=\" ) . strip () if x else \"\" , match . groups (), ) ), ) ) else : token . append ( ( CommandToken . PARAM , [ int ( i ) if re . match ( r \"\\d+\" , i ) else unescape ( i ) for i in \"\" . join ( char_stk ) . split ( \"|\" ) ], ) ) else : raise ValueError ( f \"No matching parenthesis: { paren } @ { index } \" ) char_stk . clear () paren = \"\" char_stk . clear () elif char == \" \" and not paren : if char_stk : token . append (( CommandToken . TEXT , [ \"\" . join ( char_stk )])) char_stk . clear () else : char_stk . append ( char ) if paren : raise ValueError ( f \"Unclosed parenthesis: { paren } \" ) if char_stk : token . append (( CommandToken . TEXT , [ \"\" . join ( char_stk )])) char_stk . clear () return token transform_regex \ud83d\udd17 transform_regex ( flag : re . RegexFlag , regex_pattern : str ) -> str \u751f\u6210\u5d4c\u5957\u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\u6765\u8fbe\u5230\u81f3\u5c11\u6700\u5916\u5c42\u542b\u6709\u4e00\u4e2a\u6355\u83b7\u7ec4\u7684\u6548\u679c Parameters: Name Type Description Default flag re . RegexFlag \u6b63\u5219\u8868\u8fbe\u5f0f\u6807\u8bb0 required regex_pattern str \u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32 required Returns: Name Type Description str str \u8f6c\u6362\u540e\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32 Source code in graia/ariadne/message/parser/util.py 231 232 233 234 235 236 237 238 239 240 241 def transform_regex ( flag : re . RegexFlag , regex_pattern : str ) -> str : \"\"\"\u751f\u6210\u5d4c\u5957\u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\u6765\u8fbe\u5230\u81f3\u5c11\u6700\u5916\u5c42\u542b\u6709\u4e00\u4e2a\u6355\u83b7\u7ec4\u7684\u6548\u679c Args: flag (re.RegexFlag): \u6b63\u5219\u8868\u8fbe\u5f0f\u6807\u8bb0 regex_pattern (str): \u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32 Returns: str: \u8f6c\u6362\u540e\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32 \"\"\" return f \"(? { gen_flags_repr ( flag ) } :( { regex_pattern } ))\" if flag else f \"( { regex_pattern } )\" unescape \ud83d\udd17 unescape ( string : str ) -> str \u9006\u8f6c\u4e49\u5b57\u7b26\u4e32, \u81ea\u52a8\u53bb\u9664\u7a7a\u767d\u7b26 Parameters: Name Type Description Default string str \u8981\u9006\u8f6c\u4e49\u7684\u5b57\u7b26\u4e32 required Returns: Name Type Description str str \u9006\u8f6c\u4e49\u540e\u7684\u5b57\u7b26\u4e32 Source code in graia/ariadne/message/parser/util.py 61 62 63 64 65 66 67 68 69 70 71 72 def unescape ( string : str ) -> str : \"\"\"\u9006\u8f6c\u4e49\u5b57\u7b26\u4e32, \u81ea\u52a8\u53bb\u9664\u7a7a\u767d\u7b26 Args: string (str): \u8981\u9006\u8f6c\u4e49\u7684\u5b57\u7b26\u4e32 Returns: str: \u9006\u8f6c\u4e49\u540e\u7684\u5b57\u7b26\u4e32 \"\"\" for k , v in R_ESCAPE . items (): string = string . replace ( k , v ) return string . strip ()","title":"util"},{"location":"refs/graia/ariadne/message/parser/util/#graia.ariadne.message.parser.util.CommandToken","text":"Bases: enum . Enum Command \u7684 Token. Source code in graia/ariadne/message/parser/util.py 75 76 77 78 79 80 81 class CommandToken ( enum . Enum ): \"\"\"Command \u7684 Token.\"\"\" TEXT = \"TEXT\" CHOICE = \"CHOICE\" PARAM = \"PARAM\" ANNOTATED = \"ANNOTATED\"","title":"CommandToken"},{"location":"refs/graia/ariadne/message/parser/util/#graia.ariadne.message.parser.util.ElementType","text":"\u7528\u4e8e\u6807\u8bb0\u7c7b\u578b\u4e3a\u6d88\u606f\u94fe\u5143\u7d20, \u5728 ArgumentMatch \u4e0a\u4f7f\u7528 Source code in graia/ariadne/message/parser/util.py 252 253 254 255 256 257 258 259 260 261 class ElementType : \"\"\"\u7528\u4e8e\u6807\u8bb0\u7c7b\u578b\u4e3a\u6d88\u606f\u94fe\u5143\u7d20, \u5728 ArgumentMatch \u4e0a\u4f7f\u7528\"\"\" def __init__ ( self , pattern : Type [ Element_T ]): self . regex = re . compile ( f \" \\x02 ( \\\\ d+)_ { pattern . __fields__ [ 'type' ] . default } \\x03 \" ) def __call__ ( self , string : str ) -> Element : if not self . regex . fullmatch ( string ): raise ValueError ( f \" { string } not matching { self . regex . pattern } \" ) return MessageChain . _from_mapping_string ( string , elem_mapping_ctx . get ())[ 0 ]","title":"ElementType"},{"location":"refs/graia/ariadne/message/parser/util/#graia.ariadne.message.parser.util.MessageChainType","text":"\u7528\u4e8e\u6807\u8bb0\u7c7b\u578b\u4e3a\u6d88\u606f\u94fe, \u5728 ArgumentMatch \u4e0a\u4f7f\u7528 Source code in graia/ariadne/message/parser/util.py 244 245 246 247 248 249 class MessageChainType : \"\"\"\u7528\u4e8e\u6807\u8bb0\u7c7b\u578b\u4e3a\u6d88\u606f\u94fe, \u5728 ArgumentMatch \u4e0a\u4f7f\u7528\"\"\" @staticmethod def __call__ ( string : str ) -> MessageChain : return MessageChain . _from_mapping_string ( string , elem_mapping_ctx . get ())","title":"MessageChainType"},{"location":"refs/graia/ariadne/message/parser/util/#graia.ariadne.message.parser.util.TwilightHelpManager","text":"Source code in graia/ariadne/message/parser/util.py 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 class TwilightHelpManager : AUTO_ID : Final [ str ] = \"&auto_id\" + hex ( id ( \"&auto_id\" )) _manager_ref : ClassVar [ Dict [ str , \"TwilightHelpManager\" ]] = {} name : str display_name : Optional [ str ] help_map : Dict [ str , \"Twilight\" ] def __init__ ( self , name : str , display_name : Optional [ str ] = AUTO_ID ): self . name : str = name self . help_map : Dict [ str , \"Twilight\" ] = {} if display_name == self . AUTO_ID : self . display_name = None if name . startswith (( \"global\" , \"local\" , \"_\" )) else name else : self . display_name = display_name if name in TwilightHelpManager . _manager_ref : global_ref = TwilightHelpManager . _manager_ref [ name ] global_ref . display_name = global_ref . display_name or display_name self . help_map = global_ref . help_map else : TwilightHelpManager . _manager_ref [ name ] = self def register ( self , twilight : \"Twilight\" ) -> None : if twilight . help_id == self . AUTO_ID : from .twilight import ElementMatch , ParamMatch , RegexMatch , UnionMatch extracted_ids : List [ str ] = [] for match in twilight . matcher . origin_match_list : if isinstance ( match , UnionMatch ): extracted_ids . extend ( match . pattern ) elif isinstance ( match , ElementMatch ): extracted_ids . append ( match . type . __name__ ) elif isinstance ( match , RegexMatch ) and not isinstance ( match , ParamMatch ): extracted_ids . append ( match . pattern ) if not extracted_ids : raise ValueError ( f \"Unable to extract help_id from { twilight } \" ) help_id = extracted_ids [ 0 ] else : help_id = twilight . help_id if help_id in self . help_map and self . help_map [ help_id ] is not twilight : raise ValueError ( f \"Help Manager { self . name } 's help id { help_id } has been registered\" , self . help_map [ help_id ] ) self . help_map [ help_id ] = twilight @classmethod def get_help_mgr ( cls , mgr : Union [ \"TwilightHelpManager\" , str ]) -> \"TwilightHelpManager\" : return TwilightHelpManager ( mgr ) if isinstance ( mgr , str ) else mgr @overload def get_help ( self , description : str = \"\" , epilog : str = \"\" , * , prefix_src : Literal [ \"brief\" , \"usage\" , \"description\" ] = \"brief\" , fmt_cls : Type [ argparse . HelpFormatter ] = argparse . HelpFormatter , ) -> str : ... @overload def get_help ( self , description : str = \"\" , epilog : str = \"\" , * , prefix_src : Literal [ \"brief\" , \"usage\" , \"description\" ] = \"brief\" , fmt_func : Callable [[ str ], T ], fmt_cls : Type [ argparse . HelpFormatter ] = argparse . HelpFormatter , ) -> T : ... def get_help ( self , description : str = \"\" , epilog : str = \"\" , * , prefix_src : Literal [ \"brief\" , \"usage\" , \"description\" ] = \"brief\" , fmt_func : Optional [ Callable [[ str ], T ]] = None , fmt_cls : Type [ argparse . HelpFormatter ] = argparse . HelpFormatter , ) -> Union [ T , str ]: \"\"\"\u83b7\u53d6\u672c\u7ba1\u7406\u5668\u603b\u7684\u5e2e\u52a9\u4fe1\u606f Args: fmt_func (Optional[Callable[[str], T]]): \u5982\u679c\u6307\u5b9a, \u5219\u4f7f\u7528\u8be5\u51fd\u6570\u6765\u8f6c\u6362\u5e2e\u52a9\u4fe1\u606f\u683c\u5f0f fmt_cls (Type[argparse.HelpFormatter], optional): \u5982\u679c\u6307\u5b9a, \u5219\u4f7f\u7528\u8be5\u7c7b\u6765\u683c\u5f0f\u5316\u5e2e\u52a9\u4fe1\u606f. \\ \u9ed8\u8ba4\u4e3a argparse.HelpFormatter \"\"\" formatter = fmt_cls ( \"\" ) formatter . add_usage ( self . display_name or \"\" , [], [], \"\" ) formatter . add_text ( description ) if self . help_map : formatter . start_section ( f \"\u5171\u6709 { len ( self . help_map ) } \u4e2a\u5b50\u5339\u914d\" ) for help_id , twilight in self . help_map . items (): if twilight . help_data is not None : prefixes : Dict [ str , str ] = { \"brief\" : twilight . help_brief , \"usage\" : twilight . help_data [ \"usage\" ], \"description\" : twilight . help_data [ \"description\" ], } formatter . add_text ( f \" { help_id } - { prefixes [ prefix_src ] } \" ) else : formatter . add_text ( f \" { help_id } \" ) formatter . end_section () formatter . add_text ( epilog ) help_string : str = formatter . format_help () return fmt_func ( help_string ) if fmt_func else help_string","title":"TwilightHelpManager"},{"location":"refs/graia/ariadne/message/parser/util/#graia.ariadne.message.parser.util.TwilightHelpManager.get_help","text":"get_help ( description : str = '' , epilog : str = '' , * , prefix_src : Literal [ 'brief' , 'usage' , 'description' ] = 'brief' , fmt_func : Optional [ Callable [[ str ], T ]] = None , fmt_cls : Type [ argparse . HelpFormatter ] = argparse . HelpFormatter ) -> Union [ T , str ] \u83b7\u53d6\u672c\u7ba1\u7406\u5668\u603b\u7684\u5e2e\u52a9\u4fe1\u606f Parameters: Name Type Description Default fmt_func Optional [ Callable [[ str ], T ]] \u5982\u679c\u6307\u5b9a, \u5219\u4f7f\u7528\u8be5\u51fd\u6570\u6765\u8f6c\u6362\u5e2e\u52a9\u4fe1\u606f\u683c\u5f0f None fmt_cls Type [ argparse . HelpFormatter ] \u5982\u679c\u6307\u5b9a, \u5219\u4f7f\u7528\u8be5\u7c7b\u6765\u683c\u5f0f\u5316\u5e2e\u52a9\u4fe1\u606f. \u9ed8\u8ba4\u4e3a argparse.HelpFormatter argparse.HelpFormatter Source code in graia/ariadne/message/parser/util.py 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 def get_help ( self , description : str = \"\" , epilog : str = \"\" , * , prefix_src : Literal [ \"brief\" , \"usage\" , \"description\" ] = \"brief\" , fmt_func : Optional [ Callable [[ str ], T ]] = None , fmt_cls : Type [ argparse . HelpFormatter ] = argparse . HelpFormatter , ) -> Union [ T , str ]: \"\"\"\u83b7\u53d6\u672c\u7ba1\u7406\u5668\u603b\u7684\u5e2e\u52a9\u4fe1\u606f Args: fmt_func (Optional[Callable[[str], T]]): \u5982\u679c\u6307\u5b9a, \u5219\u4f7f\u7528\u8be5\u51fd\u6570\u6765\u8f6c\u6362\u5e2e\u52a9\u4fe1\u606f\u683c\u5f0f fmt_cls (Type[argparse.HelpFormatter], optional): \u5982\u679c\u6307\u5b9a, \u5219\u4f7f\u7528\u8be5\u7c7b\u6765\u683c\u5f0f\u5316\u5e2e\u52a9\u4fe1\u606f. \\ \u9ed8\u8ba4\u4e3a argparse.HelpFormatter \"\"\" formatter = fmt_cls ( \"\" ) formatter . add_usage ( self . display_name or \"\" , [], [], \"\" ) formatter . add_text ( description ) if self . help_map : formatter . start_section ( f \"\u5171\u6709 { len ( self . help_map ) } \u4e2a\u5b50\u5339\u914d\" ) for help_id , twilight in self . help_map . items (): if twilight . help_data is not None : prefixes : Dict [ str , str ] = { \"brief\" : twilight . help_brief , \"usage\" : twilight . help_data [ \"usage\" ], \"description\" : twilight . help_data [ \"description\" ], } formatter . add_text ( f \" { help_id } - { prefixes [ prefix_src ] } \" ) else : formatter . add_text ( f \" { help_id } \" ) formatter . end_section () formatter . add_text ( epilog ) help_string : str = formatter . format_help () return fmt_func ( help_string ) if fmt_func else help_string","title":"get_help()"},{"location":"refs/graia/ariadne/message/parser/util/#graia.ariadne.message.parser.util.TwilightParser","text":"Bases: argparse . ArgumentParser \u9002\u4e8e Twilight \u4f7f\u7528\u7684 argparse.ArgumentParser \u5b50\u7c7b \u79fb\u9664\u4e86\u62a5\u9519\u65f6\u81ea\u52a8\u9000\u51fa\u89e3\u91ca\u5668\u7684\u884c\u4e3a Source code in graia/ariadne/message/parser/util.py 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 class TwilightParser ( argparse . ArgumentParser ): \"\"\"\u9002\u4e8e Twilight \u4f7f\u7528\u7684 argparse.ArgumentParser \u5b50\u7c7b \u79fb\u9664\u4e86\u62a5\u9519\u65f6\u81ea\u52a8\u9000\u51fa\u89e3\u91ca\u5668\u7684\u884c\u4e3a \"\"\" def error ( self , message ) -> NoReturn : raise ValueError ( message ) def accept_type ( self , action : Union [ str , type ]) -> bool : \"\"\"\u68c0\u67e5\u4e00\u4e2a action \u662f\u5426\u63a5\u53d7 type \u53c2\u6570 Args: action (Union[str, type]): \u68c0\u67e5\u7684 action Returns: bool: \u662f\u5426\u63a5\u53d7 type \u53c2\u6570 \"\"\" if action is ... : action = \"store\" if isinstance ( action , str ): action_cls : Type [ argparse . Action ] = self . _registry_get ( \"action\" , action , action ) elif isinstance ( action , type ) and issubclass ( action , argparse . Action ): action_cls = action else : return False action_init_sig = inspect . signature ( action_cls . __init__ ) if \"type\" not in action_init_sig . parameters : return False return True","title":"TwilightParser"},{"location":"refs/graia/ariadne/message/parser/util/#graia.ariadne.message.parser.util.TwilightParser.accept_type","text":"accept_type ( action : Union [ str , type ]) -> bool \u68c0\u67e5\u4e00\u4e2a action \u662f\u5426\u63a5\u53d7 type \u53c2\u6570 Parameters: Name Type Description Default action Union [ str , type ] \u68c0\u67e5\u7684 action required Returns: Name Type Description bool bool \u662f\u5426\u63a5\u53d7 type \u53c2\u6570 Source code in graia/ariadne/message/parser/util.py 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 def accept_type ( self , action : Union [ str , type ]) -> bool : \"\"\"\u68c0\u67e5\u4e00\u4e2a action \u662f\u5426\u63a5\u53d7 type \u53c2\u6570 Args: action (Union[str, type]): \u68c0\u67e5\u7684 action Returns: bool: \u662f\u5426\u63a5\u53d7 type \u53c2\u6570 \"\"\" if action is ... : action = \"store\" if isinstance ( action , str ): action_cls : Type [ argparse . Action ] = self . _registry_get ( \"action\" , action , action ) elif isinstance ( action , type ) and issubclass ( action , argparse . Action ): action_cls = action else : return False action_init_sig = inspect . signature ( action_cls . __init__ ) if \"type\" not in action_init_sig . parameters : return False return True","title":"accept_type()"},{"location":"refs/graia/ariadne/message/parser/util/#graia.ariadne.message.parser.util.escape","text":"escape ( string : str ) -> str \u8f6c\u4e49\u5b57\u7b26\u4e32 Parameters: Name Type Description Default string str \u8981\u8f6c\u4e49\u7684\u5b57\u7b26\u4e32 required Returns: Name Type Description str str \u8f6c\u4e49\u540e\u7684\u5b57\u7b26\u4e32 Source code in graia/ariadne/message/parser/util.py 46 47 48 49 50 51 52 53 54 55 56 57 58 def escape ( string : str ) -> str : \"\"\"\u8f6c\u4e49\u5b57\u7b26\u4e32 Args: string (str): \u8981\u8f6c\u4e49\u7684\u5b57\u7b26\u4e32 Returns: str: \u8f6c\u4e49\u540e\u7684\u5b57\u7b26\u4e32 \"\"\" for k , v in ESCAPE . items (): string = string . replace ( \" \\\\ \" + k , v ) string = string . replace ( \" \\\\ \" , \"\" ) return string","title":"escape()"},{"location":"refs/graia/ariadne/message/parser/util/#graia.ariadne.message.parser.util.gen_flags_repr","text":"gen_flags_repr ( flags : re . RegexFlag ) -> str \u901a\u8fc7 RegexFlag \u751f\u6210\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32 Parameters: Name Type Description Default flags re . RegexFlag \u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u6807\u8bb0 required Returns: Name Type Description str str \u5bf9\u5e94\u7684\u6807\u8bb0\u5b57\u7b26\u4e32 Source code in graia/ariadne/message/parser/util.py 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 def gen_flags_repr ( flags : re . RegexFlag ) -> str : \"\"\"\u901a\u8fc7 RegexFlag \u751f\u6210\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32 Args: flags (re.RegexFlag): \u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u6807\u8bb0 Returns: str: \u5bf9\u5e94\u7684\u6807\u8bb0\u5b57\u7b26\u4e32 \"\"\" flags_list : List [ str ] = [] if re . ASCII in flags : flags_list . append ( \"a\" ) if re . IGNORECASE in flags : flags_list . append ( \"i\" ) if re . LOCALE in flags : flags_list . append ( \"L\" ) if re . MULTILINE in flags : flags_list . append ( \"m\" ) if re . DOTALL in flags : flags_list . append ( \"s\" ) if re . UNICODE in flags : flags_list . append ( \"u\" ) if re . VERBOSE in flags : flags_list . append ( \"x\" ) return \"\" . join ( flags_list )","title":"gen_flags_repr()"},{"location":"refs/graia/ariadne/message/parser/util/#graia.ariadne.message.parser.util.split","text":"split ( string : str , keep_quote : bool = False ) -> List [ str ] \u5c0a\u91cd\u5f15\u53f7\u4e0e\u8f6c\u4e49\u7684\u5b57\u7b26\u4e32\u5207\u5206 Parameters: Name Type Description Default string str \u8981\u5207\u5272\u7684\u5b57\u7b26\u4e32 required keep_quote bool \u662f\u5426\u4fdd\u7559\u5f15\u53f7, \u9ed8\u8ba4 False. False Returns: Type Description List [ str ] List[str]: \u5207\u5272\u540e\u7684\u5b57\u7b26\u4e32, \u53ef\u80fd\u542b\u6709\u7a7a\u683c Source code in graia/ariadne/message/parser/util.py 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 def split ( string : str , keep_quote : bool = False ) -> List [ str ]: \"\"\"\u5c0a\u91cd\u5f15\u53f7\u4e0e\u8f6c\u4e49\u7684\u5b57\u7b26\u4e32\u5207\u5206 Args: string (str): \u8981\u5207\u5272\u7684\u5b57\u7b26\u4e32 keep_quote (bool): \u662f\u5426\u4fdd\u7559\u5f15\u53f7, \u9ed8\u8ba4 False. Returns: List[str]: \u5207\u5272\u540e\u7684\u5b57\u7b26\u4e32, \u53ef\u80fd\u542b\u6709\u7a7a\u683c \"\"\" result : List [ str ] = [] quote = \"\" cache : List [ str ] = [] for index , char in enumerate ( string ): if char in { \"'\" , '\"' }: if not quote : quote = char elif char == quote and index and string [ index - 1 ] != \" \\\\ \" : # is current quote, not transfigured quote = \"\" else : cache . append ( char ) continue if keep_quote : cache . append ( char ) elif not quote and char == \" \" : result . append ( \"\" . join ( cache )) cache = [] elif char != \" \\\\ \" : cache . append ( char ) if cache : result . append ( \"\" . join ( cache )) return result","title":"split()"},{"location":"refs/graia/ariadne/message/parser/util/#graia.ariadne.message.parser.util.tokenize_command","text":"tokenize_command ( string : str ) -> List [ CommandTokenTuple ] \u5c06\u5b57\u7b26\u4e32\u8f6c\u4e49\u5316, \u5e76\u5904\u7406\u4e3a Text, Choice, Param, AnnotatedParam \u56db\u79cd token Parameters: Name Type Description Default string str \u8981\u5904\u7406\u7684\u5b57\u7b26\u4e32 required Returns: Type Description List [ CommandTokenTuple ] List[Tuple[CommandToken, List[int, str]]]: \u5904\u7406\u540e\u7684 Token Source code in graia/ariadne/message/parser/util.py 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 def tokenize_command ( string : str ) -> List [ CommandTokenTuple ]: \"\"\"\u5c06\u5b57\u7b26\u4e32\u8f6c\u4e49\u5316, \u5e76\u5904\u7406\u4e3a Text, Choice, Param, AnnotatedParam \u56db\u79cd token Args: string (str): \u8981\u5904\u7406\u7684\u5b57\u7b26\u4e32 Returns: List[Tuple[CommandToken, List[int, str]]]: \u5904\u7406\u540e\u7684 Token \"\"\" string = escape ( string ) paren : str = \"\" char_stk : List [ str ] = [] token : List [ CommandTokenTuple ] = [] for index , char in enumerate ( string ): if char in L_PAREN + R_PAREN : if char in L_PAREN : if paren : raise ValueError ( f \"\"\"Duplicated parenthesis character \" { char } \" @ { index } !\"\"\" \"\"\"Are you sure you've escaped with \"\\\\\"?\"\"\" ) paren = char elif char in R_PAREN : if paren == \"[\" : # CHOICE token . append (( CommandToken . CHOICE , list ( map ( unescape , \"\" . join ( char_stk ) . split ( \"|\" ))))) elif paren == \"{\" : # PARAM piece = \"\" . join ( char_stk ) match = re . fullmatch ( r \"(?P<wildcard>\\.\\.\\.)?\" r \"(?P<name>[^:=|]+)\" r \"(?P<annotation>:[^=]+)?\" r \"(?P<default>=.+)?\" , piece , ) if match and any ( s in piece for s in \".:=\" ): token . append ( # type: List[str] ( CommandToken . ANNOTATED , list ( map ( lambda x : unescape ( x ) . strip () . lstrip ( \":=\" ) . strip () if x else \"\" , match . groups (), ) ), ) ) else : token . append ( ( CommandToken . PARAM , [ int ( i ) if re . match ( r \"\\d+\" , i ) else unescape ( i ) for i in \"\" . join ( char_stk ) . split ( \"|\" ) ], ) ) else : raise ValueError ( f \"No matching parenthesis: { paren } @ { index } \" ) char_stk . clear () paren = \"\" char_stk . clear () elif char == \" \" and not paren : if char_stk : token . append (( CommandToken . TEXT , [ \"\" . join ( char_stk )])) char_stk . clear () else : char_stk . append ( char ) if paren : raise ValueError ( f \"Unclosed parenthesis: { paren } \" ) if char_stk : token . append (( CommandToken . TEXT , [ \"\" . join ( char_stk )])) char_stk . clear () return token","title":"tokenize_command()"},{"location":"refs/graia/ariadne/message/parser/util/#graia.ariadne.message.parser.util.transform_regex","text":"transform_regex ( flag : re . RegexFlag , regex_pattern : str ) -> str \u751f\u6210\u5d4c\u5957\u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\u6765\u8fbe\u5230\u81f3\u5c11\u6700\u5916\u5c42\u542b\u6709\u4e00\u4e2a\u6355\u83b7\u7ec4\u7684\u6548\u679c Parameters: Name Type Description Default flag re . RegexFlag \u6b63\u5219\u8868\u8fbe\u5f0f\u6807\u8bb0 required regex_pattern str \u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32 required Returns: Name Type Description str str \u8f6c\u6362\u540e\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32 Source code in graia/ariadne/message/parser/util.py 231 232 233 234 235 236 237 238 239 240 241 def transform_regex ( flag : re . RegexFlag , regex_pattern : str ) -> str : \"\"\"\u751f\u6210\u5d4c\u5957\u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\u6765\u8fbe\u5230\u81f3\u5c11\u6700\u5916\u5c42\u542b\u6709\u4e00\u4e2a\u6355\u83b7\u7ec4\u7684\u6548\u679c Args: flag (re.RegexFlag): \u6b63\u5219\u8868\u8fbe\u5f0f\u6807\u8bb0 regex_pattern (str): \u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32 Returns: str: \u8f6c\u6362\u540e\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32 \"\"\" return f \"(? { gen_flags_repr ( flag ) } :( { regex_pattern } ))\" if flag else f \"( { regex_pattern } )\"","title":"transform_regex()"},{"location":"refs/graia/ariadne/message/parser/util/#graia.ariadne.message.parser.util.unescape","text":"unescape ( string : str ) -> str \u9006\u8f6c\u4e49\u5b57\u7b26\u4e32, \u81ea\u52a8\u53bb\u9664\u7a7a\u767d\u7b26 Parameters: Name Type Description Default string str \u8981\u9006\u8f6c\u4e49\u7684\u5b57\u7b26\u4e32 required Returns: Name Type Description str str \u9006\u8f6c\u4e49\u540e\u7684\u5b57\u7b26\u4e32 Source code in graia/ariadne/message/parser/util.py 61 62 63 64 65 66 67 68 69 70 71 72 def unescape ( string : str ) -> str : \"\"\"\u9006\u8f6c\u4e49\u5b57\u7b26\u4e32, \u81ea\u52a8\u53bb\u9664\u7a7a\u767d\u7b26 Args: string (str): \u8981\u9006\u8f6c\u4e49\u7684\u5b57\u7b26\u4e32 Returns: str: \u9006\u8f6c\u4e49\u540e\u7684\u5b57\u7b26\u4e32 \"\"\" for k , v in R_ESCAPE . items (): string = string . replace ( k , v ) return string . strip ()","title":"unescape()"},{"location":"refs/graia/ariadne/util/","text":"\u672c\u6a21\u5757\u63d0\u4f9b Ariadne \u5185\u90e8\u4f7f\u7528\u7684\u5c0f\u5de5\u5177, \u4ee5\u53ca\u65b9\u4fbf\u7684 async_exec \u6a21\u5757. AsyncSignal \ud83d\udd17 Bases: Generic [ T ] \u6a21\u62df asyncio.Event, \u4f46\u662f\u652f\u6301 sig.wait(Hashable) Source code in graia/ariadne/util/__init__.py 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 class AsyncSignal ( Generic [ T ]): \"\"\"\u6a21\u62df asyncio.Event, \u4f46\u662f\u652f\u6301 sig.wait(Hashable)\"\"\" def __init__ ( self , value : T = None ) -> None : self . _waiters : Dict [ T , Deque [ asyncio . Future ]] = {} self . _value : T = value self . _special : Dict [ str , asyncio . Future ] = {} def __repr__ ( self ) -> str : waiter_str = f \", waiters: { len ( self . _waiters ) } \" if self . _waiters else \"\" return f \"<AsyncSignal [value: { self . _value }{ waiter_str } ]>\" def value ( self ) -> T : return self . _value def set ( self , value : T ) -> None : self . _value = value waiter_deque = self . _waiters . setdefault ( value , collections . deque ()) for fut in waiter_deque : if not fut . done (): fut . set_result ( True ) waiter_deque . clear () async def wait ( self , value : T , wait_id : Optional [ str ] = None ) -> Literal [ True ]: if self . _value == value : return True fut = asyncio . get_running_loop () . create_future () if wait_id : self . _special [ wait_id ] = fut self . _waiters . setdefault ( value , collections . deque ()) . append ( fut ) return await fut ConstantDispatcher \ud83d\udd17 Bases: BaseDispatcher \u5206\u53d1\u5e38\u91cf\u7ed9\u6307\u5b9a\u540d\u79f0\u7684\u53c2\u6570 Source code in graia/ariadne/util/__init__.py 373 374 375 376 377 378 379 380 381 class ConstantDispatcher ( BaseDispatcher ): \"\"\"\u5206\u53d1\u5e38\u91cf\u7ed9\u6307\u5b9a\u540d\u79f0\u7684\u53c2\u6570\"\"\" def __init__ ( self , context : ContextVar [ Dict [ str , Any ]]) -> None : self . ctx_var = context async def catch ( self , interface : DispatcherInterface ): if interface . name in self . ctx_var . get (): return self . ctx_var . get ()[ interface . name ] Dummy \ud83d\udd17 Dummy \u7c7b, \u5bf9\u6240\u6709\u8c03\u7528\u8fd4\u56de None. (\u53ef\u4ee5\u9884\u8bbe\u67d0\u4e9b\u503c) Source code in graia/ariadne/util/__init__.py 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 class Dummy : \"\"\"Dummy \u7c7b, \u5bf9\u6240\u6709\u8c03\u7528\u8fd4\u56de None. (\u53ef\u4ee5\u9884\u8bbe\u67d0\u4e9b\u503c)\"\"\" def __init__ ( self , ** kwds ): for k , v in kwds . items (): self . __setattr__ ( k , v ) def __getattr__ ( self , * _ , ** __ ): return self def __call__ ( self , * _ , ** __ ): return self def __await__ ( self ): yield return self app_ctx_manager \ud83d\udd17 app_ctx_manager ( func : Callable [ P , R ]) -> Callable [ P , R ] \u5305\u88c5\u58f0\u660e\u9700\u8981\u5728 Ariadne Context \u4e2d\u6267\u884c\u7684\u51fd\u6570 Parameters: Name Type Description Default func Callable [ P , R ] \u88ab\u5305\u88c5\u7684\u51fd\u6570 required Returns: Type Description Callable [ P , R ] Callable[P, R]: \u5305\u88c5\u540e\u7684\u51fd\u6570 Source code in graia/ariadne/util/__init__.py 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 def app_ctx_manager ( func : Callable [ P , R ]) -> Callable [ P , R ]: \"\"\"\u5305\u88c5\u58f0\u660e\u9700\u8981\u5728 Ariadne Context \u4e2d\u6267\u884c\u7684\u51fd\u6570 Args: func (Callable[P, R]): \u88ab\u5305\u88c5\u7684\u51fd\u6570 Returns: Callable[P, R]: \u5305\u88c5\u540e\u7684\u51fd\u6570 \"\"\" @functools . wraps ( func ) def wrapper ( * args : P . args , ** kwargs : P . kwargs ): from ..context import enter_context sys . audit ( \"CallAriadneAPI\" , func . __name__ , args , kwargs ) with enter_context ( app = args [ 0 ]): # type: ignore return func ( * args , ** kwargs ) return wrapper await_predicate async \ud83d\udd17 await_predicate ( predicate : Callable [[], bool ], interval : float = 0.01 ) -> None \u5f02\u6b65\u963b\u585e\u81f3\u6ee1\u8db3 predicate \u4e3a True Parameters: Name Type Description Default predicate Callable [[], bool ] \u5224\u65ad\u6761\u4ef6 required interval float \u6bcf\u6b21\u68c0\u67e5\u95f4\u9694. Defaults to 0.01. 0.01 Source code in graia/ariadne/util/__init__.py 296 297 298 299 300 301 302 303 304 async def await_predicate ( predicate : Callable [[], bool ], interval : float = 0.01 ) -> None : \"\"\"\u5f02\u6b65\u963b\u585e\u81f3\u6ee1\u8db3 predicate \u4e3a True Args: predicate (Callable[[], bool]): \u5224\u65ad\u6761\u4ef6 interval (float, optional): \u6bcf\u6b21\u68c0\u67e5\u95f4\u9694. Defaults to 0.01. \"\"\" while not predicate (): await asyncio . sleep ( interval ) const_call \ud83d\udd17 const_call ( val : T ) -> Callable [[], T ] \u751f\u6210\u4e00\u4e2a\u8fd4\u56de\u5e38\u91cf\u7684 Callable Parameters: Name Type Description Default val T \u5e38\u91cf required Returns: Type Description Callable [[], T ] Callable[[], T]: \u8fd4\u56de\u7684\u51fd\u6570 Source code in graia/ariadne/util/__init__.py 261 262 263 264 265 266 267 268 269 270 def const_call ( val : T ) -> Callable [[], T ]: \"\"\"\u751f\u6210\u4e00\u4e2a\u8fd4\u56de\u5e38\u91cf\u7684 Callable Args: val (T): \u5e38\u91cf Returns: Callable[[], T]: \u8fd4\u56de\u7684\u51fd\u6570 \"\"\" return lambda : val deprecated \ud83d\udd17 deprecated ( remove_ver : str ) -> Callable [[ Callable [ P , R ]], Callable [ P , R ]] \u6807\u6ce8\u4e00\u4e2a\u65b9\u6cd5 / \u51fd\u6570\u5df2\u88ab\u5f03\u7528 Parameters: Name Type Description Default remove_ver str \u5c06\u88ab\u79fb\u9664\u7684\u7248\u672c. required Returns: Type Description Callable [[ Callable [ P , R ]], Callable [ P , R ]] Callable[[T_Callable], T_Callable]: \u5305\u88c5\u5668. Source code in graia/ariadne/util/__init__.py 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 def deprecated ( remove_ver : str ) -> Callable [[ Callable [ P , R ]], Callable [ P , R ]]: \"\"\"\u6807\u6ce8\u4e00\u4e2a\u65b9\u6cd5 / \u51fd\u6570\u5df2\u88ab\u5f03\u7528 Args: remove_ver (str): \u5c06\u88ab\u79fb\u9664\u7684\u7248\u672c. Returns: Callable[[T_Callable], T_Callable]: \u5305\u88c5\u5668. \"\"\" def out_wrapper ( func : Callable [ P , R ]) -> Callable [ P , R ]: @functools . wraps ( func ) def wrapper ( * args : P . args , ** kwargs : P . kwargs ) -> R : warnings . warn ( DeprecationWarning ( f \" { func . __qualname__ } will be removed in { remove_ver } !\" )) logger . warning ( f \"Deprecated function: { func . __qualname__ } \" ) logger . warning ( f \" { func . __qualname__ } will be removed in { remove_ver } !\" ) return func ( * args , ** kwargs ) return wrapper return out_wrapper eval_ctx \ud83d\udd17 eval_ctx ( layer : int = 0 , globals_ : Optional [ DictStrAny ] = None , locals_ : Optional [ DictStrAny ] = None ) -> Tuple [ DictStrAny , DictStrAny ] \u83b7\u53d6\u4e00\u4e2a\u4e0a\u4e0b\u6587\u7684\u5168\u5c40\u548c\u5c40\u90e8\u53d8\u91cf Parameters: Name Type Description Default layer int \u5c42\u6570. Defaults to 0. 0 globals_ Optional [ DictStrAny ] \u5168\u5c40\u53d8\u91cf. Defaults to None. None locals_ Optional [ DictStrAny ] \u5c40\u90e8\u53d8\u91cf. Defaults to None. None Returns: Type Description Tuple [ DictStrAny , DictStrAny ] Tuple[DictStrAny, DictStrAny]: \u5168\u5c40\u548c\u5c40\u90e8\u53d8\u91cf\u5b57\u5178. Source code in graia/ariadne/util/__init__.py 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 def eval_ctx ( layer : int = 0 , globals_ : Optional [ DictStrAny ] = None , locals_ : Optional [ DictStrAny ] = None ) -> Tuple [ DictStrAny , DictStrAny ]: \"\"\"\u83b7\u53d6\u4e00\u4e2a\u4e0a\u4e0b\u6587\u7684\u5168\u5c40\u548c\u5c40\u90e8\u53d8\u91cf Args: layer (int, optional): \u5c42\u6570. Defaults to 0. globals_ (Optional[DictStrAny], optional): \u5168\u5c40\u53d8\u91cf. Defaults to None. locals_ (Optional[DictStrAny], optional): \u5c40\u90e8\u53d8\u91cf. Defaults to None. Returns: Tuple[DictStrAny, DictStrAny]: \u5168\u5c40\u548c\u5c40\u90e8\u53d8\u91cf\u5b57\u5178. \"\"\" frame = inspect . stack ()[ layer + 1 ] . frame # add the current frame global_dict , local_dict = frame . f_globals , frame . f_locals global_dict . update ( globals_ or {}) local_dict . update ( locals_ or {}) return global_dict , local_dict gen_subclass \ud83d\udd17 gen_subclass ( cls : Type [ T ]) -> Generator [ Type [ T ], None , None ] \u751f\u6210\u67d0\u4e2a\u7c7b\u7684\u6240\u6709\u5b50\u7c7b (\u5305\u62ec\u5176\u81ea\u8eab) Parameters: Name Type Description Default cls Type [ T ] \u7c7b required Yields: Type Description Generator [ Type [ T ], None, None] Type[T]: \u5b50\u7c7b Source code in graia/ariadne/util/__init__.py 240 241 242 243 244 245 246 247 248 249 250 251 252 253 def gen_subclass ( cls : Type [ T ]) -> Generator [ Type [ T ], None , None ]: \"\"\"\u751f\u6210\u67d0\u4e2a\u7c7b\u7684\u6240\u6709\u5b50\u7c7b (\u5305\u62ec\u5176\u81ea\u8eab) Args: cls (Type[T]): \u7c7b Yields: Type[T]: \u5b50\u7c7b \"\"\" yield cls for sub_cls in cls . __subclasses__ (): if TYPE_CHECKING : assert issubclass ( sub_cls , cls ) yield from gen_subclass ( sub_cls ) inject_bypass_listener \ud83d\udd17 inject_bypass_listener ( broadcast : Broadcast ) \u6ce8\u5165 BypassListener \u4ee5\u4eab\u53d7\u5b50\u4e8b\u4ef6\u89e3\u6790. Parameters: Name Type Description Default broadcast Broadcast \u5916\u90e8\u4e8b\u4ef6\u7cfb\u7edf, \u63d0\u4f9b\u4e86 event_class_generator \u65b9\u6cd5\u4ee5\u751f\u6210\u5b50\u4e8b\u4ef6. required Source code in graia/ariadne/util/__init__.py 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 def inject_bypass_listener ( broadcast : Broadcast ): \"\"\"\u6ce8\u5165 BypassListener \u4ee5\u4eab\u53d7\u5b50\u4e8b\u4ef6\u89e3\u6790. Args: broadcast (Broadcast): \u5916\u90e8\u4e8b\u4ef6\u7cfb\u7edf, \u63d0\u4f9b\u4e86 event_class_generator \u65b9\u6cd5\u4ee5\u751f\u6210\u5b50\u4e8b\u4ef6. \"\"\" class BypassListener ( Listener ): \"\"\"\u900f\u4f20\u76d1\u542c\u5668\u7684\u5b9e\u73b0\"\"\" def __init__ ( self , callable : Callable , namespace : Namespace , listening_events : List [ Type [ Dispatchable ]], inline_dispatchers : Optional [ List [ T_Dispatcher ]] = None , decorators : Optional [ List [ Decorator ]] = None , priority : int = 16 , ) -> None : events = [] for event in listening_events : events . append ( event ) events . extend ( broadcast . event_class_generator ( event )) super () . __init__ ( callable , namespace , events , inline_dispatchers = inline_dispatchers or [], decorators = decorators or [], priority = priority , ) import graia.broadcast.entities.listener graia . broadcast . entities . listener . Listener = BypassListener # type: ignore graia . broadcast . Listener = BypassListener # type: ignore try : # Override saya listener import graia.saya.builtins.broadcast.schema graia . saya . builtins . broadcast . schema . Listener = BypassListener # type: ignore except ImportError : # Saya not installed, pass. pass inject_loguru_traceback \ud83d\udd17 inject_loguru_traceback ( loop : Optional [ AbstractEventLoop ] = None ) \u4f7f\u7528 loguru \u6a21\u5757\u66ff\u6362\u9ed8\u8ba4\u7684 traceback.print_exception \u4e0e sys.excepthook Source code in graia/ariadne/util/__init__.py 130 131 132 133 134 135 def inject_loguru_traceback ( loop : Optional [ AbstractEventLoop ] = None ): \"\"\"\u4f7f\u7528 loguru \u6a21\u5757\u66ff\u6362\u9ed8\u8ba4\u7684 traceback.print_exception \u4e0e sys.excepthook\"\"\" traceback . print_exception = loguru_excepthook sys . excepthook = loguru_excepthook if loop : loop . set_exception_handler ( loguru_async_handler ) loguru_async_handler \ud83d\udd17 loguru_async_handler ( _ , ctx : dict ) loguru \u5f02\u6b65\u5f02\u5e38\u56de\u8c03 Parameters: Name Type Description Default _ AbstractEventLoop \u5f02\u5e38\u53d1\u751f\u7684\u4e8b\u4ef6\u5faa\u73af required ctx dict \u5f02\u5e38\u4e0a\u4e0b\u6587 required Source code in graia/ariadne/util/__init__.py 100 101 102 103 104 105 106 107 108 109 110 def loguru_async_handler ( _ , ctx : dict ): \"\"\"loguru \u5f02\u6b65\u5f02\u5e38\u56de\u8c03 Args: _ (AbstractEventLoop): \u5f02\u5e38\u53d1\u751f\u7684\u4e8b\u4ef6\u5faa\u73af ctx (dict): \u5f02\u5e38\u4e0a\u4e0b\u6587 \"\"\" if \"exception\" in ctx : logger . opt ( exception = ctx [ \"exception\" ]) . error ( \"Exception:\" ) else : logger . error ( f \"Exception: { ctx } \" ) loguru_excepthook \ud83d\udd17 loguru_excepthook ( cls : Type [ BaseException ], val : BaseException , tb : TracebackType , * _ , ** __ ) loguru \u5f02\u5e38\u56de\u8c03 Parameters: Name Type Description Default cls Type [ Exception ] \u5f02\u5e38\u7c7b required val Exception \u5f02\u5e38\u7684\u5b9e\u9645\u503c required tb TracebackType \u56de\u6eaf\u6d88\u606f required Source code in graia/ariadne/util/__init__.py 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 def loguru_excepthook ( cls : Type [ BaseException ], val : BaseException , tb : TracebackType , * _ , ** __ ): \"\"\"loguru \u5f02\u5e38\u56de\u8c03 Args: cls (Type[Exception]): \u5f02\u5e38\u7c7b val (Exception): \u5f02\u5e38\u7684\u5b9e\u9645\u503c tb (TracebackType): \u56de\u6eaf\u6d88\u606f \"\"\" exec_module_name = tb . tb_frame . f_globals . get ( \"__name__\" , \"\" ) if issubclass ( cls , ExecutionStop ) and exec_module_name . startswith ( \"graia\" ): return elif isinstance ( val , RequirementCrashed ) and exec_module_name . startswith ( \"graia.broadcast\" ): with contextlib . suppress ( Exception ): local_dict = tb . tb_frame . f_locals _ , param_name , param_anno , param_default = val . args if isinstance ( param_anno , type ): param_anno = param_anno . __qualname__ param_repr = \"\" . join ( [ param_name , f \": { type_repr ( param_anno ) } \" if param_anno else \"\" , f \" = { param_default } \" if param_default else \"\" , ] ) val = RequirementCrashed ( \"Unable to lookup parameter \" f \"( { param_repr } )\" , local_dict [ \"dispatchers\" ], ) logger . opt ( exception = ( cls , val , tb )) . error ( \"Exception:\" ) resolve_dispatchers_mixin \ud83d\udd17 resolve_dispatchers_mixin ( dispatchers : Iterable [ T_Dispatcher ]) -> List [ T_Dispatcher ] \u89e3\u6790 dispatcher list \u7684 mixin Parameters: Name Type Description Default dispatchers Iterable [ T_Dispatcher ] dispatcher \u5217\u8868 required Returns: Type Description List [ T_Dispatcher ] List[T_Dispatcher]: \u89e3\u6790\u540e\u7684 dispatcher \u5217\u8868 Source code in graia/ariadne/util/__init__.py 358 359 360 361 362 363 364 365 366 367 368 369 370 def resolve_dispatchers_mixin ( dispatchers : Iterable [ T_Dispatcher ]) -> List [ T_Dispatcher ]: \"\"\"\u89e3\u6790 dispatcher list \u7684 mixin Args: dispatchers (Iterable[T_Dispatcher]): dispatcher \u5217\u8868 Returns: List[T_Dispatcher]: \u89e3\u6790\u540e\u7684 dispatcher \u5217\u8868 \"\"\" result = [] for dispatcher in dispatchers : result . extend ( dispatcher_mixin_handler ( dispatcher )) return result signal_handler \ud83d\udd17 signal_handler ( callback : Callable [[], None ], one_time : bool = True ) -> None \u6ce8\u518c\u4fe1\u53f7\u5904\u7406\u5668 Parameters: Name Type Description Default callback Callable [[], None] \u4fe1\u53f7\u5904\u7406\u5668 required one_time bool \u662f\u5426\u53ea\u6267\u884c\u4e00\u6b21. \u9ed8\u8ba4\u4e3a True. True Returns: Type Description None None Source code in graia/ariadne/util/__init__.py 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 def signal_handler ( callback : Callable [[], None ], one_time : bool = True ) -> None : \"\"\"\u6ce8\u518c\u4fe1\u53f7\u5904\u7406\u5668 Args: callback (Callable[[], None]): \u4fe1\u53f7\u5904\u7406\u5668 one_time (bool, optional): \u662f\u5426\u53ea\u6267\u884c\u4e00\u6b21. \u9ed8\u8ba4\u4e3a True. Returns: None \"\"\" import signal import threading if not threading . main_thread () . ident == threading . current_thread () . ident : return HANDLED_SIGNAL = ( signal . SIGINT , signal . SIGTERM ) for sig in HANDLED_SIGNAL : handler = signal . getsignal ( sig ) def handler_wrapper ( sig_num , frame ): if callable ( handler ): handler ( sig_num , frame ) callback () if one_time : signal . signal ( sig_num , handler ) signal . signal ( sig , handler_wrapper ) wrap_bracket \ud83d\udd17 wrap_bracket ( string : str ) -> str \u5728\u5b57\u7b26\u4e32\u4e2d\u8f6c\u4e49\u4e2d\u62ec\u53f7\u62ec\u53f7 Source code in graia/ariadne/util/__init__.py 256 257 258 def wrap_bracket ( string : str ) -> str : \"\"\"\u5728\u5b57\u7b26\u4e32\u4e2d\u8f6c\u4e49\u4e2d\u62ec\u53f7\u62ec\u53f7\"\"\" return string . replace ( \"[\" , \" \\\\ u005b\" ) . replace ( \"]\" , \" \\\\ u005d\" ) yield_with_timeout async \ud83d\udd17 yield_with_timeout ( getter_coro : Callable [[], Coroutine [ None , None , T ]], predicate : Callable [[], bool ], await_length : float = 0.2 ) -> AsyncIterator [ T ] \u5728\u6ee1\u8db3 predicate \u65f6\u8fd4\u56de getter_coro() \u7684\u503c Parameters: Name Type Description Default getter_coro Callable [[], Coroutine [None, None, T ]] \u8981\u5faa\u73af\u8fd4\u56de\u7684\u534f\u7a0b\u51fd\u6570. required predicate Callable [[], bool ] \u6761\u4ef6\u56de\u8c03\u51fd\u6570. required await_length float \u7b49\u5f85\u76ee\u524d\u534f\u7a0b\u7684\u65f6\u957f. \u9ed8\u8ba4 0.2s. 0.2 Yields: Name Type Description T AsyncIterator [ T ] getter_coro \u7684\u8fd4\u56de\u503c Source code in graia/ariadne/util/__init__.py 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 async def yield_with_timeout ( getter_coro : Callable [[], Coroutine [ None , None , T ]], predicate : Callable [[], bool ], await_length : float = 0.2 , ) -> AsyncIterator [ T ]: \"\"\"\u5728\u6ee1\u8db3 predicate \u65f6\u8fd4\u56de getter_coro() \u7684\u503c Args: getter_coro (Callable[[], Coroutine[None, None, T]]): \u8981\u5faa\u73af\u8fd4\u56de\u7684\u534f\u7a0b\u51fd\u6570. predicate (Callable[[], bool]): \u6761\u4ef6\u56de\u8c03\u51fd\u6570. await_length (float, optional): \u7b49\u5f85\u76ee\u524d\u534f\u7a0b\u7684\u65f6\u957f. \u9ed8\u8ba4 0.2s. Yields: T: getter_coro \u7684\u8fd4\u56de\u503c \"\"\" last_tsk : Optional [ Set [ \"asyncio.Task[T]\" ]] = None while predicate (): last_tsk = last_tsk or { asyncio . create_task ( getter_coro ())} done , last_tsk = await asyncio . wait ( last_tsk , timeout = await_length ) if not done : continue for t in done : yield await t if last_tsk : for tsk in last_tsk : tsk . cancel ()","title":"util"},{"location":"refs/graia/ariadne/util/#graia.ariadne.util.AsyncSignal","text":"Bases: Generic [ T ] \u6a21\u62df asyncio.Event, \u4f46\u662f\u652f\u6301 sig.wait(Hashable) Source code in graia/ariadne/util/__init__.py 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 class AsyncSignal ( Generic [ T ]): \"\"\"\u6a21\u62df asyncio.Event, \u4f46\u662f\u652f\u6301 sig.wait(Hashable)\"\"\" def __init__ ( self , value : T = None ) -> None : self . _waiters : Dict [ T , Deque [ asyncio . Future ]] = {} self . _value : T = value self . _special : Dict [ str , asyncio . Future ] = {} def __repr__ ( self ) -> str : waiter_str = f \", waiters: { len ( self . _waiters ) } \" if self . _waiters else \"\" return f \"<AsyncSignal [value: { self . _value }{ waiter_str } ]>\" def value ( self ) -> T : return self . _value def set ( self , value : T ) -> None : self . _value = value waiter_deque = self . _waiters . setdefault ( value , collections . deque ()) for fut in waiter_deque : if not fut . done (): fut . set_result ( True ) waiter_deque . clear () async def wait ( self , value : T , wait_id : Optional [ str ] = None ) -> Literal [ True ]: if self . _value == value : return True fut = asyncio . get_running_loop () . create_future () if wait_id : self . _special [ wait_id ] = fut self . _waiters . setdefault ( value , collections . deque ()) . append ( fut ) return await fut","title":"AsyncSignal"},{"location":"refs/graia/ariadne/util/#graia.ariadne.util.ConstantDispatcher","text":"Bases: BaseDispatcher \u5206\u53d1\u5e38\u91cf\u7ed9\u6307\u5b9a\u540d\u79f0\u7684\u53c2\u6570 Source code in graia/ariadne/util/__init__.py 373 374 375 376 377 378 379 380 381 class ConstantDispatcher ( BaseDispatcher ): \"\"\"\u5206\u53d1\u5e38\u91cf\u7ed9\u6307\u5b9a\u540d\u79f0\u7684\u53c2\u6570\"\"\" def __init__ ( self , context : ContextVar [ Dict [ str , Any ]]) -> None : self . ctx_var = context async def catch ( self , interface : DispatcherInterface ): if interface . name in self . ctx_var . get (): return self . ctx_var . get ()[ interface . name ]","title":"ConstantDispatcher"},{"location":"refs/graia/ariadne/util/#graia.ariadne.util.Dummy","text":"Dummy \u7c7b, \u5bf9\u6240\u6709\u8c03\u7528\u8fd4\u56de None. (\u53ef\u4ee5\u9884\u8bbe\u67d0\u4e9b\u503c) Source code in graia/ariadne/util/__init__.py 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 class Dummy : \"\"\"Dummy \u7c7b, \u5bf9\u6240\u6709\u8c03\u7528\u8fd4\u56de None. (\u53ef\u4ee5\u9884\u8bbe\u67d0\u4e9b\u503c)\"\"\" def __init__ ( self , ** kwds ): for k , v in kwds . items (): self . __setattr__ ( k , v ) def __getattr__ ( self , * _ , ** __ ): return self def __call__ ( self , * _ , ** __ ): return self def __await__ ( self ): yield return self","title":"Dummy"},{"location":"refs/graia/ariadne/util/#graia.ariadne.util.app_ctx_manager","text":"app_ctx_manager ( func : Callable [ P , R ]) -> Callable [ P , R ] \u5305\u88c5\u58f0\u660e\u9700\u8981\u5728 Ariadne Context \u4e2d\u6267\u884c\u7684\u51fd\u6570 Parameters: Name Type Description Default func Callable [ P , R ] \u88ab\u5305\u88c5\u7684\u51fd\u6570 required Returns: Type Description Callable [ P , R ] Callable[P, R]: \u5305\u88c5\u540e\u7684\u51fd\u6570 Source code in graia/ariadne/util/__init__.py 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 def app_ctx_manager ( func : Callable [ P , R ]) -> Callable [ P , R ]: \"\"\"\u5305\u88c5\u58f0\u660e\u9700\u8981\u5728 Ariadne Context \u4e2d\u6267\u884c\u7684\u51fd\u6570 Args: func (Callable[P, R]): \u88ab\u5305\u88c5\u7684\u51fd\u6570 Returns: Callable[P, R]: \u5305\u88c5\u540e\u7684\u51fd\u6570 \"\"\" @functools . wraps ( func ) def wrapper ( * args : P . args , ** kwargs : P . kwargs ): from ..context import enter_context sys . audit ( \"CallAriadneAPI\" , func . __name__ , args , kwargs ) with enter_context ( app = args [ 0 ]): # type: ignore return func ( * args , ** kwargs ) return wrapper","title":"app_ctx_manager()"},{"location":"refs/graia/ariadne/util/#graia.ariadne.util.await_predicate","text":"await_predicate ( predicate : Callable [[], bool ], interval : float = 0.01 ) -> None \u5f02\u6b65\u963b\u585e\u81f3\u6ee1\u8db3 predicate \u4e3a True Parameters: Name Type Description Default predicate Callable [[], bool ] \u5224\u65ad\u6761\u4ef6 required interval float \u6bcf\u6b21\u68c0\u67e5\u95f4\u9694. Defaults to 0.01. 0.01 Source code in graia/ariadne/util/__init__.py 296 297 298 299 300 301 302 303 304 async def await_predicate ( predicate : Callable [[], bool ], interval : float = 0.01 ) -> None : \"\"\"\u5f02\u6b65\u963b\u585e\u81f3\u6ee1\u8db3 predicate \u4e3a True Args: predicate (Callable[[], bool]): \u5224\u65ad\u6761\u4ef6 interval (float, optional): \u6bcf\u6b21\u68c0\u67e5\u95f4\u9694. Defaults to 0.01. \"\"\" while not predicate (): await asyncio . sleep ( interval )","title":"await_predicate()"},{"location":"refs/graia/ariadne/util/#graia.ariadne.util.const_call","text":"const_call ( val : T ) -> Callable [[], T ] \u751f\u6210\u4e00\u4e2a\u8fd4\u56de\u5e38\u91cf\u7684 Callable Parameters: Name Type Description Default val T \u5e38\u91cf required Returns: Type Description Callable [[], T ] Callable[[], T]: \u8fd4\u56de\u7684\u51fd\u6570 Source code in graia/ariadne/util/__init__.py 261 262 263 264 265 266 267 268 269 270 def const_call ( val : T ) -> Callable [[], T ]: \"\"\"\u751f\u6210\u4e00\u4e2a\u8fd4\u56de\u5e38\u91cf\u7684 Callable Args: val (T): \u5e38\u91cf Returns: Callable[[], T]: \u8fd4\u56de\u7684\u51fd\u6570 \"\"\" return lambda : val","title":"const_call()"},{"location":"refs/graia/ariadne/util/#graia.ariadne.util.deprecated","text":"deprecated ( remove_ver : str ) -> Callable [[ Callable [ P , R ]], Callable [ P , R ]] \u6807\u6ce8\u4e00\u4e2a\u65b9\u6cd5 / \u51fd\u6570\u5df2\u88ab\u5f03\u7528 Parameters: Name Type Description Default remove_ver str \u5c06\u88ab\u79fb\u9664\u7684\u7248\u672c. required Returns: Type Description Callable [[ Callable [ P , R ]], Callable [ P , R ]] Callable[[T_Callable], T_Callable]: \u5305\u88c5\u5668. Source code in graia/ariadne/util/__init__.py 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 def deprecated ( remove_ver : str ) -> Callable [[ Callable [ P , R ]], Callable [ P , R ]]: \"\"\"\u6807\u6ce8\u4e00\u4e2a\u65b9\u6cd5 / \u51fd\u6570\u5df2\u88ab\u5f03\u7528 Args: remove_ver (str): \u5c06\u88ab\u79fb\u9664\u7684\u7248\u672c. Returns: Callable[[T_Callable], T_Callable]: \u5305\u88c5\u5668. \"\"\" def out_wrapper ( func : Callable [ P , R ]) -> Callable [ P , R ]: @functools . wraps ( func ) def wrapper ( * args : P . args , ** kwargs : P . kwargs ) -> R : warnings . warn ( DeprecationWarning ( f \" { func . __qualname__ } will be removed in { remove_ver } !\" )) logger . warning ( f \"Deprecated function: { func . __qualname__ } \" ) logger . warning ( f \" { func . __qualname__ } will be removed in { remove_ver } !\" ) return func ( * args , ** kwargs ) return wrapper return out_wrapper","title":"deprecated()"},{"location":"refs/graia/ariadne/util/#graia.ariadne.util.eval_ctx","text":"eval_ctx ( layer : int = 0 , globals_ : Optional [ DictStrAny ] = None , locals_ : Optional [ DictStrAny ] = None ) -> Tuple [ DictStrAny , DictStrAny ] \u83b7\u53d6\u4e00\u4e2a\u4e0a\u4e0b\u6587\u7684\u5168\u5c40\u548c\u5c40\u90e8\u53d8\u91cf Parameters: Name Type Description Default layer int \u5c42\u6570. Defaults to 0. 0 globals_ Optional [ DictStrAny ] \u5168\u5c40\u53d8\u91cf. Defaults to None. None locals_ Optional [ DictStrAny ] \u5c40\u90e8\u53d8\u91cf. Defaults to None. None Returns: Type Description Tuple [ DictStrAny , DictStrAny ] Tuple[DictStrAny, DictStrAny]: \u5168\u5c40\u548c\u5c40\u90e8\u53d8\u91cf\u5b57\u5178. Source code in graia/ariadne/util/__init__.py 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 def eval_ctx ( layer : int = 0 , globals_ : Optional [ DictStrAny ] = None , locals_ : Optional [ DictStrAny ] = None ) -> Tuple [ DictStrAny , DictStrAny ]: \"\"\"\u83b7\u53d6\u4e00\u4e2a\u4e0a\u4e0b\u6587\u7684\u5168\u5c40\u548c\u5c40\u90e8\u53d8\u91cf Args: layer (int, optional): \u5c42\u6570. Defaults to 0. globals_ (Optional[DictStrAny], optional): \u5168\u5c40\u53d8\u91cf. Defaults to None. locals_ (Optional[DictStrAny], optional): \u5c40\u90e8\u53d8\u91cf. Defaults to None. Returns: Tuple[DictStrAny, DictStrAny]: \u5168\u5c40\u548c\u5c40\u90e8\u53d8\u91cf\u5b57\u5178. \"\"\" frame = inspect . stack ()[ layer + 1 ] . frame # add the current frame global_dict , local_dict = frame . f_globals , frame . f_locals global_dict . update ( globals_ or {}) local_dict . update ( locals_ or {}) return global_dict , local_dict","title":"eval_ctx()"},{"location":"refs/graia/ariadne/util/#graia.ariadne.util.gen_subclass","text":"gen_subclass ( cls : Type [ T ]) -> Generator [ Type [ T ], None , None ] \u751f\u6210\u67d0\u4e2a\u7c7b\u7684\u6240\u6709\u5b50\u7c7b (\u5305\u62ec\u5176\u81ea\u8eab) Parameters: Name Type Description Default cls Type [ T ] \u7c7b required Yields: Type Description Generator [ Type [ T ], None, None] Type[T]: \u5b50\u7c7b Source code in graia/ariadne/util/__init__.py 240 241 242 243 244 245 246 247 248 249 250 251 252 253 def gen_subclass ( cls : Type [ T ]) -> Generator [ Type [ T ], None , None ]: \"\"\"\u751f\u6210\u67d0\u4e2a\u7c7b\u7684\u6240\u6709\u5b50\u7c7b (\u5305\u62ec\u5176\u81ea\u8eab) Args: cls (Type[T]): \u7c7b Yields: Type[T]: \u5b50\u7c7b \"\"\" yield cls for sub_cls in cls . __subclasses__ (): if TYPE_CHECKING : assert issubclass ( sub_cls , cls ) yield from gen_subclass ( sub_cls )","title":"gen_subclass()"},{"location":"refs/graia/ariadne/util/#graia.ariadne.util.inject_bypass_listener","text":"inject_bypass_listener ( broadcast : Broadcast ) \u6ce8\u5165 BypassListener \u4ee5\u4eab\u53d7\u5b50\u4e8b\u4ef6\u89e3\u6790. Parameters: Name Type Description Default broadcast Broadcast \u5916\u90e8\u4e8b\u4ef6\u7cfb\u7edf, \u63d0\u4f9b\u4e86 event_class_generator \u65b9\u6cd5\u4ee5\u751f\u6210\u5b50\u4e8b\u4ef6. required Source code in graia/ariadne/util/__init__.py 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 def inject_bypass_listener ( broadcast : Broadcast ): \"\"\"\u6ce8\u5165 BypassListener \u4ee5\u4eab\u53d7\u5b50\u4e8b\u4ef6\u89e3\u6790. Args: broadcast (Broadcast): \u5916\u90e8\u4e8b\u4ef6\u7cfb\u7edf, \u63d0\u4f9b\u4e86 event_class_generator \u65b9\u6cd5\u4ee5\u751f\u6210\u5b50\u4e8b\u4ef6. \"\"\" class BypassListener ( Listener ): \"\"\"\u900f\u4f20\u76d1\u542c\u5668\u7684\u5b9e\u73b0\"\"\" def __init__ ( self , callable : Callable , namespace : Namespace , listening_events : List [ Type [ Dispatchable ]], inline_dispatchers : Optional [ List [ T_Dispatcher ]] = None , decorators : Optional [ List [ Decorator ]] = None , priority : int = 16 , ) -> None : events = [] for event in listening_events : events . append ( event ) events . extend ( broadcast . event_class_generator ( event )) super () . __init__ ( callable , namespace , events , inline_dispatchers = inline_dispatchers or [], decorators = decorators or [], priority = priority , ) import graia.broadcast.entities.listener graia . broadcast . entities . listener . Listener = BypassListener # type: ignore graia . broadcast . Listener = BypassListener # type: ignore try : # Override saya listener import graia.saya.builtins.broadcast.schema graia . saya . builtins . broadcast . schema . Listener = BypassListener # type: ignore except ImportError : # Saya not installed, pass. pass","title":"inject_bypass_listener()"},{"location":"refs/graia/ariadne/util/#graia.ariadne.util.inject_loguru_traceback","text":"inject_loguru_traceback ( loop : Optional [ AbstractEventLoop ] = None ) \u4f7f\u7528 loguru \u6a21\u5757\u66ff\u6362\u9ed8\u8ba4\u7684 traceback.print_exception \u4e0e sys.excepthook Source code in graia/ariadne/util/__init__.py 130 131 132 133 134 135 def inject_loguru_traceback ( loop : Optional [ AbstractEventLoop ] = None ): \"\"\"\u4f7f\u7528 loguru \u6a21\u5757\u66ff\u6362\u9ed8\u8ba4\u7684 traceback.print_exception \u4e0e sys.excepthook\"\"\" traceback . print_exception = loguru_excepthook sys . excepthook = loguru_excepthook if loop : loop . set_exception_handler ( loguru_async_handler )","title":"inject_loguru_traceback()"},{"location":"refs/graia/ariadne/util/#graia.ariadne.util.loguru_async_handler","text":"loguru_async_handler ( _ , ctx : dict ) loguru \u5f02\u6b65\u5f02\u5e38\u56de\u8c03 Parameters: Name Type Description Default _ AbstractEventLoop \u5f02\u5e38\u53d1\u751f\u7684\u4e8b\u4ef6\u5faa\u73af required ctx dict \u5f02\u5e38\u4e0a\u4e0b\u6587 required Source code in graia/ariadne/util/__init__.py 100 101 102 103 104 105 106 107 108 109 110 def loguru_async_handler ( _ , ctx : dict ): \"\"\"loguru \u5f02\u6b65\u5f02\u5e38\u56de\u8c03 Args: _ (AbstractEventLoop): \u5f02\u5e38\u53d1\u751f\u7684\u4e8b\u4ef6\u5faa\u73af ctx (dict): \u5f02\u5e38\u4e0a\u4e0b\u6587 \"\"\" if \"exception\" in ctx : logger . opt ( exception = ctx [ \"exception\" ]) . error ( \"Exception:\" ) else : logger . error ( f \"Exception: { ctx } \" )","title":"loguru_async_handler()"},{"location":"refs/graia/ariadne/util/#graia.ariadne.util.loguru_excepthook","text":"loguru_excepthook ( cls : Type [ BaseException ], val : BaseException , tb : TracebackType , * _ , ** __ ) loguru \u5f02\u5e38\u56de\u8c03 Parameters: Name Type Description Default cls Type [ Exception ] \u5f02\u5e38\u7c7b required val Exception \u5f02\u5e38\u7684\u5b9e\u9645\u503c required tb TracebackType \u56de\u6eaf\u6d88\u606f required Source code in graia/ariadne/util/__init__.py 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 def loguru_excepthook ( cls : Type [ BaseException ], val : BaseException , tb : TracebackType , * _ , ** __ ): \"\"\"loguru \u5f02\u5e38\u56de\u8c03 Args: cls (Type[Exception]): \u5f02\u5e38\u7c7b val (Exception): \u5f02\u5e38\u7684\u5b9e\u9645\u503c tb (TracebackType): \u56de\u6eaf\u6d88\u606f \"\"\" exec_module_name = tb . tb_frame . f_globals . get ( \"__name__\" , \"\" ) if issubclass ( cls , ExecutionStop ) and exec_module_name . startswith ( \"graia\" ): return elif isinstance ( val , RequirementCrashed ) and exec_module_name . startswith ( \"graia.broadcast\" ): with contextlib . suppress ( Exception ): local_dict = tb . tb_frame . f_locals _ , param_name , param_anno , param_default = val . args if isinstance ( param_anno , type ): param_anno = param_anno . __qualname__ param_repr = \"\" . join ( [ param_name , f \": { type_repr ( param_anno ) } \" if param_anno else \"\" , f \" = { param_default } \" if param_default else \"\" , ] ) val = RequirementCrashed ( \"Unable to lookup parameter \" f \"( { param_repr } )\" , local_dict [ \"dispatchers\" ], ) logger . opt ( exception = ( cls , val , tb )) . error ( \"Exception:\" )","title":"loguru_excepthook()"},{"location":"refs/graia/ariadne/util/#graia.ariadne.util.resolve_dispatchers_mixin","text":"resolve_dispatchers_mixin ( dispatchers : Iterable [ T_Dispatcher ]) -> List [ T_Dispatcher ] \u89e3\u6790 dispatcher list \u7684 mixin Parameters: Name Type Description Default dispatchers Iterable [ T_Dispatcher ] dispatcher \u5217\u8868 required Returns: Type Description List [ T_Dispatcher ] List[T_Dispatcher]: \u89e3\u6790\u540e\u7684 dispatcher \u5217\u8868 Source code in graia/ariadne/util/__init__.py 358 359 360 361 362 363 364 365 366 367 368 369 370 def resolve_dispatchers_mixin ( dispatchers : Iterable [ T_Dispatcher ]) -> List [ T_Dispatcher ]: \"\"\"\u89e3\u6790 dispatcher list \u7684 mixin Args: dispatchers (Iterable[T_Dispatcher]): dispatcher \u5217\u8868 Returns: List[T_Dispatcher]: \u89e3\u6790\u540e\u7684 dispatcher \u5217\u8868 \"\"\" result = [] for dispatcher in dispatchers : result . extend ( dispatcher_mixin_handler ( dispatcher )) return result","title":"resolve_dispatchers_mixin()"},{"location":"refs/graia/ariadne/util/#graia.ariadne.util.signal_handler","text":"signal_handler ( callback : Callable [[], None ], one_time : bool = True ) -> None \u6ce8\u518c\u4fe1\u53f7\u5904\u7406\u5668 Parameters: Name Type Description Default callback Callable [[], None] \u4fe1\u53f7\u5904\u7406\u5668 required one_time bool \u662f\u5426\u53ea\u6267\u884c\u4e00\u6b21. \u9ed8\u8ba4\u4e3a True. True Returns: Type Description None None Source code in graia/ariadne/util/__init__.py 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 def signal_handler ( callback : Callable [[], None ], one_time : bool = True ) -> None : \"\"\"\u6ce8\u518c\u4fe1\u53f7\u5904\u7406\u5668 Args: callback (Callable[[], None]): \u4fe1\u53f7\u5904\u7406\u5668 one_time (bool, optional): \u662f\u5426\u53ea\u6267\u884c\u4e00\u6b21. \u9ed8\u8ba4\u4e3a True. Returns: None \"\"\" import signal import threading if not threading . main_thread () . ident == threading . current_thread () . ident : return HANDLED_SIGNAL = ( signal . SIGINT , signal . SIGTERM ) for sig in HANDLED_SIGNAL : handler = signal . getsignal ( sig ) def handler_wrapper ( sig_num , frame ): if callable ( handler ): handler ( sig_num , frame ) callback () if one_time : signal . signal ( sig_num , handler ) signal . signal ( sig , handler_wrapper )","title":"signal_handler()"},{"location":"refs/graia/ariadne/util/#graia.ariadne.util.wrap_bracket","text":"wrap_bracket ( string : str ) -> str \u5728\u5b57\u7b26\u4e32\u4e2d\u8f6c\u4e49\u4e2d\u62ec\u53f7\u62ec\u53f7 Source code in graia/ariadne/util/__init__.py 256 257 258 def wrap_bracket ( string : str ) -> str : \"\"\"\u5728\u5b57\u7b26\u4e32\u4e2d\u8f6c\u4e49\u4e2d\u62ec\u53f7\u62ec\u53f7\"\"\" return string . replace ( \"[\" , \" \\\\ u005b\" ) . replace ( \"]\" , \" \\\\ u005d\" )","title":"wrap_bracket()"},{"location":"refs/graia/ariadne/util/#graia.ariadne.util.yield_with_timeout","text":"yield_with_timeout ( getter_coro : Callable [[], Coroutine [ None , None , T ]], predicate : Callable [[], bool ], await_length : float = 0.2 ) -> AsyncIterator [ T ] \u5728\u6ee1\u8db3 predicate \u65f6\u8fd4\u56de getter_coro() \u7684\u503c Parameters: Name Type Description Default getter_coro Callable [[], Coroutine [None, None, T ]] \u8981\u5faa\u73af\u8fd4\u56de\u7684\u534f\u7a0b\u51fd\u6570. required predicate Callable [[], bool ] \u6761\u4ef6\u56de\u8c03\u51fd\u6570. required await_length float \u7b49\u5f85\u76ee\u524d\u534f\u7a0b\u7684\u65f6\u957f. \u9ed8\u8ba4 0.2s. 0.2 Yields: Name Type Description T AsyncIterator [ T ] getter_coro \u7684\u8fd4\u56de\u503c Source code in graia/ariadne/util/__init__.py 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 async def yield_with_timeout ( getter_coro : Callable [[], Coroutine [ None , None , T ]], predicate : Callable [[], bool ], await_length : float = 0.2 , ) -> AsyncIterator [ T ]: \"\"\"\u5728\u6ee1\u8db3 predicate \u65f6\u8fd4\u56de getter_coro() \u7684\u503c Args: getter_coro (Callable[[], Coroutine[None, None, T]]): \u8981\u5faa\u73af\u8fd4\u56de\u7684\u534f\u7a0b\u51fd\u6570. predicate (Callable[[], bool]): \u6761\u4ef6\u56de\u8c03\u51fd\u6570. await_length (float, optional): \u7b49\u5f85\u76ee\u524d\u534f\u7a0b\u7684\u65f6\u957f. \u9ed8\u8ba4 0.2s. Yields: T: getter_coro \u7684\u8fd4\u56de\u503c \"\"\" last_tsk : Optional [ Set [ \"asyncio.Task[T]\" ]] = None while predicate (): last_tsk = last_tsk or { asyncio . create_task ( getter_coro ())} done , last_tsk = await asyncio . wait ( last_tsk , timeout = await_length ) if not done : continue for t in done : yield await t if last_tsk : for tsk in last_tsk : tsk . cancel ()","title":"yield_with_timeout()"},{"location":"refs/graia/ariadne/util/async_exec/","text":"\u672c\u6a21\u5757\u63d0\u4f9b\u5e76\u884c\u6267\u884c\u5668, \u53ca\u65b9\u4fbf\u51fd\u6570 io_bound , cpu_bound . ParallelExecutor \ud83d\udd17 \u5e76\u884c\u6267\u884c\u5668. Source code in graia/ariadne/util/async_exec.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 class ParallelExecutor : \"\"\"\u5e76\u884c\u6267\u884c\u5668.\"\"\" thread_exec : ThreadPoolExecutor proc_exec : ProcessPoolExecutor loop_ref_dict : ClassVar [ Dict [ AbstractEventLoop , \"ParallelExecutor\" ]] = {} func_mapping : ClassVar [ Dict [ Tuple [ str , str ], Callable ]] = {} def __init__ ( self , loop : Optional [ AbstractEventLoop ] = None , max_thread : Optional [ int ] = None , max_process : Optional [ int ] = None , ): \"\"\"\u521d\u59cb\u5316\u5e76\u884c\u6267\u884c\u5668. Args: loop (AbstractEventLoop, optional): \u8981\u7ed1\u5b9a\u7684\u4e8b\u4ef6\u5faa\u73af, \u4f1a\u81ea\u52a8\u83b7\u53d6\u5f53\u524d\u4e8b\u4ef6\u5faa\u73af. Defaults to None. max_thread (int, optional): \u6700\u5927\u7ebf\u7a0b\u6570. Defaults to None. max_process (int, optional): \u6700\u5927\u8fdb\u7a0b\u6570. Defaults to None. `max_thread` \u4e0e `max_process` \u53c2\u6570\u9ed8\u8ba4\u503c\u8bf7\u53c2\u9605 `concurrent.futures`. \"\"\" self . thread_exec = ThreadPoolExecutor ( max_workers = max_thread ) self . proc_exec = ProcessPoolExecutor ( max_workers = max_process , initializer = _reg_sigint ) # see issue #50 self . bind_loop ( loop or asyncio . get_running_loop ()) @classmethod def get ( cls , loop : Optional [ AbstractEventLoop ] = None ) -> \"ParallelExecutor\" : \"\"\"\u83b7\u53d6 ParallelExecutor \u5b9e\u4f8b Args: loop (AbstractEventLoop, optional): \u67e5\u627e\u7684\u4e8b\u4ef6\u5faa\u73af. Defaults to None. Returns: ParallelExecutor: \u627e\u5230\u7684 / \u65b0\u521b\u5efa\u7684 ParallelExecutor. \"\"\" loop = loop or asyncio . get_running_loop () if loop not in cls . loop_ref_dict : cls . loop_ref_dict [ loop ] = ParallelExecutor () return cls . loop_ref_dict [ loop ] def bind_loop ( self , loop : AbstractEventLoop ): \"\"\"\u7ed1\u5b9a\u672c\u5b9e\u4f8b\u5230 loop. Args: loop (AbstractEventLoop): \u8981\u7ed1\u5b9a\u5230\u7684\u4e8b\u4ef6\u5faa\u73af. \"\"\" self . loop_ref_dict [ loop ] = self @classmethod def shutdown ( cls ): \"\"\"\u5173\u95ed\u672c\u7c7b\u7684\u6240\u6709\u5e95\u5c42 Executor.\"\"\" for exec in cls . loop_ref_dict . values (): exec . close () def close ( self ): \"\"\"\u5173\u95ed\u5b9e\u4f8b\u7684\u6240\u6709\u5e95\u5c42 Executor.\"\"\" self . thread_exec . shutdown () self . proc_exec . shutdown () @classmethod def run_func ( cls , name : str , module : str , args : tuple , kwargs : dict ) -> Any : \"\"\"\u8fd0\u884c\u51fd\u6570\u7684\u5b9e\u73b0 Args: name (str): \u51fd\u6570\u540d (__qualname__) module (str): \u51fd\u6570\u6240\u5728\u6a21\u5757\u540d (__module__) args (tuple): \u4f4d\u7f6e\u53c2\u6570 kwargs (dict): \u5173\u952e\u5b57\u53c2\u6570 Returns: Any: \u5e95\u5c42\u51fd\u6570\u7684\u8fd4\u56de\u503c \"\"\" importlib . import_module ( module ) return cls . func_mapping [ module , name ]( * args , ** kwargs ) @classmethod def run_func_static ( cls , func : Callable [ ... , R ], args : tuple , kwargs : dict ) -> R : \"\"\"\u8c03\u7528\u4e00\u4e2a\u9759\u6001\u51fd\u6570 (\u4f1a\u81ea\u52a8\u89e3\u5305\u88c5\u5df2\u88ab ParallelExecutor \u5305\u88c5\u8fc7\u7684\u51fd\u6570) Args: func (Callable[..., R]): \u8981\u8c03\u7528\u7684\u51fd\u6570 args (tuple): \u4f4d\u7f6e\u53c2\u6570 kwargs (dict): \u5173\u952e\u5b57\u53c2\u6570 Returns: R: \u5e95\u5c42\u51fd\u6570\u7684\u8fd4\u56de\u503c \"\"\" if ( func . __module__ , func . __qualname__ ) in cls . func_mapping : func = cls . func_mapping [ func . __module__ , func . __qualname__ ] return func ( * args , ** kwargs ) # type: ignore def to_thread ( self , func : Callable [ P , R ], * args : P . args , ** kwargs : P . kwargs ) -> Awaitable [ R ]: \"\"\"\u5728\u7ebf\u7a0b\u4e2d\u5f02\u6b65\u8fd0\u884c func \u51fd\u6570. Args: func (Callable[P, R]): \u8981\u8c03\u7528\u7684\u51fd\u6570. *args (P.args): \u9644\u5e26\u7684\u4f4d\u7f6e\u53c2\u6570. **kwargs (P.kwargs): \u9644\u5e26\u7684\u5173\u952e\u8bcd\u53c2\u6570. Returns: Future[R]: \u8fd4\u56de\u7ed3\u679c. \u9700\u8981\u88ab\u5f02\u6b65\u7b49\u5f85. \"\"\" return asyncio . get_running_loop () . run_in_executor ( # type: ignore self . thread_exec , ParallelExecutor . run_func_static , func , args , kwargs , ) def to_process ( self , func : Callable [ P , R ], * args : P . args , ** kwargs : P . kwargs ) -> Awaitable [ R ]: \"\"\"\u5728\u8fdb\u7a0b\u4e2d\u5f02\u6b65\u8fd0\u884c func \u51fd\u6570. \u9700\u8981\u5148\u6ce8\u518c\u8fc7\u624d\u884c. Args: func (Callable[P, R]): \u8981\u8c03\u7528\u7684\u51fd\u6570. *args (P.args): \u9644\u5e26\u7684\u4f4d\u7f6e\u53c2\u6570. **kwargs (P.kwargs): \u9644\u5e26\u7684\u5173\u952e\u8bcd\u53c2\u6570. Returns: Future[R]: \u8fd4\u56de\u7ed3\u679c. \u9700\u8981\u88ab\u5f02\u6b65\u7b49\u5f85. \"\"\" return asyncio . get_running_loop () . run_in_executor ( # type: ignore self . proc_exec , ParallelExecutor . run_func_static , func , args , kwargs , ) __init__ \ud83d\udd17 __init__ ( loop : Optional [ AbstractEventLoop ] = None , max_thread : Optional [ int ] = None , max_process : Optional [ int ] = None ) \u521d\u59cb\u5316\u5e76\u884c\u6267\u884c\u5668. Parameters: Name Type Description Default loop AbstractEventLoop \u8981\u7ed1\u5b9a\u7684\u4e8b\u4ef6\u5faa\u73af, \u4f1a\u81ea\u52a8\u83b7\u53d6\u5f53\u524d\u4e8b\u4ef6\u5faa\u73af. Defaults to None. None max_thread int \u6700\u5927\u7ebf\u7a0b\u6570. Defaults to None. None max_process int \u6700\u5927\u8fdb\u7a0b\u6570. Defaults to None. None max_thread \u4e0e max_process \u53c2\u6570\u9ed8\u8ba4\u503c\u8bf7\u53c2\u9605 concurrent.futures . Source code in graia/ariadne/util/async_exec.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 def __init__ ( self , loop : Optional [ AbstractEventLoop ] = None , max_thread : Optional [ int ] = None , max_process : Optional [ int ] = None , ): \"\"\"\u521d\u59cb\u5316\u5e76\u884c\u6267\u884c\u5668. Args: loop (AbstractEventLoop, optional): \u8981\u7ed1\u5b9a\u7684\u4e8b\u4ef6\u5faa\u73af, \u4f1a\u81ea\u52a8\u83b7\u53d6\u5f53\u524d\u4e8b\u4ef6\u5faa\u73af. Defaults to None. max_thread (int, optional): \u6700\u5927\u7ebf\u7a0b\u6570. Defaults to None. max_process (int, optional): \u6700\u5927\u8fdb\u7a0b\u6570. Defaults to None. `max_thread` \u4e0e `max_process` \u53c2\u6570\u9ed8\u8ba4\u503c\u8bf7\u53c2\u9605 `concurrent.futures`. \"\"\" self . thread_exec = ThreadPoolExecutor ( max_workers = max_thread ) self . proc_exec = ProcessPoolExecutor ( max_workers = max_process , initializer = _reg_sigint ) # see issue #50 self . bind_loop ( loop or asyncio . get_running_loop ()) bind_loop \ud83d\udd17 bind_loop ( loop : AbstractEventLoop ) \u7ed1\u5b9a\u672c\u5b9e\u4f8b\u5230 loop. Parameters: Name Type Description Default loop AbstractEventLoop \u8981\u7ed1\u5b9a\u5230\u7684\u4e8b\u4ef6\u5faa\u73af. required Source code in graia/ariadne/util/async_exec.py 75 76 77 78 79 80 81 def bind_loop ( self , loop : AbstractEventLoop ): \"\"\"\u7ed1\u5b9a\u672c\u5b9e\u4f8b\u5230 loop. Args: loop (AbstractEventLoop): \u8981\u7ed1\u5b9a\u5230\u7684\u4e8b\u4ef6\u5faa\u73af. \"\"\" self . loop_ref_dict [ loop ] = self close \ud83d\udd17 close () \u5173\u95ed\u5b9e\u4f8b\u7684\u6240\u6709\u5e95\u5c42 Executor. Source code in graia/ariadne/util/async_exec.py 89 90 91 92 def close ( self ): \"\"\"\u5173\u95ed\u5b9e\u4f8b\u7684\u6240\u6709\u5e95\u5c42 Executor.\"\"\" self . thread_exec . shutdown () self . proc_exec . shutdown () get classmethod \ud83d\udd17 get ( loop : Optional [ AbstractEventLoop ] = None ) -> 'ParallelExecutor' \u83b7\u53d6 ParallelExecutor \u5b9e\u4f8b Parameters: Name Type Description Default loop AbstractEventLoop \u67e5\u627e\u7684\u4e8b\u4ef6\u5faa\u73af. Defaults to None. None Returns: Name Type Description ParallelExecutor 'ParallelExecutor' \u627e\u5230\u7684 / \u65b0\u521b\u5efa\u7684 ParallelExecutor. Source code in graia/ariadne/util/async_exec.py 60 61 62 63 64 65 66 67 68 69 70 71 72 73 @classmethod def get ( cls , loop : Optional [ AbstractEventLoop ] = None ) -> \"ParallelExecutor\" : \"\"\"\u83b7\u53d6 ParallelExecutor \u5b9e\u4f8b Args: loop (AbstractEventLoop, optional): \u67e5\u627e\u7684\u4e8b\u4ef6\u5faa\u73af. Defaults to None. Returns: ParallelExecutor: \u627e\u5230\u7684 / \u65b0\u521b\u5efa\u7684 ParallelExecutor. \"\"\" loop = loop or asyncio . get_running_loop () if loop not in cls . loop_ref_dict : cls . loop_ref_dict [ loop ] = ParallelExecutor () return cls . loop_ref_dict [ loop ] run_func classmethod \ud83d\udd17 run_func ( name : str , module : str , args : tuple , kwargs : dict ) -> Any \u8fd0\u884c\u51fd\u6570\u7684\u5b9e\u73b0 Parameters: Name Type Description Default name str \u51fd\u6570\u540d ( qualname ) required module str \u51fd\u6570\u6240\u5728\u6a21\u5757\u540d ( module ) required args tuple \u4f4d\u7f6e\u53c2\u6570 required kwargs dict \u5173\u952e\u5b57\u53c2\u6570 required Returns: Name Type Description Any Any \u5e95\u5c42\u51fd\u6570\u7684\u8fd4\u56de\u503c Source code in graia/ariadne/util/async_exec.py 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 @classmethod def run_func ( cls , name : str , module : str , args : tuple , kwargs : dict ) -> Any : \"\"\"\u8fd0\u884c\u51fd\u6570\u7684\u5b9e\u73b0 Args: name (str): \u51fd\u6570\u540d (__qualname__) module (str): \u51fd\u6570\u6240\u5728\u6a21\u5757\u540d (__module__) args (tuple): \u4f4d\u7f6e\u53c2\u6570 kwargs (dict): \u5173\u952e\u5b57\u53c2\u6570 Returns: Any: \u5e95\u5c42\u51fd\u6570\u7684\u8fd4\u56de\u503c \"\"\" importlib . import_module ( module ) return cls . func_mapping [ module , name ]( * args , ** kwargs ) run_func_static classmethod \ud83d\udd17 run_func_static ( func : Callable [ ... , R ], args : tuple , kwargs : dict ) -> R \u8c03\u7528\u4e00\u4e2a\u9759\u6001\u51fd\u6570 (\u4f1a\u81ea\u52a8\u89e3\u5305\u88c5\u5df2\u88ab ParallelExecutor \u5305\u88c5\u8fc7\u7684\u51fd\u6570) Parameters: Name Type Description Default func Callable [..., R ] \u8981\u8c03\u7528\u7684\u51fd\u6570 required args tuple \u4f4d\u7f6e\u53c2\u6570 required kwargs dict \u5173\u952e\u5b57\u53c2\u6570 required Returns: Name Type Description R R \u5e95\u5c42\u51fd\u6570\u7684\u8fd4\u56de\u503c Source code in graia/ariadne/util/async_exec.py 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 @classmethod def run_func_static ( cls , func : Callable [ ... , R ], args : tuple , kwargs : dict ) -> R : \"\"\"\u8c03\u7528\u4e00\u4e2a\u9759\u6001\u51fd\u6570 (\u4f1a\u81ea\u52a8\u89e3\u5305\u88c5\u5df2\u88ab ParallelExecutor \u5305\u88c5\u8fc7\u7684\u51fd\u6570) Args: func (Callable[..., R]): \u8981\u8c03\u7528\u7684\u51fd\u6570 args (tuple): \u4f4d\u7f6e\u53c2\u6570 kwargs (dict): \u5173\u952e\u5b57\u53c2\u6570 Returns: R: \u5e95\u5c42\u51fd\u6570\u7684\u8fd4\u56de\u503c \"\"\" if ( func . __module__ , func . __qualname__ ) in cls . func_mapping : func = cls . func_mapping [ func . __module__ , func . __qualname__ ] return func ( * args , ** kwargs ) # type: ignore shutdown classmethod \ud83d\udd17 shutdown () \u5173\u95ed\u672c\u7c7b\u7684\u6240\u6709\u5e95\u5c42 Executor. Source code in graia/ariadne/util/async_exec.py 83 84 85 86 87 @classmethod def shutdown ( cls ): \"\"\"\u5173\u95ed\u672c\u7c7b\u7684\u6240\u6709\u5e95\u5c42 Executor.\"\"\" for exec in cls . loop_ref_dict . values (): exec . close () to_process \ud83d\udd17 to_process ( func : Callable [ P , R ], * args : P . args , ** kwargs : P . kwargs ) -> Awaitable [ R ] \u5728\u8fdb\u7a0b\u4e2d\u5f02\u6b65\u8fd0\u884c func \u51fd\u6570. \u9700\u8981\u5148\u6ce8\u518c\u8fc7\u624d\u884c. Parameters: Name Type Description Default func Callable [ P , R ] \u8981\u8c03\u7528\u7684\u51fd\u6570. required *args P . args \u9644\u5e26\u7684\u4f4d\u7f6e\u53c2\u6570. () **kwargs P . kwargs \u9644\u5e26\u7684\u5173\u952e\u8bcd\u53c2\u6570. {} Returns: Type Description Awaitable [ R ] Future[R]: \u8fd4\u56de\u7ed3\u679c. \u9700\u8981\u88ab\u5f02\u6b65\u7b49\u5f85. Source code in graia/ariadne/util/async_exec.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 def to_process ( self , func : Callable [ P , R ], * args : P . args , ** kwargs : P . kwargs ) -> Awaitable [ R ]: \"\"\"\u5728\u8fdb\u7a0b\u4e2d\u5f02\u6b65\u8fd0\u884c func \u51fd\u6570. \u9700\u8981\u5148\u6ce8\u518c\u8fc7\u624d\u884c. Args: func (Callable[P, R]): \u8981\u8c03\u7528\u7684\u51fd\u6570. *args (P.args): \u9644\u5e26\u7684\u4f4d\u7f6e\u53c2\u6570. **kwargs (P.kwargs): \u9644\u5e26\u7684\u5173\u952e\u8bcd\u53c2\u6570. Returns: Future[R]: \u8fd4\u56de\u7ed3\u679c. \u9700\u8981\u88ab\u5f02\u6b65\u7b49\u5f85. \"\"\" return asyncio . get_running_loop () . run_in_executor ( # type: ignore self . proc_exec , ParallelExecutor . run_func_static , func , args , kwargs , ) to_thread \ud83d\udd17 to_thread ( func : Callable [ P , R ], * args : P . args , ** kwargs : P . kwargs ) -> Awaitable [ R ] \u5728\u7ebf\u7a0b\u4e2d\u5f02\u6b65\u8fd0\u884c func \u51fd\u6570. Parameters: Name Type Description Default func Callable [ P , R ] \u8981\u8c03\u7528\u7684\u51fd\u6570. required *args P . args \u9644\u5e26\u7684\u4f4d\u7f6e\u53c2\u6570. () **kwargs P . kwargs \u9644\u5e26\u7684\u5173\u952e\u8bcd\u53c2\u6570. {} Returns: Type Description Awaitable [ R ] Future[R]: \u8fd4\u56de\u7ed3\u679c. \u9700\u8981\u88ab\u5f02\u6b65\u7b49\u5f85. Source code in graia/ariadne/util/async_exec.py 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 def to_thread ( self , func : Callable [ P , R ], * args : P . args , ** kwargs : P . kwargs ) -> Awaitable [ R ]: \"\"\"\u5728\u7ebf\u7a0b\u4e2d\u5f02\u6b65\u8fd0\u884c func \u51fd\u6570. Args: func (Callable[P, R]): \u8981\u8c03\u7528\u7684\u51fd\u6570. *args (P.args): \u9644\u5e26\u7684\u4f4d\u7f6e\u53c2\u6570. **kwargs (P.kwargs): \u9644\u5e26\u7684\u5173\u952e\u8bcd\u53c2\u6570. Returns: Future[R]: \u8fd4\u56de\u7ed3\u679c. \u9700\u8981\u88ab\u5f02\u6b65\u7b49\u5f85. \"\"\" return asyncio . get_running_loop () . run_in_executor ( # type: ignore self . thread_exec , ParallelExecutor . run_func_static , func , args , kwargs , ) IS_MAIN_PROCESS \ud83d\udd17 IS_MAIN_PROCESS () -> bool \u8fd4\u56de\u662f\u5426\u4e3a\u4e3b\u8fdb\u7a0b Returns: Name Type Description bool bool \u662f\u5426\u4e3a\u4e3b\u8fdb\u7a0b Source code in graia/ariadne/util/async_exec.py 14 15 16 17 18 19 20 def IS_MAIN_PROCESS () -> bool : \"\"\"\u8fd4\u56de\u662f\u5426\u4e3a\u4e3b\u8fdb\u7a0b Returns: bool: \u662f\u5426\u4e3a\u4e3b\u8fdb\u7a0b \"\"\" return multiprocessing . parent_process () is None _reg_sigint \ud83d\udd17 _reg_sigint () \u5728\u5b50\u8fdb\u7a0b\u6ce8\u518c SIGINT \u5904\u7406\u51fd\u6570\u4ee5\u9632\u6b62 Traceback \u70b8\u5c4f Source code in graia/ariadne/util/async_exec.py 23 24 25 26 27 28 def _reg_sigint (): \"\"\"\u5728\u5b50\u8fdb\u7a0b\u6ce8\u518c SIGINT \u5904\u7406\u51fd\u6570\u4ee5\u9632\u6b62 Traceback \u70b8\u5c4f\"\"\" import signal import sys signal . signal ( signal . SIGINT , lambda * _ , ** __ : sys . exit ()) cpu_bound \ud83d\udd17 cpu_bound ( func : Callable [ P , R ]) -> Callable [ P , Awaitable [ R ]] \u5305\u88c5\u4e00\u4e2a\u51fd\u6570\u5728\u8fdb\u7a0b\u4e2d\u5f02\u6b65\u8fd0\u884c. Parameters: Name Type Description Default func Callable [ P , R ] \u8981\u5305\u88c5\u7684\u51fd\u6570 required Returns: Type Description Callable [ P , Awaitable [ R ]] Callable[P, Awaitable[R]]: \u5305\u88c5\u540e\u7684\u51fd\u6570 Source code in graia/ariadne/util/async_exec.py 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 def cpu_bound ( func : Callable [ P , R ]) -> Callable [ P , Awaitable [ R ]]: \"\"\"\u5305\u88c5\u4e00\u4e2a\u51fd\u6570\u5728\u8fdb\u7a0b\u4e2d\u5f02\u6b65\u8fd0\u884c. Args: func (Callable[P, R]): \u8981\u5305\u88c5\u7684\u51fd\u6570 Returns: Callable[P, Awaitable[R]]: \u5305\u88c5\u540e\u7684\u51fd\u6570 \"\"\" ParallelExecutor . func_mapping [ func . __module__ , func . __qualname__ ] = func @functools . wraps ( func ) async def wrapper ( * args : P . args , ** kwargs : P . kwargs ) -> R : loop = asyncio . get_running_loop () executor = ParallelExecutor . get ( loop ) return await loop . run_in_executor ( executor . proc_exec , ParallelExecutor . run_func , func . __qualname__ , func . __module__ , args , kwargs , ) return wrapper io_bound \ud83d\udd17 io_bound ( func : Callable [ P , R ]) -> Callable [ P , Awaitable [ R ]] \u5305\u88c5\u4e00\u4e2a\u51fd\u6570\u5728\u7ebf\u7a0b\u4e2d\u5f02\u6b65\u8fd0\u884c. Parameters: Name Type Description Default func Callable [ P , R ] \u8981\u5305\u88c5\u7684\u51fd\u6570 required Returns: Type Description Callable [ P , Awaitable [ R ]] Callable[P, Awaitable[R]]: \u5305\u88c5\u540e\u7684\u51fd\u6570 Source code in graia/ariadne/util/async_exec.py 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 def io_bound ( func : Callable [ P , R ]) -> Callable [ P , Awaitable [ R ]]: \"\"\"\u5305\u88c5\u4e00\u4e2a\u51fd\u6570\u5728\u7ebf\u7a0b\u4e2d\u5f02\u6b65\u8fd0\u884c. Args: func (Callable[P, R]): \u8981\u5305\u88c5\u7684\u51fd\u6570 Returns: Callable[P, Awaitable[R]]: \u5305\u88c5\u540e\u7684\u51fd\u6570 \"\"\" ParallelExecutor . func_mapping [ func . __module__ , func . __qualname__ ] = func @functools . wraps ( func ) async def wrapper ( * args : P . args , ** kwargs : P . kwargs ) -> R : loop = asyncio . get_running_loop () executor = ParallelExecutor . get ( loop ) return await loop . run_in_executor ( executor . thread_exec , ParallelExecutor . run_func , func . __qualname__ , func . __module__ , args , kwargs , ) return wrapper","title":"async_exec"},{"location":"refs/graia/ariadne/util/async_exec/#graia.ariadne.util.async_exec.ParallelExecutor","text":"\u5e76\u884c\u6267\u884c\u5668. Source code in graia/ariadne/util/async_exec.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 class ParallelExecutor : \"\"\"\u5e76\u884c\u6267\u884c\u5668.\"\"\" thread_exec : ThreadPoolExecutor proc_exec : ProcessPoolExecutor loop_ref_dict : ClassVar [ Dict [ AbstractEventLoop , \"ParallelExecutor\" ]] = {} func_mapping : ClassVar [ Dict [ Tuple [ str , str ], Callable ]] = {} def __init__ ( self , loop : Optional [ AbstractEventLoop ] = None , max_thread : Optional [ int ] = None , max_process : Optional [ int ] = None , ): \"\"\"\u521d\u59cb\u5316\u5e76\u884c\u6267\u884c\u5668. Args: loop (AbstractEventLoop, optional): \u8981\u7ed1\u5b9a\u7684\u4e8b\u4ef6\u5faa\u73af, \u4f1a\u81ea\u52a8\u83b7\u53d6\u5f53\u524d\u4e8b\u4ef6\u5faa\u73af. Defaults to None. max_thread (int, optional): \u6700\u5927\u7ebf\u7a0b\u6570. Defaults to None. max_process (int, optional): \u6700\u5927\u8fdb\u7a0b\u6570. Defaults to None. `max_thread` \u4e0e `max_process` \u53c2\u6570\u9ed8\u8ba4\u503c\u8bf7\u53c2\u9605 `concurrent.futures`. \"\"\" self . thread_exec = ThreadPoolExecutor ( max_workers = max_thread ) self . proc_exec = ProcessPoolExecutor ( max_workers = max_process , initializer = _reg_sigint ) # see issue #50 self . bind_loop ( loop or asyncio . get_running_loop ()) @classmethod def get ( cls , loop : Optional [ AbstractEventLoop ] = None ) -> \"ParallelExecutor\" : \"\"\"\u83b7\u53d6 ParallelExecutor \u5b9e\u4f8b Args: loop (AbstractEventLoop, optional): \u67e5\u627e\u7684\u4e8b\u4ef6\u5faa\u73af. Defaults to None. Returns: ParallelExecutor: \u627e\u5230\u7684 / \u65b0\u521b\u5efa\u7684 ParallelExecutor. \"\"\" loop = loop or asyncio . get_running_loop () if loop not in cls . loop_ref_dict : cls . loop_ref_dict [ loop ] = ParallelExecutor () return cls . loop_ref_dict [ loop ] def bind_loop ( self , loop : AbstractEventLoop ): \"\"\"\u7ed1\u5b9a\u672c\u5b9e\u4f8b\u5230 loop. Args: loop (AbstractEventLoop): \u8981\u7ed1\u5b9a\u5230\u7684\u4e8b\u4ef6\u5faa\u73af. \"\"\" self . loop_ref_dict [ loop ] = self @classmethod def shutdown ( cls ): \"\"\"\u5173\u95ed\u672c\u7c7b\u7684\u6240\u6709\u5e95\u5c42 Executor.\"\"\" for exec in cls . loop_ref_dict . values (): exec . close () def close ( self ): \"\"\"\u5173\u95ed\u5b9e\u4f8b\u7684\u6240\u6709\u5e95\u5c42 Executor.\"\"\" self . thread_exec . shutdown () self . proc_exec . shutdown () @classmethod def run_func ( cls , name : str , module : str , args : tuple , kwargs : dict ) -> Any : \"\"\"\u8fd0\u884c\u51fd\u6570\u7684\u5b9e\u73b0 Args: name (str): \u51fd\u6570\u540d (__qualname__) module (str): \u51fd\u6570\u6240\u5728\u6a21\u5757\u540d (__module__) args (tuple): \u4f4d\u7f6e\u53c2\u6570 kwargs (dict): \u5173\u952e\u5b57\u53c2\u6570 Returns: Any: \u5e95\u5c42\u51fd\u6570\u7684\u8fd4\u56de\u503c \"\"\" importlib . import_module ( module ) return cls . func_mapping [ module , name ]( * args , ** kwargs ) @classmethod def run_func_static ( cls , func : Callable [ ... , R ], args : tuple , kwargs : dict ) -> R : \"\"\"\u8c03\u7528\u4e00\u4e2a\u9759\u6001\u51fd\u6570 (\u4f1a\u81ea\u52a8\u89e3\u5305\u88c5\u5df2\u88ab ParallelExecutor \u5305\u88c5\u8fc7\u7684\u51fd\u6570) Args: func (Callable[..., R]): \u8981\u8c03\u7528\u7684\u51fd\u6570 args (tuple): \u4f4d\u7f6e\u53c2\u6570 kwargs (dict): \u5173\u952e\u5b57\u53c2\u6570 Returns: R: \u5e95\u5c42\u51fd\u6570\u7684\u8fd4\u56de\u503c \"\"\" if ( func . __module__ , func . __qualname__ ) in cls . func_mapping : func = cls . func_mapping [ func . __module__ , func . __qualname__ ] return func ( * args , ** kwargs ) # type: ignore def to_thread ( self , func : Callable [ P , R ], * args : P . args , ** kwargs : P . kwargs ) -> Awaitable [ R ]: \"\"\"\u5728\u7ebf\u7a0b\u4e2d\u5f02\u6b65\u8fd0\u884c func \u51fd\u6570. Args: func (Callable[P, R]): \u8981\u8c03\u7528\u7684\u51fd\u6570. *args (P.args): \u9644\u5e26\u7684\u4f4d\u7f6e\u53c2\u6570. **kwargs (P.kwargs): \u9644\u5e26\u7684\u5173\u952e\u8bcd\u53c2\u6570. Returns: Future[R]: \u8fd4\u56de\u7ed3\u679c. \u9700\u8981\u88ab\u5f02\u6b65\u7b49\u5f85. \"\"\" return asyncio . get_running_loop () . run_in_executor ( # type: ignore self . thread_exec , ParallelExecutor . run_func_static , func , args , kwargs , ) def to_process ( self , func : Callable [ P , R ], * args : P . args , ** kwargs : P . kwargs ) -> Awaitable [ R ]: \"\"\"\u5728\u8fdb\u7a0b\u4e2d\u5f02\u6b65\u8fd0\u884c func \u51fd\u6570. \u9700\u8981\u5148\u6ce8\u518c\u8fc7\u624d\u884c. Args: func (Callable[P, R]): \u8981\u8c03\u7528\u7684\u51fd\u6570. *args (P.args): \u9644\u5e26\u7684\u4f4d\u7f6e\u53c2\u6570. **kwargs (P.kwargs): \u9644\u5e26\u7684\u5173\u952e\u8bcd\u53c2\u6570. Returns: Future[R]: \u8fd4\u56de\u7ed3\u679c. \u9700\u8981\u88ab\u5f02\u6b65\u7b49\u5f85. \"\"\" return asyncio . get_running_loop () . run_in_executor ( # type: ignore self . proc_exec , ParallelExecutor . run_func_static , func , args , kwargs , )","title":"ParallelExecutor"},{"location":"refs/graia/ariadne/util/async_exec/#graia.ariadne.util.async_exec.ParallelExecutor.__init__","text":"__init__ ( loop : Optional [ AbstractEventLoop ] = None , max_thread : Optional [ int ] = None , max_process : Optional [ int ] = None ) \u521d\u59cb\u5316\u5e76\u884c\u6267\u884c\u5668. Parameters: Name Type Description Default loop AbstractEventLoop \u8981\u7ed1\u5b9a\u7684\u4e8b\u4ef6\u5faa\u73af, \u4f1a\u81ea\u52a8\u83b7\u53d6\u5f53\u524d\u4e8b\u4ef6\u5faa\u73af. Defaults to None. None max_thread int \u6700\u5927\u7ebf\u7a0b\u6570. Defaults to None. None max_process int \u6700\u5927\u8fdb\u7a0b\u6570. Defaults to None. None max_thread \u4e0e max_process \u53c2\u6570\u9ed8\u8ba4\u503c\u8bf7\u53c2\u9605 concurrent.futures . Source code in graia/ariadne/util/async_exec.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 def __init__ ( self , loop : Optional [ AbstractEventLoop ] = None , max_thread : Optional [ int ] = None , max_process : Optional [ int ] = None , ): \"\"\"\u521d\u59cb\u5316\u5e76\u884c\u6267\u884c\u5668. Args: loop (AbstractEventLoop, optional): \u8981\u7ed1\u5b9a\u7684\u4e8b\u4ef6\u5faa\u73af, \u4f1a\u81ea\u52a8\u83b7\u53d6\u5f53\u524d\u4e8b\u4ef6\u5faa\u73af. Defaults to None. max_thread (int, optional): \u6700\u5927\u7ebf\u7a0b\u6570. Defaults to None. max_process (int, optional): \u6700\u5927\u8fdb\u7a0b\u6570. Defaults to None. `max_thread` \u4e0e `max_process` \u53c2\u6570\u9ed8\u8ba4\u503c\u8bf7\u53c2\u9605 `concurrent.futures`. \"\"\" self . thread_exec = ThreadPoolExecutor ( max_workers = max_thread ) self . proc_exec = ProcessPoolExecutor ( max_workers = max_process , initializer = _reg_sigint ) # see issue #50 self . bind_loop ( loop or asyncio . get_running_loop ())","title":"__init__()"},{"location":"refs/graia/ariadne/util/async_exec/#graia.ariadne.util.async_exec.ParallelExecutor.bind_loop","text":"bind_loop ( loop : AbstractEventLoop ) \u7ed1\u5b9a\u672c\u5b9e\u4f8b\u5230 loop. Parameters: Name Type Description Default loop AbstractEventLoop \u8981\u7ed1\u5b9a\u5230\u7684\u4e8b\u4ef6\u5faa\u73af. required Source code in graia/ariadne/util/async_exec.py 75 76 77 78 79 80 81 def bind_loop ( self , loop : AbstractEventLoop ): \"\"\"\u7ed1\u5b9a\u672c\u5b9e\u4f8b\u5230 loop. Args: loop (AbstractEventLoop): \u8981\u7ed1\u5b9a\u5230\u7684\u4e8b\u4ef6\u5faa\u73af. \"\"\" self . loop_ref_dict [ loop ] = self","title":"bind_loop()"},{"location":"refs/graia/ariadne/util/async_exec/#graia.ariadne.util.async_exec.ParallelExecutor.close","text":"close () \u5173\u95ed\u5b9e\u4f8b\u7684\u6240\u6709\u5e95\u5c42 Executor. Source code in graia/ariadne/util/async_exec.py 89 90 91 92 def close ( self ): \"\"\"\u5173\u95ed\u5b9e\u4f8b\u7684\u6240\u6709\u5e95\u5c42 Executor.\"\"\" self . thread_exec . shutdown () self . proc_exec . shutdown ()","title":"close()"},{"location":"refs/graia/ariadne/util/async_exec/#graia.ariadne.util.async_exec.ParallelExecutor.get","text":"get ( loop : Optional [ AbstractEventLoop ] = None ) -> 'ParallelExecutor' \u83b7\u53d6 ParallelExecutor \u5b9e\u4f8b Parameters: Name Type Description Default loop AbstractEventLoop \u67e5\u627e\u7684\u4e8b\u4ef6\u5faa\u73af. Defaults to None. None Returns: Name Type Description ParallelExecutor 'ParallelExecutor' \u627e\u5230\u7684 / \u65b0\u521b\u5efa\u7684 ParallelExecutor. Source code in graia/ariadne/util/async_exec.py 60 61 62 63 64 65 66 67 68 69 70 71 72 73 @classmethod def get ( cls , loop : Optional [ AbstractEventLoop ] = None ) -> \"ParallelExecutor\" : \"\"\"\u83b7\u53d6 ParallelExecutor \u5b9e\u4f8b Args: loop (AbstractEventLoop, optional): \u67e5\u627e\u7684\u4e8b\u4ef6\u5faa\u73af. Defaults to None. Returns: ParallelExecutor: \u627e\u5230\u7684 / \u65b0\u521b\u5efa\u7684 ParallelExecutor. \"\"\" loop = loop or asyncio . get_running_loop () if loop not in cls . loop_ref_dict : cls . loop_ref_dict [ loop ] = ParallelExecutor () return cls . loop_ref_dict [ loop ]","title":"get()"},{"location":"refs/graia/ariadne/util/async_exec/#graia.ariadne.util.async_exec.ParallelExecutor.run_func","text":"run_func ( name : str , module : str , args : tuple , kwargs : dict ) -> Any \u8fd0\u884c\u51fd\u6570\u7684\u5b9e\u73b0 Parameters: Name Type Description Default name str \u51fd\u6570\u540d ( qualname ) required module str \u51fd\u6570\u6240\u5728\u6a21\u5757\u540d ( module ) required args tuple \u4f4d\u7f6e\u53c2\u6570 required kwargs dict \u5173\u952e\u5b57\u53c2\u6570 required Returns: Name Type Description Any Any \u5e95\u5c42\u51fd\u6570\u7684\u8fd4\u56de\u503c Source code in graia/ariadne/util/async_exec.py 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 @classmethod def run_func ( cls , name : str , module : str , args : tuple , kwargs : dict ) -> Any : \"\"\"\u8fd0\u884c\u51fd\u6570\u7684\u5b9e\u73b0 Args: name (str): \u51fd\u6570\u540d (__qualname__) module (str): \u51fd\u6570\u6240\u5728\u6a21\u5757\u540d (__module__) args (tuple): \u4f4d\u7f6e\u53c2\u6570 kwargs (dict): \u5173\u952e\u5b57\u53c2\u6570 Returns: Any: \u5e95\u5c42\u51fd\u6570\u7684\u8fd4\u56de\u503c \"\"\" importlib . import_module ( module ) return cls . func_mapping [ module , name ]( * args , ** kwargs )","title":"run_func()"},{"location":"refs/graia/ariadne/util/async_exec/#graia.ariadne.util.async_exec.ParallelExecutor.run_func_static","text":"run_func_static ( func : Callable [ ... , R ], args : tuple , kwargs : dict ) -> R \u8c03\u7528\u4e00\u4e2a\u9759\u6001\u51fd\u6570 (\u4f1a\u81ea\u52a8\u89e3\u5305\u88c5\u5df2\u88ab ParallelExecutor \u5305\u88c5\u8fc7\u7684\u51fd\u6570) Parameters: Name Type Description Default func Callable [..., R ] \u8981\u8c03\u7528\u7684\u51fd\u6570 required args tuple \u4f4d\u7f6e\u53c2\u6570 required kwargs dict \u5173\u952e\u5b57\u53c2\u6570 required Returns: Name Type Description R R \u5e95\u5c42\u51fd\u6570\u7684\u8fd4\u56de\u503c Source code in graia/ariadne/util/async_exec.py 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 @classmethod def run_func_static ( cls , func : Callable [ ... , R ], args : tuple , kwargs : dict ) -> R : \"\"\"\u8c03\u7528\u4e00\u4e2a\u9759\u6001\u51fd\u6570 (\u4f1a\u81ea\u52a8\u89e3\u5305\u88c5\u5df2\u88ab ParallelExecutor \u5305\u88c5\u8fc7\u7684\u51fd\u6570) Args: func (Callable[..., R]): \u8981\u8c03\u7528\u7684\u51fd\u6570 args (tuple): \u4f4d\u7f6e\u53c2\u6570 kwargs (dict): \u5173\u952e\u5b57\u53c2\u6570 Returns: R: \u5e95\u5c42\u51fd\u6570\u7684\u8fd4\u56de\u503c \"\"\" if ( func . __module__ , func . __qualname__ ) in cls . func_mapping : func = cls . func_mapping [ func . __module__ , func . __qualname__ ] return func ( * args , ** kwargs ) # type: ignore","title":"run_func_static()"},{"location":"refs/graia/ariadne/util/async_exec/#graia.ariadne.util.async_exec.ParallelExecutor.shutdown","text":"shutdown () \u5173\u95ed\u672c\u7c7b\u7684\u6240\u6709\u5e95\u5c42 Executor. Source code in graia/ariadne/util/async_exec.py 83 84 85 86 87 @classmethod def shutdown ( cls ): \"\"\"\u5173\u95ed\u672c\u7c7b\u7684\u6240\u6709\u5e95\u5c42 Executor.\"\"\" for exec in cls . loop_ref_dict . values (): exec . close ()","title":"shutdown()"},{"location":"refs/graia/ariadne/util/async_exec/#graia.ariadne.util.async_exec.ParallelExecutor.to_process","text":"to_process ( func : Callable [ P , R ], * args : P . args , ** kwargs : P . kwargs ) -> Awaitable [ R ] \u5728\u8fdb\u7a0b\u4e2d\u5f02\u6b65\u8fd0\u884c func \u51fd\u6570. \u9700\u8981\u5148\u6ce8\u518c\u8fc7\u624d\u884c. Parameters: Name Type Description Default func Callable [ P , R ] \u8981\u8c03\u7528\u7684\u51fd\u6570. required *args P . args \u9644\u5e26\u7684\u4f4d\u7f6e\u53c2\u6570. () **kwargs P . kwargs \u9644\u5e26\u7684\u5173\u952e\u8bcd\u53c2\u6570. {} Returns: Type Description Awaitable [ R ] Future[R]: \u8fd4\u56de\u7ed3\u679c. \u9700\u8981\u88ab\u5f02\u6b65\u7b49\u5f85. Source code in graia/ariadne/util/async_exec.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 def to_process ( self , func : Callable [ P , R ], * args : P . args , ** kwargs : P . kwargs ) -> Awaitable [ R ]: \"\"\"\u5728\u8fdb\u7a0b\u4e2d\u5f02\u6b65\u8fd0\u884c func \u51fd\u6570. \u9700\u8981\u5148\u6ce8\u518c\u8fc7\u624d\u884c. Args: func (Callable[P, R]): \u8981\u8c03\u7528\u7684\u51fd\u6570. *args (P.args): \u9644\u5e26\u7684\u4f4d\u7f6e\u53c2\u6570. **kwargs (P.kwargs): \u9644\u5e26\u7684\u5173\u952e\u8bcd\u53c2\u6570. Returns: Future[R]: \u8fd4\u56de\u7ed3\u679c. \u9700\u8981\u88ab\u5f02\u6b65\u7b49\u5f85. \"\"\" return asyncio . get_running_loop () . run_in_executor ( # type: ignore self . proc_exec , ParallelExecutor . run_func_static , func , args , kwargs , )","title":"to_process()"},{"location":"refs/graia/ariadne/util/async_exec/#graia.ariadne.util.async_exec.ParallelExecutor.to_thread","text":"to_thread ( func : Callable [ P , R ], * args : P . args , ** kwargs : P . kwargs ) -> Awaitable [ R ] \u5728\u7ebf\u7a0b\u4e2d\u5f02\u6b65\u8fd0\u884c func \u51fd\u6570. Parameters: Name Type Description Default func Callable [ P , R ] \u8981\u8c03\u7528\u7684\u51fd\u6570. required *args P . args \u9644\u5e26\u7684\u4f4d\u7f6e\u53c2\u6570. () **kwargs P . kwargs \u9644\u5e26\u7684\u5173\u952e\u8bcd\u53c2\u6570. {} Returns: Type Description Awaitable [ R ] Future[R]: \u8fd4\u56de\u7ed3\u679c. \u9700\u8981\u88ab\u5f02\u6b65\u7b49\u5f85. Source code in graia/ariadne/util/async_exec.py 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 def to_thread ( self , func : Callable [ P , R ], * args : P . args , ** kwargs : P . kwargs ) -> Awaitable [ R ]: \"\"\"\u5728\u7ebf\u7a0b\u4e2d\u5f02\u6b65\u8fd0\u884c func \u51fd\u6570. Args: func (Callable[P, R]): \u8981\u8c03\u7528\u7684\u51fd\u6570. *args (P.args): \u9644\u5e26\u7684\u4f4d\u7f6e\u53c2\u6570. **kwargs (P.kwargs): \u9644\u5e26\u7684\u5173\u952e\u8bcd\u53c2\u6570. Returns: Future[R]: \u8fd4\u56de\u7ed3\u679c. \u9700\u8981\u88ab\u5f02\u6b65\u7b49\u5f85. \"\"\" return asyncio . get_running_loop () . run_in_executor ( # type: ignore self . thread_exec , ParallelExecutor . run_func_static , func , args , kwargs , )","title":"to_thread()"},{"location":"refs/graia/ariadne/util/async_exec/#graia.ariadne.util.async_exec.IS_MAIN_PROCESS","text":"IS_MAIN_PROCESS () -> bool \u8fd4\u56de\u662f\u5426\u4e3a\u4e3b\u8fdb\u7a0b Returns: Name Type Description bool bool \u662f\u5426\u4e3a\u4e3b\u8fdb\u7a0b Source code in graia/ariadne/util/async_exec.py 14 15 16 17 18 19 20 def IS_MAIN_PROCESS () -> bool : \"\"\"\u8fd4\u56de\u662f\u5426\u4e3a\u4e3b\u8fdb\u7a0b Returns: bool: \u662f\u5426\u4e3a\u4e3b\u8fdb\u7a0b \"\"\" return multiprocessing . parent_process () is None","title":"IS_MAIN_PROCESS()"},{"location":"refs/graia/ariadne/util/async_exec/#graia.ariadne.util.async_exec._reg_sigint","text":"_reg_sigint () \u5728\u5b50\u8fdb\u7a0b\u6ce8\u518c SIGINT \u5904\u7406\u51fd\u6570\u4ee5\u9632\u6b62 Traceback \u70b8\u5c4f Source code in graia/ariadne/util/async_exec.py 23 24 25 26 27 28 def _reg_sigint (): \"\"\"\u5728\u5b50\u8fdb\u7a0b\u6ce8\u518c SIGINT \u5904\u7406\u51fd\u6570\u4ee5\u9632\u6b62 Traceback \u70b8\u5c4f\"\"\" import signal import sys signal . signal ( signal . SIGINT , lambda * _ , ** __ : sys . exit ())","title":"_reg_sigint()"},{"location":"refs/graia/ariadne/util/async_exec/#graia.ariadne.util.async_exec.cpu_bound","text":"cpu_bound ( func : Callable [ P , R ]) -> Callable [ P , Awaitable [ R ]] \u5305\u88c5\u4e00\u4e2a\u51fd\u6570\u5728\u8fdb\u7a0b\u4e2d\u5f02\u6b65\u8fd0\u884c. Parameters: Name Type Description Default func Callable [ P , R ] \u8981\u5305\u88c5\u7684\u51fd\u6570 required Returns: Type Description Callable [ P , Awaitable [ R ]] Callable[P, Awaitable[R]]: \u5305\u88c5\u540e\u7684\u51fd\u6570 Source code in graia/ariadne/util/async_exec.py 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 def cpu_bound ( func : Callable [ P , R ]) -> Callable [ P , Awaitable [ R ]]: \"\"\"\u5305\u88c5\u4e00\u4e2a\u51fd\u6570\u5728\u8fdb\u7a0b\u4e2d\u5f02\u6b65\u8fd0\u884c. Args: func (Callable[P, R]): \u8981\u5305\u88c5\u7684\u51fd\u6570 Returns: Callable[P, Awaitable[R]]: \u5305\u88c5\u540e\u7684\u51fd\u6570 \"\"\" ParallelExecutor . func_mapping [ func . __module__ , func . __qualname__ ] = func @functools . wraps ( func ) async def wrapper ( * args : P . args , ** kwargs : P . kwargs ) -> R : loop = asyncio . get_running_loop () executor = ParallelExecutor . get ( loop ) return await loop . run_in_executor ( executor . proc_exec , ParallelExecutor . run_func , func . __qualname__ , func . __module__ , args , kwargs , ) return wrapper","title":"cpu_bound()"},{"location":"refs/graia/ariadne/util/async_exec/#graia.ariadne.util.async_exec.io_bound","text":"io_bound ( func : Callable [ P , R ]) -> Callable [ P , Awaitable [ R ]] \u5305\u88c5\u4e00\u4e2a\u51fd\u6570\u5728\u7ebf\u7a0b\u4e2d\u5f02\u6b65\u8fd0\u884c. Parameters: Name Type Description Default func Callable [ P , R ] \u8981\u5305\u88c5\u7684\u51fd\u6570 required Returns: Type Description Callable [ P , Awaitable [ R ]] Callable[P, Awaitable[R]]: \u5305\u88c5\u540e\u7684\u51fd\u6570 Source code in graia/ariadne/util/async_exec.py 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 def io_bound ( func : Callable [ P , R ]) -> Callable [ P , Awaitable [ R ]]: \"\"\"\u5305\u88c5\u4e00\u4e2a\u51fd\u6570\u5728\u7ebf\u7a0b\u4e2d\u5f02\u6b65\u8fd0\u884c. Args: func (Callable[P, R]): \u8981\u5305\u88c5\u7684\u51fd\u6570 Returns: Callable[P, Awaitable[R]]: \u5305\u88c5\u540e\u7684\u51fd\u6570 \"\"\" ParallelExecutor . func_mapping [ func . __module__ , func . __qualname__ ] = func @functools . wraps ( func ) async def wrapper ( * args : P . args , ** kwargs : P . kwargs ) -> R : loop = asyncio . get_running_loop () executor = ParallelExecutor . get ( loop ) return await loop . run_in_executor ( executor . thread_exec , ParallelExecutor . run_func , func . __qualname__ , func . __module__ , args , kwargs , ) return wrapper","title":"io_bound()"},{"location":"refs/graia/ariadne/util/cooldown/","text":"CoolDown \ud83d\udd17 Bases: BaseDispatcher \u6307\u793a\u9700\u8981\u51b7\u5374\u65f6\u95f4\u624d\u80fd\u6267\u884c\u64cd\u4f5c Source code in graia/ariadne/util/cooldown.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 class CoolDown ( BaseDispatcher ): \"\"\"\u6307\u793a\u9700\u8981\u51b7\u5374\u65f6\u95f4\u624d\u80fd\u6267\u884c\u64cd\u4f5c\"\"\" global_source : Dict [ str , Dict [ int , datetime ]] = {} def __init__ ( self , interval : Union [ int , float , timedelta ], source : Union [ MutableMapping [ int , datetime ], str , None ] = None , override_condition : Callable [ ... , Union [ bool , Awaitable [ bool ]]] = lambda : False , stop_on_cooldown : bool = True , ) -> None : \"\"\"\u521d\u59cb\u5316\u4e00\u4e2a\u51b7\u5374\u65f6\u95f4 Args: interval (Union[int, float, timedelta]): \u51b7\u5374\u65f6\u95f4, \u5355\u4f4d\u4e3a\u79d2 source (Union[MutableMapping[int, datetime], str, None], optional): \u51b7\u5374\u6620\u5c04\u6765\u6e90, \u4e3a\u5b57\u7b26\u4e32\u65f6\u4ece ClassVar \u67e5\u627e. override_condition ((...) -> Union[bool, Awaitable[bool]], optional): \u8d85\u8d8a\u51b7\u5374\u9650\u5236\u7684\u6761\u4ef6. stop_on_cooldown (bool, optional): \u662f\u5426\u5728\u672a\u5230\u51b7\u5374\u65f6\u95f4\u65f6\u76f4\u63a5\u505c\u6b62\u6267\u884c. Defaults to True. \"\"\" self . interval = interval if isinstance ( interval , timedelta ) else timedelta ( seconds = interval ) self . stop_on_cooldown : bool = stop_on_cooldown self . override_condition : Callable [ ... , Union [ bool , Awaitable [ bool ]]] = override_condition self . override_signature = argument_signature ( self . override_condition ) if isinstance ( source , str ): self . source : MutableMapping [ int , datetime ] = self . global_source . setdefault ( source , {}) else : self . source : MutableMapping [ int , datetime ] = source or {} async def get ( self , target : int , type : Type [ T_Time ]) -> Tuple [ Optional [ T_Time ], bool ]: current_time : datetime = datetime . now () next_exec_time : datetime = self . source . get ( target , current_time ) delta : timedelta = next_exec_time - current_time satisfied : bool = delta < timedelta ( seconds = 0 ) if builtins . type ( None ) in typing . get_args ( type ) and delta . total_seconds () <= 0 : return None , satisfied if generic_issubclass ( datetime , type ): return next_exec_time , satisfied # type: ignore if generic_issubclass ( timedelta , type ): return delta , satisfied # type: ignore if generic_issubclass ( float , type ): return delta . total_seconds (), satisfied # type: ignore if generic_issubclass ( int , type ): return int ( delta . total_seconds ()), satisfied # type: ignore return None , satisfied async def set ( self , target : int ) -> None : self . source [ target ] = datetime . now () + self . interval async def beforeExecution ( self , interface : DispatcherInterface [ MessageEvent ]): event = interface . event sender_id = event . sender . id current_time : datetime = datetime . now () next_exec_time : datetime = self . source . get ( sender_id , current_time ) delta : timedelta = next_exec_time - current_time satisfied : bool = delta <= timedelta ( seconds = 0 ) if not satisfied and self . stop_on_cooldown : param_dict : Dict [ str , Any ] = {} for name , anno , _ in self . override_signature : param_dict [ name ] = await interface . lookup_param ( name , anno , None ) res = self . override_condition ( ** param_dict ) if not (( await res ) if inspect . isawaitable ( res ) else res ): raise ExecutionStop interface . local_storage [ f \" { __name__ } :next_exec_time\" ] = next_exec_time interface . local_storage [ f \" { __name__ } :delta\" ] = delta async def catch ( self , interface : DispatcherInterface [ MessageEvent ]): annotation = interface . annotation next_exec_time : datetime = interface . local_storage [ f \" { __name__ } :next_exec_time\" ] delta : timedelta = interface . local_storage [ f \" { __name__ } :delta\" ] if builtins . type ( None ) in typing . get_args ( annotation ) and delta . total_seconds () <= 0 : return Force ( None ) if generic_issubclass ( datetime , annotation ): return next_exec_time if generic_issubclass ( timedelta , annotation ): return delta if generic_issubclass ( float , annotation ): return delta . total_seconds () if generic_issubclass ( int , annotation ): return int ( delta . total_seconds ()) async def afterDispatch ( self , interface : DispatcherInterface [ MessageEvent ], exception : Optional [ Exception ], _ : Optional [ TracebackType ], ): event = interface . event sender_id = event . sender . id if not exception : await self . set ( sender_id ) if TYPE_CHECKING : @overload @contextlib . asynccontextmanager async def trigger ( self , target : int ) -> AsyncGenerator [ Tuple [ Optional [ datetime ], bool ], None ]: ... @overload @contextlib . asynccontextmanager async def trigger ( self , target : int , type : Type [ T_Time ] ) -> AsyncGenerator [ Tuple [ Optional [ T_Time ], bool ], None ]: ... @contextlib . asynccontextmanager async def trigger ( self , target : int , type : Type [ T_Time ] = datetime ) -> AsyncGenerator [ Tuple [ Union [ T_Time , datetime , None ], bool ], None ]: try : yield await self . get ( target , type ) except : # noqa raise else : await self . set ( target ) __init__ \ud83d\udd17 __init__ ( interval : Union [ int , float , timedelta ], source : Union [ MutableMapping [ int , datetime ], str , None ] = None , override_condition : Callable [ ... , Union [ bool , Awaitable [ bool ]]] = lambda : False , stop_on_cooldown : bool = True ) -> None \u521d\u59cb\u5316\u4e00\u4e2a\u51b7\u5374\u65f6\u95f4 Parameters: Name Type Description Default interval Union [ int , float , timedelta ] \u51b7\u5374\u65f6\u95f4, \u5355\u4f4d\u4e3a\u79d2 required source Union [ MutableMapping [ int , datetime ], str , None] \u51b7\u5374\u6620\u5c04\u6765\u6e90, \u4e3a\u5b57\u7b26\u4e32\u65f6\u4ece ClassVar \u67e5\u627e. None override_condition ...) -> Union[bool, Awaitable[bool]] \u8d85\u8d8a\u51b7\u5374\u9650\u5236\u7684\u6761\u4ef6. lambda : False stop_on_cooldown bool \u662f\u5426\u5728\u672a\u5230\u51b7\u5374\u65f6\u95f4\u65f6\u76f4\u63a5\u505c\u6b62\u6267\u884c. Defaults to True. True Source code in graia/ariadne/util/cooldown.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 def __init__ ( self , interval : Union [ int , float , timedelta ], source : Union [ MutableMapping [ int , datetime ], str , None ] = None , override_condition : Callable [ ... , Union [ bool , Awaitable [ bool ]]] = lambda : False , stop_on_cooldown : bool = True , ) -> None : \"\"\"\u521d\u59cb\u5316\u4e00\u4e2a\u51b7\u5374\u65f6\u95f4 Args: interval (Union[int, float, timedelta]): \u51b7\u5374\u65f6\u95f4, \u5355\u4f4d\u4e3a\u79d2 source (Union[MutableMapping[int, datetime], str, None], optional): \u51b7\u5374\u6620\u5c04\u6765\u6e90, \u4e3a\u5b57\u7b26\u4e32\u65f6\u4ece ClassVar \u67e5\u627e. override_condition ((...) -> Union[bool, Awaitable[bool]], optional): \u8d85\u8d8a\u51b7\u5374\u9650\u5236\u7684\u6761\u4ef6. stop_on_cooldown (bool, optional): \u662f\u5426\u5728\u672a\u5230\u51b7\u5374\u65f6\u95f4\u65f6\u76f4\u63a5\u505c\u6b62\u6267\u884c. Defaults to True. \"\"\" self . interval = interval if isinstance ( interval , timedelta ) else timedelta ( seconds = interval ) self . stop_on_cooldown : bool = stop_on_cooldown self . override_condition : Callable [ ... , Union [ bool , Awaitable [ bool ]]] = override_condition self . override_signature = argument_signature ( self . override_condition ) if isinstance ( source , str ): self . source : MutableMapping [ int , datetime ] = self . global_source . setdefault ( source , {}) else : self . source : MutableMapping [ int , datetime ] = source or {}","title":"cooldown"},{"location":"refs/graia/ariadne/util/cooldown/#graia.ariadne.util.cooldown.CoolDown","text":"Bases: BaseDispatcher \u6307\u793a\u9700\u8981\u51b7\u5374\u65f6\u95f4\u624d\u80fd\u6267\u884c\u64cd\u4f5c Source code in graia/ariadne/util/cooldown.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 class CoolDown ( BaseDispatcher ): \"\"\"\u6307\u793a\u9700\u8981\u51b7\u5374\u65f6\u95f4\u624d\u80fd\u6267\u884c\u64cd\u4f5c\"\"\" global_source : Dict [ str , Dict [ int , datetime ]] = {} def __init__ ( self , interval : Union [ int , float , timedelta ], source : Union [ MutableMapping [ int , datetime ], str , None ] = None , override_condition : Callable [ ... , Union [ bool , Awaitable [ bool ]]] = lambda : False , stop_on_cooldown : bool = True , ) -> None : \"\"\"\u521d\u59cb\u5316\u4e00\u4e2a\u51b7\u5374\u65f6\u95f4 Args: interval (Union[int, float, timedelta]): \u51b7\u5374\u65f6\u95f4, \u5355\u4f4d\u4e3a\u79d2 source (Union[MutableMapping[int, datetime], str, None], optional): \u51b7\u5374\u6620\u5c04\u6765\u6e90, \u4e3a\u5b57\u7b26\u4e32\u65f6\u4ece ClassVar \u67e5\u627e. override_condition ((...) -> Union[bool, Awaitable[bool]], optional): \u8d85\u8d8a\u51b7\u5374\u9650\u5236\u7684\u6761\u4ef6. stop_on_cooldown (bool, optional): \u662f\u5426\u5728\u672a\u5230\u51b7\u5374\u65f6\u95f4\u65f6\u76f4\u63a5\u505c\u6b62\u6267\u884c. Defaults to True. \"\"\" self . interval = interval if isinstance ( interval , timedelta ) else timedelta ( seconds = interval ) self . stop_on_cooldown : bool = stop_on_cooldown self . override_condition : Callable [ ... , Union [ bool , Awaitable [ bool ]]] = override_condition self . override_signature = argument_signature ( self . override_condition ) if isinstance ( source , str ): self . source : MutableMapping [ int , datetime ] = self . global_source . setdefault ( source , {}) else : self . source : MutableMapping [ int , datetime ] = source or {} async def get ( self , target : int , type : Type [ T_Time ]) -> Tuple [ Optional [ T_Time ], bool ]: current_time : datetime = datetime . now () next_exec_time : datetime = self . source . get ( target , current_time ) delta : timedelta = next_exec_time - current_time satisfied : bool = delta < timedelta ( seconds = 0 ) if builtins . type ( None ) in typing . get_args ( type ) and delta . total_seconds () <= 0 : return None , satisfied if generic_issubclass ( datetime , type ): return next_exec_time , satisfied # type: ignore if generic_issubclass ( timedelta , type ): return delta , satisfied # type: ignore if generic_issubclass ( float , type ): return delta . total_seconds (), satisfied # type: ignore if generic_issubclass ( int , type ): return int ( delta . total_seconds ()), satisfied # type: ignore return None , satisfied async def set ( self , target : int ) -> None : self . source [ target ] = datetime . now () + self . interval async def beforeExecution ( self , interface : DispatcherInterface [ MessageEvent ]): event = interface . event sender_id = event . sender . id current_time : datetime = datetime . now () next_exec_time : datetime = self . source . get ( sender_id , current_time ) delta : timedelta = next_exec_time - current_time satisfied : bool = delta <= timedelta ( seconds = 0 ) if not satisfied and self . stop_on_cooldown : param_dict : Dict [ str , Any ] = {} for name , anno , _ in self . override_signature : param_dict [ name ] = await interface . lookup_param ( name , anno , None ) res = self . override_condition ( ** param_dict ) if not (( await res ) if inspect . isawaitable ( res ) else res ): raise ExecutionStop interface . local_storage [ f \" { __name__ } :next_exec_time\" ] = next_exec_time interface . local_storage [ f \" { __name__ } :delta\" ] = delta async def catch ( self , interface : DispatcherInterface [ MessageEvent ]): annotation = interface . annotation next_exec_time : datetime = interface . local_storage [ f \" { __name__ } :next_exec_time\" ] delta : timedelta = interface . local_storage [ f \" { __name__ } :delta\" ] if builtins . type ( None ) in typing . get_args ( annotation ) and delta . total_seconds () <= 0 : return Force ( None ) if generic_issubclass ( datetime , annotation ): return next_exec_time if generic_issubclass ( timedelta , annotation ): return delta if generic_issubclass ( float , annotation ): return delta . total_seconds () if generic_issubclass ( int , annotation ): return int ( delta . total_seconds ()) async def afterDispatch ( self , interface : DispatcherInterface [ MessageEvent ], exception : Optional [ Exception ], _ : Optional [ TracebackType ], ): event = interface . event sender_id = event . sender . id if not exception : await self . set ( sender_id ) if TYPE_CHECKING : @overload @contextlib . asynccontextmanager async def trigger ( self , target : int ) -> AsyncGenerator [ Tuple [ Optional [ datetime ], bool ], None ]: ... @overload @contextlib . asynccontextmanager async def trigger ( self , target : int , type : Type [ T_Time ] ) -> AsyncGenerator [ Tuple [ Optional [ T_Time ], bool ], None ]: ... @contextlib . asynccontextmanager async def trigger ( self , target : int , type : Type [ T_Time ] = datetime ) -> AsyncGenerator [ Tuple [ Union [ T_Time , datetime , None ], bool ], None ]: try : yield await self . get ( target , type ) except : # noqa raise else : await self . set ( target )","title":"CoolDown"},{"location":"refs/graia/ariadne/util/cooldown/#graia.ariadne.util.cooldown.CoolDown.__init__","text":"__init__ ( interval : Union [ int , float , timedelta ], source : Union [ MutableMapping [ int , datetime ], str , None ] = None , override_condition : Callable [ ... , Union [ bool , Awaitable [ bool ]]] = lambda : False , stop_on_cooldown : bool = True ) -> None \u521d\u59cb\u5316\u4e00\u4e2a\u51b7\u5374\u65f6\u95f4 Parameters: Name Type Description Default interval Union [ int , float , timedelta ] \u51b7\u5374\u65f6\u95f4, \u5355\u4f4d\u4e3a\u79d2 required source Union [ MutableMapping [ int , datetime ], str , None] \u51b7\u5374\u6620\u5c04\u6765\u6e90, \u4e3a\u5b57\u7b26\u4e32\u65f6\u4ece ClassVar \u67e5\u627e. None override_condition ...) -> Union[bool, Awaitable[bool]] \u8d85\u8d8a\u51b7\u5374\u9650\u5236\u7684\u6761\u4ef6. lambda : False stop_on_cooldown bool \u662f\u5426\u5728\u672a\u5230\u51b7\u5374\u65f6\u95f4\u65f6\u76f4\u63a5\u505c\u6b62\u6267\u884c. Defaults to True. True Source code in graia/ariadne/util/cooldown.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 def __init__ ( self , interval : Union [ int , float , timedelta ], source : Union [ MutableMapping [ int , datetime ], str , None ] = None , override_condition : Callable [ ... , Union [ bool , Awaitable [ bool ]]] = lambda : False , stop_on_cooldown : bool = True , ) -> None : \"\"\"\u521d\u59cb\u5316\u4e00\u4e2a\u51b7\u5374\u65f6\u95f4 Args: interval (Union[int, float, timedelta]): \u51b7\u5374\u65f6\u95f4, \u5355\u4f4d\u4e3a\u79d2 source (Union[MutableMapping[int, datetime], str, None], optional): \u51b7\u5374\u6620\u5c04\u6765\u6e90, \u4e3a\u5b57\u7b26\u4e32\u65f6\u4ece ClassVar \u67e5\u627e. override_condition ((...) -> Union[bool, Awaitable[bool]], optional): \u8d85\u8d8a\u51b7\u5374\u9650\u5236\u7684\u6761\u4ef6. stop_on_cooldown (bool, optional): \u662f\u5426\u5728\u672a\u5230\u51b7\u5374\u65f6\u95f4\u65f6\u76f4\u63a5\u505c\u6b62\u6267\u884c. Defaults to True. \"\"\" self . interval = interval if isinstance ( interval , timedelta ) else timedelta ( seconds = interval ) self . stop_on_cooldown : bool = stop_on_cooldown self . override_condition : Callable [ ... , Union [ bool , Awaitable [ bool ]]] = override_condition self . override_signature = argument_signature ( self . override_condition ) if isinstance ( source , str ): self . source : MutableMapping [ int , datetime ] = self . global_source . setdefault ( source , {}) else : self . source : MutableMapping [ int , datetime ] = source or {}","title":"__init__()"},{"location":"refs/graia/ariadne/util/interrupt/","text":"EventWaiter \ud83d\udd17 Bases: Waiter , Generic [ T_E ] \u5c06 Waiter.create_using_event \u5c01\u88c5\u4e86\u4e00\u5c42 Source code in graia/ariadne/util/interrupt.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 class EventWaiter ( Waiter , Generic [ T_E ]): \"\"\"\u5c06 Waiter.create_using_event \u5c01\u88c5\u4e86\u4e00\u5c42\"\"\" def __init__ ( self , events : List [ Type [ T_E ]], dispatchers : Optional [ List [ T_Dispatcher ]] = None , decorators : Optional [ List [ Decorator ]] = None , extra_validator : Optional [ Callable [[ T_E ], bool ]] = None , priority : int = 15 , ) -> None : \"\"\" Args: events (List[Type[T_E]]): \u4e8b\u4ef6\u7c7b\u578b dispatchers (Optional[List[T_Dispatcher]], optional): Dispatcher \u5217\u8868 decorators (Optional[List[Decorator]], optional): Decorator \u5217\u8868 extra_validator (Optional[Callable[[T_E], bool]], optional): \u989d\u5916\u7684\u9a8c\u8bc1\u5668 priority (int, optional): \u4f18\u5148\u7ea7, \u8d8a\u5c0f\u8d8a\u9760\u524d \"\"\" self . events = events self . listening_events = cast ( List [ Type [ Dispatchable ]], self . events ) self . using_dispatchers = self . dispatchers = dispatchers or [] self . using_decorators = self . decorators = decorators or [] self . extra_validator = extra_validator self . priority = priority async def detected_event ( self , ev : Dispatchable ) -> T_E : event = cast ( T_E , ev ) if self . extra_validator and not self . extra_validator ( event ): raise ExecutionStop return event async def wait ( self , timeout : Optional [ float ] = None , ) -> T_E : inc : InterruptControl = InterruptControl ( get_running ( Broadcast )) return await inc . wait ( self , timeout = timeout , # type: ignore ) __init__ \ud83d\udd17 __init__ ( events : List [ Type [ T_E ]], dispatchers : Optional [ List [ T_Dispatcher ]] = None , decorators : Optional [ List [ Decorator ]] = None , extra_validator : Optional [ Callable [[ T_E ], bool ]] = None , priority : int = 15 ) -> None Parameters: Name Type Description Default events List [ Type [ T_E ]] \u4e8b\u4ef6\u7c7b\u578b required dispatchers Optional [ List [ T_Dispatcher ]] Dispatcher \u5217\u8868 None decorators Optional [ List [ Decorator ]] Decorator \u5217\u8868 None extra_validator Optional [ Callable [[ T_E ], bool ]] \u989d\u5916\u7684\u9a8c\u8bc1\u5668 None priority int \u4f18\u5148\u7ea7, \u8d8a\u5c0f\u8d8a\u9760\u524d 15 Source code in graia/ariadne/util/interrupt.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 def __init__ ( self , events : List [ Type [ T_E ]], dispatchers : Optional [ List [ T_Dispatcher ]] = None , decorators : Optional [ List [ Decorator ]] = None , extra_validator : Optional [ Callable [[ T_E ], bool ]] = None , priority : int = 15 , ) -> None : \"\"\" Args: events (List[Type[T_E]]): \u4e8b\u4ef6\u7c7b\u578b dispatchers (Optional[List[T_Dispatcher]], optional): Dispatcher \u5217\u8868 decorators (Optional[List[Decorator]], optional): Decorator \u5217\u8868 extra_validator (Optional[Callable[[T_E], bool]], optional): \u989d\u5916\u7684\u9a8c\u8bc1\u5668 priority (int, optional): \u4f18\u5148\u7ea7, \u8d8a\u5c0f\u8d8a\u9760\u524d \"\"\" self . events = events self . listening_events = cast ( List [ Type [ Dispatchable ]], self . events ) self . using_dispatchers = self . dispatchers = dispatchers or [] self . using_decorators = self . decorators = decorators or [] self . extra_validator = extra_validator self . priority = priority FunctionWaiter \ud83d\udd17 Bases: Waiter , Generic [ T ] \u5c06 Waiter.create_using_function \u5c01\u88c5\u4e86\u4e00\u5c42 Source code in graia/ariadne/util/interrupt.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 class FunctionWaiter ( Waiter , Generic [ T ]): \"\"\"\u5c06 Waiter.create_using_function \u5c01\u88c5\u4e86\u4e00\u5c42\"\"\" def __init__ ( self , func : Callable [ ... , T ], events : List [ Type [ Dispatchable ]], dispatchers : Optional [ List [ T_Dispatcher ]] = None , decorators : Optional [ List [ Decorator ]] = None , priority : int = 15 , ) -> None : \"\"\" Args: func (Callable): \u8c03\u7528\u51fd\u6570 events (List[Type[Dispatchable]]): \u4e8b\u4ef6\u7c7b\u578b dispatchers (Optional[List[T_Dispatcher]]): \u5e7f\u64ad\u5668 decorators (Optional[List[Decorator]]): \u88c5\u9970\u5668 priority (int): \u4f18\u5148\u7ea7 \"\"\" self . listening_events = self . events = events self . using_dispatchers = self . dispatchers = dispatchers or [] self . using_decorators = self . decorators = decorators or [] self . priority = priority self . detected_event = func # type: ignore async def wait ( self , timeout : Optional [ float ] = None , ) -> T : inc : InterruptControl = InterruptControl ( get_running ( Broadcast )) return await inc . wait ( self , timeout = timeout , # type: ignore ) __init__ \ud83d\udd17 __init__ ( func : Callable [ ... , T ], events : List [ Type [ Dispatchable ]], dispatchers : Optional [ List [ T_Dispatcher ]] = None , decorators : Optional [ List [ Decorator ]] = None , priority : int = 15 ) -> None Parameters: Name Type Description Default func Callable \u8c03\u7528\u51fd\u6570 required events List [ Type [ Dispatchable ]] \u4e8b\u4ef6\u7c7b\u578b required dispatchers Optional [ List [ T_Dispatcher ]] \u5e7f\u64ad\u5668 None decorators Optional [ List [ Decorator ]] \u88c5\u9970\u5668 None priority int \u4f18\u5148\u7ea7 15 Source code in graia/ariadne/util/interrupt.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 def __init__ ( self , func : Callable [ ... , T ], events : List [ Type [ Dispatchable ]], dispatchers : Optional [ List [ T_Dispatcher ]] = None , decorators : Optional [ List [ Decorator ]] = None , priority : int = 15 , ) -> None : \"\"\" Args: func (Callable): \u8c03\u7528\u51fd\u6570 events (List[Type[Dispatchable]]): \u4e8b\u4ef6\u7c7b\u578b dispatchers (Optional[List[T_Dispatcher]]): \u5e7f\u64ad\u5668 decorators (Optional[List[Decorator]]): \u88c5\u9970\u5668 priority (int): \u4f18\u5148\u7ea7 \"\"\" self . listening_events = self . events = events self . using_dispatchers = self . dispatchers = dispatchers or [] self . using_decorators = self . decorators = decorators or [] self . priority = priority self . detected_event = func # type: ignore","title":"interrupt"},{"location":"refs/graia/ariadne/util/interrupt/#graia.ariadne.util.interrupt.EventWaiter","text":"Bases: Waiter , Generic [ T_E ] \u5c06 Waiter.create_using_event \u5c01\u88c5\u4e86\u4e00\u5c42 Source code in graia/ariadne/util/interrupt.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 class EventWaiter ( Waiter , Generic [ T_E ]): \"\"\"\u5c06 Waiter.create_using_event \u5c01\u88c5\u4e86\u4e00\u5c42\"\"\" def __init__ ( self , events : List [ Type [ T_E ]], dispatchers : Optional [ List [ T_Dispatcher ]] = None , decorators : Optional [ List [ Decorator ]] = None , extra_validator : Optional [ Callable [[ T_E ], bool ]] = None , priority : int = 15 , ) -> None : \"\"\" Args: events (List[Type[T_E]]): \u4e8b\u4ef6\u7c7b\u578b dispatchers (Optional[List[T_Dispatcher]], optional): Dispatcher \u5217\u8868 decorators (Optional[List[Decorator]], optional): Decorator \u5217\u8868 extra_validator (Optional[Callable[[T_E], bool]], optional): \u989d\u5916\u7684\u9a8c\u8bc1\u5668 priority (int, optional): \u4f18\u5148\u7ea7, \u8d8a\u5c0f\u8d8a\u9760\u524d \"\"\" self . events = events self . listening_events = cast ( List [ Type [ Dispatchable ]], self . events ) self . using_dispatchers = self . dispatchers = dispatchers or [] self . using_decorators = self . decorators = decorators or [] self . extra_validator = extra_validator self . priority = priority async def detected_event ( self , ev : Dispatchable ) -> T_E : event = cast ( T_E , ev ) if self . extra_validator and not self . extra_validator ( event ): raise ExecutionStop return event async def wait ( self , timeout : Optional [ float ] = None , ) -> T_E : inc : InterruptControl = InterruptControl ( get_running ( Broadcast )) return await inc . wait ( self , timeout = timeout , # type: ignore )","title":"EventWaiter"},{"location":"refs/graia/ariadne/util/interrupt/#graia.ariadne.util.interrupt.EventWaiter.__init__","text":"__init__ ( events : List [ Type [ T_E ]], dispatchers : Optional [ List [ T_Dispatcher ]] = None , decorators : Optional [ List [ Decorator ]] = None , extra_validator : Optional [ Callable [[ T_E ], bool ]] = None , priority : int = 15 ) -> None Parameters: Name Type Description Default events List [ Type [ T_E ]] \u4e8b\u4ef6\u7c7b\u578b required dispatchers Optional [ List [ T_Dispatcher ]] Dispatcher \u5217\u8868 None decorators Optional [ List [ Decorator ]] Decorator \u5217\u8868 None extra_validator Optional [ Callable [[ T_E ], bool ]] \u989d\u5916\u7684\u9a8c\u8bc1\u5668 None priority int \u4f18\u5148\u7ea7, \u8d8a\u5c0f\u8d8a\u9760\u524d 15 Source code in graia/ariadne/util/interrupt.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 def __init__ ( self , events : List [ Type [ T_E ]], dispatchers : Optional [ List [ T_Dispatcher ]] = None , decorators : Optional [ List [ Decorator ]] = None , extra_validator : Optional [ Callable [[ T_E ], bool ]] = None , priority : int = 15 , ) -> None : \"\"\" Args: events (List[Type[T_E]]): \u4e8b\u4ef6\u7c7b\u578b dispatchers (Optional[List[T_Dispatcher]], optional): Dispatcher \u5217\u8868 decorators (Optional[List[Decorator]], optional): Decorator \u5217\u8868 extra_validator (Optional[Callable[[T_E], bool]], optional): \u989d\u5916\u7684\u9a8c\u8bc1\u5668 priority (int, optional): \u4f18\u5148\u7ea7, \u8d8a\u5c0f\u8d8a\u9760\u524d \"\"\" self . events = events self . listening_events = cast ( List [ Type [ Dispatchable ]], self . events ) self . using_dispatchers = self . dispatchers = dispatchers or [] self . using_decorators = self . decorators = decorators or [] self . extra_validator = extra_validator self . priority = priority","title":"__init__()"},{"location":"refs/graia/ariadne/util/interrupt/#graia.ariadne.util.interrupt.FunctionWaiter","text":"Bases: Waiter , Generic [ T ] \u5c06 Waiter.create_using_function \u5c01\u88c5\u4e86\u4e00\u5c42 Source code in graia/ariadne/util/interrupt.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 class FunctionWaiter ( Waiter , Generic [ T ]): \"\"\"\u5c06 Waiter.create_using_function \u5c01\u88c5\u4e86\u4e00\u5c42\"\"\" def __init__ ( self , func : Callable [ ... , T ], events : List [ Type [ Dispatchable ]], dispatchers : Optional [ List [ T_Dispatcher ]] = None , decorators : Optional [ List [ Decorator ]] = None , priority : int = 15 , ) -> None : \"\"\" Args: func (Callable): \u8c03\u7528\u51fd\u6570 events (List[Type[Dispatchable]]): \u4e8b\u4ef6\u7c7b\u578b dispatchers (Optional[List[T_Dispatcher]]): \u5e7f\u64ad\u5668 decorators (Optional[List[Decorator]]): \u88c5\u9970\u5668 priority (int): \u4f18\u5148\u7ea7 \"\"\" self . listening_events = self . events = events self . using_dispatchers = self . dispatchers = dispatchers or [] self . using_decorators = self . decorators = decorators or [] self . priority = priority self . detected_event = func # type: ignore async def wait ( self , timeout : Optional [ float ] = None , ) -> T : inc : InterruptControl = InterruptControl ( get_running ( Broadcast )) return await inc . wait ( self , timeout = timeout , # type: ignore )","title":"FunctionWaiter"},{"location":"refs/graia/ariadne/util/interrupt/#graia.ariadne.util.interrupt.FunctionWaiter.__init__","text":"__init__ ( func : Callable [ ... , T ], events : List [ Type [ Dispatchable ]], dispatchers : Optional [ List [ T_Dispatcher ]] = None , decorators : Optional [ List [ Decorator ]] = None , priority : int = 15 ) -> None Parameters: Name Type Description Default func Callable \u8c03\u7528\u51fd\u6570 required events List [ Type [ Dispatchable ]] \u4e8b\u4ef6\u7c7b\u578b required dispatchers Optional [ List [ T_Dispatcher ]] \u5e7f\u64ad\u5668 None decorators Optional [ List [ Decorator ]] \u88c5\u9970\u5668 None priority int \u4f18\u5148\u7ea7 15 Source code in graia/ariadne/util/interrupt.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 def __init__ ( self , func : Callable [ ... , T ], events : List [ Type [ Dispatchable ]], dispatchers : Optional [ List [ T_Dispatcher ]] = None , decorators : Optional [ List [ Decorator ]] = None , priority : int = 15 , ) -> None : \"\"\" Args: func (Callable): \u8c03\u7528\u51fd\u6570 events (List[Type[Dispatchable]]): \u4e8b\u4ef6\u7c7b\u578b dispatchers (Optional[List[T_Dispatcher]]): \u5e7f\u64ad\u5668 decorators (Optional[List[Decorator]]): \u88c5\u9970\u5668 priority (int): \u4f18\u5148\u7ea7 \"\"\" self . listening_events = self . events = events self . using_dispatchers = self . dispatchers = dispatchers or [] self . using_decorators = self . decorators = decorators or [] self . priority = priority self . detected_event = func # type: ignore","title":"__init__()"},{"location":"refs/graia/ariadne/util/send/","text":"\u672c\u6a21\u5757\u5305\u542b\u8bb8\u591a\u7528\u4e8e Ariadne.SendMessage \u7684 action \u51fd\u6570 Bypass \ud83d\udd17 Bases: SendMessageAction \u900f\u4f20\u9519\u8bef\u7684 SendMessage action (\u6709 Exception \u65f6\u76f4\u63a5\u8fd4\u56de\u5b83\u800c\u4e0d\u629b\u51fa) \u6ce8\u610f, \u8bf7\u5c0f\u5fc3 traceback \u91cd\u751f. Source code in graia/ariadne/util/send.py 12 13 14 15 16 17 18 19 20 21 class Bypass ( SendMessageAction ): \"\"\" \u900f\u4f20\u9519\u8bef\u7684 SendMessage action (\u6709 Exception \u65f6\u76f4\u63a5\u8fd4\u56de\u5b83\u800c\u4e0d\u629b\u51fa) \u6ce8\u610f, \u8bf7\u5c0f\u5fc3 traceback \u91cd\u751f. \"\"\" @staticmethod async def exception ( item : Exc_T ) -> Exc_T : return item Ignore \ud83d\udd17 Bases: SendMessageAction \u5ffd\u7565\u9519\u8bef\u7684 SendMessage action (\u53d1\u751f Exception \u65f6 \u8fd4\u56de None) Source code in graia/ariadne/util/send.py 32 33 34 35 36 37 class Ignore ( SendMessageAction ): \"\"\"\u5ffd\u7565\u9519\u8bef\u7684 SendMessage action (\u53d1\u751f Exception \u65f6 \u8fd4\u56de None)\"\"\" @staticmethod async def exception ( _ ) -> None : return Safe \ud83d\udd17 Bases: SendMessageAction \u5b89\u5168\u53d1\u9001\u7684 SendMessage action \u884c\u4e3a: \u5728\u7b2c\u4e00\u6b21\u5c1d\u8bd5\u5931\u8d25\u540e\u5148\u79fb\u9664 quote, \u4e4b\u540e\u6bcf\u6b21\u5931\u8d25\u65f6\u6309\u987a\u5e8f\u66ff\u6362\u5143\u7d20\u4e3a\u5176asDisplay: AtAll, At, Poke, Forward, MultimediaElement \u82e5\u6700\u540e\u8fd8\u662f\u5931\u8d25 (AccountMuted \u7b49), \u5219\u4f1a\u5f15\u53d1\u539f\u59cb\u5f02\u5e38 (\u901a\u8fc7\u4f20\u5165 ignore \u51b3\u5b9a) Source code in graia/ariadne/util/send.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 class Safe ( SendMessageAction ): \"\"\" \u5b89\u5168\u53d1\u9001\u7684 SendMessage action \u884c\u4e3a: \u5728\u7b2c\u4e00\u6b21\u5c1d\u8bd5\u5931\u8d25\u540e\u5148\u79fb\u9664 quote, \u4e4b\u540e\u6bcf\u6b21\u5931\u8d25\u65f6\u6309\u987a\u5e8f\u66ff\u6362\u5143\u7d20\u4e3a\u5176asDisplay: AtAll, At, Poke, Forward, MultimediaElement \u82e5\u6700\u540e\u8fd8\u662f\u5931\u8d25 (AccountMuted \u7b49), \u5219\u4f1a\u5f15\u53d1\u539f\u59cb\u5f02\u5e38 (\u901a\u8fc7\u4f20\u5165 ignore \u51b3\u5b9a) \"\"\" def __init__ ( self , ignore : bool = False ) -> None : self . ignore : bool = ignore @overload @staticmethod async def exception ( item ) -> BotMessage : ... @overload async def exception ( self , item ) -> BotMessage : ... @staticmethod async def _handle ( item : SendMessageException , ignore : bool ): from ..message.chain import MessageChain from ..message.element import At , AtAll , Forward , MultimediaElement , Plain , Poke chain : MessageChain = item . send_data [ \"message\" ] ariadne = get_running () def convert ( msg_chain : MessageChain , type ) -> None : for ind , elem in enumerate ( msg_chain . __root__ [:]): if isinstance ( elem , type ): msg_chain . __root__ [ ind ] = Plain ( elem . asDisplay ()) for type in [ AtAll , At , Poke , Forward , MultimediaElement ]: convert ( chain , type ) val = await ariadne . sendMessage ( ** item . send_data , action = Ignore ) # type: ignore if val is not None : return val if not ignore : raise item @overload @staticmethod async def exception ( s , i ): ... @overload async def exception ( s , i ): ... async def exception ( s : Union [ \"Safe\" , Exc_T ], i : Optional [ Exc_T ] = None ): # type: ignore if not isinstance ( s , Safe ): return await Safe . _handle ( s , True ) if i : return await Safe . _handle ( i , s . ignore ) Strict \ud83d\udd17 Bases: SendMessageAction \u4e25\u683c\u7684 SendMessage action (\u6709\u9519\u8bef\u65f6 raise) Source code in graia/ariadne/util/send.py 25 26 27 28 class Strict ( SendMessageAction ): \"\"\"\u4e25\u683c\u7684 SendMessage action (\u6709\u9519\u8bef\u65f6 raise)\"\"\" ...","title":"send"},{"location":"refs/graia/ariadne/util/send/#graia.ariadne.util.send.Bypass","text":"Bases: SendMessageAction \u900f\u4f20\u9519\u8bef\u7684 SendMessage action (\u6709 Exception \u65f6\u76f4\u63a5\u8fd4\u56de\u5b83\u800c\u4e0d\u629b\u51fa) \u6ce8\u610f, \u8bf7\u5c0f\u5fc3 traceback \u91cd\u751f. Source code in graia/ariadne/util/send.py 12 13 14 15 16 17 18 19 20 21 class Bypass ( SendMessageAction ): \"\"\" \u900f\u4f20\u9519\u8bef\u7684 SendMessage action (\u6709 Exception \u65f6\u76f4\u63a5\u8fd4\u56de\u5b83\u800c\u4e0d\u629b\u51fa) \u6ce8\u610f, \u8bf7\u5c0f\u5fc3 traceback \u91cd\u751f. \"\"\" @staticmethod async def exception ( item : Exc_T ) -> Exc_T : return item","title":"Bypass"},{"location":"refs/graia/ariadne/util/send/#graia.ariadne.util.send.Ignore","text":"Bases: SendMessageAction \u5ffd\u7565\u9519\u8bef\u7684 SendMessage action (\u53d1\u751f Exception \u65f6 \u8fd4\u56de None) Source code in graia/ariadne/util/send.py 32 33 34 35 36 37 class Ignore ( SendMessageAction ): \"\"\"\u5ffd\u7565\u9519\u8bef\u7684 SendMessage action (\u53d1\u751f Exception \u65f6 \u8fd4\u56de None)\"\"\" @staticmethod async def exception ( _ ) -> None : return","title":"Ignore"},{"location":"refs/graia/ariadne/util/send/#graia.ariadne.util.send.Safe","text":"Bases: SendMessageAction \u5b89\u5168\u53d1\u9001\u7684 SendMessage action \u884c\u4e3a: \u5728\u7b2c\u4e00\u6b21\u5c1d\u8bd5\u5931\u8d25\u540e\u5148\u79fb\u9664 quote, \u4e4b\u540e\u6bcf\u6b21\u5931\u8d25\u65f6\u6309\u987a\u5e8f\u66ff\u6362\u5143\u7d20\u4e3a\u5176asDisplay: AtAll, At, Poke, Forward, MultimediaElement \u82e5\u6700\u540e\u8fd8\u662f\u5931\u8d25 (AccountMuted \u7b49), \u5219\u4f1a\u5f15\u53d1\u539f\u59cb\u5f02\u5e38 (\u901a\u8fc7\u4f20\u5165 ignore \u51b3\u5b9a) Source code in graia/ariadne/util/send.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 class Safe ( SendMessageAction ): \"\"\" \u5b89\u5168\u53d1\u9001\u7684 SendMessage action \u884c\u4e3a: \u5728\u7b2c\u4e00\u6b21\u5c1d\u8bd5\u5931\u8d25\u540e\u5148\u79fb\u9664 quote, \u4e4b\u540e\u6bcf\u6b21\u5931\u8d25\u65f6\u6309\u987a\u5e8f\u66ff\u6362\u5143\u7d20\u4e3a\u5176asDisplay: AtAll, At, Poke, Forward, MultimediaElement \u82e5\u6700\u540e\u8fd8\u662f\u5931\u8d25 (AccountMuted \u7b49), \u5219\u4f1a\u5f15\u53d1\u539f\u59cb\u5f02\u5e38 (\u901a\u8fc7\u4f20\u5165 ignore \u51b3\u5b9a) \"\"\" def __init__ ( self , ignore : bool = False ) -> None : self . ignore : bool = ignore @overload @staticmethod async def exception ( item ) -> BotMessage : ... @overload async def exception ( self , item ) -> BotMessage : ... @staticmethod async def _handle ( item : SendMessageException , ignore : bool ): from ..message.chain import MessageChain from ..message.element import At , AtAll , Forward , MultimediaElement , Plain , Poke chain : MessageChain = item . send_data [ \"message\" ] ariadne = get_running () def convert ( msg_chain : MessageChain , type ) -> None : for ind , elem in enumerate ( msg_chain . __root__ [:]): if isinstance ( elem , type ): msg_chain . __root__ [ ind ] = Plain ( elem . asDisplay ()) for type in [ AtAll , At , Poke , Forward , MultimediaElement ]: convert ( chain , type ) val = await ariadne . sendMessage ( ** item . send_data , action = Ignore ) # type: ignore if val is not None : return val if not ignore : raise item @overload @staticmethod async def exception ( s , i ): ... @overload async def exception ( s , i ): ... async def exception ( s : Union [ \"Safe\" , Exc_T ], i : Optional [ Exc_T ] = None ): # type: ignore if not isinstance ( s , Safe ): return await Safe . _handle ( s , True ) if i : return await Safe . _handle ( i , s . ignore )","title":"Safe"},{"location":"refs/graia/ariadne/util/send/#graia.ariadne.util.send.Strict","text":"Bases: SendMessageAction \u4e25\u683c\u7684 SendMessage action (\u6709\u9519\u8bef\u65f6 raise) Source code in graia/ariadne/util/send.py 25 26 27 28 class Strict ( SendMessageAction ): \"\"\"\u4e25\u683c\u7684 SendMessage action (\u6709\u9519\u8bef\u65f6 raise)\"\"\" ...","title":"Strict"},{"location":"refs/graia/ariadne/util/validator/","text":"CertainFriend \ud83d\udd17 Bases: Certain \u9700\u8981\u6d88\u606f\u53d1\u9001\u8005/\u4e8b\u4ef6\u89e6\u53d1\u8005\u662f\u6307\u5b9a\u597d\u53cb Source code in graia/ariadne/util/validator.py 52 53 54 55 56 57 58 59 60 61 62 class CertainFriend ( Certain ): \"\"\"\u9700\u8981\u6d88\u606f\u53d1\u9001\u8005/\u4e8b\u4ef6\u89e6\u53d1\u8005\u662f\u6307\u5b9a\u597d\u53cb\"\"\" value : Set [ int ] def __init__ ( self , friend : SequenceOrInstance [ Union [ Friend , int ]]): friend = list ( friend ) if isinstance ( friend , Sequence ) else [ friend ] super () . __init__ ({ int ( f ) for f in friend }, Friend ) def comp ( self , value : Friend ) -> bool : return value . id in self . value CertainGroup \ud83d\udd17 Bases: Certain \u9700\u8981\u6d88\u606f\u53d1\u9001/\u4e8b\u4ef6\u89e6\u53d1\u5728\u6307\u5b9a\u7fa4\u7ec4 Source code in graia/ariadne/util/validator.py 39 40 41 42 43 44 45 46 47 48 49 class CertainGroup ( Certain ): \"\"\"\u9700\u8981\u6d88\u606f\u53d1\u9001/\u4e8b\u4ef6\u89e6\u53d1\u5728\u6307\u5b9a\u7fa4\u7ec4\"\"\" value : Set [ int ] def __init__ ( self , group : SequenceOrInstance [ Union [ Group , int ]]): group = list ( group ) if isinstance ( group , Sequence ) else [ group ] super () . __init__ ({ int ( g ) for g in group }, Group ) def comp ( self , value : Group ) -> bool : return value . id in self . value CertainMember \ud83d\udd17 Bases: Certain \u9700\u8981\u53d1\u9001\u8005/\u4e8b\u4ef6\u89e6\u53d1\u8005\u662f\u6307\u5b9a\u7fa4\u5458 Source code in graia/ariadne/util/validator.py 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 class CertainMember ( Certain ): \"\"\"\u9700\u8981\u53d1\u9001\u8005/\u4e8b\u4ef6\u89e6\u53d1\u8005\u662f\u6307\u5b9a\u7fa4\u5458\"\"\" value : Set [ int ] group : Optional [ Set [ int ]] def __init__ ( self , member : SequenceOrInstance [ Union [ Member , int ]], group : Optional [ SequenceOrInstance [ Union [ Member , int ]]] = None , ): member = list ( member ) if isinstance ( member , Sequence ) else [ member ] super () . __init__ ({ int ( m ) for m in member }, Member ) self . group = None if group : group = list ( group ) if isinstance ( group , Sequence ) else [ group ] self . group = { int ( g ) for g in group } def comp ( self , value : Member ) -> bool : return value . id in self . value and ( not self . group or value . group . id in self . group ) Quoting \ud83d\udd17 Bases: Decorator \u9700\u8981\u56de\u590d\u6307\u5b9a\u7684\u6d88\u606f Source code in graia/ariadne/util/validator.py 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 class Quoting ( Decorator ): \"\"\"\u9700\u8981\u56de\u590d\u6307\u5b9a\u7684\u6d88\u606f\"\"\" pre = True msg_ids : Set [ int ] def __init__ ( self , message : SequenceOrInstance [ Union [ int , BotMessage , MessageChain , Source ]]): if not isinstance ( message , Sequence ): message = [ message ] self . msg_ids = set () for msg in message : if isinstance ( msg , BotMessage ): self . msg_ids . add ( msg . messageId ) elif isinstance ( msg , MessageChain ): self . msg_ids . add ( msg . getFirst ( Quote ) . id ) elif isinstance ( msg , Source ): self . msg_ids . add ( msg . id ) else : self . msg_ids . add ( msg ) async def target ( self , i : DecoratorInterface ): try : msg_chain : MessageChain = await i . dispatcher_interface . lookup_param ( \"__decorator_parameter__\" , MessageChain , None ) quotes = msg_chain . get ( Quote ) if not quotes or quotes [ 0 ] . id not in self . msg_ids : raise RequirementCrashed except RequirementCrashed as e : raise ExecutionStop from e return msg_chain","title":"validator"},{"location":"refs/graia/ariadne/util/validator/#graia.ariadne.util.validator.CertainFriend","text":"Bases: Certain \u9700\u8981\u6d88\u606f\u53d1\u9001\u8005/\u4e8b\u4ef6\u89e6\u53d1\u8005\u662f\u6307\u5b9a\u597d\u53cb Source code in graia/ariadne/util/validator.py 52 53 54 55 56 57 58 59 60 61 62 class CertainFriend ( Certain ): \"\"\"\u9700\u8981\u6d88\u606f\u53d1\u9001\u8005/\u4e8b\u4ef6\u89e6\u53d1\u8005\u662f\u6307\u5b9a\u597d\u53cb\"\"\" value : Set [ int ] def __init__ ( self , friend : SequenceOrInstance [ Union [ Friend , int ]]): friend = list ( friend ) if isinstance ( friend , Sequence ) else [ friend ] super () . __init__ ({ int ( f ) for f in friend }, Friend ) def comp ( self , value : Friend ) -> bool : return value . id in self . value","title":"CertainFriend"},{"location":"refs/graia/ariadne/util/validator/#graia.ariadne.util.validator.CertainGroup","text":"Bases: Certain \u9700\u8981\u6d88\u606f\u53d1\u9001/\u4e8b\u4ef6\u89e6\u53d1\u5728\u6307\u5b9a\u7fa4\u7ec4 Source code in graia/ariadne/util/validator.py 39 40 41 42 43 44 45 46 47 48 49 class CertainGroup ( Certain ): \"\"\"\u9700\u8981\u6d88\u606f\u53d1\u9001/\u4e8b\u4ef6\u89e6\u53d1\u5728\u6307\u5b9a\u7fa4\u7ec4\"\"\" value : Set [ int ] def __init__ ( self , group : SequenceOrInstance [ Union [ Group , int ]]): group = list ( group ) if isinstance ( group , Sequence ) else [ group ] super () . __init__ ({ int ( g ) for g in group }, Group ) def comp ( self , value : Group ) -> bool : return value . id in self . value","title":"CertainGroup"},{"location":"refs/graia/ariadne/util/validator/#graia.ariadne.util.validator.CertainMember","text":"Bases: Certain \u9700\u8981\u53d1\u9001\u8005/\u4e8b\u4ef6\u89e6\u53d1\u8005\u662f\u6307\u5b9a\u7fa4\u5458 Source code in graia/ariadne/util/validator.py 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 class CertainMember ( Certain ): \"\"\"\u9700\u8981\u53d1\u9001\u8005/\u4e8b\u4ef6\u89e6\u53d1\u8005\u662f\u6307\u5b9a\u7fa4\u5458\"\"\" value : Set [ int ] group : Optional [ Set [ int ]] def __init__ ( self , member : SequenceOrInstance [ Union [ Member , int ]], group : Optional [ SequenceOrInstance [ Union [ Member , int ]]] = None , ): member = list ( member ) if isinstance ( member , Sequence ) else [ member ] super () . __init__ ({ int ( m ) for m in member }, Member ) self . group = None if group : group = list ( group ) if isinstance ( group , Sequence ) else [ group ] self . group = { int ( g ) for g in group } def comp ( self , value : Member ) -> bool : return value . id in self . value and ( not self . group or value . group . id in self . group )","title":"CertainMember"},{"location":"refs/graia/ariadne/util/validator/#graia.ariadne.util.validator.Quoting","text":"Bases: Decorator \u9700\u8981\u56de\u590d\u6307\u5b9a\u7684\u6d88\u606f Source code in graia/ariadne/util/validator.py 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 class Quoting ( Decorator ): \"\"\"\u9700\u8981\u56de\u590d\u6307\u5b9a\u7684\u6d88\u606f\"\"\" pre = True msg_ids : Set [ int ] def __init__ ( self , message : SequenceOrInstance [ Union [ int , BotMessage , MessageChain , Source ]]): if not isinstance ( message , Sequence ): message = [ message ] self . msg_ids = set () for msg in message : if isinstance ( msg , BotMessage ): self . msg_ids . add ( msg . messageId ) elif isinstance ( msg , MessageChain ): self . msg_ids . add ( msg . getFirst ( Quote ) . id ) elif isinstance ( msg , Source ): self . msg_ids . add ( msg . id ) else : self . msg_ids . add ( msg ) async def target ( self , i : DecoratorInterface ): try : msg_chain : MessageChain = await i . dispatcher_interface . lookup_param ( \"__decorator_parameter__\" , MessageChain , None ) quotes = msg_chain . get ( Quote ) if not quotes or quotes [ 0 ] . id not in self . msg_ids : raise RequirementCrashed except RequirementCrashed as e : raise ExecutionStop from e return msg_chain","title":"Quoting"}]}